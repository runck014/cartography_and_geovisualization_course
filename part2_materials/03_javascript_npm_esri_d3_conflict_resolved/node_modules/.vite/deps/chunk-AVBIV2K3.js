import {
  l
} from "./chunk-4NJWIUZG.js";
import {
  o as o2
} from "./chunk-YVSEBNS4.js";
import {
  r as r4
} from "./chunk-TSVUPARM.js";
import {
  r as r3
} from "./chunk-6YWQXXBX.js";
import {
  o
} from "./chunk-GN5RE63N.js";
import {
  r as r2
} from "./chunk-2WXAPZBK.js";
import {
  s
} from "./chunk-WTNHDCCU.js";
import {
  n
} from "./chunk-7O7KFKCG.js";
import {
  f
} from "./chunk-HAF6QJ32.js";
import {
  m
} from "./chunk-H77COA2S.js";
import {
  a2,
  a4 as a3
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  a
} from "./chunk-PKLD5YJF.js";

// node_modules/@arcgis/core/symbols/support/textUtils.js
var l2 = ["none", "underline", "line-through"];
var t = ["normal", "italic", "oblique"];
var r5 = ["normal", "lighter", "bold", "bolder"];
var n2 = { type: Number, cast: (l5) => {
  const t2 = a2(l5);
  return 0 === t2 ? 1 : r3(t2, 0.1, 4);
}, nonNullable: true };
var i = ["left", "right", "center"];
var a4 = ["baseline", "top", "middle", "bottom"];
var m2 = { type: i, nonNullable: true };
var p = { type: a4, nonNullable: true };
var s2 = 8;

// node_modules/@arcgis/core/symbols/Font.js
var c;
var l3 = c = class extends f {
  constructor(t2) {
    super(t2), this.decoration = "none", this.family = "sans-serif", this.size = 9, this.style = "normal", this.weight = "normal";
  }
  castSize(t2) {
    return o2(t2);
  }
  clone() {
    return new c({ decoration: this.decoration, family: this.family, size: this.size, style: this.style, weight: this.weight });
  }
  hash() {
    return `${this.decoration}.${this.family}.${this.size}.${this.style}.${this.weight}`;
  }
};
r([m({ type: l2, json: { default: "none", write: true } })], l3.prototype, "decoration", void 0), r([m({ type: String, json: { write: true } })], l3.prototype, "family", void 0), r([m({ type: Number, json: { write: { overridePolicy: (t2, o3, e2) => ({ enabled: !e2 || !e2.textSymbol3D }) } } })], l3.prototype, "size", void 0), r([s("size")], l3.prototype, "castSize", null), r([m({ type: t, json: { default: "normal", write: true } })], l3.prototype, "style", void 0), r([m({ type: r5, json: { default: "normal", write: true } })], l3.prototype, "weight", void 0), l3 = c = r([a3("esri.symbols.Font")], l3);
var m3 = l3;

// node_modules/@arcgis/core/symbols/Symbol.js
var p2 = new n({ esriSMS: "simple-marker", esriPMS: "picture-marker", esriSLS: "simple-line", esriSFS: "simple-fill", esriPFS: "picture-fill", esriTS: "text", esriSHD: "shield-label-symbol", PointSymbol3D: "point-3d", LineSymbol3D: "line-3d", PolygonSymbol3D: "polygon-3d", WebStyleSymbol: "web-style", MeshSymbol3D: "mesh-3d", LabelSymbol3D: "label-3d", CIMSymbolReference: "cim" });
var m4 = 0;
var c2 = class extends f {
  constructor(o3) {
    super(o3), this.id = "sym" + m4++, this.type = null, this.color = new l([0, 0, 0, 1]);
  }
  readColor(o3) {
    return null != (o3 == null ? void 0 : o3[0]) ? [o3[0], o3[1], o3[2], o3[3] / 255] : o3;
  }
  async collectRequiredFields(o3, r6) {
  }
  hash() {
    return JSON.stringify(this.toJSON());
  }
  clone() {
  }
};
r([m({ type: p2.apiValues, readOnly: true, json: { read: false, write: { ignoreOrigin: true, writer: p2.write } } })], c2.prototype, "type", void 0), r([m({ type: l, json: { write: { allowNull: true } } })], c2.prototype, "color", void 0), r([o("color")], c2.prototype, "readColor", null), c2 = r([a3("esri.symbols.Symbol")], c2);
var n3 = c2;

// node_modules/@arcgis/core/symbols/LineSymbol.js
var p3 = class extends n3 {
  constructor(o3) {
    super(o3), this.type = "simple-line", this.width = 0.75;
  }
  hash() {
    return `${this.type}.${this.width}`;
  }
};
r([r4({ esriSLS: "simple-line" }, { readOnly: true })], p3.prototype, "type", void 0), r([m({ type: Number, cast: o2, json: { write: true } })], p3.prototype, "width", void 0), p3 = r([a3("esri.symbols.LineSymbol")], p3);
var c3 = p3;

// node_modules/@arcgis/core/symbols/support/lineMarkers.js
var e = ["begin", "end", "begin-end"];
var n4 = ["arrow", "circle", "square", "diamond", "cross", "x"];

// node_modules/@arcgis/core/symbols/LineSymbolMarker.js
var n5;
var m5 = n5 = class extends f {
  constructor(r6) {
    super(r6), this.placement = "begin-end", this.type = "line-marker", this.style = "arrow";
  }
  writeStyle(r6, o3, e2, t2) {
    o3[e2] = "web-map" === (t2 == null ? void 0 : t2.origin) ? "arrow" : r6;
  }
  set color(r6) {
    this._set("color", r6);
  }
  readColor(r6) {
    return null != (r6 == null ? void 0 : r6[0]) ? [r6[0], r6[1], r6[2], r6[3] / 255] : r6;
  }
  writeColor(r6, o3, e2, t2) {
    "web-map" === (t2 == null ? void 0 : t2.origin) || (o3[e2] = r6);
  }
  clone() {
    return new n5({ color: a(this.color), placement: this.placement, style: this.style });
  }
  hash() {
    var _a;
    return `${this.placement}.${(_a = this.color) == null ? void 0 : _a.hash()}.${this.style}`;
  }
};
r([m({ type: ["begin", "end", "begin-end"], json: { write: true } })], m5.prototype, "placement", void 0), r([r4({ "line-marker": "line-marker" }, { readOnly: true }), m({ json: { origins: { "web-map": { write: false } } } })], m5.prototype, "type", void 0), r([m({ type: n4 })], m5.prototype, "style", void 0), r([r2("style")], m5.prototype, "writeStyle", null), r([m({ type: l, value: null, json: { write: { allowNull: true } } })], m5.prototype, "color", null), r([o("color")], m5.prototype, "readColor", null), r([r2("color")], m5.prototype, "writeColor", null), m5 = n5 = r([a3("esri.symbols.LineSymbolMarker")], m5);
var u = m5;

// node_modules/@arcgis/core/symbols/SimpleLineSymbol.js
var h;
var p4 = new n({ esriSLSSolid: "solid", esriSLSDash: "dash", esriSLSDot: "dot", esriSLSDashDot: "dash-dot", esriSLSDashDotDot: "long-dash-dot-dot", esriSLSNull: "none", esriSLSShortDash: "short-dash", esriSLSShortDot: "short-dot", esriSLSShortDashDot: "short-dash-dot", esriSLSShortDashDotDot: "short-dash-dot-dot", esriSLSLongDash: "long-dash", esriSLSLongDashDot: "long-dash-dot" });
var m6 = h = class extends c3 {
  constructor(...o3) {
    super(...o3), this.type = "simple-line", this.style = "solid", this.cap = "round", this.join = "round", this.marker = null, this.miterLimit = 2;
  }
  normalizeCtorArgs(o3, r6, t2, s3, i3, n6) {
    if (o3 && "string" != typeof o3) return o3;
    const l5 = {};
    return null != o3 && (l5.style = o3), null != r6 && (l5.color = r6), null != t2 && (l5.width = o2(t2)), null != s3 && (l5.cap = s3), null != i3 && (l5.join = i3), null != n6 && (l5.miterLimit = o2(n6)), l5;
  }
  clone() {
    var _a;
    return new h({ color: a(this.color), style: this.style, width: this.width, cap: this.cap, join: this.join, miterLimit: this.miterLimit, marker: (_a = this.marker) == null ? void 0 : _a.clone() });
  }
  hash() {
    var _a, _b;
    return `${super.hash()}.${(_a = this.color) == null ? void 0 : _a.hash()}.${this.style}.${this.cap}.${this.join}.${this.miterLimit}.${(_b = this.marker) == null ? void 0 : _b.hash()}`;
  }
};
r([r4({ esriSLS: "simple-line" }, { readOnly: true })], m6.prototype, "type", void 0), r([m({ type: p4.apiValues, json: { read: p4.read, write: p4.write } })], m6.prototype, "style", void 0), r([m({ type: ["butt", "round", "square"], json: { write: { overridePolicy: (o3, r6, t2) => ({ enabled: "round" !== o3 && null == (t2 == null ? void 0 : t2.origin) }) } } })], m6.prototype, "cap", void 0), r([m({ type: ["miter", "round", "bevel"], json: { write: { overridePolicy: (o3, r6, t2) => ({ enabled: "round" !== o3 && null == (t2 == null ? void 0 : t2.origin) }) } } })], m6.prototype, "join", void 0), r([m({ types: { key: "type", base: null, defaultKeyValue: "line-marker", typeMap: { "line-marker": u } }, json: { write: true, origins: { "web-scene": { write: false } } } })], m6.prototype, "marker", void 0), r([m({ type: Number, json: { read: false, write: false } })], m6.prototype, "miterLimit", void 0), m6 = h = r([a3("esri.symbols.SimpleLineSymbol")], m6);
var d = m6;

// node_modules/@arcgis/core/symbols/FillSymbol.js
var l4 = class extends n3 {
  constructor(e2) {
    super(e2), this.outline = null, this.type = null;
  }
  hash() {
    var _a;
    return `${this.type}.${(_a = this.outline) == null ? void 0 : _a.hash()}`;
  }
};
r([m({ types: { key: "type", base: null, defaultKeyValue: "simple-line", typeMap: { "simple-line": d } }, json: { default: null, write: true } })], l4.prototype, "outline", void 0), r([m({ type: ["simple-fill", "picture-fill"], readOnly: true })], l4.prototype, "type", void 0), l4 = r([a3("esri.symbols.FillSymbol")], l4);
var p5 = l4;

// node_modules/@arcgis/core/symbols/SimpleFillSymbol.js
var p6;
var c4 = new n({ esriSFSSolid: "solid", esriSFSNull: "none", esriSFSHorizontal: "horizontal", esriSFSVertical: "vertical", esriSFSForwardDiagonal: "forward-diagonal", esriSFSBackwardDiagonal: "backward-diagonal", esriSFSCross: "cross", esriSFSDiagonalCross: "diagonal-cross" });
var m7 = p6 = class extends p5 {
  constructor(...o3) {
    super(...o3), this.color = new l([0, 0, 0, 0.25]), this.outline = new d(), this.type = "simple-fill", this.style = "solid";
  }
  normalizeCtorArgs(o3, r6, s3) {
    if (o3 && "string" != typeof o3) return o3;
    const e2 = {};
    return o3 && (e2.style = o3), r6 && (e2.outline = r6), s3 && (e2.color = s3), e2;
  }
  clone() {
    return new p6({ color: a(this.color), outline: this.outline && this.outline.clone(), style: this.style });
  }
  hash() {
    return `${super.hash()}${this.style}.${this.color && this.color.hash()}`;
  }
};
r([m()], m7.prototype, "color", void 0), r([m()], m7.prototype, "outline", void 0), r([r4({ esriSFS: "simple-fill" }, { readOnly: true })], m7.prototype, "type", void 0), r([m({ type: c4.apiValues, json: { read: c4.read, write: c4.write } })], m7.prototype, "style", void 0), m7 = p6 = r([a3("esri.symbols.SimpleFillSymbol")], m7);
var S = m7;

// node_modules/@arcgis/core/symbols/MarkerSymbol.js
var i2 = class extends n3 {
  constructor(t2) {
    super(t2), this.angle = 0, this.type = null, this.xoffset = 0, this.yoffset = 0, this.size = 9;
  }
  hash() {
    return `${this.type}.${this.angle}.${this.size}.${this.xoffset}.${this.yoffset}`;
  }
};
r([m({ type: Number, json: { read: (t2) => t2 && -1 * t2, write: (t2, e2) => e2.angle = t2 && -1 * t2 } })], i2.prototype, "angle", void 0), r([m({ type: ["simple-marker", "picture-marker"], readOnly: true })], i2.prototype, "type", void 0), r([m({ type: Number, cast: o2, json: { write: true } })], i2.prototype, "xoffset", void 0), r([m({ type: Number, cast: o2, json: { write: true } })], i2.prototype, "yoffset", void 0), r([m({ cast: (t2) => "auto" === t2 ? t2 : a2(o2(t2)), json: { write: true } })], i2.prototype, "size", void 0), i2 = r([a3("esri.symbols.MarkerSymbol")], i2);
var a5 = i2;

// node_modules/@arcgis/core/symbols/SimpleMarkerSymbol.js
var h2;
var m8 = new n({ esriSMSCircle: "circle", esriSMSSquare: "square", esriSMSCross: "cross", esriSMSX: "x", esriSMSDiamond: "diamond", esriSMSTriangle: "triangle", esriSMSPath: "path" });
var u2 = h2 = class extends a5 {
  constructor(...o3) {
    super(...o3), this.color = new l([255, 255, 255, 0.25]), this.type = "simple-marker", this.size = 12, this.style = "circle", this.outline = new d();
  }
  normalizeCtorArgs(o3, e2, r6, t2) {
    if (o3 && "string" != typeof o3) return o3;
    const i3 = {};
    return o3 && (i3.style = o3), null != e2 && (i3.size = o2(e2)), r6 && (i3.outline = r6), t2 && (i3.color = t2), i3;
  }
  writeColor(o3, e2) {
    o3 && "x" !== this.style && "cross" !== this.style && (e2.color = o3.toJSON()), null === o3 && (e2.color = null);
  }
  set path(o3) {
    this.style = "path", this._set("path", o3);
  }
  clone() {
    return new h2({ angle: this.angle, color: a(this.color), outline: this.outline && this.outline.clone(), path: this.path, size: this.size, style: this.style, xoffset: this.xoffset, yoffset: this.yoffset });
  }
  hash() {
    var _a;
    return `${super.hash()}.${this.color && this.color.hash()}.${this.path}.${this.style}.${(_a = this.outline) == null ? void 0 : _a.hash()}`;
  }
};
r([m()], u2.prototype, "color", void 0), r([r2("color")], u2.prototype, "writeColor", null), r([r4({ esriSMS: "simple-marker" }, { readOnly: true })], u2.prototype, "type", void 0), r([m()], u2.prototype, "size", void 0), r([m({ type: m8.apiValues, json: { read: m8.read, write: m8.write } })], u2.prototype, "style", void 0), r([m({ type: String, json: { write: true } })], u2.prototype, "path", null), r([m({ types: { key: "type", base: null, defaultKeyValue: "simple-line", typeMap: { "simple-line": d } }, json: { default: null, write: true } })], u2.prototype, "outline", void 0), u2 = h2 = r([a3("esri.symbols.SimpleMarkerSymbol")], u2);
var y = u2;

// node_modules/@arcgis/core/symbols/TextSymbol.js
var f2;
var g = f2 = class extends n3 {
  constructor(...t2) {
    super(...t2), this.backgroundColor = null, this.borderLineColor = null, this.borderLineSize = null, this.font = new m3(), this.horizontalAlignment = "center", this.kerning = true, this.haloColor = null, this.haloSize = null, this.rightToLeft = null, this.rotated = false, this.text = "", this.type = "text", this.verticalAlignment = "baseline", this.xoffset = 0, this.yoffset = 0, this.angle = 0, this.width = null, this.lineWidth = 192, this.lineHeight = 1;
  }
  normalizeCtorArgs(t2, o3, e2) {
    if (t2 && "string" != typeof t2) return t2;
    const i3 = {};
    return t2 && (i3.text = t2), o3 && (i3.font = o3), e2 && (i3.color = e2), i3;
  }
  writeLineWidth(t2, o3, e2, i3) {
    i3 && "string" != typeof i3 ? i3.origin : o3[e2] = t2;
  }
  castLineWidth(t2) {
    return o2(t2);
  }
  writeLineHeight(t2, o3, e2, i3) {
    i3 && "string" != typeof i3 ? i3.origin : o3[e2] = t2;
  }
  clone() {
    return new f2({ angle: this.angle, backgroundColor: a(this.backgroundColor), borderLineColor: a(this.borderLineColor), borderLineSize: this.borderLineSize, color: a(this.color), font: this.font && this.font.clone(), haloColor: a(this.haloColor), haloSize: this.haloSize, horizontalAlignment: this.horizontalAlignment, kerning: this.kerning, lineHeight: this.lineHeight, lineWidth: this.lineWidth, rightToLeft: this.rightToLeft, rotated: this.rotated, text: this.text, verticalAlignment: this.verticalAlignment, width: this.width, xoffset: this.xoffset, yoffset: this.yoffset });
  }
  hash() {
    var _a, _b, _c;
    return `${(_a = this.backgroundColor) == null ? void 0 : _a.hash()}.${this.borderLineColor}.${this.borderLineSize}.${(_b = this.color) == null ? void 0 : _b.hash()}.${this.font && this.font.hash()}.${(_c = this.haloColor) == null ? void 0 : _c.hash()}.${this.haloSize}.${this.horizontalAlignment}.${this.kerning}.${this.rightToLeft}.${this.rotated}.${this.text}.${this.verticalAlignment}.${this.width}.${this.xoffset}.${this.yoffset}.${this.lineHeight}.${this.lineWidth}.${this.angle}`;
  }
};
r([m({ type: l, json: { write: true } })], g.prototype, "backgroundColor", void 0), r([m({ type: l, json: { write: true } })], g.prototype, "borderLineColor", void 0), r([m({ type: Number, json: { write: true }, cast: o2 })], g.prototype, "borderLineSize", void 0), r([m({ type: m3, json: { write: true } })], g.prototype, "font", void 0), r([m({ ...m2, json: { write: true } })], g.prototype, "horizontalAlignment", void 0), r([m({ type: Boolean, json: { write: true } })], g.prototype, "kerning", void 0), r([m({ type: l, json: { write: true } })], g.prototype, "haloColor", void 0), r([m({ type: Number, cast: o2, json: { write: true } })], g.prototype, "haloSize", void 0), r([m({ type: Boolean, json: { write: true } })], g.prototype, "rightToLeft", void 0), r([m({ type: Boolean, json: { write: true } })], g.prototype, "rotated", void 0), r([m({ type: String, json: { write: true } })], g.prototype, "text", void 0), r([r4({ esriTS: "text" }, { readOnly: true })], g.prototype, "type", void 0), r([m({ ...p, json: { write: true } })], g.prototype, "verticalAlignment", void 0), r([m({ type: Number, cast: o2, json: { write: true } })], g.prototype, "xoffset", void 0), r([m({ type: Number, cast: o2, json: { write: true } })], g.prototype, "yoffset", void 0), r([m({ type: Number, json: { read: (t2) => t2 && -1 * t2, write: (t2, o3) => o3.angle = t2 && -1 * t2 } })], g.prototype, "angle", void 0), r([m({ type: Number, json: { write: true } })], g.prototype, "width", void 0), r([m({ type: Number })], g.prototype, "lineWidth", void 0), r([r2("lineWidth")], g.prototype, "writeLineWidth", null), r([s("lineWidth")], g.prototype, "castLineWidth", null), r([m(n2)], g.prototype, "lineHeight", void 0), r([r2("lineHeight")], g.prototype, "writeLineHeight", null), g = f2 = r([a3("esri.symbols.TextSymbol")], g);
var m9 = g;

export {
  n2 as n,
  m2 as m,
  p,
  s2 as s,
  m3 as m2,
  n3 as n2,
  e,
  n4 as n3,
  d,
  p5 as p2,
  S,
  a5 as a,
  y,
  m9 as m3
};
//# sourceMappingURL=chunk-AVBIV2K3.js.map
