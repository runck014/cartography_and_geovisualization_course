import {
  y as y2
} from "./chunk-2L7UGRIC.js";
import "./chunk-E6IUAXXM.js";
import "./chunk-MSUBZ5BW.js";
import {
  c as c3
} from "./chunk-JED7FM2Q.js";
import "./chunk-FFUKJAFO.js";
import "./chunk-H4E2VVPD.js";
import {
  p
} from "./chunk-CQFC4JO6.js";
import "./chunk-VS5MKM3H.js";
import {
  c as c2
} from "./chunk-CQTV4C3X.js";
import "./chunk-764E6KTP.js";
import {
  s as s2
} from "./chunk-GEPD6W23.js";
import {
  p as p2
} from "./chunk-QSIT7EPR.js";
import {
  C,
  n as n2
} from "./chunk-TP6LRQ42.js";
import {
  l as l2
} from "./chunk-ZE6OS33V.js";
import "./chunk-MWZJIOOL.js";
import {
  p as p3
} from "./chunk-ULSRCITK.js";
import {
  e
} from "./chunk-FLUE3DMC.js";
import {
  m as m3,
  u
} from "./chunk-5GQ62KHN.js";
import "./chunk-YAGJS3MX.js";
import "./chunk-43KBLSS3.js";
import {
  j
} from "./chunk-RG7AMCT5.js";
import {
  f
} from "./chunk-PV3ZZQOV.js";
import {
  l
} from "./chunk-SM2VXWMT.js";
import "./chunk-WYO25WZZ.js";
import "./chunk-OC7D2HR4.js";
import {
  t
} from "./chunk-IGMG7ERK.js";
import {
  b as b2
} from "./chunk-V47ZBW5W.js";
import {
  T,
  c as c4,
  d as d2,
  f2,
  l as l3,
  p as p6,
  s as s3,
  u as u2,
  y as y3
} from "./chunk-HKYICNT2.js";
import {
  S
} from "./chunk-VGUQMPM6.js";
import "./chunk-KKH7HGO3.js";
import "./chunk-Z3NV3VCK.js";
import "./chunk-7VNQKVOW.js";
import "./chunk-PNVXSHN2.js";
import "./chunk-3DVL3O3F.js";
import "./chunk-RN66FJAW.js";
import "./chunk-QYSQ6XPQ.js";
import "./chunk-2RIHQI4N.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-NXGNMEHZ.js";
import "./chunk-TWYDW6LU.js";
import {
  d
} from "./chunk-PVHAAI32.js";
import "./chunk-MLATPUII.js";
import "./chunk-NVFQGMP6.js";
import "./chunk-P2IB5HBH.js";
import "./chunk-XX37BOHH.js";
import "./chunk-5CRXWQ3Y.js";
import "./chunk-4RFCLPAF.js";
import "./chunk-4ISVH4NS.js";
import "./chunk-NIWINVGG.js";
import "./chunk-DOENTAA7.js";
import "./chunk-CGSFKZP2.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-WPERPIJF.js";
import "./chunk-RXJCBLN2.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-XKMN3LJN.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import {
  f as f3
} from "./chunk-QMGMKWTA.js";
import {
  p as p4
} from "./chunk-2EGO74J5.js";
import "./chunk-4SUK447J.js";
import "./chunk-2X7T37AY.js";
import "./chunk-XQH2QDB2.js";
import "./chunk-6Q7GN2CW.js";
import {
  q
} from "./chunk-MYUZZ3A3.js";
import "./chunk-2IGXKE5P.js";
import "./chunk-JFI4ESYU.js";
import "./chunk-4X2UADDH.js";
import "./chunk-ZICJB3ML.js";
import "./chunk-AVBIV2K3.js";
import "./chunk-4NJWIUZG.js";
import {
  b
} from "./chunk-F3NUC2RS.js";
import "./chunk-LE3YW4Y3.js";
import "./chunk-TA32QX7Z.js";
import "./chunk-NYLL2YZF.js";
import "./chunk-NYLBGE62.js";
import "./chunk-LPNAPHOF.js";
import {
  y
} from "./chunk-QCBTLG25.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-K5RYAJV4.js";
import "./chunk-XGYM66XX.js";
import "./chunk-JOOGZSAP.js";
import "./chunk-J6GHQIZ2.js";
import "./chunk-VEUN2EF3.js";
import "./chunk-W6D3ECTZ.js";
import "./chunk-QXDQJEIU.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-SEUZ3J6J.js";
import {
  g as g2,
  p as p5
} from "./chunk-BWTCR2DR.js";
import "./chunk-SMOTPOZ7.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-7FJIOZSE.js";
import "./chunk-GNWAZIVF.js";
import {
  o
} from "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import "./chunk-TSVUPARM.js";
import {
  v2 as v
} from "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import {
  c
} from "./chunk-JS7R723S.js";
import "./chunk-RCLWOQNR.js";
import "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-RD2BBQYN.js";
import "./chunk-SEG3PRUR.js";
import {
  m as m2
} from "./chunk-B6VE32RA.js";
import "./chunk-AIYFWM42.js";
import "./chunk-2M53HYNY.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-Q7TEBZSN.js";
import {
  w
} from "./chunk-FG3XOAFD.js";
import "./chunk-GN5RE63N.js";
import {
  g
} from "./chunk-2WXAPZBK.js";
import "./chunk-E2I7HYXQ.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import "./chunk-CRH37WFF.js";
import {
  I
} from "./chunk-YFGQMO6E.js";
import "./chunk-HAF6QJ32.js";
import {
  m
} from "./chunk-H77COA2S.js";
import {
  a4 as a2
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  a,
  k
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import {
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";
import {
  has
} from "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/layers/graphics/sources/GeoJSONSource.js
var p7 = class extends m2 {
  constructor() {
    super(...arguments), this.type = "geojson", this.refresh = k(async (e2) => {
      await this.load();
      const { extent: t2, timeExtent: r2 } = await this._connection.invoke("refresh", e2);
      return this.sourceJSON.extent = t2, r2 && (this.sourceJSON.timeInfo.timeExtent = [r2.start, r2.end]), { dataChanged: true, updates: { extent: this.sourceJSON.extent, timeInfo: this.sourceJSON.timeInfo } };
    });
  }
  load(e2) {
    const t2 = null != e2 ? e2.signal : null;
    return this.addResolvingPromise(this._startWorker(t2)), Promise.resolve(this);
  }
  destroy() {
    var _a;
    (_a = this._connection) == null ? void 0 : _a.close(), this._connection = null;
  }
  applyEdits(e2) {
    return this.load().then(() => this._applyEdits(e2));
  }
  openPorts() {
    return this.load().then(() => this._connection.openPorts());
  }
  queryFeatures(e2, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("queryFeatures", e2 ? e2.toJSON() : null, t2)).then((e3) => d.fromJSON(e3));
  }
  queryFeaturesJSON(e2, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("queryFeatures", e2 ? e2.toJSON() : null, t2));
  }
  queryFeatureCount(e2, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("queryFeatureCount", e2 ? e2.toJSON() : null, t2));
  }
  queryObjectIds(e2, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("queryObjectIds", e2 ? e2.toJSON() : null, t2));
  }
  queryExtent(e2, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("queryExtent", e2 ? e2.toJSON() : null, t2)).then((e3) => ({ count: e3.count, extent: w.fromJSON(e3.extent) }));
  }
  querySnapping(e2, t2 = {}) {
    return this.load(t2).then(() => this._connection.invoke("querySnapping", e2, t2));
  }
  _applyEdits(e2) {
    if (!this._connection) throw new s("geojson-layer-source:edit-failure", "Memory source not loaded");
    const r2 = this.layer.objectIdField, o2 = [], s4 = [], i = [];
    if (e2.addFeatures) for (const t2 of e2.addFeatures) o2.push(this._serializeFeature(t2));
    if (e2.deleteFeatures) for (const t2 of e2.deleteFeatures) "objectId" in t2 && null != t2.objectId ? s4.push(t2.objectId) : "attributes" in t2 && null != t2.attributes[r2] && s4.push(t2.attributes[r2]);
    if (e2.updateFeatures) for (const t2 of e2.updateFeatures) i.push(this._serializeFeature(t2));
    return this._connection.invoke("applyEdits", { adds: o2, updates: i, deletes: s4 }).then(({ extent: e3, timeExtent: t2, featureEditResults: r3 }) => (this.sourceJSON.extent = e3, t2 && (this.sourceJSON.timeInfo.timeExtent = [t2.start, t2.end]), this._createEditsResult(r3)));
  }
  _createEditsResult(e2) {
    return { addFeatureResults: e2.addResults ? e2.addResults.map(this._createFeatureEditResult, this) : [], updateFeatureResults: e2.updateResults ? e2.updateResults.map(this._createFeatureEditResult, this) : [], deleteFeatureResults: e2.deleteResults ? e2.deleteResults.map(this._createFeatureEditResult, this) : [], addAttachmentResults: [], updateAttachmentResults: [], deleteAttachmentResults: [] };
  }
  _createFeatureEditResult(e2) {
    const r2 = true === e2.success ? null : e2.error || { code: void 0, description: void 0 };
    return { objectId: e2.objectId, globalId: e2.globalId, error: r2 ? new s("geojson-layer-source:edit-failure", r2.description, { code: r2.code }) : null };
  }
  _serializeFeature(e2) {
    const { attributes: t2 } = e2, r2 = this._geometryForSerialization(e2);
    return r2 ? { geometry: r2.toJSON(), attributes: t2 } : { attributes: t2 };
  }
  _geometryForSerialization(e2) {
    const { geometry: t2 } = e2;
    return null == t2 ? null : "mesh" === t2.type || "extent" === t2.type ? v.fromExtent(t2.extent) : t2;
  }
  async _startWorker(e2) {
    this._connection = await p4("GeoJSONSourceWorker", { strategy: has("feature-layers-workers") ? "dedicated" : "local", signal: e2, registryTarget: this });
    const { fields: t2, spatialReference: r2, hasZ: s4, geometryType: n3, objectIdField: a3, url: l4, timeInfo: c5, customParameters: d3 } = this.layer, p8 = "defaults" === this.layer.originOf("spatialReference"), m4 = { url: l4, customParameters: d3, fields: t2 && t2.map((e3) => e3.toJSON()), geometryType: o.toJSON(n3), hasZ: s4, objectIdField: a3, timeInfo: c5 ? c5.toJSON() : null, spatialReference: p8 ? null : r2 && r2.toJSON() }, y4 = await this._connection.invoke("load", m4, { signal: e2 });
    for (const i of y4.warnings) n.getLogger(this.layer).warn("#load()", `${i.message} (title: '${this.layer.title || "no title"}', id: '${this.layer.id ?? "no id"}')`, { warning: i });
    y4.featureErrors.length && n.getLogger(this.layer).warn("#load()", `Encountered ${y4.featureErrors.length} validation errors while loading features. (title: '${this.layer.title || "no title"}', id: '${this.layer.id ?? "no id"}')`, { errors: y4.featureErrors }), this.sourceJSON = y4.layerDefinition, this.capabilities = y2(this.sourceJSON.hasZ, true);
  }
};
r([m()], p7.prototype, "capabilities", void 0), r([m()], p7.prototype, "type", void 0), r([m({ constructOnly: true })], p7.prototype, "layer", void 0), r([m()], p7.prototype, "sourceJSON", void 0), p7 = r([a2("esri.layers.graphics.sources.GeoJSONSource")], p7);

// node_modules/@arcgis/core/layers/GeoJSONLayer.js
var _ = s2();
var M = class extends p(e(c3(c2(l(l2(t(f(b2(j(S(f3))))))))))) {
  constructor(e2) {
    super(e2), this.attributeTableTemplate = null, this.copyright = null, this.dateFieldsTimeZone = null, this.definitionExpression = null, this.displayField = null, this.editingEnabled = false, this.elevationInfo = null, this.fields = null, this.fieldsIndex = null, this.fullExtent = null, this.geometryType = null, this.hasZ = void 0, this.labelsVisible = true, this.labelingInfo = null, this.legendEnabled = true, this.objectIdField = null, this.operationalLayerType = "GeoJSON", this.outFields = null, this.popupEnabled = true, this.popupTemplate = null, this.screenSizePerspectiveEnabled = true, this.source = new p7({ layer: this }), this.spatialReference = g.WGS84, this.templates = null, this.title = "GeoJSON", this.type = "geojson";
  }
  destroy() {
    var _a;
    (_a = this.source) == null ? void 0 : _a.destroy();
  }
  load(e2) {
    const t2 = this.loadFromPortal({ supportedTypes: ["GeoJson"], supportsData: false }, e2).catch(a).then(() => this.source.load(e2)).then(() => {
      this.read(this.source.sourceJSON, { origin: "service", url: this.parsedUrl }), this.revert(["objectIdField", "fields", "timeInfo"], "service"), p5(this.renderer, this.fieldsIndex), g2(this.timeInfo, this.fieldsIndex);
    });
    return this.addResolvingPromise(t2), Promise.resolve(this);
  }
  get capabilities() {
    return this.source ? this.source.capabilities : null;
  }
  get createQueryVersion() {
    return this.commitProperty("definitionExpression"), this.commitProperty("timeExtent"), this.commitProperty("timeOffset"), this.commitProperty("geometryType"), this.commitProperty("capabilities"), (this._get("createQueryVersion") || 0) + 1;
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  get isTable() {
    return this.loaded && null == this.geometryType;
  }
  get parsedUrl() {
    return this.url ? I(this.url) : null;
  }
  set renderer(e2) {
    p5(e2, this.fieldsIndex), this._set("renderer", e2);
  }
  set url(e2) {
    if (!e2) return void this._set("url", e2);
    const t2 = I(e2);
    this._set("url", t2.path), t2.query && (this.customParameters = { ...this.customParameters, ...t2.query });
  }
  async applyEdits(e2, t2) {
    const { applyEdits: r2 } = await import("./editingSupport-GGK2DXYS.js");
    await this.load();
    const o2 = await r2(this, this.source, e2, t2);
    return this.read({ extent: this.source.sourceJSON.extent, timeInfo: this.source.sourceJSON.timeInfo }, { origin: "service", ignoreDefaults: true }), o2;
  }
  on(e2, t2) {
    return super.on(e2, t2);
  }
  createPopupTemplate(e2) {
    return p3(this, e2);
  }
  createQuery() {
    var _a;
    const e2 = new b(), t2 = (_a = this.capabilities) == null ? void 0 : _a.data;
    e2.returnGeometry = true, t2 && t2.supportsZ && (e2.returnZ = true), e2.outFields = ["*"], e2.where = this.definitionExpression || "1=1";
    const { timeOffset: r2, timeExtent: o2 } = this;
    return e2.timeExtent = null != r2 && null != o2 ? o2.offset(-r2.value, r2.unit) : o2 || null, e2;
  }
  getFieldDomain(e2, t2) {
    var _a;
    return (_a = this.getField(e2)) == null ? void 0 : _a.domain;
  }
  getField(e2) {
    return this.fieldsIndex.get(e2);
  }
  queryFeatures(e2, t2) {
    return this.load().then(() => this.source.queryFeatures(b.from(e2) || this.createQuery(), t2)).then((e3) => {
      if (e3 == null ? void 0 : e3.features) for (const t3 of e3.features) t3.layer = t3.sourceLayer = this;
      return e3;
    });
  }
  queryObjectIds(e2, t2) {
    return this.load().then(() => this.source.queryObjectIds(b.from(e2) || this.createQuery(), t2));
  }
  queryFeatureCount(e2, t2) {
    return this.load().then(() => this.source.queryFeatureCount(b.from(e2) || this.createQuery(), t2));
  }
  queryExtent(e2, t2) {
    return this.load().then(() => this.source.queryExtent(b.from(e2) || this.createQuery(), t2));
  }
  async hasDataChanged() {
    try {
      const { dataChanged: e2, updates: t2 } = await this.source.refresh(this.customParameters);
      return null != t2 && this.read(t2, { origin: "service", url: this.parsedUrl, ignoreDefaults: true }), e2;
    } catch {
    }
    return false;
  }
};
r([m(T)], M.prototype, "attributeTableTemplate", void 0), r([m({ readOnly: true, json: { read: false, write: false } })], M.prototype, "capabilities", null), r([m({ type: String })], M.prototype, "copyright", void 0), r([m({ readOnly: true })], M.prototype, "createQueryVersion", null), r([m(c("dateFieldsTimeReference"))], M.prototype, "dateFieldsTimeZone", void 0), r([m({ readOnly: true })], M.prototype, "defaultPopupTemplate", null), r([m({ type: String, json: { name: "layerDefinition.definitionExpression", write: { enabled: true, allowNull: true } } })], M.prototype, "definitionExpression", void 0), r([m({ type: String })], M.prototype, "displayField", void 0), r([m({ type: Boolean })], M.prototype, "editingEnabled", void 0), r([m(c4)], M.prototype, "elevationInfo", void 0), r([m({ type: [y], json: { name: "layerDefinition.fields", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "fields" } } } })], M.prototype, "fields", void 0), r([m(_.fieldsIndex)], M.prototype, "fieldsIndex", void 0), r([m({ type: w, json: { name: "extent" } })], M.prototype, "fullExtent", void 0), r([m({ type: ["point", "polygon", "polyline", "multipoint"], json: { read: { reader: o.read } } })], M.prototype, "geometryType", void 0), r([m({ type: Boolean })], M.prototype, "hasZ", void 0), r([m(u2)], M.prototype, "id", void 0), r([m({ type: Boolean, readOnly: true })], M.prototype, "isTable", null), r([m(p6)], M.prototype, "labelsVisible", void 0), r([m({ type: [C], json: { name: "layerDefinition.drawingInfo.labelingInfo", read: { reader: n2 }, write: true } })], M.prototype, "labelingInfo", void 0), r([m(d2)], M.prototype, "legendEnabled", void 0), r([m({ type: ["show", "hide"] })], M.prototype, "listMode", void 0), r([m({ type: String, json: { name: "layerDefinition.objectIdField", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "objectIdField" } } } })], M.prototype, "objectIdField", void 0), r([m(f2)], M.prototype, "opacity", void 0), r([m({ type: ["GeoJSON"] })], M.prototype, "operationalLayerType", void 0), r([m(_.outFields)], M.prototype, "outFields", void 0), r([m({ readOnly: true })], M.prototype, "parsedUrl", null), r([m(l3)], M.prototype, "popupEnabled", void 0), r([m({ type: q, json: { name: "popupInfo", write: true } })], M.prototype, "popupTemplate", void 0), r([m({ types: m3, json: { name: "layerDefinition.drawingInfo.renderer", write: true, origins: { service: { name: "drawingInfo.renderer" }, "web-scene": { types: u } } } })], M.prototype, "renderer", null), r([m(s3)], M.prototype, "screenSizePerspectiveEnabled", void 0), r([m({ readOnly: true })], M.prototype, "source", void 0), r([m({ type: g })], M.prototype, "spatialReference", void 0), r([m({ type: [p2] })], M.prototype, "templates", void 0), r([m()], M.prototype, "title", void 0), r([m({ json: { read: false }, readOnly: true })], M.prototype, "type", void 0), r([m(y3)], M.prototype, "url", null), M = r([a2("esri.layers.GeoJSONLayer")], M);
var k2 = M;
export {
  k2 as default
};
//# sourceMappingURL=GeoJSONLayer-LODNL2Z6.js.map
