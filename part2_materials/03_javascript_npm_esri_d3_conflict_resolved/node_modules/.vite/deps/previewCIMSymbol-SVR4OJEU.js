import {
  i
} from "./chunk-RPZ6EPIC.js";
import {
  l
} from "./chunk-5PEZCNND.js";
import {
  t
} from "./chunk-PBHXMZZN.js";
import "./chunk-5OJUBUJF.js";
import "./chunk-OZQVNYO5.js";
import {
  $,
  ee,
  st
} from "./chunk-5VEO4IUH.js";
import "./chunk-2XVRGGEF.js";
import "./chunk-6TRZLPPJ.js";
import "./chunk-MCHNAU6L.js";
import "./chunk-MYNRH67A.js";
import "./chunk-VAGIPHHR.js";
import "./chunk-KI5F6KDS.js";
import {
  y
} from "./chunk-YAGJS3MX.js";
import "./chunk-WYO25WZZ.js";
import "./chunk-OC7D2HR4.js";
import "./chunk-KKH7HGO3.js";
import {
  V
} from "./chunk-2RIHQI4N.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-P2IB5HBH.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-WPERPIJF.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-73FHIZIF.js";
import "./chunk-ICIPRMPO.js";
import "./chunk-EHD5KM2T.js";
import "./chunk-CGJUTDVJ.js";
import "./chunk-WC6QRPBL.js";
import "./chunk-LP6TMAPE.js";
import "./chunk-N7UV77NP.js";
import "./chunk-KZYGXJYH.js";
import "./chunk-JFI4ESYU.js";
import "./chunk-4X2UADDH.js";
import "./chunk-ZICJB3ML.js";
import "./chunk-AVBIV2K3.js";
import "./chunk-4NJWIUZG.js";
import "./chunk-NYLBGE62.js";
import "./chunk-K5RYAJV4.js";
import "./chunk-W6D3ECTZ.js";
import "./chunk-QXDQJEIU.js";
import "./chunk-SEUZ3J6J.js";
import "./chunk-BWTCR2DR.js";
import "./chunk-SMOTPOZ7.js";
import {
  e,
  u
} from "./chunk-YVSEBNS4.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import "./chunk-TSVUPARM.js";
import "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-RCLWOQNR.js";
import "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-SEG3PRUR.js";
import "./chunk-B6VE32RA.js";
import "./chunk-AIYFWM42.js";
import "./chunk-2M53HYNY.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-FG3XOAFD.js";
import "./chunk-GN5RE63N.js";
import "./chunk-2WXAPZBK.js";
import "./chunk-E2I7HYXQ.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import "./chunk-CRH37WFF.js";
import "./chunk-YFGQMO6E.js";
import "./chunk-HAF6QJ32.js";
import "./chunk-H77COA2S.js";
import "./chunk-7LJCT7EA.js";
import "./chunk-MV5XBD6C.js";
import "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/symbols/cim/CIMSymbolRasterizer.js
var n = 96 / 72;
var h = class {
  constructor(t2) {
    this._spatialReference = t2, this._imageDataCanvas = null, this._cimResourceManager = new i();
  }
  get _canvas() {
    return this._imageDataCanvas || (this._imageDataCanvas = document.createElement("canvas")), this._imageDataCanvas;
  }
  get resourceManager() {
    return this._cimResourceManager;
  }
  async rasterizeCIMSymbolAsync(e2, t2, i2, n2, h3, l2, c2, m2, g) {
    if (!e2) return null;
    const { data: y3 } = e2;
    if (!y3 || "CIMSymbolReference" !== y3.type || !y3.symbol) return null;
    const { symbol: d } = y3;
    l2 || (l2 = V(d));
    const u3 = await y.resolveSymbolOverrides(y3, t2, this._spatialReference, h3, l2, c2, m2), w = this._cimResourceManager, p2 = [];
    ee.fetchResources(u3, w, p2), ee.fetchFonts(u3, w, p2), p2.length > 0 && await Promise.all(p2);
    const { width: b, height: f2 } = i2, M = o(l2, b, f2, n2), C = ee.getEnvelope(u3, M, w);
    if (!C) return null;
    C.x === 1 / 0 && (C.x = b + 2), C.y === 1 / 0 && (C.y = -f2 / 2), C.width === -1 / 0 && (C.width = b), C.height === -1 / 0 && (C.height = f2);
    let R = 1, v = 0, x = 0;
    switch (d.type) {
      case "CIMPointSymbol":
      case "CIMTextSymbol":
        {
          let e3 = 1;
          C.width > b && (e3 = b / C.width);
          let t3 = 1;
          C.height > f2 && (t3 = f2 / C.height), "preview" === n2 && (C.width < b && (e3 = b / C.width), C.height < f2 && (t3 = f2 / C.height)), R = Math.min(e3, t3), v = C.x + C.width / 2, x = C.y + C.height / 2;
        }
        break;
      case "CIMLineSymbol":
        {
          (g || C.height > f2) && (R = f2 / C.height), x = C.y + C.height / 2;
          const e3 = C.x * R + b / 2, t3 = (C.x + C.width) * R + b / 2, { paths: i3 } = M;
          i3[0][0][0] -= e3 / R, i3[0][2][0] -= (t3 - b) / R;
        }
        break;
      case "CIMPolygonSymbol": {
        v = C.x + C.width / 2, x = C.y + C.height / 2;
        const e3 = C.x * R + b / 2, t3 = (C.x + C.width) * R + b / 2, i3 = C.y * R + f2 / 2, r = (C.y + C.height) * R + f2 / 2, { rings: a } = M;
        e3 < 0 && (a[0][0][0] -= e3, a[0][3][0] -= e3, a[0][4][0] -= e3), i3 < 0 && (a[0][0][1] += i3, a[0][1][1] += i3, a[0][4][1] += i3), t3 > b && (a[0][1][0] -= t3 - b, a[0][2][0] -= t3 - b), r > f2 && (a[0][2][1] += r - f2, a[0][3][1] += r - f2);
      }
    }
    const I = { type: "cim", data: { type: "CIMSymbolReference", symbol: u3 } };
    return this.rasterize(I, b, f2, v, x, R, l2, 1, M);
  }
  rasterize(e2, r, a, h3, l2, c2, m2, g = 0, y3 = null) {
    const { data: d } = e2;
    if (!d || "CIMSymbolReference" !== d.type || !d.symbol) return null;
    const { symbol: u3 } = d, w = this._canvas, p2 = (window.devicePixelRatio || 1) * n;
    w.width = r * p2, w.height = a * p2, m2 || (m2 = V(u3)), y3 || (y3 = o(m2, r, a, "legend")), w.width += 2 * g, w.height += 2 * g;
    const b = w.getContext("2d", { willReadFrequently: true }), f2 = $.createIdentity();
    f2.translate(-h3, -l2), f2.scale(c2 * p2, -c2 * p2), f2.translate(r * p2 / 2 + g, a * p2 / 2 + g), b.clearRect(0, 0, w.width, w.height);
    return new st(b, this._cimResourceManager, f2, true).drawSymbol(u3, y3), b.getImageData(0, 0, w.width, w.height);
  }
};
function o(e2, t2, i2, r) {
  const a = 1, s2 = -t2 / 2 + a, n2 = t2 / 2 - a, h3 = i2 / 2 - a, o2 = -i2 / 2 + a;
  switch (e2) {
    case "esriGeometryPoint":
      return { x: 0, y: 0 };
    case "esriGeometryPolyline":
      return { paths: [[[s2, 0], [0, 0], [n2, 0]]] };
    default:
      return "legend" === r ? { rings: [[[s2, h3], [n2, 0], [n2, o2], [s2, o2], [s2, h3]]] } : { rings: [[[s2, h3], [n2, h3], [n2, o2], [s2, o2], [s2, h3]]] };
  }
}

// node_modules/@arcgis/core/symbols/support/previewCIMSymbol.js
var s = new h(null);
var c = e(t.size);
var m = e(t.maxSize);
var u2 = e(t.lineWidth);
var f = 1;
async function h2(e2, t2, i2) {
  const l2 = t2 == null ? void 0 : t2.size;
  let r = null != l2 && "object" == typeof l2 && "width" in l2 ? l2.width : l2, n2 = null != l2 && "object" == typeof l2 && "height" in l2 ? l2.height : l2;
  if (null == r || null == n2) if ("esriGeometryPolygon" === i2) r = c, n2 = c;
  else {
    const l3 = await y2(e2, t2, i2);
    l3 && (r = l3.width, n2 = l3.height), "esriGeometryPolyline" === i2 && (r = u2), r = null != r && isFinite(r) ? Math.min(r, m) : c, n2 = null != n2 && isFinite(n2) ? Math.max(Math.min(n2, m), f) : c;
  }
  return "legend" === t2.style && "esriGeometryPolyline" === i2 && (r = u2), { width: r, height: n2 };
}
async function y2(e2, t2, l2) {
  const { feature: n2, fieldMap: a, viewParams: o2 } = t2.cimOptions || t2, c2 = await y.resolveSymbolOverrides(e2.data, n2, null, a, l2, null, o2);
  if (!c2) return null;
  (e2 = e2.clone()).data = { type: "CIMSymbolReference", symbol: c2 }, e2.data.primitiveOverrides = void 0;
  const m2 = [];
  return ee.fetchResources(c2, s.resourceManager, m2), ee.fetchFonts(c2, s.resourceManager, m2), m2.length > 0 && await Promise.all(m2), ee.getEnvelope(c2, null, s.resourceManager);
}
async function p(e2, i2 = {}) {
  var _a;
  const { node: l2, opacity: r, symbolConfig: a } = i2, c2 = null != a && "object" == typeof a && "isSquareFill" in a && a.isSquareFill, m2 = i2.cimOptions || i2, u3 = m2.geometryType || V((_a = e2 == null ? void 0 : e2.data) == null ? void 0 : _a.symbol), f2 = await h2(e2, i2, u3), { feature: y3, fieldMap: p2 } = m2, d = c2 || "esriGeometryPolygon" !== u3 ? "preview" : "legend", g = await s.rasterizeCIMSymbolAsync(e2, y3, f2, d, p2, u3, null, m2.viewParams, m2.allowScalingUp);
  if (!g) return null;
  const { width: w, height: b } = g, v = document.createElement("canvas");
  v.width = w, v.height = b;
  v.getContext("2d").putImageData(g, 0, 0);
  const M = u(f2.width), j = u(f2.height), S = new Image(M, j);
  S.src = v.toDataURL(), S.ariaLabel = i2.ariaLabel ?? null, S.alt = i2.ariaLabel ?? "", null != r && (S.style.opacity = `${r}`);
  let C = S;
  if (null != i2.effectView) {
    const e3 = { shape: { type: "image", x: 0, y: 0, width: M, height: j, src: S.src }, fill: null, stroke: null, offset: [0, 0] };
    C = l([[e3]], [M, j], { effectView: i2.effectView, ariaLabel: i2.ariaLabel });
  }
  return l2 && C && l2.appendChild(C), C;
}
export {
  p as previewCIMSymbol
};
//# sourceMappingURL=previewCIMSymbol-SVR4OJEU.js.map
