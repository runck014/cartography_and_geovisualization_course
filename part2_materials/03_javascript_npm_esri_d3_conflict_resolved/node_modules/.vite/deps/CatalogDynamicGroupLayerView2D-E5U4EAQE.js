import {
  j,
  y
} from "./chunk-EVT35YP5.js";
import "./chunk-TZAPBN5J.js";
import "./chunk-HB2JTNV2.js";
import "./chunk-OC7D2HR4.js";
import "./chunk-T23XXKIL.js";
import "./chunk-F3ZOBTPK.js";
import "./chunk-QJXYURT2.js";
import "./chunk-CGJUTDVJ.js";
import "./chunk-GYV5TPN6.js";
import "./chunk-KV3S4QI2.js";
import "./chunk-2IGXKE5P.js";
import "./chunk-4NJWIUZG.js";
import "./chunk-W6D3ECTZ.js";
import "./chunk-QXDQJEIU.js";
import "./chunk-SEUZ3J6J.js";
import {
  n as n2
} from "./chunk-SMOTPOZ7.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import {
  V
} from "./chunk-RCLWOQNR.js";
import "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-2M53HYNY.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-FG3XOAFD.js";
import "./chunk-GN5RE63N.js";
import "./chunk-2WXAPZBK.js";
import "./chunk-E2I7HYXQ.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import "./chunk-CRH37WFF.js";
import "./chunk-YFGQMO6E.js";
import "./chunk-HAF6QJ32.js";
import {
  m
} from "./chunk-H77COA2S.js";
import {
  a4 as a
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  d,
  e,
  k,
  t
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import {
  n2 as n
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/views/layers/CatalogDynamicGroupLayerView.js
var l = Symbol();
var u = (u2) => {
  let y2 = class extends u2 {
    constructor() {
      super(...arguments), this.layerViews = new V(), this._debouncedUpdate = k(async () => {
        const { layer: e2, parent: r2 } = this, t2 = r2 == null ? void 0 : r2.footprintLayerView;
        let s = [];
        const i2 = this._createQuery();
        if (i2 && t2) {
          const { features: r3 } = await t2.queryFeatures(i2);
          this.suspended || (s = r3.map((r4) => e2.acquireLayer(r4)));
        }
        this.removeHandles(l), this.addHandles(s, l);
      });
    }
    get creatingLayerViews() {
      var _a;
      return ((_a = this.view) == null ? void 0 : _a.layerViewManager.isCreatingLayerViewsForLayer(this.layer)) ?? false;
    }
    isUpdating() {
      return this.creatingLayerViews || this.layer.updating || this.layerViews.some((e2) => e2.updating);
    }
    enableLayerUpdates() {
      return t([this._updatingHandles.addWhen(() => {
        var _a, _b;
        return false === ((_b = (_a = this.parent) == null ? void 0 : _a.footprintLayerView) == null ? void 0 : _b.dataUpdating);
      }, () => this.updateLayers()), this._updatingHandles.add(() => {
        var _a, _b, _c, _d, _e;
        return [this.layer.maximumVisibleSublayers, (_a = this.layer.parent) == null ? void 0 : _a.orderBy, (_c = (_b = this.parent) == null ? void 0 : _b.footprintLayerView) == null ? void 0 : _c.filter, (_e = (_d = this.parent) == null ? void 0 : _d.footprintLayerView) == null ? void 0 : _e.timeExtent, this.suspended];
      }, () => this.updateLayers()), e(() => this.removeHandles(l))]);
    }
    updateLayers() {
      this.suspended ? this.removeHandles(l) : this._updatingHandles.addPromise(d(this._debouncedUpdate()).catch((e2) => {
        n.getLogger(this).error(e2);
      }));
    }
    _createQuery() {
      var _a, _b;
      const e2 = (_a = this.parent) == null ? void 0 : _a.footprintLayerView, r2 = (_b = this.layer) == null ? void 0 : _b.parent;
      if (!e2 || !r2 || r2.destroyed) return null;
      const { layer: { maximumVisibleSublayers: t2 }, view: { scale: s } } = this;
      if (!t2) return null;
      const { itemTypeField: i2, itemSourceField: a2, itemNameField: o, minScaleField: d2, maxScaleField: p, objectIdField: l2, orderBy: u3 } = r2, y3 = n2(`${d2} IS NULL OR ${s} <= ${d2} OR ${d2} = 0`, `${p} IS NULL OR ${s} >= ${p}`), c2 = u3 == null ? void 0 : u3.find((e3) => e3.field && !e3.valueExpression), m2 = e2.createQuery();
      if (m2.returnGeometry = false, m2.num = t2, m2.outFields = [l2, a2, o], m2.where = n2(m2.where, y3), null != this.unsupportedItemTypes) {
        const e3 = `${i2} NOT IN (${this.unsupportedItemTypes.map((e4) => `'${e4}'`)})`;
        m2.where = n2(m2.where, e3);
      }
      return (c2 == null ? void 0 : c2.field) && (m2.orderByFields = [`${c2.field} ${"descending" === c2.order ? "DESC" : "ASC"}`], m2.outFields.push(c2.field)), m2;
    }
  };
  return r([m({ readOnly: true })], y2.prototype, "creatingLayerViews", null), r([m()], y2.prototype, "layer", void 0), r([m()], y2.prototype, "layerViews", void 0), r([m({ readOnly: true })], y2.prototype, "unsupportedItemTypes", void 0), r([m()], y2.prototype, "parent", void 0), r([m({ readOnly: true })], y2.prototype, "isUpdating", null), y2 = r([a("esri.views.layers.CatalogDynamicGroupLayerView")], y2), y2;
};

// node_modules/@arcgis/core/views/2d/layers/CatalogDynamicGroupLayerView2D.js
var i = class extends u(j(y)) {
  constructor() {
    super(...arguments), this.unsupportedItemTypes = ["Scene Service"], this.layerViews = new V();
  }
  attach() {
    this.addAttachHandles([this.layerViews.on("after-changes", () => this._updateStageChildren()), this.enableLayerUpdates()]);
  }
  detach() {
    this.container.removeAllChildren();
  }
  update(e2) {
    this.updateLayers();
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  _updateStageChildren() {
    this.container.removeAllChildren(), this.layerViews.forEach((e2, r2) => this.container.addChildAt(e2.container, r2));
  }
};
i = r([a("esri.views.2d.layers.CatalogDynamicGroupLayerView2D")], i);
var c = i;
export {
  c as default
};
//# sourceMappingURL=CatalogDynamicGroupLayerView2D-E5U4EAQE.js.map
