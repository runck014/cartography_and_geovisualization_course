{
  "version": 3,
  "sources": ["../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/hud/HUD.glsl.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/hud/AlignPixel.glsl.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/hud/HUDOcclusionPass.glsl.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/hud/HUDRenderStyle.js", "../../@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/hud/HUDVisibility.glsl.js", "../../@arcgis/core/chunks/HUDMaterial.glsl.js"],
  "sourcesContent": ["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{addVerticalOffset as e}from\"../attributes/VerticalOffset.glsl.js\";import{ScreenSizePerspective as t,addScreenSizePerspectiveAlignment as o}from\"../util/ScreenSizePerspective.glsl.js\";import{addProjViewLocalOrigin as a,addCameraPosition as s,addViewNormal as i,addPixelRatio as r}from\"../util/View.glsl.js\";import{Float4PassUniform as n}from\"../../shaderModules/Float4PassUniform.js\";import{FloatPassUniform as f}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as l}from\"../../shaderModules/interfaces.js\";import{VertexAttribute as c}from\"../../../lib/VertexAttribute.js\";const p=.5;function d(d,u){d.include(t),d.attributes.add(c.POSITION,\"vec3\"),d.attributes.add(c.NORMAL,\"vec3\"),d.attributes.add(c.CENTEROFFSETANDDISTANCE,\"vec4\");const v=d.vertex;a(v,u),s(v,u),v.uniforms.add(new n(\"viewport\",((e,t)=>t.camera.fullViewport)),new f(\"polygonOffset\",(e=>e.shaderPolygonOffset)),new f(\"cameraGroundRelative\",((e,t)=>t.camera.aboveGround?1:-1))),u.hasVerticalOffset&&e(v),v.constants.add(\"smallOffsetAngle\",\"float\",.984807753012208),v.code.add(l`struct ProjectHUDAux {\nvec3 posModel;\nvec3 posView;\nvec3 vnormal;\nfloat distanceToCamera;\nfloat absCosAngle;\n};`),v.code.add(l`\n    float applyHUDViewDependentPolygonOffset(float pointGroundDistance, float absCosAngle, inout vec3 posView) {\n      float pointGroundSign = ${u.terrainDepthTest?l.float(0):l`sign(pointGroundDistance)`};\n      if (pointGroundSign == 0.0) {\n        pointGroundSign = cameraGroundRelative;\n      }\n\n      // cameraGroundRelative is -1 if camera is below ground, 1 if above ground\n      // groundRelative is 1 if both camera and symbol are on the same side of the ground, -1 otherwise\n      float groundRelative = cameraGroundRelative * pointGroundSign;\n\n      // view angle dependent part of polygon offset emulation: we take the absolute value because the sign that is\n      // dropped is instead introduced using the ground-relative position of the symbol and the camera\n      if (polygonOffset > .0) {\n        float cosAlpha = clamp(absCosAngle, 0.01, 1.0);\n        float tanAlpha = sqrt(1.0 - cosAlpha * cosAlpha) / cosAlpha;\n        float factor = (1.0 - tanAlpha / viewport[2]);\n\n        // same side of the terrain\n        if (groundRelative > 0.0) {\n          posView *= factor;\n        }\n        // opposite sides of the terrain\n        else {\n          posView /= factor;\n        }\n      }\n\n      return groundRelative;\n    }\n  `),u.draped&&!u.hasVerticalOffset||i(v),u.draped||(v.uniforms.add(new f(\"perDistancePixelRatio\",((e,t)=>Math.tan(t.camera.fovY/2)/(t.camera.fullViewport[2]/2)))),v.code.add(l`\n    void applyHUDVerticalGroundOffset(vec3 normalModel, inout vec3 posModel, inout vec3 posView) {\n      float distanceToCamera = length(posView);\n\n      // Compute offset in world units for a half pixel shift\n      float pixelOffset = distanceToCamera * perDistancePixelRatio * ${l.float(p)};\n\n      // Apply offset along normal in the direction away from the ground surface\n      vec3 modelOffset = normalModel * cameraGroundRelative * pixelOffset;\n\n      // Apply the same offset also on the view space position\n      vec3 viewOffset = (viewNormal * vec4(modelOffset, 1.0)).xyz;\n\n      posModel += modelOffset;\n      posView += viewOffset;\n    }\n  `)),u.screenCenterOffsetUnitsEnabled&&r(v),u.hasScreenSizePerspective&&o(v),v.code.add(l`\n    vec4 projectPositionHUD(out ProjectHUDAux aux) {\n      vec3 centerOffset = centerOffsetAndDistance.xyz;\n      float pointGroundDistance = centerOffsetAndDistance.w;\n\n      aux.posModel = position;\n      aux.posView = (view * vec4(aux.posModel, 1.0)).xyz;\n      aux.vnormal = normal;\n      ${u.draped?\"\":\"applyHUDVerticalGroundOffset(aux.vnormal, aux.posModel, aux.posView);\"}\n\n      // Screen sized offset in world space, used for example for line callouts\n      // Note: keep this implementation in sync with the CPU implementation, see\n      //   - MaterialUtil.verticalOffsetAtDistance\n      //   - HUDMaterial.applyVerticalOffsetTransformation\n\n      aux.distanceToCamera = length(aux.posView);\n\n      vec3 viewDirObjSpace = normalize(cameraPosition - aux.posModel);\n      float cosAngle = dot(aux.vnormal, viewDirObjSpace);\n\n      aux.absCosAngle = abs(cosAngle);\n\n      ${u.hasScreenSizePerspective&&(u.hasVerticalOffset||u.screenCenterOffsetUnitsEnabled)?\"vec3 perspectiveFactor = screenSizePerspectiveScaleFactor(aux.absCosAngle, aux.distanceToCamera, screenSizePerspectiveAlignment);\":\"\"}\n\n      ${u.hasVerticalOffset?u.hasScreenSizePerspective?\"float verticalOffsetScreenHeight = applyScreenSizePerspectiveScaleFactorFloat(verticalOffset.x, perspectiveFactor);\":\"float verticalOffsetScreenHeight = verticalOffset.x;\":\"\"}\n\n      ${u.hasVerticalOffset?l`\n            float worldOffset = clamp(verticalOffsetScreenHeight * verticalOffset.y * aux.distanceToCamera, verticalOffset.z, verticalOffset.w);\n            vec3 modelOffset = aux.vnormal * worldOffset;\n            aux.posModel += modelOffset;\n            vec3 viewOffset = (viewNormal * vec4(modelOffset, 1.0)).xyz;\n            aux.posView += viewOffset;\n            // Since we elevate the object, we need to take that into account\n            // in the distance to ground\n            pointGroundDistance += worldOffset;`:\"\"}\n\n      float groundRelative = applyHUDViewDependentPolygonOffset(pointGroundDistance, aux.absCosAngle, aux.posView);\n\n      ${u.screenCenterOffsetUnitsEnabled?\"\":l`\n            // Apply x/y in view space, but z in screen space (i.e. along posView direction)\n            aux.posView += vec3(centerOffset.x, centerOffset.y, 0.0);\n\n            // Same material all have same z != 0.0 condition so should not lead to\n            // branch fragmentation and will save a normalization if it's not needed\n            if (centerOffset.z != 0.0) {\n              aux.posView -= normalize(aux.posView) * centerOffset.z;\n            }\n          `}\n\n      vec4 posProj = proj * vec4(aux.posView, 1.0);\n\n      ${u.screenCenterOffsetUnitsEnabled?u.hasScreenSizePerspective?\"float centerOffsetY = applyScreenSizePerspectiveScaleFactorFloat(centerOffset.y, perspectiveFactor);\":\"float centerOffsetY = centerOffset.y;\":\"\"}\n\n      ${u.screenCenterOffsetUnitsEnabled?\"posProj.xy += vec2(centerOffset.x, centerOffsetY) * pixelRatio * 2.0 / viewport.zw * posProj.w;\":\"\"}\n\n      // constant part of polygon offset emulation\n      posProj.z -= groundRelative * polygonOffset * posProj.w;\n      return posProj;\n    }\n  `)}export{d as HUD,p as HUDVerticalPixelOffset};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{BooleanPassUniform as e}from\"../../shaderModules/BooleanPassUniform.js\";import{glsl as i}from\"../../shaderModules/interfaces.js\";function o(o){o.uniforms.add(new e(\"alignPixelEnabled\",((e,i)=>i.alignPixelEnabled))),o.code.add(i`vec4 alignToPixelCenter(vec4 clipCoord, vec2 widthHeight) {\nif (!alignPixelEnabled)\nreturn clipCoord;\nvec2 xy = vec2(0.500123) + 0.5 * clipCoord.xy / clipCoord.w;\nvec2 pixelSz = vec2(1.0) / widthHeight;\nvec2 ij = (floor(xy * widthHeight) + vec2(0.5)) * pixelSz;\nvec2 result = (ij * 2.0 - vec2(1.0)) * clipCoord.w;\nreturn vec4(result, clipCoord.zw);\n}`),o.code.add(i`vec4 alignToPixelOrigin(vec4 clipCoord, vec2 widthHeight) {\nif (!alignPixelEnabled)\nreturn clipCoord;\nvec2 xy = vec2(0.5) + 0.5 * clipCoord.xy / clipCoord.w;\nvec2 pixelSz = vec2(1.0) / widthHeight;\nvec2 ij = floor((xy + 0.5 * pixelSz) * widthHeight) * pixelSz;\nvec2 result = (ij * 2.0 - vec2(1.0)) * clipCoord.w;\nreturn vec4(result, clipCoord.zw);\n}`)}export{o as AlignPixel};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{AlignPixel as e}from\"./AlignPixel.glsl.js\";import{terrainDepthTest as o}from\"../shading/TerrainDepthTest.glsl.js\";import{glsl as t}from\"../../shaderModules/interfaces.js\";function r(r,i){const{vertex:p,fragment:s}=r;r.include(o,i),p.include(e),i.terrainDepthTest&&r.varyings.add(\"depth\",\"float\"),p.main.add(t`\n    vec4 posProjCenter;\n    if (dot(position, position) > 0.0) {\n      // Render single point to center of the pixel to avoid subpixel filtering to affect the marker color\n      ProjectHUDAux projectAux;\n      vec4 posProj = projectPositionHUD(projectAux);\n      posProjCenter = alignToPixelCenter(posProj, viewport.zw);\n\n      ${i.terrainDepthTest?t`depth = projectAux.posView.z;`:\"\"}\n      vec3 vpos = projectAux.posModel;\n      if (rejectBySlice(vpos)) {\n        // Project out of clip space\n        posProjCenter = vec4(1e038, 1e038, 1e038, 1.0);\n      }\n\n    } else {\n      // Project out of clip space\n      posProjCenter = vec4(1e038, 1e038, 1e038, 1.0);\n    }\n\n    gl_Position = posProjCenter;\n    gl_PointSize = 1.0;\n  `),s.main.add(t`fragColor = vec4(1);\nif(terrainDepthTest(depth)) {\nfragColor.g = 0.5;\n}`)}export{r as HUDOcclusionPass};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nvar c;!function(c){c[c.Occluded=0]=\"Occluded\",c[c.NotOccluded=1]=\"NotOccluded\",c[c.Both=2]=\"Both\",c[c.COUNT=3]=\"COUNT\"}(c||(c={}));export{c as HUDRenderStyle};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{AlignPixel as e}from\"./AlignPixel.glsl.js\";import{HUDRenderStyle as r}from\"./HUDRenderStyle.js\";import{Float4PassUniform as o}from\"../../shaderModules/Float4PassUniform.js\";import{FloatPassUniform as i}from\"../../shaderModules/FloatPassUniform.js\";import{glsl as l}from\"../../shaderModules/interfaces.js\";import{Texture2DPassUniform as s}from\"../../shaderModules/Texture2DPassUniform.js\";function t(t){t.vertex.uniforms.add(new i(\"renderTransparentlyOccludedHUD\",((e,o)=>o.hudRenderStyle===r.Occluded?1:o.hudRenderStyle===r.NotOccluded?0:.75)),new o(\"viewport\",((e,r)=>r.camera.fullViewport)),new s(\"hudVisibilityTexture\",((e,r)=>r.hudVisibility?.getTexture()))),t.vertex.include(e),t.vertex.code.add(l`bool testHUDVisibility(vec4 posProj) {\nvec4 posProjCenter = alignToPixelCenter(posProj, viewport.zw);\nvec4 occlusionPixel = texture(hudVisibilityTexture, .5 + .5 * posProjCenter.xy / posProjCenter.w);\nif (renderTransparentlyOccludedHUD > 0.5) {\nreturn occlusionPixel.r * occlusionPixel.g > 0.0 && occlusionPixel.g * renderTransparentlyOccludedHUD < 1.0;\n}\nreturn occlusionPixel.r * occlusionPixel.g > 0.0 && occlusionPixel.g == 1.0;\n}`)}export{t as HUDVisibility};\n", "/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.31/esri/copyright.txt for details.\n*/\nimport{set as e,copy as o}from\"../core/libs/gl-matrix-2/math/vec2.js\";import{create as r}from\"../core/libs/gl-matrix-2/factories/vec2f64.js\";import{ZEROS as i,fromValues as t}from\"../core/libs/gl-matrix-2/factories/vec4f64.js\";import{earth as a}from\"../geometry/support/Ellipsoid.js\";import{ShaderOutput as l}from\"../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput.js\";import{SliceDraw as s}from\"../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl.js\";import{ObjectAndLayerIdColor as n}from\"../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl.js\";import{AlignPixel as c}from\"../views/3d/webgl-engine/core/shaderLibrary/hud/AlignPixel.glsl.js\";import{HUD as d}from\"../views/3d/webgl-engine/core/shaderLibrary/hud/HUD.glsl.js\";import{HUDOcclusionPass as u}from\"../views/3d/webgl-engine/core/shaderLibrary/hud/HUDOcclusionPass.glsl.js\";import{HUDVisibility as p}from\"../views/3d/webgl-engine/core/shaderLibrary/hud/HUDVisibility.glsl.js\";import{OutputHighlight as f}from\"../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl.js\";import{VisualVariables as g}from\"../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl.js\";import{alphaCutoff as m}from\"../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff.js\";import{ColorConversion as v}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl.js\";import{RgbaFloatEncoding as b}from\"../views/3d/webgl-engine/core/shaderLibrary/util/RgbaFloatEncoding.glsl.js\";import{ScreenSizePerspective as h,addScreenSizePerspective as w,addScreenSizePerspectiveAlignment as x}from\"../views/3d/webgl-engine/core/shaderLibrary/util/ScreenSizePerspective.glsl.js\";import{addPixelRatio as C}from\"../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl.js\";import{Float2PassUniform as P}from\"../views/3d/webgl-engine/core/shaderModules/Float2PassUniform.js\";import{Float4DrawUniform as z}from\"../views/3d/webgl-engine/core/shaderModules/Float4DrawUniform.js\";import{Float4PassUniform as S}from\"../views/3d/webgl-engine/core/shaderModules/Float4PassUniform.js\";import{FloatPassUniform as j}from\"../views/3d/webgl-engine/core/shaderModules/FloatPassUniform.js\";import{glsl as y,If as A}from\"../views/3d/webgl-engine/core/shaderModules/interfaces.js\";import{ShaderBuilder as O}from\"../views/3d/webgl-engine/core/shaderModules/ShaderBuilder.js\";import{Texture2DPassUniform as F}from\"../views/3d/webgl-engine/core/shaderModules/Texture2DPassUniform.js\";import{OITPass as $}from\"../views/3d/webgl-engine/lib/OITPass.js\";import{VertexAttribute as D}from\"../views/3d/webgl-engine/lib/VertexAttribute.js\";const L={occludedFadeFactor:.6};function T(o){const r=new O,T=o.signedDistanceFieldEnabled;if(r.include(d,o),r.include(s,o),o.occlusionPass)return r.include(u,o),r;const{vertex:M,fragment:H}=r;r.include(h),r.include(g,o),r.include(n,o),r.include(p),H.include(b),H.include(v),r.varyings.add(\"vcolor\",\"vec4\"),r.varyings.add(\"vtc\",\"vec2\"),r.varyings.add(\"vsize\",\"vec2\"),r.varyings.add(\"voccluded\",\"float\"),M.uniforms.add(new S(\"viewport\",((e,o)=>o.camera.fullViewport)),new P(\"screenOffset\",((o,r)=>e(R,2*o.screenOffset[0]*r.camera.pixelRatio,2*o.screenOffset[1]*r.camera.pixelRatio))),new P(\"anchorPosition\",(e=>E(e))),new S(\"materialColor\",(e=>e.color)),new j(\"materialRotation\",(e=>e.rotation))),C(M),T&&(M.uniforms.add(new S(\"outlineColor\",(e=>e.outlineColor))),H.uniforms.add(new S(\"outlineColor\",(e=>B(e)?e.outlineColor:i)),new j(\"outlineSize\",(e=>B(e)?e.outlineSize:0)))),o.horizonCullingEnabled&&M.uniforms.add(new z(\"pointDistanceSphere\",((e,o)=>{const r=o.camera.eye,i=e.origin;return t(i[0]-r[0],i[1]-r[1],i[2]-r[2],a.radius)}))),o.pixelSnappingEnabled&&M.include(c),o.hasScreenSizePerspective&&(w(M),x(M)),o.debugDrawLabelBorder&&r.varyings.add(\"debugBorderCoords\",\"vec4\"),r.attributes.add(D.UV0,\"vec2\"),r.attributes.add(D.COLOR,\"vec4\"),r.attributes.add(D.SIZE,\"vec2\"),r.attributes.add(D.ROTATION,\"float\"),r.attributes.add(D.FEATUREATTRIBUTE,\"vec4\"),M.code.add(o.horizonCullingEnabled?y`bool behindHorizon(vec3 posModel) {\nvec3 camToEarthCenter = pointDistanceSphere.xyz - localOrigin;\nvec3 camToPos = pointDistanceSphere.xyz + posModel;\nfloat earthRadius = pointDistanceSphere.w;\nfloat a = dot(camToPos, camToPos);\nfloat b = dot(camToPos, camToEarthCenter);\nfloat c = dot(camToEarthCenter, camToEarthCenter) - earthRadius * earthRadius;\nreturn  b > 0.0 && b < a && b * b  > a * c;\n}`:y`bool behindHorizon(vec3 posModel) { return false; }`),M.main.add(y`\n      ProjectHUDAux projectAux;\n      vec4 posProj = projectPositionHUD(projectAux);\n      forwardObjectAndLayerIdColor();\n\n      if (rejectBySlice(projectAux.posModel)) {\n        // Project outside of clip plane\n        gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n        return;\n      }\n\n      if (behindHorizon(projectAux.posModel)) {\n        // Project outside of clip plane\n        gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n        return;\n      }\n\n      vec2 inputSize;\n      ${A(o.hasScreenSizePerspective,y`\n          inputSize = screenSizePerspectiveScaleVec2(size, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspective);\n          vec2 screenOffsetScaled = screenSizePerspectiveScaleVec2(screenOffset, projectAux.absCosAngle, projectAux.distanceToCamera, screenSizePerspectiveAlignment);`,y`\n          inputSize = size;\n          vec2 screenOffsetScaled = screenOffset;`)}\n      ${A(o.vvSize,y`inputSize *= vvScale(featureAttribute).xx;`)}\n\n      vec2 combinedSize = inputSize * pixelRatio;\n      vec4 quadOffset = vec4(0.0);\n      bool visible = testHUDVisibility(posProj);\n      voccluded = visible ? 0.0 : 1.0;\n    `);const U=y`\n      vec2 uv01 = floor(uv0);\n      vec2 uv = uv0 - uv01;\n      quadOffset.xy = (uv01 - anchorPosition) * 2.0 * combinedSize;\n\n      ${A(o.hasRotation,y`\n          float angle = radians(materialRotation + rotation);\n          float cosAngle = cos(angle);\n          float sinAngle = sin(angle);\n          mat2 rotate = mat2(cosAngle, -sinAngle, sinAngle,  cosAngle);\n\n          quadOffset.xy = rotate * quadOffset.xy;\n        `)}\n\n      quadOffset.xy = (quadOffset.xy + screenOffsetScaled) / viewport.zw * posProj.w;\n  `,V=o.pixelSnappingEnabled?T?y`posProj = alignToPixelOrigin(posProj, viewport.zw) + quadOffset;`:y`posProj += quadOffset;\nif (inputSize.x == size.x) {\nposProj = alignToPixelOrigin(posProj, viewport.zw);\n}`:y`posProj += quadOffset;`;M.main.add(y`\n    ${A(o.occlusionTestEnabled,y`\n      if (!visible) {\n        vtc = vec2(0.0);\n        ${A(o.debugDrawLabelBorder,\"debugBorderCoords = vec4(0.5, 0.5, 1.5 / combinedSize);\")}\n        return;\n      }`)}\n    ${U}\n    ${o.vvColor?\"vcolor = interpolateVVColor(featureAttribute.y) * materialColor;\":\"vcolor = color / 255.0 * materialColor;\"}\n\n    ${A(o.output===l.ObjectAndLayerIdColor,y`vcolor.a = 1.0;`)}\n\n    bool alphaDiscard = vcolor.a < ${y.float(m)};\n    ${A(T,`alphaDiscard = alphaDiscard && outlineColor.a < ${y.float(m)};`)}\n    if (alphaDiscard) {\n      // \"early discard\" if both symbol color (= fill) and outline color (if applicable) are transparent\n      gl_Position = vec4(1e38, 1e38, 1e38, 1.0);\n      return;\n    } else {\n      ${V}\n      gl_Position = posProj;\n    }\n\n    vtc = uv;\n\n    ${A(o.debugDrawLabelBorder,y`debugBorderCoords = vec4(uv01, 1.5 / combinedSize);`)}\n    vsize = inputSize;\n  `),H.uniforms.add(new F(\"tex\",(e=>e.texture))),o.occludedFragmentFade&&(H.uniforms.add(new F(\"depthMap\",((e,o)=>o.mainDepth))),H.uniforms.add(new j(\"fadeFactor\",(()=>L.occludedFadeFactor))));const _=o.debugDrawLabelBorder?y`(isBorder > 0.0 ? 0.0 : ${y.float(m)})`:y.float(m),I=o.output===l.Highlight,q=y`\n    ${A(o.debugDrawLabelBorder,y`float isBorder = float(any(lessThan(debugBorderCoords.xy, debugBorderCoords.zw)) || any(greaterThan(debugBorderCoords.xy, 1.0 - debugBorderCoords.zw)));`)}\n\n    ${A(o.sampleSignedDistanceFieldTexelCenter,y`\n      float txSize = float(textureSize(tex, 0).x);\n      float texelSize = 1.0 / txSize;\n\n      // Calculate how much we have to add/subtract to/from each texel to reach the size of an onscreen pixel\n      vec2 scaleFactor = (vsize - txSize) * texelSize;\n      vec2 samplePos = vtc + (vec2(1.0, -1.0) * texelSize) * scaleFactor;`,y`vec2 samplePos = vtc;`)}\n\n    ${T?y`\n      vec4 fillPixelColor = vcolor;\n\n      // Get distance and map it into [-0.5, 0.5]\n      float d = rgba2float(texture(tex, samplePos)) - 0.5;\n\n      // Distance in output units (i.e. pixels)\n      float dist = d * vsize.x;\n\n      // Create smooth transition from the icon into its outline\n      float fillAlphaFactor = clamp(0.5 - dist, 0.0, 1.0);\n      fillPixelColor.a *= fillAlphaFactor;\n\n      if (outlineSize > 0.25) {\n        vec4 outlinePixelColor = outlineColor;\n        float clampedOutlineSize = min(outlineSize, 0.5*vsize.x);\n\n        // Create smooth transition around outline\n        float outlineAlphaFactor = clamp(0.5 - (abs(dist) - 0.5*clampedOutlineSize), 0.0, 1.0);\n        outlinePixelColor.a *= outlineAlphaFactor;\n\n        if (\n          outlineAlphaFactor + fillAlphaFactor < ${_} ||\n          fillPixelColor.a + outlinePixelColor.a < ${y.float(m)}\n        ) {\n          discard;\n        }\n\n        // perform un-premultiplied over operator (see https://en.wikipedia.org/wiki/Alpha_compositing#Description)\n        float compositeAlpha = outlinePixelColor.a + fillPixelColor.a * (1.0 - outlinePixelColor.a);\n        vec3 compositeColor = vec3(outlinePixelColor) * outlinePixelColor.a +\n          vec3(fillPixelColor) * fillPixelColor.a * (1.0 - outlinePixelColor.a);\n\n        ${A(!I,y`fragColor = vec4(compositeColor, compositeAlpha);`)}\n      } else {\n        if (fillAlphaFactor < ${_}) {\n          discard;\n        }\n\n        ${A(!I,y`fragColor = premultiplyAlpha(fillPixelColor);`)}\n      }\n\n      // visualize SDF:\n      // fragColor = vec4(clamp(-dist/vsize.x*2.0, 0.0, 1.0), clamp(dist/vsize.x*2.0, 0.0, 1.0), 0.0, 1.0);\n      `:y`\n          vec4 texColor = texture(tex, vtc, -0.5);\n          if (texColor.a < ${_}) {\n            discard;\n          }\n          ${A(!I,y`fragColor = texColor * premultiplyAlpha(vcolor);`)}\n          `}\n\n    ${A(o.occludedFragmentFade&&!I,y`\n        float zSample = texelFetch(depthMap, ivec2(gl_FragCoord.xy), 0).x;\n        if (zSample < gl_FragCoord.z) {\n          fragColor *= fadeFactor;\n        }\n        `)}\n\n    ${A(!I&&o.debugDrawLabelBorder,y`fragColor = mix(fragColor, vec4(1.0, 0.0, 1.0, 1.0), isBorder * 0.5);`)}\n  `;switch(o.output){case l.Color:o.oitPass===$.ColorAlpha&&(r.outputs.add(\"fragColor\",\"vec4\",0),r.outputs.add(\"fragAlpha\",\"float\",1)),H.main.add(y`\n        ${q}\n        ${A(o.oitPass===$.FrontFace,y`fragColor.rgb /= fragColor.a;`)}\n        ${A(o.oitPass===$.ColorAlpha,y`fragAlpha = fragColor.a;`)}`);break;case l.ObjectAndLayerIdColor:H.main.add(y`\n        ${q}\n        outputObjectAndLayerIdColor();`);break;case l.Highlight:r.include(f,o),H.main.add(y`\n        ${q}\n        outputHighlight(voccluded == 1.0);`)}return r}function B(e){return e.outlineColor[3]>0&&e.outlineSize>0}function E(e,r=R){return e.textureIsSignedDistanceField?M(e.anchorPosition,e.distanceFieldBoundingBox,r):o(r,e.anchorPosition),r}function M(o,r,i){null!=r?e(i,o[0]*(r[2]-r[0])+r[0],o[1]*(r[3]-r[1])+r[1]):e(i,0,0)}const R=r(),H=Object.freeze(Object.defineProperty({__proto__:null,build:T,calculateAnchorPosForRendering:E,shaderSettings:L},Symbol.toStringTag,{value:\"Module\"}));export{H,T as b,E as c,L as s};\n"],
  "mappings": "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",
  "names": ["p", "d", "s", "e", "t", "o", "f", "o", "s", "e", "r", "p", "s", "o", "c", "t", "o", "e", "r", "s", "o", "r", "T", "d", "M", "H", "s", "e", "t", "n"]
}
