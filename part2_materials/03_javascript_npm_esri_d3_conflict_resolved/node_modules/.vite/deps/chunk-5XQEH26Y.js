import {
  a as a4,
  a2 as a5,
  f as f2,
  g as g2,
  h,
  l as l2,
  o2 as o3,
  s as s2,
  u2
} from "./chunk-7PP3YNSG.js";
import {
  o
} from "./chunk-UFFVFTYV.js";
import {
  A,
  B,
  C,
  H
} from "./chunk-KKH7HGO3.js";
import {
  l
} from "./chunk-4NJWIUZG.js";
import {
  j2 as j,
  w
} from "./chunk-FG3XOAFD.js";
import {
  o as o2
} from "./chunk-GN5RE63N.js";
import {
  g,
  r as r2
} from "./chunk-2WXAPZBK.js";
import {
  n as n3
} from "./chunk-7O7KFKCG.js";
import {
  n as n4
} from "./chunk-TVTRNT6K.js";
import {
  a as a3,
  f
} from "./chunk-HAF6QJ32.js";
import {
  m
} from "./chunk-H77COA2S.js";
import {
  a4 as a2
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  c2 as c,
  u
} from "./chunk-GRW2QIBT.js";
import {
  n as n2
} from "./chunk-R2PAF6JT.js";
import {
  a,
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";

// node_modules/@arcgis/core/chunks/Zlib.js
var e;
var r3 = { exports: {} };
function i() {
  return e || (e = 1, i8 = r3, void 0 !== (t7 = function() {
    function t8() {
      this.pos = 0, this.bufferLength = 0, this.eof = false, this.buffer = null;
    }
    return t8.prototype = { ensureBuffer: function(t9) {
      var e6 = this.buffer, r14 = e6 ? e6.byteLength : 0;
      if (t9 < r14) return e6;
      for (var i9 = 512; i9 < t9; ) i9 <<= 1;
      for (var s9 = new Uint8Array(i9), f7 = 0; f7 < r14; ++f7) s9[f7] = e6[f7];
      return this.buffer = s9;
    }, getByte: function() {
      for (var t9 = this.pos; this.bufferLength <= t9; ) {
        if (this.eof) return null;
        this.readBlock();
      }
      return this.buffer[this.pos++];
    }, getBytes: function(t9) {
      var e6 = this.pos;
      if (t9) {
        this.ensureBuffer(e6 + t9);
        for (var r14 = e6 + t9; !this.eof && this.bufferLength < r14; ) this.readBlock();
        var i9 = this.bufferLength;
        r14 > i9 && (r14 = i9);
      } else {
        for (; !this.eof; ) this.readBlock();
        r14 = this.bufferLength;
      }
      return this.pos = r14, this.buffer.subarray(e6, r14);
    }, lookChar: function() {
      for (var t9 = this.pos; this.bufferLength <= t9; ) {
        if (this.eof) return null;
        this.readBlock();
      }
      return String.fromCharCode(this.buffer[this.pos]);
    }, getChar: function() {
      for (var t9 = this.pos; this.bufferLength <= t9; ) {
        if (this.eof) return null;
        this.readBlock();
      }
      return String.fromCharCode(this.buffer[this.pos++]);
    }, makeSubStream: function(t9, e6, r14) {
      for (var i9 = t9 + e6; this.bufferLength <= i9 && !this.eof; ) this.readBlock();
      return new Stream(this.buffer, t9, e6, r14);
    }, skip: function(t9) {
      t9 || (t9 = 1), this.pos += t9;
    }, reset: function() {
      this.pos = 0;
    } }, t8;
  }(), s8 = function() {
    if (!self || !self.Uint32Array) return null;
    var e6 = new Uint32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), r14 = new Uint32Array([3, 4, 5, 6, 7, 8, 9, 10, 65547, 65549, 65551, 65553, 131091, 131095, 131099, 131103, 196643, 196651, 196659, 196667, 262211, 262227, 262243, 262259, 327811, 327843, 327875, 327907, 258, 258, 258]), i9 = new Uint32Array([1, 2, 3, 4, 65541, 65543, 131081, 131085, 196625, 196633, 262177, 262193, 327745, 327777, 393345, 393409, 459009, 459137, 524801, 525057, 590849, 591361, 657409, 658433, 724993, 727041, 794625, 798721, 868353, 876545]), s9 = [new Uint32Array([459008, 524368, 524304, 524568, 459024, 524400, 524336, 590016, 459016, 524384, 524320, 589984, 524288, 524416, 524352, 590048, 459012, 524376, 524312, 589968, 459028, 524408, 524344, 590032, 459020, 524392, 524328, 59e4, 524296, 524424, 524360, 590064, 459010, 524372, 524308, 524572, 459026, 524404, 524340, 590024, 459018, 524388, 524324, 589992, 524292, 524420, 524356, 590056, 459014, 524380, 524316, 589976, 459030, 524412, 524348, 590040, 459022, 524396, 524332, 590008, 524300, 524428, 524364, 590072, 459009, 524370, 524306, 524570, 459025, 524402, 524338, 590020, 459017, 524386, 524322, 589988, 524290, 524418, 524354, 590052, 459013, 524378, 524314, 589972, 459029, 524410, 524346, 590036, 459021, 524394, 524330, 590004, 524298, 524426, 524362, 590068, 459011, 524374, 524310, 524574, 459027, 524406, 524342, 590028, 459019, 524390, 524326, 589996, 524294, 524422, 524358, 590060, 459015, 524382, 524318, 589980, 459031, 524414, 524350, 590044, 459023, 524398, 524334, 590012, 524302, 524430, 524366, 590076, 459008, 524369, 524305, 524569, 459024, 524401, 524337, 590018, 459016, 524385, 524321, 589986, 524289, 524417, 524353, 590050, 459012, 524377, 524313, 589970, 459028, 524409, 524345, 590034, 459020, 524393, 524329, 590002, 524297, 524425, 524361, 590066, 459010, 524373, 524309, 524573, 459026, 524405, 524341, 590026, 459018, 524389, 524325, 589994, 524293, 524421, 524357, 590058, 459014, 524381, 524317, 589978, 459030, 524413, 524349, 590042, 459022, 524397, 524333, 590010, 524301, 524429, 524365, 590074, 459009, 524371, 524307, 524571, 459025, 524403, 524339, 590022, 459017, 524387, 524323, 589990, 524291, 524419, 524355, 590054, 459013, 524379, 524315, 589974, 459029, 524411, 524347, 590038, 459021, 524395, 524331, 590006, 524299, 524427, 524363, 590070, 459011, 524375, 524311, 524575, 459027, 524407, 524343, 590030, 459019, 524391, 524327, 589998, 524295, 524423, 524359, 590062, 459015, 524383, 524319, 589982, 459031, 524415, 524351, 590046, 459023, 524399, 524335, 590014, 524303, 524431, 524367, 590078, 459008, 524368, 524304, 524568, 459024, 524400, 524336, 590017, 459016, 524384, 524320, 589985, 524288, 524416, 524352, 590049, 459012, 524376, 524312, 589969, 459028, 524408, 524344, 590033, 459020, 524392, 524328, 590001, 524296, 524424, 524360, 590065, 459010, 524372, 524308, 524572, 459026, 524404, 524340, 590025, 459018, 524388, 524324, 589993, 524292, 524420, 524356, 590057, 459014, 524380, 524316, 589977, 459030, 524412, 524348, 590041, 459022, 524396, 524332, 590009, 524300, 524428, 524364, 590073, 459009, 524370, 524306, 524570, 459025, 524402, 524338, 590021, 459017, 524386, 524322, 589989, 524290, 524418, 524354, 590053, 459013, 524378, 524314, 589973, 459029, 524410, 524346, 590037, 459021, 524394, 524330, 590005, 524298, 524426, 524362, 590069, 459011, 524374, 524310, 524574, 459027, 524406, 524342, 590029, 459019, 524390, 524326, 589997, 524294, 524422, 524358, 590061, 459015, 524382, 524318, 589981, 459031, 524414, 524350, 590045, 459023, 524398, 524334, 590013, 524302, 524430, 524366, 590077, 459008, 524369, 524305, 524569, 459024, 524401, 524337, 590019, 459016, 524385, 524321, 589987, 524289, 524417, 524353, 590051, 459012, 524377, 524313, 589971, 459028, 524409, 524345, 590035, 459020, 524393, 524329, 590003, 524297, 524425, 524361, 590067, 459010, 524373, 524309, 524573, 459026, 524405, 524341, 590027, 459018, 524389, 524325, 589995, 524293, 524421, 524357, 590059, 459014, 524381, 524317, 589979, 459030, 524413, 524349, 590043, 459022, 524397, 524333, 590011, 524301, 524429, 524365, 590075, 459009, 524371, 524307, 524571, 459025, 524403, 524339, 590023, 459017, 524387, 524323, 589991, 524291, 524419, 524355, 590055, 459013, 524379, 524315, 589975, 459029, 524411, 524347, 590039, 459021, 524395, 524331, 590007, 524299, 524427, 524363, 590071, 459011, 524375, 524311, 524575, 459027, 524407, 524343, 590031, 459019, 524391, 524327, 589999, 524295, 524423, 524359, 590063, 459015, 524383, 524319, 589983, 459031, 524415, 524351, 590047, 459023, 524399, 524335, 590015, 524303, 524431, 524367, 590079]), 9], f7 = [new Uint32Array([327680, 327696, 327688, 327704, 327684, 327700, 327692, 327708, 327682, 327698, 327690, 327706, 327686, 327702, 327694, 0, 327681, 327697, 327689, 327705, 327685, 327701, 327693, 327709, 327683, 327699, 327691, 327707, 327687, 327703, 327695, 0]), 5];
    function o11(t8) {
      throw new Error(t8);
    }
    function n15(e7) {
      var r15 = 0, i10 = e7[r15++], s10 = e7[r15++];
      -1 != i10 && -1 != s10 || o11("Invalid header in flate stream"), 8 != (15 & i10) && o11("Unknown compression method in flate stream"), ((i10 << 8) + s10) % 31 != 0 && o11("Bad FCHECK in flate stream"), 32 & s10 && o11("FDICT bit set in flate stream"), this.bytes = e7, this.bytesPos = r15, this.codeSize = 0, this.codeBuf = 0, t7.call(this);
    }
    return n15.prototype = Object.create(t7.prototype), n15.prototype.getBits = function(t8) {
      for (var e7, r15 = this.codeSize, i10 = this.codeBuf, s10 = this.bytes, f8 = this.bytesPos; r15 < t8; ) void 0 === (e7 = s10[f8++]) && o11("Bad encoding in flate stream"), i10 |= e7 << r15, r15 += 8;
      return e7 = i10 & (1 << t8) - 1, this.codeBuf = i10 >> t8, this.codeSize = r15 -= t8, this.bytesPos = f8, e7;
    }, n15.prototype.getCode = function(t8) {
      for (var e7 = t8[0], r15 = t8[1], i10 = this.codeSize, s10 = this.codeBuf, f8 = this.bytes, n16 = this.bytesPos; i10 < r15; ) {
        var a15;
        void 0 === (a15 = f8[n16++]) && o11("Bad encoding in flate stream"), s10 |= a15 << i10, i10 += 8;
      }
      var h7 = e7[s10 & (1 << r15) - 1], u11 = h7 >> 16, l7 = 65535 & h7;
      return (0 == i10 || i10 < u11 || 0 == u11) && o11("Bad encoding in flate stream"), this.codeBuf = s10 >> u11, this.codeSize = i10 - u11, this.bytesPos = n16, l7;
    }, n15.prototype.generateHuffmanTable = function(t8) {
      for (var e7 = t8.length, r15 = 0, i10 = 0; i10 < e7; ++i10) t8[i10] > r15 && (r15 = t8[i10]);
      for (var s10 = 1 << r15, f8 = new Uint32Array(s10), o12 = 1, n16 = 0, a15 = 2; o12 <= r15; ++o12, n16 <<= 1, a15 <<= 1) for (var h7 = 0; h7 < e7; ++h7) if (t8[h7] == o12) {
        var u11 = 0, l7 = n16;
        for (i10 = 0; i10 < o12; ++i10) u11 = u11 << 1 | 1 & l7, l7 >>= 1;
        for (i10 = u11; i10 < s10; i10 += a15) f8[i10] = o12 << 16 | h7;
        ++n16;
      }
      return [f8, r15];
    }, n15.prototype.readBlock = function() {
      function t8(t9, e7, r15, i10, s10) {
        for (var f8 = t9.getBits(r15) + i10; f8-- > 0; ) e7[b4++] = s10;
      }
      var n16 = this.getBits(3);
      if (1 & n16 && (this.eof = true), 0 != (n16 >>= 1)) {
        var a15, h7;
        if (1 == n16) a15 = s9, h7 = f7;
        else if (2 == n16) {
          for (var u11 = this.getBits(5) + 257, l7 = this.getBits(5) + 1, c7 = this.getBits(4) + 4, d5 = Array(e6.length), b4 = 0; b4 < c7; ) d5[e6[b4++]] = this.getBits(3);
          for (var v5 = this.generateHuffmanTable(d5), g7 = 0, B4 = (b4 = 0, u11 + l7), p5 = new Array(B4); b4 < B4; ) {
            var y4 = this.getCode(v5);
            16 == y4 ? t8(this, p5, 2, 3, g7) : 17 == y4 ? t8(this, p5, 3, 3, g7 = 0) : 18 == y4 ? t8(this, p5, 7, 11, g7 = 0) : p5[b4++] = g7 = y4;
          }
          a15 = this.generateHuffmanTable(p5.slice(0, u11)), h7 = this.generateHuffmanTable(p5.slice(u11, B4));
        } else o11("Unknown block type in flate stream");
        for (var m7 = (x4 = this.buffer) ? x4.length : 0, k4 = this.bufferLength; ; ) {
          var w5 = this.getCode(a15);
          if (w5 < 256) k4 + 1 >= m7 && (m7 = (x4 = this.ensureBuffer(k4 + 1)).length), x4[k4++] = w5;
          else {
            if (256 == w5) return void (this.bufferLength = k4);
            var C5 = (w5 = r14[w5 -= 257]) >> 16;
            C5 > 0 && (C5 = this.getBits(C5)), g7 = (65535 & w5) + C5, w5 = this.getCode(h7), (C5 = (w5 = i9[w5]) >> 16) > 0 && (C5 = this.getBits(C5));
            var L3 = (65535 & w5) + C5;
            k4 + g7 >= m7 && (m7 = (x4 = this.ensureBuffer(k4 + g7)).length);
            for (var S4 = 0; S4 < g7; ++S4, ++k4) x4[k4] = x4[k4 - L3];
          }
        }
      } else {
        var A5, U3 = this.bytes, P4 = this.bytesPos;
        void 0 === (A5 = U3[P4++]) && o11("Bad block header in flate stream");
        var z = A5;
        void 0 === (A5 = U3[P4++]) && o11("Bad block header in flate stream"), z |= A5 << 8, void 0 === (A5 = U3[P4++]) && o11("Bad block header in flate stream");
        var H3 = A5;
        void 0 === (A5 = U3[P4++]) && o11("Bad block header in flate stream"), (H3 |= A5 << 8) != (65535 & ~z) && o11("Bad uncompressed block length in flate stream"), this.codeBuf = 0, this.codeSize = 0;
        var T4 = this.bufferLength, x4 = this.ensureBuffer(T4 + z), j3 = T4 + z;
        this.bufferLength = j3;
        for (var E3 = T4; E3 < j3; ++E3) {
          if (void 0 === (A5 = U3[P4++])) {
            this.eof = true;
            break;
          }
          x4[E3] = A5;
        }
        this.bytesPos = P4;
      }
    }, n15;
  }()) && (i8.exports = s8)), r3.exports;
  var t7, i8, s8;
}
var s3 = o(i());

// node_modules/@arcgis/core/layers/support/rasterFormats/ImageCanvasDecoder.js
var i2 = class _i {
  constructor(t7) {
    this._canvas = null, this._ctx = null, t7 && (this._canvas = t7.canvas, this._ctx = t7.ctx || t7.canvas && t7.canvas.getContext("2d"));
  }
  decode(n15, s8, r14) {
    if (!n15 || n15.byteLength < 10) throw new s("imagecanvasdecoder: decode", "required a valid encoded data as input.");
    let { width: c7 = 0, height: h7 = 0, format: o11 } = s8;
    const { applyJpegMask: l7 } = s8;
    if (l7 && (!c7 || !h7)) throw new s("imagecanvasdecoder: decode", "image width and height are needed to apply jpeg mask directly to canvas");
    return new Promise((t7, d5) => {
      let g7 = null;
      "jpg" === o11 && l7 && (g7 = _i._getMask(n15, { width: c7, height: h7 }));
      const w5 = new Blob([new Uint8Array(n15)], { type: "image/" + o11 == "jpg" ? "jpeg" : o11 }), v5 = URL.createObjectURL(w5), m7 = new Image();
      let _2;
      m7.src = v5, m7.onload = () => {
        if (URL.revokeObjectURL(v5), c(r14)) return void d5(u());
        c7 = m7.width, h7 = m7.height, this._canvas && this._ctx ? (this._canvas.width === c7 && this._canvas.height === h7 || (this._canvas.width = c7, this._canvas.height = h7), this._ctx.clearRect(0, 0, c7, h7)) : (this._canvas = document.createElement("canvas"), this._canvas.width = c7, this._canvas.height = h7, this._ctx = this._canvas.getContext("2d")), this._ctx.drawImage(m7, 0, 0);
        const n16 = this._ctx.getImageData(0, 0, c7, h7);
        let i8;
        if (_2 = n16.data, s8.renderOnCanvas) {
          if (g7) for (i8 = 0; i8 < g7.length; i8++) g7[i8] ? _2[4 * i8 + 3] = 255 : _2[4 * i8 + 3] = 0;
          return this._ctx.putImageData(n16, 0, 0), void t7(null);
        }
        const o12 = c7 * h7, l8 = new Uint8Array(o12), w6 = new Uint8Array(o12), p5 = new Uint8Array(o12);
        if (g7) for (i8 = 0; i8 < o12; i8++) l8[i8] = _2[4 * i8], w6[i8] = _2[4 * i8 + 1], p5[i8] = _2[4 * i8 + 2];
        else for (g7 = new Uint8Array(o12), i8 = 0; i8 < o12; i8++) l8[i8] = _2[4 * i8], w6[i8] = _2[4 * i8 + 1], p5[i8] = _2[4 * i8 + 2], g7[i8] = _2[4 * i8 + 3];
        t7({ width: c7, height: h7, pixels: [l8, w6, p5], mask: g7, pixelType: "u8" });
      }, m7.onerror = () => {
        URL.revokeObjectURL(v5), d5("cannot load image");
      };
    });
  }
  static _getMask(t7, e6) {
    let a15 = null;
    try {
      const i8 = new Uint8Array(t7), s8 = Math.ceil(i8.length / 2);
      let r14 = 0;
      const c7 = i8.length - 2;
      for (r14 = s8; r14 < c7 && (255 !== i8[r14] || 217 !== i8[r14 + 1]); r14++) ;
      if (r14 += 2, r14 < i8.length - 1) {
        const t8 = new s3(i8.subarray(r14)).getBytes();
        a15 = new Uint8Array(e6.width * e6.height);
        let s9 = 0;
        for (let e7 = 0; e7 < t8.length; e7++) for (let n15 = 7; n15 >= 0; n15--) a15[s9++] = t8[e7] >> n15 & 1;
      }
    } catch (i8) {
    }
    return a15;
  }
};

// node_modules/@arcgis/core/chunks/Jpg.js
var n5;
var r4 = { exports: {} };
function o4() {
  return n5 || (n5 = 1, e6 = r4, o11 = function() {
    var e7 = function() {
      function e8(e9) {
        this.message = "JPEG error: " + e9;
      }
      return e8.prototype = new Error(), e8.prototype.name = "JpegError", e8.constructor = e8, e8;
    }();
    return function() {
      if (!self || !self.Uint8ClampedArray) return null;
      var n15 = new Uint8Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]), r14 = 4017, o12 = 799, a16 = 3406, t7 = 2276, i8 = 1567, s8 = 3784, c7 = 5793, f7 = 2896;
      function l7() {
        this.decodeTransform = null, this.colorTransform = -1;
      }
      function u11(e8, n16) {
        for (var r15, o13, a17 = 0, t8 = [], i9 = 16; i9 > 0 && !e8[i9 - 1]; ) i9--;
        t8.push({ children: [], index: 0 });
        var s9, c8 = t8[0];
        for (r15 = 0; r15 < i9; r15++) {
          for (o13 = 0; o13 < e8[r15]; o13++) {
            for ((c8 = t8.pop()).children[c8.index] = n16[a17]; c8.index > 0; ) c8 = t8.pop();
            for (c8.index++, t8.push(c8); t8.length <= r15; ) t8.push(s9 = { children: [], index: 0 }), c8.children[c8.index] = s9.children, c8 = s9;
            a17++;
          }
          r15 + 1 < i9 && (t8.push(s9 = { children: [], index: 0 }), c8.children[c8.index] = s9.children, c8 = s9);
        }
        return t8[0].children;
      }
      function h7(e8, n16, r15) {
        return 64 * ((e8.blocksPerLine + 1) * n16 + r15);
      }
      function v5(r15, o13, a17, t8, i9, s9, c8, f8, l8) {
        var u12 = a17.mcusPerLine, v6 = a17.progressive, m8 = o13, d6 = 0, b4 = 0;
        function k4() {
          if (b4 > 0) return b4--, d6 >> b4 & 1;
          if (255 === (d6 = r15[o13++])) {
            var n16 = r15[o13++];
            if (n16) throw new e7("unexpected marker " + (d6 << 8 | n16).toString(16));
          }
          return b4 = 7, d6 >>> 7;
        }
        function g7(n16) {
          for (var r16 = n16; ; ) {
            if ("number" == typeof (r16 = r16[k4()])) return r16;
            if ("object" != typeof r16) throw new e7("invalid huffman sequence");
          }
        }
        function C5(e8) {
          for (var n16 = 0; e8 > 0; ) n16 = n16 << 1 | k4(), e8--;
          return n16;
        }
        function w5(e8) {
          if (1 === e8) return 1 === k4() ? 1 : -1;
          var n16 = C5(e8);
          return n16 >= 1 << e8 - 1 ? n16 : n16 + (-1 << e8) + 1;
        }
        function x4(e8, r16) {
          var o14 = g7(e8.huffmanTableDC), a18 = 0 === o14 ? 0 : w5(o14);
          e8.blockData[r16] = e8.pred += a18;
          for (var t9 = 1; t9 < 64; ) {
            var i10 = g7(e8.huffmanTableAC), s10 = 15 & i10, c9 = i10 >> 4;
            if (0 !== s10) {
              var f9 = n15[t9 += c9];
              e8.blockData[r16 + f9] = w5(s10), t9++;
            } else {
              if (c9 < 15) break;
              t9 += 16;
            }
          }
        }
        function y4(e8, n16) {
          var r16 = g7(e8.huffmanTableDC), o14 = 0 === r16 ? 0 : w5(r16) << l8;
          e8.blockData[n16] = e8.pred += o14;
        }
        function D4(e8, n16) {
          e8.blockData[n16] |= k4() << l8;
        }
        var T4 = 0;
        function P4(e8, r16) {
          if (T4 > 0) T4--;
          else for (var o14 = s9, a18 = c8; o14 <= a18; ) {
            var t9 = g7(e8.huffmanTableAC), i10 = 15 & t9, f9 = t9 >> 4;
            if (0 !== i10) {
              var u13 = n15[o14 += f9];
              e8.blockData[r16 + u13] = w5(i10) * (1 << l8), o14++;
            } else {
              if (f9 < 15) {
                T4 = C5(f9) + (1 << f9) - 1;
                break;
              }
              o14 += 16;
            }
          }
        }
        var L3, A5 = 0;
        function _2(r16, o14) {
          for (var a18, t9, i10 = s9, f9 = c8, u13 = 0; i10 <= f9; ) {
            var h8 = n15[i10];
            switch (A5) {
              case 0:
                if (u13 = (t9 = g7(r16.huffmanTableAC)) >> 4, 0 == (a18 = 15 & t9)) u13 < 15 ? (T4 = C5(u13) + (1 << u13), A5 = 4) : (u13 = 16, A5 = 1);
                else {
                  if (1 !== a18) throw new e7("invalid ACn encoding");
                  L3 = w5(a18), A5 = u13 ? 2 : 3;
                }
                continue;
              case 1:
              case 2:
                r16.blockData[o14 + h8] ? r16.blockData[o14 + h8] += k4() << l8 : 0 == --u13 && (A5 = 2 === A5 ? 3 : 0);
                break;
              case 3:
                r16.blockData[o14 + h8] ? r16.blockData[o14 + h8] += k4() << l8 : (r16.blockData[o14 + h8] = L3 << l8, A5 = 0);
                break;
              case 4:
                r16.blockData[o14 + h8] && (r16.blockData[o14 + h8] += k4() << l8);
            }
            i10++;
          }
          4 === A5 && 0 == --T4 && (A5 = 0);
        }
        function U3(e8, n16, r16, o14, a18) {
          var t9 = r16 % u12;
          n16(e8, h7(e8, (r16 / u12 | 0) * e8.v + o14, t9 * e8.h + a18));
        }
        function z(e8, n16, r16) {
          n16(e8, h7(e8, r16 / e8.blocksPerLine | 0, r16 % e8.blocksPerLine));
        }
        var I4, M3, Y2, q, S4, H3, R3 = t8.length;
        H3 = v6 ? 0 === s9 ? 0 === f8 ? y4 : D4 : 0 === f8 ? P4 : _2 : x4;
        var j3, E3, J, V3, B4 = 0;
        for (E3 = 1 === R3 ? t8[0].blocksPerLine * t8[0].blocksPerColumn : u12 * a17.mcusPerColumn; B4 < E3; ) {
          var N2 = i9 ? Math.min(E3 - B4, i9) : E3;
          for (M3 = 0; M3 < R3; M3++) t8[M3].pred = 0;
          if (T4 = 0, 1 === R3) for (I4 = t8[0], S4 = 0; S4 < N2; S4++) z(I4, H3, B4), B4++;
          else for (S4 = 0; S4 < N2; S4++) {
            for (M3 = 0; M3 < R3; M3++) for (J = (I4 = t8[M3]).h, V3 = I4.v, Y2 = 0; Y2 < V3; Y2++) for (q = 0; q < J; q++) U3(I4, H3, B4, Y2, q);
            B4++;
          }
          b4 = 0, (j3 = p5(r15, o13)) && j3.invalid && (console.log("decodeScan - unexpected MCU data, next marker is: " + j3.invalid), o13 = j3.offset);
          var G3 = j3 && j3.marker;
          if (!G3 || G3 <= 65280) throw new e7("marker was not found");
          if (!(G3 >= 65488 && G3 <= 65495)) break;
          o13 += 2;
        }
        return (j3 = p5(r15, o13)) && j3.invalid && (console.log("decodeScan - unexpected Scan data, next marker is: " + j3.invalid), o13 = j3.offset), o13 - m8;
      }
      function m7(n16, l8, u12) {
        var h8, v6, m8, d6, p6, b4, k4, g7, C5, w5, x4, y4, D4, T4, P4, L3, A5, _2 = n16.quantizationTable, U3 = n16.blockData;
        if (!_2) throw new e7("missing required Quantization Table.");
        for (var z = 0; z < 64; z += 8) C5 = U3[l8 + z], w5 = U3[l8 + z + 1], x4 = U3[l8 + z + 2], y4 = U3[l8 + z + 3], D4 = U3[l8 + z + 4], T4 = U3[l8 + z + 5], P4 = U3[l8 + z + 6], L3 = U3[l8 + z + 7], C5 *= _2[z], w5 | x4 | y4 | D4 | T4 | P4 | L3 ? (w5 *= _2[z + 1], x4 *= _2[z + 2], y4 *= _2[z + 3], D4 *= _2[z + 4], T4 *= _2[z + 5], P4 *= _2[z + 6], L3 *= _2[z + 7], v6 = (h8 = (h8 = c7 * C5 + 128 >> 8) + (v6 = c7 * D4 + 128 >> 8) + 1 >> 1) - v6, A5 = (m8 = x4) * s8 + (d6 = P4) * i8 + 128 >> 8, m8 = m8 * i8 - d6 * s8 + 128 >> 8, k4 = (p6 = (p6 = f7 * (w5 - L3) + 128 >> 8) + (k4 = T4 << 4) + 1 >> 1) - k4, b4 = (g7 = (g7 = f7 * (w5 + L3) + 128 >> 8) + (b4 = y4 << 4) + 1 >> 1) - b4, d6 = (h8 = h8 + (d6 = A5) + 1 >> 1) - d6, m8 = (v6 = v6 + m8 + 1 >> 1) - m8, A5 = p6 * t7 + g7 * a16 + 2048 >> 12, p6 = p6 * a16 - g7 * t7 + 2048 >> 12, g7 = A5, A5 = b4 * o12 + k4 * r14 + 2048 >> 12, b4 = b4 * r14 - k4 * o12 + 2048 >> 12, k4 = A5, u12[z] = h8 + g7, u12[z + 7] = h8 - g7, u12[z + 1] = v6 + k4, u12[z + 6] = v6 - k4, u12[z + 2] = m8 + b4, u12[z + 5] = m8 - b4, u12[z + 3] = d6 + p6, u12[z + 4] = d6 - p6) : (A5 = c7 * C5 + 512 >> 10, u12[z] = A5, u12[z + 1] = A5, u12[z + 2] = A5, u12[z + 3] = A5, u12[z + 4] = A5, u12[z + 5] = A5, u12[z + 6] = A5, u12[z + 7] = A5);
        for (var I4 = 0; I4 < 8; ++I4) C5 = u12[I4], (w5 = u12[I4 + 8]) | (x4 = u12[I4 + 16]) | (y4 = u12[I4 + 24]) | (D4 = u12[I4 + 32]) | (T4 = u12[I4 + 40]) | (P4 = u12[I4 + 48]) | (L3 = u12[I4 + 56]) ? (v6 = (h8 = 4112 + ((h8 = c7 * C5 + 2048 >> 12) + (v6 = c7 * D4 + 2048 >> 12) + 1 >> 1)) - v6, A5 = (m8 = x4) * s8 + (d6 = P4) * i8 + 2048 >> 12, m8 = m8 * i8 - d6 * s8 + 2048 >> 12, d6 = A5, k4 = (p6 = (p6 = f7 * (w5 - L3) + 2048 >> 12) + (k4 = T4) + 1 >> 1) - k4, b4 = (g7 = (g7 = f7 * (w5 + L3) + 2048 >> 12) + (b4 = y4) + 1 >> 1) - b4, A5 = p6 * t7 + g7 * a16 + 2048 >> 12, p6 = p6 * a16 - g7 * t7 + 2048 >> 12, g7 = A5, A5 = b4 * o12 + k4 * r14 + 2048 >> 12, b4 = b4 * r14 - k4 * o12 + 2048 >> 12, C5 = (C5 = (h8 = h8 + d6 + 1 >> 1) + g7) < 16 ? 0 : C5 >= 4080 ? 255 : C5 >> 4, w5 = (w5 = (v6 = v6 + m8 + 1 >> 1) + (k4 = A5)) < 16 ? 0 : w5 >= 4080 ? 255 : w5 >> 4, x4 = (x4 = (m8 = v6 - m8) + b4) < 16 ? 0 : x4 >= 4080 ? 255 : x4 >> 4, y4 = (y4 = (d6 = h8 - d6) + p6) < 16 ? 0 : y4 >= 4080 ? 255 : y4 >> 4, D4 = (D4 = d6 - p6) < 16 ? 0 : D4 >= 4080 ? 255 : D4 >> 4, T4 = (T4 = m8 - b4) < 16 ? 0 : T4 >= 4080 ? 255 : T4 >> 4, P4 = (P4 = v6 - k4) < 16 ? 0 : P4 >= 4080 ? 255 : P4 >> 4, L3 = (L3 = h8 - g7) < 16 ? 0 : L3 >= 4080 ? 255 : L3 >> 4, U3[l8 + I4] = C5, U3[l8 + I4 + 8] = w5, U3[l8 + I4 + 16] = x4, U3[l8 + I4 + 24] = y4, U3[l8 + I4 + 32] = D4, U3[l8 + I4 + 40] = T4, U3[l8 + I4 + 48] = P4, U3[l8 + I4 + 56] = L3) : (A5 = (A5 = c7 * C5 + 8192 >> 14) < -2040 ? 0 : A5 >= 2024 ? 255 : A5 + 2056 >> 4, U3[l8 + I4] = A5, U3[l8 + I4 + 8] = A5, U3[l8 + I4 + 16] = A5, U3[l8 + I4 + 24] = A5, U3[l8 + I4 + 32] = A5, U3[l8 + I4 + 40] = A5, U3[l8 + I4 + 48] = A5, U3[l8 + I4 + 56] = A5);
      }
      function d5(e8, n16) {
        for (var r15 = n16.blocksPerLine, o13 = n16.blocksPerColumn, a17 = new Int16Array(64), t8 = 0; t8 < o13; t8++) for (var i9 = 0; i9 < r15; i9++) m7(n16, h7(n16, t8, i9), a17);
        return n16.blockData;
      }
      function p5(e8, n16, r15) {
        function o13(n17) {
          return e8[n17] << 8 | e8[n17 + 1];
        }
        var a17 = e8.length - 1, t8 = r15 < n16 ? r15 : n16;
        if (n16 >= a17) return null;
        var i9 = o13(n16);
        if (i9 >= 65472 && i9 <= 65534) return { invalid: null, marker: i9, offset: n16 };
        for (var s9 = o13(t8); !(s9 >= 65472 && s9 <= 65534); ) {
          if (++t8 >= a17) return null;
          s9 = o13(t8);
        }
        return { invalid: i9.toString(16), marker: s9, offset: t8 };
      }
      return l7.prototype = { parse: function(r15) {
        function o13() {
          var e8 = r15[c8] << 8 | r15[c8 + 1];
          return c8 += 2, e8;
        }
        function a17() {
          var e8 = o13(), n16 = c8 + e8 - 2, a18 = p5(r15, n16, c8);
          a18 && a18.invalid && (console.log("readDataBlock - incorrect length, next marker is: " + a18.invalid), n16 = a18.offset);
          var t9 = r15.subarray(c8, n16);
          return c8 += t9.length, t9;
        }
        function t8(e8) {
          for (var n16 = Math.ceil(e8.samplesPerLine / 8 / e8.maxH), r16 = Math.ceil(e8.scanLines / 8 / e8.maxV), o14 = 0; o14 < e8.components.length; o14++) {
            R3 = e8.components[o14];
            var a18 = Math.ceil(Math.ceil(e8.samplesPerLine / 8) * R3.h / e8.maxH), t9 = Math.ceil(Math.ceil(e8.scanLines / 8) * R3.v / e8.maxV), i10 = n16 * R3.h, s10 = r16 * R3.v * 64 * (i10 + 1);
            R3.blockData = new Int16Array(s10), R3.blocksPerLine = a18, R3.blocksPerColumn = t9;
          }
          e8.mcusPerLine = n16, e8.mcusPerColumn = r16;
        }
        var i9, s9, c8 = 0, f8 = null, l8 = null, h8 = [], m8 = [], b4 = [], k4 = o13();
        if (65496 !== k4) throw new e7("SOI not found");
        for (k4 = o13(); 65497 !== k4; ) {
          var g7, C5, w5;
          switch (k4) {
            case 65504:
            case 65505:
            case 65506:
            case 65507:
            case 65508:
            case 65509:
            case 65510:
            case 65511:
            case 65512:
            case 65513:
            case 65514:
            case 65515:
            case 65516:
            case 65517:
            case 65518:
            case 65519:
            case 65534:
              var x4 = a17();
              65504 === k4 && 74 === x4[0] && 70 === x4[1] && 73 === x4[2] && 70 === x4[3] && 0 === x4[4] && (f8 = { version: { major: x4[5], minor: x4[6] }, densityUnits: x4[7], xDensity: x4[8] << 8 | x4[9], yDensity: x4[10] << 8 | x4[11], thumbWidth: x4[12], thumbHeight: x4[13], thumbData: x4.subarray(14, 14 + 3 * x4[12] * x4[13]) }), 65518 === k4 && 65 === x4[0] && 100 === x4[1] && 111 === x4[2] && 98 === x4[3] && 101 === x4[4] && (l8 = { version: x4[5] << 8 | x4[6], flags0: x4[7] << 8 | x4[8], flags1: x4[9] << 8 | x4[10], transformCode: x4[11] });
              break;
            case 65499:
              for (var y4 = o13() + c8 - 2; c8 < y4; ) {
                var D4 = r15[c8++], T4 = new Uint16Array(64);
                if (D4 >> 4) {
                  if (D4 >> 4 != 1) throw new e7("DQT - invalid table spec");
                  for (C5 = 0; C5 < 64; C5++) T4[n15[C5]] = o13();
                } else for (C5 = 0; C5 < 64; C5++) T4[n15[C5]] = r15[c8++];
                h8[15 & D4] = T4;
              }
              break;
            case 65472:
            case 65473:
            case 65474:
              if (i9) throw new e7("Only single frame JPEGs supported");
              o13(), (i9 = {}).extended = 65473 === k4, i9.progressive = 65474 === k4, i9.precision = r15[c8++], i9.scanLines = o13(), i9.samplesPerLine = o13(), i9.components = [], i9.componentIds = {};
              var P4, L3 = r15[c8++], A5 = 0, _2 = 0;
              for (g7 = 0; g7 < L3; g7++) {
                P4 = r15[c8];
                var U3 = r15[c8 + 1] >> 4, z = 15 & r15[c8 + 1];
                A5 < U3 && (A5 = U3), _2 < z && (_2 = z);
                var I4 = r15[c8 + 2];
                w5 = i9.components.push({ h: U3, v: z, quantizationId: I4, quantizationTable: null }), i9.componentIds[P4] = w5 - 1, c8 += 3;
              }
              i9.maxH = A5, i9.maxV = _2, t8(i9);
              break;
            case 65476:
              var M3 = o13();
              for (g7 = 2; g7 < M3; ) {
                var Y2 = r15[c8++], q = new Uint8Array(16), S4 = 0;
                for (C5 = 0; C5 < 16; C5++, c8++) S4 += q[C5] = r15[c8];
                var H3 = new Uint8Array(S4);
                for (C5 = 0; C5 < S4; C5++, c8++) H3[C5] = r15[c8];
                g7 += 17 + S4, (Y2 >> 4 ? m8 : b4)[15 & Y2] = u11(q, H3);
              }
              break;
            case 65501:
              o13(), s9 = o13();
              break;
            case 65498:
              o13();
              var R3, j3 = r15[c8++], E3 = [];
              for (g7 = 0; g7 < j3; g7++) {
                var J = i9.componentIds[r15[c8++]];
                R3 = i9.components[J];
                var V3 = r15[c8++];
                R3.huffmanTableDC = b4[V3 >> 4], R3.huffmanTableAC = m8[15 & V3], E3.push(R3);
              }
              var B4 = r15[c8++], N2 = r15[c8++], G3 = r15[c8++], O4 = v5(r15, c8, i9, E3, s9, B4, N2, G3 >> 4, 15 & G3);
              c8 += O4;
              break;
            case 65535:
              255 !== r15[c8] && c8--;
              break;
            default:
              if (255 === r15[c8 - 3] && r15[c8 - 2] >= 192 && r15[c8 - 2] <= 254) {
                c8 -= 3;
                break;
              }
              throw new e7("unknown marker " + k4.toString(16));
          }
          k4 = o13();
        }
        for (this.width = i9.samplesPerLine, this.height = i9.scanLines, this.jfif = f8, this.eof = c8, this.adobe = l8, this.components = [], g7 = 0; g7 < i9.components.length; g7++) {
          var Q = h8[(R3 = i9.components[g7]).quantizationId];
          Q && (R3.quantizationTable = Q), this.components.push({ output: d5(i9, R3), scaleX: R3.h / i9.maxH, scaleY: R3.v / i9.maxV, blocksPerLine: R3.blocksPerLine, blocksPerColumn: R3.blocksPerColumn });
        }
        this.numComponents = this.components.length;
      }, _getLinearizedBlockData: function(e8, n16) {
        var r15, o13, a17, t8, i9, s9, c8, f8, l8, u12, h8, v6 = this.width / e8, m8 = this.height / n16, d6 = 0, p6 = this.components.length, b4 = e8 * n16 * p6, k4 = new Uint8ClampedArray(b4), g7 = new Uint32Array(e8), C5 = 4294967288;
        for (c8 = 0; c8 < p6; c8++) {
          for (o13 = (r15 = this.components[c8]).scaleX * v6, a17 = r15.scaleY * m8, d6 = c8, h8 = r15.output, t8 = r15.blocksPerLine + 1 << 3, i9 = 0; i9 < e8; i9++) f8 = 0 | i9 * o13, g7[i9] = (f8 & C5) << 3 | 7 & f8;
          for (s9 = 0; s9 < n16; s9++) for (u12 = t8 * ((f8 = 0 | s9 * a17) & C5) | (7 & f8) << 3, i9 = 0; i9 < e8; i9++) k4[d6] = h8[u12 + g7[i9]], d6 += p6;
        }
        var w5 = this.decodeTransform;
        if (w5) for (c8 = 0; c8 < b4; ) for (f8 = 0, l8 = 0; f8 < p6; f8++, c8++, l8 += 2) k4[c8] = (k4[c8] * w5[l8] >> 8) + w5[l8 + 1];
        return k4;
      }, _isColorConversionNeeded: function() {
        return this.adobe ? !!this.adobe.transformCode : 3 === this.numComponents ? 0 !== this.colorTransform : 1 === this.colorTransform;
      }, _convertYccToRgb: function(e8) {
        for (var n16, r15, o13, a17 = 0, t8 = e8.length; a17 < t8; a17 += 3) n16 = e8[a17], r15 = e8[a17 + 1], o13 = e8[a17 + 2], e8[a17] = n16 - 179.456 + 1.402 * o13, e8[a17 + 1] = n16 + 135.459 - 0.344 * r15 - 0.714 * o13, e8[a17 + 2] = n16 - 226.816 + 1.772 * r15;
        return e8;
      }, _convertYcckToRgb: function(e8) {
        for (var n16, r15, o13, a17, t8 = 0, i9 = 0, s9 = e8.length; i9 < s9; i9 += 4) n16 = e8[i9], r15 = e8[i9 + 1], o13 = e8[i9 + 2], a17 = e8[i9 + 3], e8[t8++] = r15 * (-660635669420364e-19 * r15 + 437130475926232e-18 * o13 - 54080610064599e-18 * n16 + 48449797120281e-17 * a17 - 0.154362151871126) - 122.67195406894 + o13 * (-957964378445773e-18 * o13 + 817076911346625e-18 * n16 - 0.00477271405408747 * a17 + 1.53380253221734) + n16 * (961250184130688e-18 * n16 - 0.00266257332283933 * a17 + 0.48357088451265) + a17 * (-336197177618394e-18 * a17 + 0.484791561490776), e8[t8++] = 107.268039397724 + r15 * (219927104525741e-19 * r15 - 640992018297945e-18 * o13 + 659397001245577e-18 * n16 + 426105652938837e-18 * a17 - 0.176491792462875) + o13 * (-778269941513683e-18 * o13 + 0.00130872261408275 * n16 + 770482631801132e-18 * a17 - 0.151051492775562) + n16 * (0.00126935368114843 * n16 - 0.00265090189010898 * a17 + 0.25802910206845) + a17 * (-318913117588328e-18 * a17 - 0.213742400323665), e8[t8++] = r15 * (-570115196973677e-18 * r15 - 263409051004589e-19 * o13 + 0.0020741088115012 * n16 - 0.00288260236853442 * a17 + 0.814272968359295) - 20.810012546947 + o13 * (-153496057440975e-19 * o13 - 132689043961446e-18 * n16 + 560833691242812e-18 * a17 - 0.195152027534049) + n16 * (0.00174418132927582 * n16 - 0.00255243321439347 * a17 + 0.116935020465145) + a17 * (-343531996510555e-18 * a17 + 0.24165260232407);
        return e8;
      }, _convertYcckToCmyk: function(e8) {
        for (var n16, r15, o13, a17 = 0, t8 = e8.length; a17 < t8; a17 += 4) n16 = e8[a17], r15 = e8[a17 + 1], o13 = e8[a17 + 2], e8[a17] = 434.456 - n16 - 1.402 * o13, e8[a17 + 1] = 119.541 - n16 + 0.344 * r15 + 0.714 * o13, e8[a17 + 2] = 481.816 - n16 - 1.772 * r15;
        return e8;
      }, _convertCmykToRgb: function(e8) {
        for (var n16, r15, o13, a17, t8 = 0, i9 = 1 / 255, s9 = 0, c8 = e8.length; s9 < c8; s9 += 4) n16 = e8[s9] * i9, r15 = e8[s9 + 1] * i9, o13 = e8[s9 + 2] * i9, a17 = e8[s9 + 3] * i9, e8[t8++] = 255 + n16 * (-4.387332384609988 * n16 + 54.48615194189176 * r15 + 18.82290502165302 * o13 + 212.25662451639585 * a17 - 285.2331026137004) + r15 * (1.7149763477362134 * r15 - 5.6096736904047315 * o13 - 17.873870861415444 * a17 - 5.497006427196366) + o13 * (-2.5217340131683033 * o13 - 21.248923337353073 * a17 + 17.5119270841813) - a17 * (21.86122147463605 * a17 + 189.48180835922747), e8[t8++] = 255 + n16 * (8.841041422036149 * n16 + 60.118027045597366 * r15 + 6.871425592049007 * o13 + 31.159100130055922 * a17 - 79.2970844816548) + r15 * (-15.310361306967817 * r15 + 17.575251261109482 * o13 + 131.35250912493976 * a17 - 190.9453302588951) + o13 * (4.444339102852739 * o13 + 9.8632861493405 * a17 - 24.86741582555878) - a17 * (20.737325471181034 * a17 + 187.80453709719578), e8[t8++] = 255 + n16 * (0.8842522430003296 * n16 + 8.078677503112928 * r15 + 30.89978309703729 * o13 - 0.23883238689178934 * a17 - 14.183576799673286) + r15 * (10.49593273432072 * r15 + 63.02378494754052 * o13 + 50.606957656360734 * a17 - 112.23884253719248) + o13 * (0.03296041114873217 * o13 + 115.60384449646641 * a17 - 193.58209356861505) - a17 * (22.33816807309886 * a17 + 180.12613974708367);
        return e8;
      }, getData: function(n16, r15, o13) {
        if (this.numComponents > 4) throw new e7("Unsupported color mode");
        var a17 = this._getLinearizedBlockData(n16, r15);
        if (1 === this.numComponents && o13) {
          for (var t8 = a17.length, i9 = new Uint8ClampedArray(3 * t8), s9 = 0, c8 = 0; c8 < t8; c8++) {
            var f8 = a17[c8];
            i9[s9++] = f8, i9[s9++] = f8, i9[s9++] = f8;
          }
          return i9;
        }
        if (3 === this.numComponents && this._isColorConversionNeeded()) return this._convertYccToRgb(a17);
        if (4 === this.numComponents) {
          if (this._isColorConversionNeeded()) return o13 ? this._convertYcckToRgb(a17) : this._convertYcckToCmyk(a17);
          if (o13) return this._convertCmykToRgb(a17);
        }
        return a17;
      } }, l7;
    }();
  }, void 0 !== (a15 = o11()) && (e6.exports = a15)), r4.exports;
  var e6, o11, a15;
}
var a6 = o(o4());

// node_modules/@arcgis/core/layers/support/rasterFormats/JpgPlus.js
var r5 = class {
  static decode(r14, n15 = false) {
    const s8 = new Uint8Array(r14), o11 = new a6();
    o11.parse(s8);
    const { width: a15, height: i8, numComponents: f7, eof: h7 } = o11, l7 = o11.getData(a15, i8, true), c7 = a15 * i8;
    let u11, g7 = null, p5 = 0, w5 = 0, m7 = 0;
    if (!n15 && h7 < s8.length - 1) try {
      const t7 = new s3(s8.subarray(h7)).getBytes();
      g7 = new Uint8Array(c7);
      let r15 = 0;
      for (p5 = 0; p5 < t7.length; p5++) for (m7 = 7; m7 >= 0; m7--) g7[r15++] = t7[p5] >> m7 & 1;
    } catch {
    }
    if (1 === f7 && l7.length === a15 * i8) {
      const t7 = new Uint8Array(l7.buffer);
      u11 = [t7, t7, t7];
    } else {
      for (u11 = [], p5 = 0; p5 < 3; p5++) u11.push(new Uint8Array(c7));
      for (m7 = 0, w5 = 0; w5 < c7; w5++) for (p5 = 0; p5 < 3; p5++) u11[p5][w5] = l7[m7++];
    }
    return { width: a15, height: i8, pixels: u11, mask: g7 };
  }
};

// node_modules/@arcgis/core/layers/support/rasterFormats/Lerc.js
var t = [{ pixelType: "S8", size: 1, ctor: Int8Array, range: [-128, 127] }, { pixelType: "U8", size: 1, ctor: Uint8Array, range: [0, 255] }, { pixelType: "S16", size: 2, ctor: Int16Array, range: [-32768, 32767] }, { pixelType: "U16", size: 2, ctor: Uint16Array, range: [0, 65536] }, { pixelType: "S32", size: 4, ctor: Int32Array, range: [-2147483648, 2147483647] }, { pixelType: "U32", size: 4, ctor: Uint32Array, range: [0, 4294967296] }, { pixelType: "F32", size: 4, ctor: Float32Array, range: [-34027999387901484e22, 34027999387901484e22] }, { pixelType: "F64", size: 8, ctor: Float64Array, range: [-17976931348623157e292, 17976931348623157e292] }];
var n6 = null;
function r6() {
  return n6 || (n6 = import("./lerc-wasm-DS3L46X2.js").then((e6) => e6.l).then(({ default: t7 }) => t7({ locateFile: (t8) => n4(`esri/layers/support/rasterFormats/${t8}`) })).then((e6) => {
    l3(e6);
  }), n6);
}
var a7 = { getBlobInfo: null, decode: null };
function o5(e6) {
  return 16 + (e6 >> 3 << 3);
}
function s4(e6, t7, n15) {
  n15.set(e6.slice(t7, t7 + n15.length));
}
function l3(e6) {
  const { _malloc: n15, _free: r14, _lerc_getBlobInfo: l7, _lerc_getDataRanges: i8, _lerc_decode_4D: u11, asm: f7 } = e6;
  let c7;
  const h7 = Object.values(f7).find((t7) => t7 && "buffer" in t7 && t7.buffer === e6.HEAPU8.buffer), y4 = (e7) => {
    const t7 = e7.map((e8) => o5(e8)), r15 = t7.reduce((e8, t8) => e8 + t8), a15 = n15(r15);
    c7 = new Uint8Array(h7.buffer);
    let s8 = t7[0];
    t7[0] = a15;
    for (let n16 = 1; n16 < t7.length; n16++) {
      const e8 = t7[n16];
      t7[n16] = t7[n16 - 1] + s8, s8 = e8;
    }
    return t7;
  };
  a7.getBlobInfo = (e7) => {
    const t7 = 12, n16 = 3, a15 = new Uint8Array(4 * t7), o11 = new Uint8Array(8 * n16), [u12, f8, p5] = y4([e7.length, a15.length, o11.length]);
    c7.set(e7, u12), c7.set(a15, f8), c7.set(o11, p5);
    let g7 = l7(u12, e7.length, f8, p5, t7, n16);
    if (g7) throw r14(u12), new Error(`lerc-getBlobInfo: error code is ${g7}`);
    c7 = new Uint8Array(h7.buffer), s4(c7, f8, a15), s4(c7, p5, o11);
    const d5 = new Uint32Array(a15.buffer), b4 = new Float64Array(o11.buffer), [w5, A5, , m7, U3, x4, C5, V3, T4, D4, z] = d5, F2 = { version: w5, depthCount: D4, width: m7, height: U3, validPixelCount: C5, bandCount: x4, blobSize: V3, maskCount: T4, dataType: A5, minValue: b4[0], maxValue: b4[1], maxZerror: b4[2], statistics: [], bandCountWithNoData: z };
    if (z && D4 > 1) return r14(u12), F2;
    if (1 === D4 && 1 === x4) return r14(u12), F2.statistics.push({ minValue: b4[0], maxValue: b4[1] }), F2;
    const I4 = D4 * x4 * 8, _2 = new Uint8Array(I4), k4 = new Uint8Array(I4);
    let B4 = u12, S4 = 0, v5 = 0, E3 = false;
    if (c7.byteLength < u12 + 2 * I4 ? (r14(u12), E3 = true, [B4, S4, v5] = y4([e7.length, I4, I4]), c7.set(e7, B4)) : [S4, v5] = y4([I4, I4]), c7.set(_2, S4), c7.set(k4, v5), g7 = i8(B4, e7.length, D4, x4, S4, v5), g7) throw r14(B4), E3 || r14(S4), new Error(`lerc-getDataRanges: error code is ${g7}`);
    c7 = new Uint8Array(h7.buffer), s4(c7, S4, _2), s4(c7, v5, k4);
    const O4 = new Float64Array(_2.buffer), $ = new Float64Array(k4.buffer), j3 = F2.statistics;
    for (let r15 = 0; r15 < x4; r15++) if (D4 > 1) {
      const e8 = O4.slice(r15 * D4, (r15 + 1) * D4), t8 = $.slice(r15 * D4, (r15 + 1) * D4), n17 = Math.min.apply(null, e8), a16 = Math.max.apply(null, t8);
      j3.push({ minValue: n17, maxValue: a16, depthStats: { minValues: e8, maxValues: t8 } });
    } else j3.push({ minValue: O4[r15], maxValue: $[r15] });
    return r14(B4), E3 || r14(S4), F2;
  }, a7.decode = (e7, n16) => {
    const { maskCount: a15, depthCount: o11, bandCount: l8, width: i9, height: f8, dataType: p5, bandCountWithNoData: g7 } = n16, d5 = t[p5], b4 = i9 * f8, w5 = new Uint8Array(b4 * l8), A5 = b4 * o11 * l8 * d5.size, m7 = new Uint8Array(A5), U3 = new Uint8Array(l8), x4 = new Uint8Array(8 * l8), [C5, V3, T4, D4, z] = y4([e7.length, w5.length, m7.length, U3.length, x4.length]);
    c7.set(e7, C5), c7.set(w5, V3), c7.set(m7, T4), c7.set(U3, D4), c7.set(x4, z);
    const F2 = u11(C5, e7.length, a15, V3, o11, i9, f8, l8, p5, T4, D4, z);
    if (F2) throw r14(C5), new Error(`lerc-decode: error code is ${F2}`);
    c7 = new Uint8Array(h7.buffer), s4(c7, T4, m7), s4(c7, V3, w5);
    let I4 = null;
    if (g7) {
      s4(c7, D4, U3), s4(c7, z, x4), I4 = [];
      const e8 = new Float64Array(x4.buffer);
      for (let t7 = 0; t7 < U3.length; t7++) I4.push(U3[t7] ? e8[t7] : null);
    }
    return r14(C5), { data: m7, maskData: w5, noDataValues: I4 };
  };
}
function i3(e6, t7, n15, r14, a15) {
  if (n15 < 2) return e6;
  const o11 = new r14(t7 * n15);
  for (let s8 = 0, l7 = 0; s8 < t7; s8++) for (let r15 = 0, a16 = s8; r15 < n15; r15++, a16 += t7) o11[a16] = e6[l7++];
  return o11;
}
function u3(e6, n15 = {}) {
  const r14 = n15.inputOffset ?? 0, o11 = e6 instanceof Uint8Array ? e6.subarray(r14) : new Uint8Array(e6, r14), s8 = a7.getBlobInfo(o11), { data: l7, maskData: u11, noDataValues: f7 } = a7.decode(o11, s8), { width: c7, height: h7, bandCount: y4, depthCount: p5, dataType: g7, maskCount: d5, statistics: b4 } = s8, w5 = t[g7], A5 = new w5.ctor(l7.buffer), m7 = [], U3 = [], x4 = c7 * h7, C5 = x4 * p5;
  for (let t7 = 0; t7 < y4; t7++) {
    const e7 = A5.subarray(t7 * C5, (t7 + 1) * C5);
    if (n15.returnInterleaved) m7.push(e7);
    else {
      const t8 = i3(e7, x4, p5, w5.ctor);
      m7.push(t8);
    }
    U3.push(u11.subarray(t7 * C5, (t7 + 1) * C5));
  }
  const V3 = 0 === d5 ? null : 1 === d5 ? U3[0] : new Uint8Array(x4);
  if (d5 > 1) {
    V3.set(U3[0]);
    for (let e7 = 1; e7 < U3.length; e7++) {
      const t7 = U3[e7];
      for (let e8 = 0; e8 < x4; e8++) V3[e8] = V3[e8] & t7[e8];
    }
  }
  const { noDataValue: T4 } = n15, D4 = null != T4 && w5.range[0] <= T4 && w5.range[1] >= T4;
  if (d5 > 0 && D4) for (let t7 = 0; t7 < y4; t7++) {
    const e7 = m7[t7], n16 = U3[t7] || V3;
    for (let t8 = 0; t8 < x4; t8++) 0 === n16[t8] && (e7[t8] = T4);
  }
  const z = d5 === y4 && y4 > 1 ? U3 : null, { pixelType: F2 } = w5;
  return { width: c7, height: h7, bandCount: y4, pixelType: F2, depthCount: p5, statistics: b4, pixels: m7, mask: V3, bandMasks: z, noDataValues: f7 };
}

// node_modules/@arcgis/core/layers/support/rasterFormats/Lzw.js
function e2(e6, n15, t7, r14 = true) {
  if (n15 % 4 != 0 || t7 % 4 != 0) {
    const i8 = new ArrayBuffer(4 * Math.ceil(t7 / 4)), o11 = new Uint8Array(i8), l7 = new Uint8Array(e6, n15, t7);
    if (r14) for (let e7 = 0; e7 < o11.length; e7 += 4) o11[e7] = l7[e7 + 3], o11[e7 + 1] = l7[e7 + 2], o11[e7 + 2] = l7[e7 + 1], o11[e7 + 3] = l7[e7];
    else o11.set(l7);
    return new Uint32Array(o11.buffer);
  }
  if (r14) {
    const r15 = new Uint8Array(e6, n15, t7), i8 = new Uint8Array(r15.length);
    for (let e7 = 0; e7 < i8.length; e7 += 4) i8[e7] = r15[e7 + 3], i8[e7 + 1] = r15[e7 + 2], i8[e7 + 2] = r15[e7 + 1], i8[e7 + 3] = r15[e7];
    return new Uint32Array(i8.buffer);
  }
  return new Uint32Array(e6, n15, t7 / 4);
}
function n7() {
  const e6 = [];
  for (let n15 = 0; n15 <= 257; n15++) e6[n15] = [n15];
  return e6;
}
function t2(e6, n15) {
  for (let t7 = 0; t7 < n15.length; t7++) e6.push(n15[t7]);
}
var r7 = /* @__PURE__ */ new Set();
function i4(i8, o11, l7, f7 = true) {
  const s8 = e2(i8, o11, l7, f7);
  let a15 = 9, c7 = n7(), u11 = 32, h7 = c7.length, d5 = [], w5 = 1, g7 = s8[0], y4 = 0;
  const A5 = s8.length, U3 = 8 * (4 * A5 - l7), p5 = [];
  for (; null != g7; ) {
    if (u11 >= a15) u11 -= a15, y4 = g7 >>> 32 - a15, g7 <<= a15;
    else {
      y4 = g7 >>> 32 - u11, g7 = s8[w5++];
      const e7 = a15 - u11;
      u11 = 32 - e7, y4 = (y4 << e7) + (g7 >>> u11), g7 <<= e7;
    }
    if (257 === y4) break;
    if (256 === y4) {
      a15 = 9, c7 = n7(), h7 = c7.length, d5 = [];
      continue;
    }
    const e6 = c7[y4];
    if (null == e6) {
      if (y4 > c7.length) throw new Error("data integrity issue: code does not exist on code page");
      d5.push(d5[0]), c7[h7++] = d5.slice(), t2(p5, d5);
    } else t2(p5, e6), d5.push(e6[0]), d5.length > 1 && (c7[h7++] = d5.slice()), d5 = e6.slice();
    if (r7.has(h7) && a15++, 0 === u11 && (g7 = s8[w5++], u11 = 32), w5 > A5 || w5 === A5 && u11 <= U3) break;
  }
  return new Uint8Array(p5);
}
r7.add(511), r7.add(1023), r7.add(2047), r7.add(4095), r7.add(8191);

// node_modules/@arcgis/core/layers/support/rasterFormats/Raw.js
var e3 = (e6, r14) => {
  const a15 = r14.width * r14.height, n15 = r14.pixelType;
  return Math.floor(e6.byteLength / (a15 * t3(n15)));
};
var t3 = (e6) => {
  let t7 = 1;
  switch (e6) {
    case Uint8Array:
    case Int8Array:
      t7 = 1;
      break;
    case Uint16Array:
    case Int16Array:
      t7 = 2;
      break;
    case Uint32Array:
    case Int32Array:
    case Float32Array:
      t7 = 4;
      break;
    case Float64Array:
      t7 = 8;
  }
  return t7;
};
var r8 = (e6, t7) => {
  if (8 * e6.byteLength < t7) return null;
  const r14 = new Uint8Array(e6, 0, Math.ceil(t7 / 8)), a15 = new Uint8Array(t7);
  let n15 = 0, s8 = 0, l7 = 0, i8 = 0;
  for (l7 = 0; l7 < r14.length - 1; l7++) for (s8 = r14[l7], i8 = 7; i8 >= 0; i8--) a15[n15++] = s8 >> i8 & 1;
  for (i8 = 7; n15 < t7 - 1; ) s8 = r14[r14.length - 1], a15[n15++] = s8 >> i8 & 1, i8--;
  return a15;
};
var a8 = class {
  static decode(a15, n15) {
    const s8 = n15.pixelType, l7 = [], i8 = n15.width * n15.height, h7 = e3(a15, n15), { bandIds: c7, format: y4 } = n15, o11 = (c7 == null ? void 0 : c7.length) || e3(a15, n15), b4 = a15.byteLength - a15.byteLength % (i8 * t3(s8)), f7 = new s8(a15, 0, i8 * h7);
    let u11, g7, A5, p5, d5 = null;
    if ("bip" === y4) for (u11 = 0; u11 < o11; u11++) {
      for (A5 = new s8(i8), p5 = c7 ? c7[u11] : u11, g7 = 0; g7 < i8; g7++) A5[g7] = f7[g7 * h7 + p5];
      l7.push(A5);
    }
    else if ("bsq" === y4) for (u11 = 0; u11 < o11; u11++) p5 = c7 ? c7[u11] : u11, l7.push(f7.subarray(p5 * i8, (p5 + 1) * i8));
    return b4 < a15.byteLength - 1 && (d5 = r8(a15.slice(b4), i8)), { pixels: l7, mask: d5 };
  }
};

// node_modules/@arcgis/core/layers/support/rasterDatasets/byteStreamUtils.js
function r9(r14, t7) {
  let n15 = 0, o11 = "", e6 = 0, f7 = 0;
  const c7 = r14.length;
  for (; n15 < c7; ) f7 = r14[n15++], e6 = f7 >> 4, e6 < 8 ? e6 = 1 : 15 === e6 ? (e6 = 4, f7 = (7 & f7) << 18 | (63 & r14[n15++]) << 12 | (63 & r14[n15++]) << 6 | 63 & r14[n15++]) : 14 === e6 ? (e6 = 3, f7 = (15 & f7) << 12 | (63 & r14[n15++]) << 6 | 63 & r14[n15++]) : (e6 = 2, f7 = (31 & f7) << 6 | 63 & r14[n15++]), (0 !== f7 || t7) && (o11 += String.fromCharCode(f7));
  return o11;
}

// node_modules/@arcgis/core/layers/support/rasterFormats/TiffTags.js
var e4 = (() => {
  const e6 = [];
  return e6[254] = "NEWSUBFILETYPE", e6[255] = "SUBFILETYPE", e6[256] = "IMAGEWIDTH", e6[257] = "IMAGELENGTH", e6[258] = "BITSPERSAMPLE", e6[259] = "COMPRESSION", e6[262] = "PHOTOMETRICINTERPRETATION", e6[263] = "THRESHHOLDING", e6[264] = "CELLWIDTH", e6[265] = "CELLLENGTH", e6[266] = "FILLORDER", e6[269] = "DOCUMENTNAME", e6[270] = "IMAGEDESCRIPTION", e6[271] = "MAKE", e6[272] = "MODEL", e6[273] = "STRIPOFFSETS", e6[274] = "ORIENTATION", e6[277] = "SAMPLESPERPIXEL", e6[278] = "ROWSPERSTRIP", e6[279] = "STRIPBYTECOUNTS", e6[280] = "MINSAMPLEVALUE", e6[281] = "MAXSAMPLEVALUE", e6[282] = "XRESOLUTION", e6[283] = "YRESOLUTION", e6[284] = "PLANARCONFIGURATION", e6[285] = "PAGENAME", e6[286] = "XPOSITION", e6[287] = "YPOSITION", e6[288] = "FREEOFFSETS", e6[289] = "FREEBYTECOUNTS", e6[290] = "GRAYRESPONSEUNIT", e6[291] = "GRAYRESPONSECURVE", e6[292] = "T4OPTIONS", e6[293] = "T6OPTIONS", e6[296] = "RESOLUTIONUNIT", e6[297] = "PAGENUMBER", e6[300] = "COLORRESPONSEUNIT", e6[301] = "TRANSFERFUNCTION", e6[305] = "SOFTWARE", e6[306] = "DATETIME", e6[315] = "ARTIST", e6[316] = "HOSTCOMPUTER", e6[317] = "PREDICTOR", e6[318] = "WHITEPOINT", e6[319] = "PRIMARYCHROMATICITIES", e6[320] = "COLORMAP", e6[321] = "HALFTONEHINTS", e6[322] = "TILEWIDTH", e6[323] = "TILELENGTH", e6[324] = "TILEOFFSETS", e6[325] = "TILEBYTECOUNTS", e6[326] = "BADFAXLINES", e6[327] = "CLEANFAXDATA", e6[328] = "CONSECUTIVEBADFAXLINES", e6[330] = "SUBIFD", e6[332] = "INKSET", e6[333] = "INKNAMES", e6[334] = "NUMBEROFINKS", e6[336] = "DOTRANGE", e6[337] = "TARGETPRINTER", e6[338] = "EXTRASAMPLES", e6[339] = "SAMPLEFORMAT", e6[340] = "SMINSAMPLEVALUE", e6[341] = "SMAXSAMPLEVALUE", e6[342] = "TRANSFERRANGE", e6[347] = "JPEGTABLES", e6[512] = "JPEGPROC", e6[513] = "JPEGIFOFFSET", e6[514] = "JPEGIFBYTECOUNT", e6[515] = "JPEGRESTARTINTERVAL", e6[517] = "JPEGLOSSLESSPREDICTORS", e6[518] = "JPEGPOINTTRANSFORM", e6[519] = "JPEGQTABLES", e6[520] = "JPEGDCTABLES", e6[521] = "JPEGACTABLES", e6[529] = "YCBCRCOEFFICIENTS", e6[530] = "YCBCRSUBSAMPLING", e6[531] = "YCBCRPOSITIONING", e6[532] = "REFERENCEBLACKWHITE", e6[700] = "XMP", e6[33550] = "GEOPIXELSCALE", e6[33922] = "GEOTIEPOINTS", e6[33432] = "COPYRIGHT", e6[42112] = "GDAL_METADATA", e6[42113] = "GDAL_NODATA", e6[50844] = "RPCCOEFFICIENT", e6[34264] = "GEOTRANSMATRIX", e6[34735] = "GEOKEYDIRECTORY", e6[34736] = "GEODOUBLEPARAMS", e6[34737] = "GEOASCIIPARAMS", e6[34665] = "EXIFIFD", e6[34853] = "GPSIFD", e6[40965] = "INTEROPERABILITYIFD", e6;
})();
var i5 = (() => {
  const i8 = e4.slice();
  return i8[36864] = "ExifVersion", i8[40960] = "FlashpixVersion", i8[40961] = "ColorSpace", i8[42240] = "Gamma", i8[37121] = "ComponentsConfiguration", i8[37122] = "CompressedBitsPerPixel", i8[40962] = "PixelXDimension", i8[40963] = "PixelYDimension", i8[37500] = "MakerNote", i8[37510] = "UserComment", i8[40964] = "RelatedSoundFile", i8[36867] = "DateTimeOriginal", i8[36868] = "DateTimeDigitized", i8[36880] = "OffsetTime", i8[36881] = "OffsetTimeOriginal", i8[36882] = "OffsetTimeDigitized", i8[37520] = "SubSecTime", i8[37521] = "SubSecTimeOriginal", i8[37522] = "SubSecTimeDigitized", i8[37888] = "Temperature", i8[37889] = "Humidity", i8[37890] = "Pressure", i8[37891] = "WaterDepth", i8[37892] = "Acceleration", i8[37893] = "CameraElevationAngle", i8[42016] = "ImageUniqueID", i8[42032] = "CameraOwnerName", i8[42033] = "BodySerialNumber", i8[42034] = "LensSpecification", i8[42035] = "LensMake", i8[42036] = "LensModel", i8[42037] = "LensSerialNumber", i8[33434] = "ExposureTime", i8[33437] = "FNumber", i8[34850] = "ExposureProgram", i8[34852] = "SpectralSensitivity", i8[34855] = "PhotographicSensitivity", i8[34856] = "OECF", i8[34864] = "SensitivityType", i8[34865] = "StandardOutputSensitivity", i8[34866] = "RecommendedExposureIndex", i8[34867] = "ISOSpeed", i8[34868] = "ISOSpeedLatitudeyyy", i8[34869] = "ISOSpeedLatitudezzz", i8[37377] = "ShutterSpeedValue", i8[37378] = "ApertureValue", i8[37379] = "BrightnessValue", i8[37380] = "ExposureBiasValue", i8[37381] = "MaxApertureValue", i8[37382] = "SubjectDistance", i8[37383] = "MeteringMode", i8[37384] = "LightSource", i8[37385] = "Flash", i8[37386] = "FocalLength", i8[37396] = "SubjectArea", i8[41483] = "FlashEnergy", i8[41484] = "SpatialFrequencyResponse", i8[41486] = "FocalPlaneXResolution", i8[41487] = "FocalPlaneYResolution", i8[41488] = "FocalPlaneResolutionUnit", i8[41492] = "SubjectLocation", i8[41493] = "ExposureIndex", i8[41495] = "SensingMethod", i8[41728] = "FileSource", i8[41729] = "SceneType", i8[41730] = "CFAPattern", i8[41985] = "CustomRendered", i8[41986] = "ExposureMode", i8[41987] = "WhiteBalance", i8[41988] = "DigitalZoomRatio", i8[41989] = "FocalLengthIn35mmFilm", i8[41990] = "SceneCaptureType", i8[41991] = "GainControl", i8[41992] = "Contrast", i8[41993] = "Saturation", i8[41994] = "Sharpness", i8[41995] = "DeviceSettingDescription", i8[41996] = "SubjectDistanceRange", i8;
})();
var t4 = ["GPSVersionID", "GPSLatitudeRef", "GPSLatitude", "GPSLongitudeRef", "GPSLongitude", "GPSAltitudeRef", "GPSAltitude", "GPSTimeStamp", "GPSSatellites", "GPSStatus", "GPSMeasureMode", "GPSDOP", "GPSSpeedRef", "GPSSpeed", "GPSTrackRef", "GPSTrack", "GPSImgDirectionRef", "GPSImgDirection", "GPSMapDatum", "GPSDestLatitudeRef", "GPSDestLatitude", "GPSDestLongitudeRef", "GPSDestLongitude", "GPSDestBearingRef", "GPSDestBearing", "GPSDestDistanceRef", "GPSDestDistance", "GPSProcessingMethod", "GPSAreaInformation", "GPSDateStamp", "GPSDifferential", "GPSHPositioningError"];
var o6 = (() => {
  const e6 = [];
  return e6[1024] = "GTModelTypeGeoKey", e6[1025] = "GTRasterTypeGeoKey", e6[1026] = "GTCitationGeoKey", e6[2048] = "GeographicTypeGeoKey", e6[2049] = "GeogCitationGeoKey", e6[2050] = "GeogGeodeticDatumGeoKey", e6[2051] = "GeogPrimeMeridianGeoKey", e6[2052] = "GeogLinearUnitsGeoKey", e6[2053] = "GeogLinearUnitSizeGeoKey", e6[2054] = "GeogAngularUnitsGeoKey", e6[2055] = "GeogAngularUnitSizeGeoKey", e6[2056] = "GeogEllipsoidGeoKey", e6[2057] = "GeogSemiMajorAxisGeoKey", e6[2058] = "GeogSemiMinorAxisGeoKey", e6[2059] = "GeogInvFlatteningGeoKey", e6[2061] = "GeogPrimeMeridianLongGeoKey", e6[2060] = "GeogAzimuthUnitsGeoKey", e6[3072] = "ProjectedCSTypeGeoKey", e6[3073] = "PCSCitationGeoKey", e6[3074] = "ProjectionGeoKey", e6[3075] = "ProjCoordTransGeoKey", e6[3076] = "ProjLinearUnitsGeoKey", e6[3077] = "ProjLinearUnitSizeGeoKey", e6[3078] = "ProjStdParallel1GeoKey", e6[3079] = "ProjStdParallel2GeoKey", e6[3080] = "ProjNatOriginLongGeoKey", e6[3081] = "ProjNatOriginLatGeoKey", e6[3082] = "ProjFalseEastingGeoKey", e6[3083] = "ProjFalseNorthingGeoKey", e6[3084] = "ProjFalseOriginLongGeoKey", e6[3085] = "ProjFalseOriginLatGeoKey", e6[3086] = "ProjFalseOriginEastingGeoKey", e6[3087] = "ProjFalseOriginNorthingGeoKey", e6[3088] = "ProjCenterLongGeoKey", e6[3090] = "ProjCenterEastingGeoKey", e6[3091] = "ProjCenterNorthingGeoKey", e6[3092] = "ProjScaleAtNatOriginGeoKey", e6[3093] = "ProjScaleAtCenterGeoKey", e6[3094] = "ProjAzimuthAngleGeoKey", e6[3095] = "ProjStraightVertPoleLongGeoKey", e6[4096] = "VerticalCSTypeGeoKey", e6[4097] = "VerticalCitationGeoKey", e6[4098] = "VerticalDatumGeoKey", e6[4099] = "VerticalUnitsGeoKey", e6;
})();
var S = (i8, t7) => {
  let o11 = (t7 || e4)[i8];
  return void 0 === o11 && (o11 = "unknown" + String(i8)), o11;
};
var E = /* @__PURE__ */ new Map();
E.set("EXIFIFD", i5), E.set("GPSIFD", t4);
var n8 = { tiffTags: e4, ifdTags: E, geoKeys: o6, getTagName: S };

// node_modules/@arcgis/core/layers/support/rasterFormats/utils.js
var r10 = (() => {
  const r14 = new ArrayBuffer(4), n15 = new Uint8Array(r14);
  return new Uint32Array(r14)[0] = 1, 1 === n15[0];
})();

// node_modules/@arcgis/core/layers/support/rasterFormats/TiffDecoder.js
var f3 = [0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8, -1, -1, -1, 8, 8, 8];
var u4 = 4294967296;
var c2 = /* @__PURE__ */ new Set([1, 5, 6, 7, 8, 34712, 34887]);
function h2(e6, t7) {
  let n15 = "unknown";
  return 3 === e6 ? n15 = 64 === t7 ? "f64" : "f32" : 1 === e6 ? 1 === t7 ? n15 = "u1" : 2 === t7 ? n15 = "u2" : 4 === t7 ? n15 = "u4" : t7 <= 8 ? n15 = "u8" : t7 <= 16 ? n15 = "u16" : t7 <= 32 && (n15 = "u32") : 2 === e6 && (t7 <= 8 ? n15 = "s8" : t7 <= 16 ? n15 = "s16" : t7 <= 32 && (n15 = "s32")), n15;
}
function g3(e6) {
  let t7 = null;
  switch (e6 ? e6.toLowerCase() : "f32") {
    case "u1":
    case "u2":
    case "u4":
    case "u8":
      t7 = Uint8Array;
      break;
    case "u16":
      t7 = Uint16Array;
      break;
    case "u32":
      t7 = Uint32Array;
      break;
    case "s8":
      t7 = Int8Array;
      break;
    case "s16":
      t7 = Int16Array;
      break;
    case "s32":
      t7 = Int32Array;
      break;
    case "f64":
      t7 = Float64Array;
      break;
    default:
      t7 = Float32Array;
  }
  return t7;
}
function E2(e6, t7) {
  return { x: t7[0] * e6.x + t7[1] * e6.y + t7[2], y: t7[3] * e6.x + t7[4] * e6.y + t7[5] };
}
function T(e6, t7) {
  var _a;
  return (_a = e6.get(t7)) == null ? void 0 : _a.values;
}
function I(e6, t7) {
  var _a;
  return (_a = e6.get(t7)) == null ? void 0 : _a.values;
}
function w2(e6, t7) {
  var _a, _b;
  return (_b = (_a = e6.get(t7)) == null ? void 0 : _a.values) == null ? void 0 : _b[0];
}
function p(e6, t7) {
  var _a, _b;
  return (_b = (_a = e6.get(t7)) == null ? void 0 : _a.values) == null ? void 0 : _b[0];
}
function d(e6, t7, n15, a15 = 0, i8 = n8.tiffTags, s8 = 4) {
  const l7 = 8 === s8, o11 = l7 ? C2(new DataView(e6, n15, 8), 0, t7) : new DataView(e6, n15, 2).getUint16(0, t7), f7 = 4 + 2 * s8, u11 = l7 ? 8 : 2, c7 = u11 + o11 * f7;
  if (n15 + c7 > e6.byteLength) return { success: false, ifd: null, nextIFD: null, requiredBufferSize: c7 };
  const h7 = n15 + c7 + 4 <= e6.byteLength ? v(new DataView(e6, n15 + c7, 8 === s8 ? 8 : 4), 0, t7, 8 === s8) : null, g7 = n15 + u11, E3 = /* @__PURE__ */ new Map();
  let T4, I4, w5, p5, d5, m7 = 0, y4 = 0;
  for (let S4 = 0; S4 < o11; S4++) {
    I4 = new DataView(e6, g7 + f7 * S4, f7), w5 = I4.getUint16(0, t7), d5 = I4.getUint16(2, t7), p5 = n8.getTagName(w5, i8);
    const n16 = [];
    2 === s8 ? (m7 = I4.getUint16(4, t7), y4 = I4.getUint16(6, t7)) : 4 === s8 ? (m7 = I4.getUint32(4, t7), y4 = I4.getUint32(8, t7)) : 8 === s8 && (m7 = v(I4, 4, t7, true), y4 = v(I4, 12, t7, true), n16.push(I4.getUint32(12, t7)), n16.push(I4.getUint32(16, t7))), T4 = { id: w5, type: d5, valueCount: m7, valueOffset: y4, valueOffsets: n16, values: null }, L(e6, t7, T4, a15, false, s8), E3.set(p5, T4);
  }
  return { success: true, ifd: E3, nextIFD: h7, requiredBufferSize: c7 };
}
var m2 = (e6, t7) => u3(e6, { inputOffset: t7 }).pixels[0];
function y(e6, t7) {
  if (1 !== t7 && 2 !== t7 && 4 !== t7) return e6;
  const n15 = new Uint8Array(e6), a15 = 8 / t7, i8 = new Uint8Array(e6.byteLength * a15);
  let s8 = 0;
  const r14 = 2 ** t7 - 1;
  for (let l7 = 0; l7 < n15.length; l7++) {
    const e7 = n15[l7];
    for (let n16 = 0; n16 < a15; n16++) i8[s8++] = e7 << t7 * n16 >>> 8 - t7 & r14;
  }
  return i8.buffer;
}
function S2(e6, n15, a15) {
  const i8 = new a6();
  i8.parse(e6), i8.colorTransform = 6 === a15 ? -1 : 0;
  const s8 = i8.getData(i8.width, i8.height, 1 !== n15 && 4 !== n15);
  return new Uint8Array(s8.buffer);
}
function A2(e6) {
  const t7 = new s3(e6).getBytes(), n15 = new ArrayBuffer(t7.length), a15 = new Uint8Array(n15);
  return a15.set(t7), a15;
}
async function M(e6, t7, a15, s8, r14) {
  const o11 = r10 === t7, f7 = p(a15, "BITSPERSAMPLE"), u11 = p(a15, "SAMPLESPERPIXEL") ?? 1, c7 = p(a15, "PHOTOMETRICINTERPRETATION"), E3 = p(a15, "SAMPLEFORMAT") ?? 1, T4 = h2(E3, f7), I4 = p(a15, "COMPRESSION") ?? 1, w5 = g3(T4);
  let d5, M3, P4;
  if (34887 === I4) return await r6(), m2(e6, s8);
  if (1 === I4) d5 = e6.slice(s8, s8 + r14), M3 = new Uint8Array(d5);
  else if (8 === I4 || 32946 === I4) M3 = new Uint8Array(e6, s8, r14), M3 = A2(M3), d5 = M3.buffer;
  else if (6 === I4) M3 = new Uint8Array(e6, s8, r14), M3 = S2(M3, u11, c7), d5 = M3.buffer;
  else if (7 === I4) {
    const t8 = a15.get("JPEGTABLES").values, n15 = t8.length - 2;
    M3 = new Uint8Array(n15 + r14 - 2);
    for (let e7 = 0; e7 < n15; e7++) M3[e7] = t8[e7];
    const i8 = new Uint8Array(e6, s8 + 2, r14 - 2);
    for (let e7 = 0; e7 < i8.length; e7++) M3[n15 + e7] = i8[e7];
    M3 = S2(M3, u11, c7), d5 = M3.buffer;
  } else {
    if (5 !== I4) throw new Error("tiff-decode: unsupport compression " + I4);
    M3 = i4(e6, s8, r14, t7), d5 = M3.buffer;
  }
  if (d5 = y(d5, f7), "u8" === T4 || "s8" === T4 || o11) P4 = new w5(d5);
  else {
    d5 = new ArrayBuffer(M3.length);
    const e7 = new Uint8Array(d5);
    switch (T4) {
      case "u16":
      case "s16":
        for (let t8 = 0; t8 < M3.length; t8 += 2) e7[t8] = M3[t8 + 1], e7[t8 + 1] = M3[t8];
        break;
      case "u32":
      case "s32":
      case "f32":
        for (let t8 = 0; t8 < M3.length; t8 += 4) e7[t8] = M3[t8 + 3], e7[t8 + 1] = M3[t8 + 2], e7[t8 + 2] = M3[t8 + 1], e7[t8 + 3] = M3[t8];
    }
    P4 = new w5(d5);
  }
  const O4 = p(a15, "PREDICTOR") ?? 1, b4 = p(a15, "TILEWIDTH"), x4 = p(a15, "TILELENGTH");
  if (O4 > 1 && (5 === I4 || 8 === I4 || 32946 === I4) && b4 && x4) {
    const e7 = D(a15), t8 = new w5(P4.length);
    t8.set(P4), P4 = W(t8, x4, b4, 3 === E3 && 3 === O4, e7 ? 1 : u11);
  }
  return P4;
}
async function P(e6, t7, n15) {
  const a15 = I(n15, "TILEOFFSETS");
  if (void 0 === a15) return null;
  const i8 = I(n15, "TILEBYTECOUNTS"), { width: s8, height: r14, pixelType: l7, tileWidth: o11, tileHeight: f7 } = R([n15]), u11 = D(n15, t7), c7 = p(n15, "SAMPLESPERPIXEL") || t7.planes, h7 = s8 * r14, E3 = p(n15, "BITSPERSAMPLE"), T4 = 34887 === (p(n15, "COMPRESSION") ?? 1), w5 = g3(l7), d5 = [];
  for (let g7 = 0; g7 < c7; g7++) d5.push(new w5(h7));
  let m7, y4, S4, A5, P4, O4, b4, x4, L3, U3, N2, k4, C5;
  const G3 = Math.ceil(s8 / o11), v5 = new Uint8Array(h7).fill(255);
  let F2 = false;
  if (E3 % 8 == 0) if (T4 && u11 && c7 > 1) {
    const l8 = Math.round(a15.length / c7);
    for (m7 = 0; m7 < l8; m7++) {
      O4 = Math.floor(m7 / G3) * f7, b4 = m7 % G3 * o11, x4 = O4 * s8 + b4;
      for (let l9 = 0; l9 < c7; l9++) {
        const u12 = m7 * c7 + l9;
        for (0 === i8[u12] ? (S4 = null, F2 = true) : S4 = await M(e6, t7.littleEndian, n15, a15[u12], i8[u12]), U3 = 0, L3 = x4, k4 = Math.min(o11, s8 - b4), N2 = Math.min(f7, r14 - O4), C5 = d5[l9], A5 = 0; A5 < N2; A5++) for (L3 = x4 + A5 * s8, U3 = A5 * o11, P4 = 0; P4 < k4; P4++, L3++, U3++) S4 ? C5[L3] = S4[U3] : v5[L3] = 0;
      }
    }
  } else for (m7 = 0; m7 < a15.length; m7++) for (O4 = Math.floor(m7 / G3) * f7, b4 = m7 % G3 * o11, x4 = O4 * s8 + b4, 0 === i8[m7] ? (S4 = null, F2 = true) : S4 = await M(e6, t7.littleEndian, n15, a15[m7], i8[m7]), U3 = 0, L3 = x4, k4 = Math.min(o11, s8 - b4), N2 = Math.min(f7, r14 - O4), y4 = 0; y4 < c7; y4++) if (C5 = d5[y4], u11 || T4) for (A5 = 0; A5 < N2; A5++) for (L3 = x4 + A5 * s8, U3 = o11 * f7 * y4 + A5 * o11, P4 = 0; P4 < k4; P4++, L3++, U3++) S4 ? C5[L3] = S4[U3] : v5[L3] = 0;
  else for (A5 = 0; A5 < N2; A5++) for (L3 = x4 + A5 * s8, U3 = A5 * o11 * c7 + y4, P4 = 0; P4 < k4; P4++, L3++, U3 += c7) S4 ? C5[L3] = S4[U3] : v5[L3] = 0;
  return { width: s8, height: r14, pixelType: l7, pixels: d5, mask: F2 ? v5 : void 0 };
}
var O = (e6, t7, n15) => {
  const a15 = r10 === t7.littleEndian, s8 = I(n15, "STRIPOFFSETS");
  if (void 0 === s8) return null;
  const { width: r14, height: o11, pixelType: f7 } = R([n15]), u11 = p(n15, "SAMPLESPERPIXEL") || t7.planes, c7 = p(n15, "PHOTOMETRICINTERPRETATION"), h7 = r14 * o11, E3 = p(n15, "BITSPERSAMPLE"), T4 = g3(f7), w5 = new T4(h7 * u11), d5 = I(n15, "STRIPBYTECOUNTS"), m7 = p(n15, "ROWSPERSTRIP"), M3 = p(n15, "COMPRESSION") ?? 1;
  let P4, O4, b4, x4, L3, D4, U3, N2, k4;
  if (E3 % 8 == 0) for (P4 = 0; P4 < s8.length; P4++) {
    if (L3 = P4 * (m7 * r14) * u11, "u8" === f7 || "s8" === f7 || a15) 8 === M3 || 32946 === M3 ? (U3 = new Uint8Array(e6, s8[P4], d5[P4]), U3 = A2(U3), D4 = U3.buffer) : 6 === M3 ? (U3 = new Uint8Array(e6, s8[P4], d5[P4]), U3 = S2(U3, u11, c7), D4 = U3.buffer) : 5 === M3 ? (U3 = i4(e6, s8[P4], d5[P4], t7.littleEndian), D4 = U3.buffer) : D4 = e6.slice(s8[P4], s8[P4] + d5[P4]), D4 = y(D4, E3), x4 = new T4(D4);
    else {
      switch (6 === M3 || 8 === M3 || 32946 === M3 ? (U3 = new Uint8Array(e6, s8[P4], d5[P4]), N2 = A2(U3), D4 = N2.buffer) : (D4 = new ArrayBuffer(d5[P4]), U3 = new Uint8Array(e6, s8[P4], d5[P4]), N2 = new Uint8Array(D4)), f7) {
        case "u16":
        case "s16":
          for (b4 = 0; b4 < U3.length; b4 += 2) N2[b4] = U3[b4 + 1], N2[b4 + 1] = U3[b4];
          break;
        case "u32":
        case "s32":
        case "f32":
          for (b4 = 0; b4 < U3.length; b4 += 4) N2[b4] = U3[b4 + 3], N2[b4 + 1] = U3[b4 + 2], N2[b4 + 2] = U3[b4 + 1], N2[b4 + 3] = U3[b4];
      }
      D4 = y(D4, E3), x4 = new T4(D4);
    }
    w5.set(x4, L3);
  }
  const C5 = [];
  if (1 === u11) C5.push(w5);
  else for (P4 = 0; P4 < u11; P4++) {
    for (k4 = new T4(h7), O4 = 0; O4 < h7; O4++) k4[O4] = w5[O4 * u11 + P4];
    C5.push(k4);
  }
  return { width: r14, height: o11, pixelType: f7, pixels: C5 };
};
var b = (e6, t7, n15) => {
  if (!(e6 && e6.length > 0 && t7 && n15)) return null;
  let a15, i8, s8;
  const r14 = e6[0].length, l7 = e6.length, o11 = new Uint8Array(r14);
  for (let f7 = 0; f7 < l7; f7++) if (a15 = e6[f7], i8 = t7[f7], s8 = n15[f7], 0 === f7) for (let e7 = 0; e7 < r14; e7++) o11[e7] = a15[e7] < i8 || a15[e7] > s8 ? 0 : 1;
  else for (let e7 = 0; e7 < r14; e7++) o11[e7] && (o11[e7] = a15[e7] < i8 || a15[e7] > s8 ? 0 : 1);
  return o11;
};
var x = (e6) => {
  if (!e6) return null;
  const t7 = e6.match(/<Item(.*?)Item>/gi);
  if (!t7 || 0 === t7.length) return null;
  const n15 = /* @__PURE__ */ new Map();
  let a15, i8, s8, r14, l7;
  for (let w5 = 0; w5 < t7.length; w5++) a15 = t7[w5], i8 = a15.slice(6, a15.indexOf(">")), r14 = a15.indexOf("sample="), r14 > -1 && (l7 = a15.slice(r14 + 8, a15.indexOf('"', r14 + 8))), r14 = a15.indexOf("name="), r14 > -1 && (i8 = a15.slice(r14 + 6, a15.indexOf('"', r14 + 6))), i8 && (s8 = a15.slice(a15.indexOf(">") + 1, a15.indexOf("</Item>")).trim(), null != l7 ? n15.has(i8) ? n15.get(i8)[l7] = s8 : n15.set(i8, [s8]) : n15.set(i8, s8)), l7 = null;
  const o11 = n15.get("STATISTICS_MINIMUM"), f7 = n15.get("STATISTICS_MAXIMUM"), u11 = n15.get("STATISTICS_MEAN"), c7 = n15.get("STATISTICS_STDDEV");
  let h7 = null;
  if (o11 && f7) {
    h7 = [];
    for (let e7 = 0; e7 < o11.length; e7++) h7.push({ min: parseFloat(o11[e7]), max: parseFloat(f7[e7]), avg: u11 && parseFloat(u11[e7]), stddev: c7 && parseFloat(c7[e7]) });
  }
  const g7 = n15.get("BandName"), E3 = n15.get("WavelengthMin"), T4 = n15.get("WavelengthMax");
  let I4 = null;
  if (g7) {
    I4 = [];
    for (let e7 = 0; e7 < g7.length; e7++) I4.push({ BandName: g7[e7], WavelengthMin: E3 && parseFloat(E3[e7]), WavelengthMax: T4 && parseFloat(T4[e7]) });
  }
  return { statistics: h7, bandProperties: I4, dataType: n15.get("DataType"), rawMetadata: n15 };
};
function L(e6, t7, n15, a15 = 0, i8 = false, s8 = 4) {
  if (n15.values) return true;
  const r14 = n15.type, l7 = n15.valueCount;
  let o11 = n15.valueOffset, c7 = [];
  const h7 = f3[r14], g7 = 8 * h7, E3 = l7 * h7, T4 = l7 * f3[r14] * 8;
  let I4, w5;
  const p5 = 8 === s8 ? 64 : 32, d5 = n15.valueOffsets;
  if (T4 > p5) {
    if (E3 > (i8 ? e6.byteLength : e6 ? e6.byteLength - o11 + a15 : 0)) return n15.offlineOffsetSize = [o11, E3], n15.values = null, false;
  }
  if (T4 <= p5) {
    if (!t7) if (p5 <= 32) o11 >>>= 32 - T4;
    else {
      const e7 = (d5 == null ? void 0 : d5.length) ? d5[0] : o11 >>> 0, t8 = (d5 == null ? void 0 : d5.length) ? d5[1] : Math.round((o11 - e7) / u4);
      T4 <= 32 ? (o11 = e7 >>> 32 - T4, d5[0] = o11) : (o11 = e7 * 2 ** (32 - T4) + (t8 >>> 32 - T4), d5[0] = e7, d5[1] = t8 >>> 32 - T4);
    }
    if (1 === l7 && g7 === p5) c7 = [o11];
    else if (64 === p5) {
      const e7 = (d5 == null ? void 0 : d5.length) ? d5[0] : o11 >>> 0, t8 = (d5 == null ? void 0 : d5.length) ? d5[1] : Math.round((o11 - e7) / u4);
      let n16 = e7, a16 = 32;
      for (w5 = 1; w5 <= l7; w5++) {
        const e8 = 32 - g7 * w5 % 32;
        if (a16 < g7) {
          const i9 = n16 << e8 >>> 32 - a16, s9 = t8 << 32 - a16 >>> 32 - a16;
          n16 = t8, c7.push(i9 + s9 * 2 ** (g7 - a16)), a16 -= 32 - (g7 - a16);
        } else c7.push(n16 << e8 >>> 32 - g7), a16 -= g7;
        0 === a16 && (a16 = 32, n16 = t8);
      }
    } else for (w5 = 1; w5 <= l7; w5++) {
      const e7 = 32 - g7 * w5;
      c7.push(o11 << e7 >>> 32 - g7);
    }
  } else {
    o11 -= a15, i8 && (o11 = 0);
    for (let n16 = o11; n16 < o11 + E3; n16 += h7) {
      switch (r14) {
        case 1:
        case 2:
        case 7:
          I4 = new DataView(e6, n16, 1).getUint8(0);
          break;
        case 3:
          I4 = new DataView(e6, n16, 2).getUint16(0, t7);
          break;
        case 4:
        case 13:
          I4 = new DataView(e6, n16, 4).getUint32(0, t7);
          break;
        case 5:
          I4 = new DataView(e6, n16, 4).getUint32(0, t7) / new DataView(e6, n16 + 4, 4).getUint32(0, t7);
          break;
        case 6:
          I4 = new DataView(e6, n16, 1).getInt8(0);
          break;
        case 8:
          I4 = new DataView(e6, n16, 2).getInt16(0, t7);
          break;
        case 9:
          I4 = new DataView(e6, n16, 4).getInt32(0, t7);
          break;
        case 10:
          I4 = new DataView(e6, n16, 4).getInt32(0, t7) / new DataView(e6, n16 + 4, 4).getInt32(0, t7);
          break;
        case 11:
          I4 = new DataView(e6, n16, 4).getFloat32(0, t7);
          break;
        case 12:
          I4 = new DataView(e6, n16, 8).getFloat64(0, t7);
          break;
        case 16:
        case 18:
          I4 = C2(new DataView(e6, n16, 8), 0, t7);
          break;
        case 17:
          I4 = G(new DataView(e6, n16, 8), 0, t7);
          break;
        default:
          I4 = null;
      }
      c7.push(I4);
    }
  }
  if (2 === r14) {
    let e7 = "";
    const t8 = c7;
    for (c7 = [], w5 = 0; w5 < t8.length; w5++) 0 === t8[w5] && "" !== e7 ? (c7.push(e7), e7 = "") : e7 += String.fromCharCode(t8[w5]);
    "" === e7 && 0 !== c7.length || c7.push(e7);
  }
  return n15.values = c7, true;
}
function R(e6) {
  const t7 = e6[0], n15 = p(t7, "TILEWIDTH"), a15 = p(t7, "TILELENGTH"), i8 = p(t7, "IMAGEWIDTH"), s8 = p(t7, "IMAGELENGTH"), r14 = p(t7, "BITSPERSAMPLE"), l7 = p(t7, "SAMPLESPERPIXEL"), o11 = p(t7, "SAMPLEFORMAT") ?? 1, f7 = h2(o11, r14), u11 = D(t7), g7 = T(t7, "GDAL_NODATA");
  let d5 = null;
  (g7 == null ? void 0 : g7.length) && (d5 = g7.map((e7) => parseFloat(e7)), d5.some((e7) => isNaN(e7)) && (d5 = null));
  const m7 = p(t7, "COMPRESSION") ?? 1;
  let y4;
  switch (m7) {
    case 1:
      y4 = "NONE";
      break;
    case 2:
    case 3:
    case 4:
    case 32771:
      y4 = "CCITT";
      break;
    case 5:
      y4 = "LZW";
      break;
    case 6:
    case 7:
      y4 = "JPEG";
      break;
    case 32773:
      y4 = "PACKBITS";
      break;
    case 8:
    case 32946:
      y4 = "DEFLATE";
      break;
    case 34712:
      y4 = "JPEG2000";
      break;
    case 34887:
      y4 = "LERC";
      break;
    default:
      y4 = String(m7);
  }
  let S4 = true, A5 = "";
  c2.has(m7) || (S4 = false, A5 += "unsupported tag compression " + m7), o11 > 3 && (S4 = false, A5 += "unsupported tag sampleFormat " + o11), 1 !== r14 && 2 !== r14 && 4 !== r14 && r14 % 8 != 0 && (S4 = false, A5 += "unsupported tag bitsPerSample " + r14);
  const M3 = w2(t7, "GEOASCIIPARAMS");
  let P4;
  if (M3) {
    const e7 = M3.split("|").find((e8) => e8.includes("ESRI PE String = ")), t8 = e7 ? e7.replace("ESRI PE String = ", "") : "";
    P4 = t8.startsWith("COMPD_CS") || t8.startsWith("PROJCS") || t8.startsWith("GEOGCS") ? { wkid: null, wkt: t8 } : null;
  }
  const O4 = I(t7, "GEOTIEPOINTS"), b4 = I(t7, "GEOPIXELSCALE"), L3 = I(t7, "GEOTRANSMATRIX"), R3 = t7.has("GEOKEYDIRECTORY") ? t7.get("GEOKEYDIRECTORY").data : null;
  let k4, C5, G3 = false, v5 = false;
  if (R3) {
    G3 = 2 === p(R3, "GTRasterTypeGeoKey");
    const e7 = p(R3, "GTModelTypeGeoKey");
    if (2 === e7) {
      const e8 = p(R3, "GeographicTypeGeoKey");
      e8 >= 1024 && e8 <= 32766 && (P4 = { wkid: e8 }), P4 || 32767 !== e8 || (v5 = true, P4 = { wkid: 4326 });
    } else if (1 === e7) {
      const e8 = p(R3, "ProjectedCSTypeGeoKey");
      e8 >= 1024 && e8 <= 32766 && (P4 = { wkid: e8 });
    }
  }
  if (b4 && O4 && O4.length >= 6 ? (k4 = [b4[0], 0, O4[3] - O4[0] * b4[0], 0, -Math.abs(b4[1]), O4[4] - O4[1] * b4[1]], G3 && (k4[2] -= 0.5 * k4[0] + 0.5 * k4[1], k4[5] -= 0.5 * k4[3] + 0.5 * k4[4])) : L3 && 16 === L3.length && (k4 = G3 ? [L3[0], L3[1], L3[3] - 0.5 * L3[0], L3[4], L3[5], L3[7] - 0.5 * L3[5]] : [L3[0], L3[1], L3[3], L3[4], L3[5], L3[7]]), k4) {
    const e7 = [{ x: 0, y: s8 }, { x: 0, y: 0 }, { x: i8, y: s8 }, { x: i8, y: 0 }];
    let t8, n16 = Number.POSITIVE_INFINITY, a16 = Number.POSITIVE_INFINITY, r15 = Number.NEGATIVE_INFINITY, l8 = Number.NEGATIVE_INFINITY;
    for (let i9 = 0; i9 < e7.length; i9++) t8 = E2(e7[i9], k4), n16 = t8.x > n16 ? n16 : t8.x, r15 = t8.x < r15 ? r15 : t8.x, a16 = t8.y > a16 ? a16 : t8.y, l8 = t8.y < l8 ? l8 : t8.y;
    C5 = { xmin: n16, xmax: r15, ymin: a16, ymax: l8, spatialReference: P4 };
  } else C5 = { xmin: -0.5, ymin: 0.5 - s8, xmax: i8 - 0.5, ymax: 0.5, spatialReference: P4 };
  v5 && (C5.xmax - C5.xmin > 400 || Math.max(Math.abs(C5.xmin), Math.abs(C5.xmax)) > 361) && (P4 = null, C5.spatialReference = null);
  const F2 = U(e6);
  let B4, W2, H3, Y2, _2;
  if (F2.length > 0) {
    H3 = Math.round(Math.log(i8 / p(F2[0], "IMAGEWIDTH")) / Math.LN2);
    const e7 = F2[F2.length - 1];
    Y2 = F2.length, B4 = p(e7, "TILEWIDTH"), W2 = p(e7, "TILELENGTH");
  }
  B4 = null != Y2 && Y2 > 0 ? B4 || n15 : null, W2 = null != Y2 && Y2 > 0 ? W2 || a15 : null, n15 && (_2 = [{ maxCol: Math.ceil(i8 / n15) - 1, maxRow: Math.ceil(s8 / a15) - 1, minRow: 0, minCol: 0 }], F2.forEach((e7) => {
    _2.push({ maxCol: Math.ceil(p(e7, "IMAGEWIDTH") / p(e7, "TILEWIDTH")) - 1, maxRow: Math.ceil(p(e7, "IMAGELENGTH") / p(e7, "TILELENGTH")) - 1, minRow: 0, minCol: 0 });
  }));
  const j3 = w2(e6[0], "GDAL_METADATA"), K = x(j3);
  A5 += " " + V({ width: i8, height: s8, tileWidth: n15, tileHeight: a15, planes: l7, ifds: e6 });
  const X = N(e6).length === F2.length + 1, J = (F2 == null ? void 0 : F2.length) ? F2.map((e7) => ({ x: i8 / p(e7, "IMAGEWIDTH"), y: s8 / p(e7, "IMAGELENGTH") })) : void 0;
  return { width: i8, height: s8, tileWidth: n15, tileHeight: a15, planes: l7, isBSQ: u11, pixelType: f7, compression: y4, noData: d5, hasMaskBand: X, isSupported: S4, pyramidResolutions: J, message: A5, extent: C5, isPseudoGeographic: v5, affine: b4 ? null : k4, firstPyramidLevel: H3, maximumPyramidLevel: Y2, pyramidBlockWidth: B4, pyramidBlockHeight: W2, tileBoundary: _2, metadata: K };
}
function D(e6, t7) {
  const n15 = T(e6, "PLANARCONFIGURATION");
  return n15 ? 2 === n15[0] : !!t7 && t7.isBSQ;
}
function U(e6) {
  return e6.filter((e7) => 1 === p(e7, "NEWSUBFILETYPE"));
}
function N(e6) {
  return e6.filter((e7) => {
    const t7 = !(4 & ~(p(e7, "NEWSUBFILETYPE") ?? 0)), n15 = 4 === p(e7, "PHOTOMETRICINTERPRETATION");
    return t7 && n15;
  });
}
function k(e6) {
  const { littleEndian: t7, isBigTiff: n15, firstIFDPos: a15 } = F(e6);
  let i8 = a15;
  const s8 = [];
  do {
    const a16 = B2(e6, t7, i8, 0, n8.tiffTags, n15 ? 8 : 4);
    if (!a16.success) break;
    s8.push(a16.ifd), i8 = a16.nextIFD;
  } while (i8 > 0);
  return { ...R(s8), littleEndian: t7, isBigTiff: n15, ifds: s8, pyramidIFDs: U(s8), maskIFDs: N(s8) };
}
function C2(e6, t7, n15) {
  const a15 = e6.getUint32(t7, n15), i8 = e6.getUint32(t7 + 4, n15);
  return n15 ? i8 * u4 + a15 : a15 * u4 + i8;
}
function G(e6, t7, n15) {
  let a15 = n15 ? e6.getInt32(t7, n15) : e6.getUint32(t7, n15), i8 = n15 ? e6.getUint32(t7 + 4, n15) : e6.getInt32(t7 + 4, n15);
  const s8 = (n15 ? a15 : i8) >= 0 ? 1 : -1;
  n15 ? a15 *= s8 : i8 *= s8;
  return s8 * (n15 ? i8 * u4 + a15 : a15 * u4 + i8);
}
function v(e6, t7, n15, a15) {
  return a15 ? C2(e6, t7, n15) : e6.getUint32(t7, n15);
}
function F(e6) {
  const t7 = new DataView(e6, 0, 16), n15 = t7.getUint16(0, false);
  let a15 = null;
  if (18761 === n15) a15 = true;
  else {
    if (19789 !== n15) throw new Error("unexpected endianess byte");
    a15 = false;
  }
  const i8 = t7.getUint16(2, a15);
  if (42 !== i8 && 43 !== i8) throw new Error("unexpected tiff identifier");
  let s8 = 4;
  const r14 = 43 === i8;
  if (r14) {
    const e7 = t7.getUint16(s8, a15);
    if (s8 += 2, 8 !== e7) throw new Error("unsupported bigtiff version");
    if (0 !== t7.getUint16(s8, a15)) throw new Error("unsupported bigtiff version");
    s8 += 2;
  }
  return { littleEndian: a15, isBigTiff: r14, firstIFDPos: v(t7, s8, a15, r14) };
}
function B2(t7, n15, a15, i8 = 0, s8 = n8.tiffTags, l7 = 4) {
  const o11 = d(t7, n15, a15, i8, s8, l7);
  let f7;
  const u11 = o11.ifd;
  if (u11) {
    if (n8.ifdTags.forEach((e6, a16) => {
      u11.has(a16) && (f7 = u11.get(a16), f7.data = d(t7, n15, f7.valueOffset - i8, i8, e6).ifd);
    }), u11.has("GEOKEYDIRECTORY")) {
      f7 = u11.get("GEOKEYDIRECTORY");
      const e6 = f7.values;
      if (e6 && e6.length > 4) {
        const a16 = e6[0] + "." + e6[1] + "." + e6[2];
        f7.data = d(t7, n15, f7.valueOffset + 6 - i8, i8, n8.geoKeys, 2).ifd, f7.data && f7.data.set("GEOTIFFVersion", { id: 0, type: 2, valueCount: 1, valueOffset: null, values: [a16] });
      }
    }
    if (u11.has("XMP")) {
      f7 = u11.get("XMP");
      const t8 = f7.values;
      "number" == typeof t8[0] && 7 === f7.type && (f7.values = [r9(new Uint8Array(t8))]);
    }
  }
  return o11;
}
function V(e6) {
  const { width: t7, height: n15, tileHeight: a15, tileWidth: i8 } = e6, s8 = e6.planes, r14 = i8 ? i8 * a15 : t7 * n15, l7 = p(e6.ifds[0], "BITSPERSAMPLE");
  let o11 = "";
  return r14 * s8 > 2 ** 30 / (l7 > 8 ? l7 / 8 : 1) && (o11 = i8 ? "tiled tiff exceeding 1 gigabits per tile is not supported" : "scanline tiff exceeding 1 gigabits is not supported"), o11;
}
function W(e6, t7, n15, a15, i8) {
  const s8 = a15 ? 4 : 1, r14 = n15 * s8 * i8;
  a15 && (e6 = new Uint8Array(e6.buffer));
  for (let f7 = 0; f7 < t7; f7++) {
    const t8 = f7 * r14;
    for (let n16 = i8; n16 < r14; n16++) e6[t8 + n16] += e6[t8 + n16 - i8];
  }
  if (!a15) return e6;
  const l7 = new Uint8Array(e6.length), o11 = n15 * i8;
  for (let f7 = 0; f7 < t7; f7++) {
    const t8 = f7 * r14;
    for (let n16 = 0; n16 < o11; n16++) for (let a16 = 0; a16 < s8; a16++) l7[t8 + n16 * s8 + a16] = e6[t8 + n16 + (s8 - a16 - 1) * o11];
  }
  return new Float32Array(l7.buffer);
}
async function H2(e6, t7) {
  const { headerInfo: n15, ifd: a15, offsets: i8, sizes: r14 } = t7, l7 = [];
  for (let s8 = 0; s8 < i8.length; s8++) {
    r14[s8];
    const t8 = await M(e6, n15.littleEndian, a15, i8[s8], r14[s8] || e6.byteLength);
    l7.push(t8);
  }
  const o11 = D(a15, n15), f7 = p(a15, "BITSPERSAMPLE"), u11 = h2(p(a15, "SAMPLEFORMAT") ?? 1, f7), c7 = p(a15, "SAMPLESPERPIXEL") || n15.planes, E3 = g3(u11), T4 = p(a15, "TILEWIDTH"), I4 = p(a15, "TILELENGTH"), w5 = p(a15, "COMPRESSION") ?? 1, d5 = T4 * I4;
  let m7;
  const y4 = [];
  let S4 = l7[0];
  const A5 = 34887 === w5;
  for (let s8 = 0; s8 < c7; s8++) {
    if (m7 = new E3(d5), l7.length === c7) S4 = l7[s8], S4.length === d5 && (m7 = S4);
    else if (S4.length) if (o11 || A5) m7 = S4.length === d5 ? S4 : S4.slice(d5 * s8, d5 * (s8 + 1));
    else for (let e7 = 0; e7 < d5; e7++) m7[e7] = S4[e7 * c7 + s8];
    y4.push(m7);
  }
  const P4 = n15.noData ? n15.noData[0] : t7.noDataValue, O4 = n15.metadata ? n15.metadata.statistics : null, x4 = O4 ? O4.map((e7) => e7.min) : null, L3 = O4 ? O4.map((e7) => e7.max) : null, R3 = { pixelType: u11, width: T4, height: I4, pixels: y4, noDataValue: P4 };
  return null != P4 ? a4(R3, P4) : x4 && L3 && t7.applyMinMaxConstraint && (R3.mask = b(y4, x4, L3)), R3;
}
async function Y(e6, t7 = {}) {
  const n15 = t7.pyramidLevel || 0, a15 = t7.headerInfo || k(e6), { ifds: i8, noData: r14 } = a15;
  if (0 === i8.length) throw new Error("no valid image file directory");
  const l7 = V(a15);
  if (l7) throw l7;
  let o11 = null;
  const f7 = -1 === n15 ? i8[i8.length - 1] : i8[n15], u11 = r14 ?? t7.noDataValue;
  return o11 = a15.tileWidth ? await P(e6, a15, f7) : O(e6, a15, f7), o11 ? (null != u11 && a4(o11, u11), o11) : o11;
}

// node_modules/@arcgis/core/layers/support/rasterFormats/RasterCodec.js
var m3 = function(t7) {
  var e6, a15, i8, s8, r14, n15;
  function o11(t8) {
    var e7, a16, i9, s9, r15, n16, o12, h7, c7, l7, p5, d5, u11;
    for (this.data = t8, this.pos = 8, this.palette = [], this.imgData = [], this.transparency = {}, this.animation = null, this.text = {}, r15 = null; ; ) {
      switch (e7 = this.readUInt32(), h7 = (function() {
        var t9, e8;
        for (e8 = [], t9 = 0; t9 < 4; ++t9) e8.push(String.fromCharCode(this.data[this.pos++]));
        return e8;
      }).call(this).join(""), h7) {
        case "IHDR":
          this.width = this.readUInt32(), this.height = this.readUInt32(), this.bits = this.data[this.pos++], this.colorType = this.data[this.pos++], this.compressionMethod = this.data[this.pos++], this.filterMethod = this.data[this.pos++], this.interlaceMethod = this.data[this.pos++];
          break;
        case "acTL":
          this.animation = { numFrames: this.readUInt32(), numPlays: this.readUInt32() || 1 / 0, frames: [] };
          break;
        case "PLTE":
          this.palette = this.read(e7);
          break;
        case "fcTL":
          r15 && this.animation.frames.push(r15), this.pos += 4, r15 = { width: this.readUInt32(), height: this.readUInt32(), xOffset: this.readUInt32(), yOffset: this.readUInt32() }, s9 = this.readUInt16(), i9 = this.readUInt16() || 100, r15.delay = 1e3 * s9 / i9, r15.disposeOp = this.data[this.pos++], r15.blendOp = this.data[this.pos++], r15.data = [];
          break;
        case "IDAT":
        case "fdAT":
          for ("fdAT" === h7 && (this.pos += 4, e7 -= 4), t8 = (null != r15 ? r15.data : void 0) || this.imgData, p5 = 0; 0 <= e7 ? p5 < e7 : p5 > e7; 0 <= e7 ? ++p5 : --p5) t8.push(this.data[this.pos++]);
          break;
        case "tRNS":
          switch (this.transparency = {}, this.colorType) {
            case 3:
              if (this.transparency.indexed = this.read(e7), (c7 = 255 - this.transparency.indexed.length) > 0) for (d5 = 0; 0 <= c7 ? d5 < c7 : d5 > c7; 0 <= c7 ? ++d5 : --d5) this.transparency.indexed.push(255);
              break;
            case 0:
              this.transparency.grayscale = this.read(e7)[0];
              break;
            case 2:
              this.transparency.rgb = this.read(e7);
          }
          break;
        case "tEXt":
          n16 = (l7 = this.read(e7)).indexOf(0), o12 = String.fromCharCode.apply(String, l7.slice(0, n16)), this.text[o12] = String.fromCharCode.apply(String, l7.slice(n16 + 1));
          break;
        case "IEND":
          return r15 && this.animation.frames.push(r15), this.colors = (function() {
            switch (this.colorType) {
              case 0:
              case 3:
              case 4:
                return 1;
              case 2:
              case 6:
                return 3;
            }
          }).call(this), this.hasAlphaChannel = 4 === (u11 = this.colorType) || 6 === u11, a16 = this.colors + (this.hasAlphaChannel ? 1 : 0), this.pixelBitlength = this.bits * a16, this.colorSpace = (function() {
            switch (this.colors) {
              case 1:
                return "DeviceGray";
              case 3:
                return "DeviceRGB";
            }
          }).call(this), void (this.imgData = new Uint8Array(this.imgData));
        default:
          this.pos += e7;
      }
      if (this.pos += 4, this.pos > this.data.length) throw new Error("Incomplete or corrupt PNG file");
    }
  }
  return o11.load = function(t8, e7, a16) {
    var i9;
    return "function" == typeof e7 && (a16 = e7), (i9 = new XMLHttpRequest()).open("GET", t8, true), i9.responseType = "arraybuffer", i9.onload = function() {
      var t9;
      return t9 = new o11(new Uint8Array(i9.response || i9.mozResponseArrayBuffer)), "function" == typeof (null != e7 ? e7.getContext : void 0) && t9.render(e7), "function" == typeof a16 ? a16(t9) : void 0;
    }, i9.send(null);
  }, a15 = 1, i8 = 2, e6 = 0, o11.prototype.read = function(t8) {
    var e7, a16;
    for (a16 = [], e7 = 0; 0 <= t8 ? e7 < t8 : e7 > t8; 0 <= t8 ? ++e7 : --e7) a16.push(this.data[this.pos++]);
    return a16;
  }, o11.prototype.readUInt32 = function() {
    return this.data[this.pos++] << 24 | this.data[this.pos++] << 16 | this.data[this.pos++] << 8 | this.data[this.pos++];
  }, o11.prototype.readUInt16 = function() {
    return this.data[this.pos++] << 8 | this.data[this.pos++];
  }, o11.prototype.decodePixels = function(t8) {
    var e7, a16, i9, s9, r15, n16, o12, h7, c7, p5, d5, u11, f7, m7, g7, w5, y4, x4, b4, k4, T4, I4, C5;
    if (null == t8 && (t8 = this.imgData), 0 === t8.length) return new Uint8Array(0);
    for (t8 = (t8 = new s3(t8)).getBytes(), w5 = (u11 = this.pixelBitlength / 8) * this.width, f7 = new Uint8Array(w5 * this.height), n16 = t8.length, g7 = 0, m7 = 0, a16 = 0; m7 < n16; ) {
      switch (t8[m7++]) {
        case 0:
          for (s9 = b4 = 0; b4 < w5; s9 = b4 += 1) f7[a16++] = t8[m7++];
          break;
        case 1:
          for (s9 = k4 = 0; k4 < w5; s9 = k4 += 1) e7 = t8[m7++], r15 = s9 < u11 ? 0 : f7[a16 - u11], f7[a16++] = (e7 + r15) % 256;
          break;
        case 2:
          for (s9 = T4 = 0; T4 < w5; s9 = T4 += 1) e7 = t8[m7++], i9 = (s9 - s9 % u11) / u11, y4 = g7 && f7[(g7 - 1) * w5 + i9 * u11 + s9 % u11], f7[a16++] = (y4 + e7) % 256;
          break;
        case 3:
          for (s9 = I4 = 0; I4 < w5; s9 = I4 += 1) e7 = t8[m7++], i9 = (s9 - s9 % u11) / u11, r15 = s9 < u11 ? 0 : f7[a16 - u11], y4 = g7 && f7[(g7 - 1) * w5 + i9 * u11 + s9 % u11], f7[a16++] = (e7 + Math.floor((r15 + y4) / 2)) % 256;
          break;
        case 4:
          for (s9 = C5 = 0; C5 < w5; s9 = C5 += 1) e7 = t8[m7++], i9 = (s9 - s9 % u11) / u11, r15 = s9 < u11 ? 0 : f7[a16 - u11], 0 === g7 ? y4 = x4 = 0 : (y4 = f7[(g7 - 1) * w5 + i9 * u11 + s9 % u11], x4 = i9 && f7[(g7 - 1) * w5 + (i9 - 1) * u11 + s9 % u11]), o12 = r15 + y4 - x4, h7 = Math.abs(o12 - r15), p5 = Math.abs(o12 - y4), d5 = Math.abs(o12 - x4), c7 = h7 <= p5 && h7 <= d5 ? r15 : p5 <= d5 ? y4 : x4, f7[a16++] = (e7 + c7) % 256;
          break;
        default:
          throw new Error("Invalid filter algorithm: " + t8[m7 - 1]);
      }
      g7++;
    }
    return f7;
  }, o11.prototype.decodePalette = function() {
    var t8, e7, a16, i9, s9, r15, n16, o12, h7;
    for (a16 = this.palette, r15 = this.transparency.indexed || [], s9 = new Uint8Array((r15.length || 0) + a16.length), i9 = 0, a16.length, t8 = 0, e7 = n16 = 0, o12 = a16.length; n16 < o12; e7 = n16 += 3) s9[i9++] = a16[e7], s9[i9++] = a16[e7 + 1], s9[i9++] = a16[e7 + 2], s9[i9++] = null != (h7 = r15[t8++]) ? h7 : 255;
    return s9;
  }, o11.prototype.copyToImageData = function(t8, e7) {
    var a16, i9, s9, r15, n16, o12, h7, c7, l7, p5, d5;
    if (i9 = this.colors, l7 = null, a16 = this.hasAlphaChannel, this.palette.length && (l7 = null != (d5 = this._decodedPalette) ? d5 : this._decodedPalette = this.decodePalette(), i9 = 4, a16 = true), c7 = (s9 = t8.data || t8).length, n16 = l7 || e7, r15 = o12 = 0, 1 === i9) for (; r15 < c7; ) h7 = l7 ? 4 * e7[r15 / 4] : o12, p5 = n16[h7++], s9[r15++] = p5, s9[r15++] = p5, s9[r15++] = p5, s9[r15++] = a16 ? n16[h7++] : this.transparency.grayscale && this.transparency.grayscale === p5 ? 0 : 255, o12 = h7;
    else for (; r15 < c7; ) h7 = l7 ? 4 * e7[r15 / 4] : o12, s9[r15++] = n16[h7++], s9[r15++] = n16[h7++], s9[r15++] = n16[h7++], s9[r15++] = a16 ? n16[h7++] : this.transparency.rgb && this.transparency.rgb[1] === n16[h7 - 3] && this.transparency.rgb[3] === n16[h7 - 2] && this.transparency.rgb[5] === n16[h7 - 1] ? 0 : 255, o12 = h7;
  }, o11.prototype.decode = function() {
    var t8;
    return t8 = new Uint8Array(this.width * this.height * 4), this.copyToImageData(t8, this.decodePixels()), t8;
  }, r14 = t7.document && t7.document.createElement("canvas"), n15 = r14 && r14.getContext("2d"), s8 = function(t8) {
    var e7;
    return n15.width = t8.width, n15.height = t8.height, n15.clearRect(0, 0, t8.width, t8.height), n15.putImageData(t8, 0, 0), (e7 = new Image()).src = r14.toDataURL(), e7;
  }, o11.prototype.decodeFrames = function(t8) {
    var e7, a16, i9, r15, n16, o12, h7, c7;
    if (this.animation) {
      for (c7 = [], a16 = n16 = 0, o12 = (h7 = this.animation.frames).length; n16 < o12; a16 = ++n16) e7 = h7[a16], i9 = t8.createImageData(e7.width, e7.height), r15 = this.decodePixels(new Uint8Array(e7.data)), this.copyToImageData(i9, r15), e7.imageData = i9, c7.push(e7.image = s8(i9));
      return c7;
    }
  }, o11.prototype.renderFrame = function(t8, s9) {
    var r15, n16, o12;
    return r15 = (n16 = this.animation.frames)[s9], o12 = n16[s9 - 1], 0 === s9 && t8.clearRect(0, 0, this.width, this.height), (null != o12 ? o12.disposeOp : void 0) === a15 ? t8.clearRect(o12.xOffset, o12.yOffset, o12.width, o12.height) : (null != o12 ? o12.disposeOp : void 0) === i8 && t8.putImageData(o12.imageData, o12.xOffset, o12.yOffset), r15.blendOp === e6 && t8.clearRect(r15.xOffset, r15.yOffset, r15.width, r15.height), t8.drawImage(r15.image, r15.xOffset, r15.yOffset);
  }, o11.prototype.animate = function(t8) {
    var e7, a16, i9, s9, r15, n16, o12 = this;
    return a16 = 0, n16 = this.animation, s9 = n16.numFrames, i9 = n16.frames, r15 = n16.numPlays, (e7 = function() {
      var n17, h7;
      if (n17 = a16++ % s9, h7 = i9[n17], o12.renderFrame(t8, n17), s9 > 1 && a16 / s9 < r15) return o12.animation._timeout = setTimeout(e7, h7.delay);
    })();
  }, o11.prototype.stopAnimation = function() {
    var t8;
    return clearTimeout(null != (t8 = this.animation) ? t8._timeout : void 0);
  }, o11.prototype.render = function(t8) {
    var e7, a16;
    return t8._png && t8._png.stopAnimation(), t8._png = this, t8.width = this.width, t8.height = this.height, e7 = t8.getContext("2d"), this.animation ? (this.decodeFrames(e7), this.animate(e7)) : (a16 = e7.createImageData(this.width, this.height), this.copyToImageData(a16, this.decodePixels()), e7.putImageData(a16, 0, 0));
  }, o11;
}(self);
var g4 = /* @__PURE__ */ new Set(["jpg", "png", "bmp", "gif"]);
async function w3(e6, s8) {
  if (!r10) throw new s("rasterCoded:decode", "lerc decoder is not supported on big endian platform");
  await r6();
  const { offset: r14 } = s8, { width: h7, height: c7, pixelType: l7, statistics: p5, depthCount: d5, noDataValues: u11, bandMasks: m7, pixels: g7, mask: w5 } = u3(e6, { inputOffset: r14, returnInterleaved: s8.returnInterleaved }), y4 = new g2({ width: h7, height: c7, pixelType: l7.toLowerCase(), pixels: g7, mask: w5, statistics: p5.map(({ minValue: t7, maxValue: e7 }) => new l2(t7, e7)), bandMasks: m7, depthCount: d5, noDataValues: u11 });
  return (p5 == null ? void 0 : p5.length) || y4.updateStatistics(), y4;
}
async function y2(t7, i8) {
  const s8 = await Y(t7, { ...i8, noDataValue: null });
  n2(s8);
  const r14 = new g2({ width: s8.width, height: s8.height, pixels: s8.pixels, pixelType: s8.pixelType.toLowerCase(), mask: s8.mask, bandMasks: s8.bandMasks, statistics: null });
  return r14.updateStatistics(), r14;
}
async function x2(t7, e6) {
  const i8 = await H2(t7, e6.customOptions), s8 = new g2({ width: i8.width, height: i8.height, pixels: i8.pixels, pixelType: i8.pixelType.toLowerCase(), mask: i8.mask, statistics: null });
  return s8.updateStatistics(), s8;
}
function b2(t7, e6) {
  const i8 = e6.pixelType || "u8", s8 = g2.getPixelArrayConstructor(i8), r14 = "u8" === i8 ? t7 : new s8(t7.buffer), n15 = [], o11 = e6.planes || 1;
  if (1 === o11) n15.push(r14);
  else for (let a15 = 0; a15 < o11; a15++) {
    const i9 = (e6.width || 1) * (e6.height || t7.length), h8 = new s8(i9);
    for (let t8 = 0; t8 < i9; t8++) h8[t8] = r14[t8 * o11 + a15];
    n15.push(h8);
  }
  const h7 = new g2({ width: e6.width || 1, height: e6.height || t7.length, pixels: n15, pixelType: i8, statistics: null });
  return h7.updateStatistics(), h7;
}
function k2(t7, e6) {
  return b2(new s3(new Uint8Array(t7)).getBytes(), e6);
}
function T2(t7, e6) {
  return b2(i4(t7, e6.offset, e6.eof, !e6.isInputBigEndian), e6);
}
function I2(t7, e6, i8) {
  const { pixelTypeCtor: s8 } = S3(e6.pixelType), r14 = (0, a8.decode)(t7, { width: e6.width, height: e6.height, pixelType: s8, format: i8 }), n15 = new g2({ width: e6.width, height: e6.height, pixels: r14.pixels, pixelType: e6.pixelType, mask: r14.mask, statistics: null });
  return n15.updateStatistics(), n15;
}
function C3(t7, e6) {
  const i8 = r5.decode(t7, e6.hasNoZlibMask ?? void 0), s8 = new g2({ width: i8.width, height: i8.height, pixels: i8.pixels, pixelType: "u8", mask: i8.mask, statistics: null });
  return s8.updateStatistics(), s8;
}
function v2(t7, e6) {
  const i8 = new Uint8Array(t7), s8 = new m3(i8), { width: r14, height: n15 } = e6, o11 = r14 * n15, h7 = s8.decode();
  let c7, l7 = 0, p5 = 0;
  const d5 = new Uint8Array(o11);
  for (l7 = 0; l7 < o11; l7++) d5[l7] = h7[4 * l7 + 3];
  const u11 = new g2({ width: r14, height: n15, pixels: [], pixelType: "u8", mask: d5, statistics: [] });
  for (l7 = 0; l7 < 3; l7++) {
    for (c7 = new Uint8Array(o11), p5 = 0; p5 < o11; p5++) c7[p5] = h7[4 * p5 + l7];
    u11.addData({ pixels: c7 });
  }
  return u11.updateStatistics(), u11;
}
async function A3(t7, e6, i8, r14) {
  const n15 = new i2(), o11 = { applyJpegMask: false, format: e6, ...i8 }, h7 = await n15.decode(t7, o11, r14), c7 = new g2(h7);
  return c7.updateStatistics(), c7;
}
function U2(e6) {
  if (null == e6) throw new s("rasterCodec:decode", "parameter encodeddata is required.");
  const a15 = new Uint8Array(e6, 0, 10);
  let i8 = "";
  return 255 === a15[0] && 216 === a15[1] ? i8 = "jpg" : 137 === a15[0] && 80 === a15[1] && 78 === a15[2] && 71 === a15[3] ? i8 = "png" : 67 === a15[0] && 110 === a15[1] && 116 === a15[2] && 90 === a15[3] && 73 === a15[4] && 109 === a15[5] && 97 === a15[6] && 103 === a15[7] && 101 === a15[8] && 32 === a15[9] ? i8 = "lerc" : 76 === a15[0] && 101 === a15[1] && 114 === a15[2] && 99 === a15[3] && 50 === a15[4] && 32 === a15[5] ? i8 = "lerc2" : 73 === a15[0] && 73 === a15[1] && 42 === a15[2] && 0 === a15[3] || 77 === a15[0] && 77 === a15[1] && 0 === a15[2] && 42 === a15[3] || 73 === a15[0] && 73 === a15[1] && 43 === a15[2] && 0 === a15[3] || 77 === a15[0] && 77 === a15[1] && 0 === a15[2] && 43 === a15[3] ? i8 = "tiff" : 71 === a15[0] && 73 === a15[1] && 70 === a15[2] ? i8 = "gif" : 66 === a15[0] && 77 === a15[1] ? i8 = "bmp" : String.fromCharCode.apply(null, a15).toLowerCase().includes("error") && (i8 = "error"), i8;
}
function D2(e6) {
  let a15 = null;
  switch (e6) {
    case "lerc":
    case "lerc2":
      a15 = w3;
      break;
    case "jpg":
      a15 = C3;
      break;
    case "png":
      a15 = v2;
      break;
    case "bsq":
    case "bip":
      a15 = (t7, a16) => I2(t7, a16, e6);
      break;
    case "tiff":
      a15 = y2;
      break;
    case "deflate":
      a15 = k2;
      break;
    case "lzw":
      a15 = T2;
      break;
    case "error":
      a15 = () => {
        throw new s("rasterCodec:decode", "input data contains error");
      };
      break;
    default:
      a15 = () => {
        throw new s("rasterCodec:decode", "unsupported raster format");
      };
  }
  return a15;
}
function S3(t7) {
  let e6 = null, a15 = null;
  switch (t7 ? t7.toLowerCase() : "f32") {
    case "u1":
    case "u2":
    case "u4":
    case "u8":
      a15 = 255, e6 = Uint8Array;
      break;
    case "u16":
      a15 = a15 || 65535, e6 = Uint16Array;
      break;
    case "u32":
      a15 = a15 || 2 ** 32 - 1, e6 = Uint32Array;
      break;
    case "s8":
      a15 = a15 || -128, e6 = Int8Array;
      break;
    case "s16":
      a15 = a15 || -32768, e6 = Int16Array;
      break;
    case "s32":
      a15 = a15 || 0 - 2 ** 31, e6 = Int32Array;
      break;
    default:
      e6 = Float32Array;
  }
  return { pixelTypeCtor: e6, noDataValue: a15 };
}
function O2(t7, e6 = 1) {
  if (!t7) return;
  const { pixels: i8, width: s8, height: r14, mask: n15 } = t7;
  if (!i8 || 0 === i8.length) return;
  const o11 = i8.length, h7 = s8 - 1, c7 = r14 - 1, l7 = [];
  let p5, d5, u11, f7, m7, g7, w5 = null;
  const y4 = g2.getPixelArrayConstructor(t7.pixelType);
  if (0 === e6) {
    for (p5 = 0; p5 < o11; p5++) {
      for (m7 = i8[p5], g7 = new y4(h7 * c7), d5 = 0; d5 < c7; d5++) for (f7 = d5 * s8, u11 = 0; u11 < h7; u11++) g7[d5 * h7 + u11] = m7[f7 + u11];
      l7.push(g7);
    }
    if (null != n15) for (w5 = new Uint8Array(h7 * c7), d5 = 0; d5 < c7; d5++) for (f7 = d5 * s8, u11 = 0; u11 < h7; u11++) w5[d5 * h7 + u11] = n15[f7 + u11];
  } else {
    for (p5 = 0; p5 < o11; p5++) {
      for (m7 = i8[p5], g7 = new y4(h7 * c7), d5 = 0; d5 < c7; d5++) for (f7 = d5 * s8, u11 = 0; u11 < h7; u11++) g7[d5 * h7 + u11] = (m7[f7 + u11] + m7[f7 + u11 + 1] + m7[f7 + s8 + u11] + m7[f7 + s8 + u11 + 1]) / 4;
      l7.push(g7);
    }
    if (n15) for (w5 = new Uint8Array(h7 * c7), d5 = 0; d5 < c7; d5++) for (f7 = d5 * s8, u11 = 0; u11 < h7; u11++) w5[d5 * h7 + u11] = Math.min.apply(null, [n15[f7 + u11], n15[f7 + u11 + 1], n15[f7 + s8 + u11], n15[f7 + s8 + u11 + 1]]);
  }
  t7.width = h7, t7.height = c7, t7.mask = w5, t7.pixels = l7;
}
function P2(t7) {
  let e6 = U2(t7);
  return "lerc2" === e6 ? e6 = "lerc" : "error" === e6 && (e6 = ""), e6;
}
async function j2(e6, i8 = {}, s8) {
  var _a;
  if (null == e6) throw new s("rasterCodec:decode", "missing encodeddata parameter.");
  let r14 = (_a = i8.format) == null ? void 0 : _a.toLowerCase();
  if (!("bsq" !== r14 && "bip" !== r14 || null != i8.width && null != i8.height)) throw new s("rasterCodec:decode", "requires width and height in options parameter.");
  if ("tiff" === r14 && i8.customOptions) return x2(e6, i8);
  if ((!r14 || "bsq" !== r14 && "bip" !== r14 && "deflate" !== r14 && "lzw" !== r14) && (r14 = U2(e6)), i8.useCanvas && g4.has(r14)) return A3(e6, r14, i8, s8);
  const n15 = D2(r14);
  let o11;
  i8.isPoint && (null != (i8 = { ...i8 }).width && i8.width++, null != i8.height && i8.height++);
  const { offsets: h7 } = i8;
  if (h7 && h7.length > 1) {
    const t7 = h7.map((t8, a15) => n15(e6.slice(t8, h7[a15 + 1]), i8)), s9 = await Promise.all(t7);
    o11 = s9[0], o11.pixels = s9.map((t8) => t8.pixels[0]);
    const r15 = s9.map((t8) => t8.mask);
    s9.some((t8) => null != t8) && (r15.forEach((t8, e7) => {
      null == t8 && (r15[e7] = new Uint8Array(o11.width * o11.height).fill(255));
    }), o11.bandMasks = r15, o11.mask = g2.combineBandMasks(r15)), o11.updateStatistics();
  } else o11 = await n15(e6, { ...i8, offset: (h7 == null ? void 0 : h7[0]) ?? i8.offset });
  return "jpg" !== r14 && null != i8.noDataValue && 1 === o11.depthCount && a4(o11, i8.noDataValue, { customFloatTolerance: i8.tolerance }), i8.isPoint && O2(o11), o11;
}

// node_modules/@arcgis/core/renderers/support/stretchRendererUtils.js
var n9 = new n3({ none: "none", standardDeviation: "standard-deviation", histogramEqualization: "histogram-equalization", minMax: "min-max", percentClip: "percent-clip", sigmoid: "sigmoid" });
var a9 = { 0: "none", 3: "standardDeviation", 4: "histogramEqualization", 5: "minMax", 6: "percentClip", 9: "sigmoid" };

// node_modules/@arcgis/core/layers/support/rasterFunctions/stretchUtils.js
var i6 = 1;
var o7 = [0.299, 0.587, 0.114];
function r11(t7, n15 = 256) {
  n15 = Math.min(n15, 256);
  const { size: e6, counts: s8 } = t7, i8 = new Uint8Array(e6), o11 = s8.reduce((t8, e7) => t8 + e7 / n15, 0);
  let r14 = 0, a15 = 0, l7 = 0, f7 = o11;
  for (let u11 = 0; u11 < e6; u11++) if (l7 += s8[u11], !(u11 < e6 - 1 && l7 + s8[u11 + 1] < f7)) {
    for (; r14 < n15 - 1 && f7 < l7; ) r14++, f7 += o11;
    for (let t8 = a15; t8 <= u11; t8++) i8[t8] = r14;
    a15 = u11 + 1;
  }
  for (let u11 = a15; u11 < e6; u11++) i8[u11] = n15 - 1;
  return i8;
}
function a10(t7) {
  const { minCutOff: n15, maxCutOff: e6, gamma: s8, pixelType: i8, rounding: o11 } = t7, r14 = t7.outMin || 0, a15 = t7.outMax || 255;
  if (!["u8", "u16", "s8", "s16"].includes(i8)) return null;
  const f7 = n15.length;
  let u11, c7, m7 = 0;
  "s8" === i8 ? m7 = -127 : "s16" === i8 && (m7 = -32767);
  let h7 = 256;
  ["u16", "s16"].includes(i8) && (h7 = 65536);
  const g7 = [], p5 = [], d5 = a15 - r14;
  for (u11 = 0; u11 < f7; u11++) p5[u11] = e6[u11] - n15[u11], g7[u11] = 0 === p5[u11] ? 0 : d5 / p5[u11];
  let M3;
  const y4 = [];
  let b4, k4, v5;
  if (s8 && s8.length >= f7) {
    const t8 = x3(f7, s8);
    for (u11 = 0; u11 < f7; u11++) {
      for (v5 = [], c7 = 0; c7 < h7; c7++) if (0 !== p5[u11]) if (b4 = c7 + m7, M3 = (b4 - n15[u11]) / p5[u11], k4 = 1, s8[u11] > 1 && (k4 -= (1 / d5) ** (M3 * t8[u11])), b4 < e6[u11] && b4 > n15[u11]) {
        const t9 = k4 * d5 * M3 ** (1 / s8[u11]) + r14;
        v5[c7] = "floor" === o11 ? Math.floor(t9) : "round" === o11 ? Math.round(t9) : t9;
      } else b4 >= e6[u11] ? v5[c7] = a15 : v5[c7] = r14;
      else v5[c7] = r14;
      y4[u11] = v5;
    }
  } else for (u11 = 0; u11 < f7; u11++) {
    for (v5 = [], c7 = 0; c7 < h7; c7++) if (b4 = c7 + m7, b4 <= n15[u11]) v5[c7] = r14;
    else if (b4 >= e6[u11]) v5[c7] = a15;
    else {
      const t8 = (b4 - n15[u11]) * g7[u11] + r14;
      v5[c7] = "floor" === o11 ? Math.floor(t8) : "round" === o11 ? Math.round(t8) : t8;
    }
    y4[u11] = v5;
  }
  if (null != t7.contrastOffset) {
    const n16 = l4(t7.contrastOffset, t7.brightnessOffset);
    for (u11 = 0; u11 < f7; u11++) for (v5 = y4[u11], c7 = 0; c7 < h7; c7++) v5[c7] = n16[v5[c7]];
  }
  return { lut: y4, offset: m7 };
}
function l4(t7, n15) {
  const e6 = Math.min(Math.max(t7, -100), 100), s8 = Math.min(Math.max(n15 ?? 0, -100), 100), i8 = 255, o11 = 128;
  let r14 = 0, a15 = 0;
  const l7 = new Uint8Array(256);
  for (r14 = 0; r14 < 256; r14++) e6 > 0 && e6 < 100 ? a15 = (200 * r14 - 100 * i8 + 2 * i8 * s8) / (2 * (100 - e6)) + o11 : e6 <= 0 && e6 > -100 ? a15 = (200 * r14 - 100 * i8 + 2 * i8 * s8) * (100 + e6) / 2e4 + o11 : 100 === e6 ? (a15 = 200 * r14 - 100 * i8 + (i8 + 1) * (100 - e6) + 2 * i8 * s8, a15 = a15 > 0 ? i8 : 0) : -100 === e6 && (a15 = o11), l7[r14] = a15 > i8 ? i8 : a15 < 0 ? 0 : a15;
  return l7;
}
function f4(t7, n15, e6) {
  const s8 = [];
  for (let i8 = 0; i8 < n15.length; i8++) {
    let r14 = 0, a15 = 0, l7 = 0;
    "min" in n15[i8] ? { min: r14, max: a15, avg: l7 } = n15[i8] : [r14, a15, l7] = n15[i8];
    let f7 = l7 ?? 0;
    "u8" !== t7 && (f7 = 255 * (f7 - r14) / (a15 - r14)), e6 && (f7 *= o7[i8]), s8.push(u5(f7));
  }
  return s8;
}
function u5(t7) {
  if (t7 <= 0 || t7 >= 255) return i6;
  let n15 = 0;
  150 !== t7 && (n15 = t7 <= 150 ? 45 * Math.cos(0.01047 * t7) : 17 * Math.sin(0.021 * t7));
  const e6 = 255, s8 = t7 + n15, o11 = Math.log(t7 / e6), r14 = Math.log(s8 / e6);
  if (0 === r14) return i6;
  const a15 = o11 / r14;
  return isNaN(a15) ? i6 : Math.min(9.9, Math.max(0.01, a15));
}
function c3(t7, n15, e6, s8) {
  let i8 = 1 / 0, o11 = -1 / 0, r14 = 0, a15 = 0, l7 = 0, f7 = 0;
  const u11 = t7.length, c7 = /* @__PURE__ */ new Map(), m7 = [];
  for (let w5 = 0; w5 < u11; w5++) {
    const e7 = t7[w5];
    if (!n15 || n15[w5]) {
      m7.push(e7);
      const t8 = (c7.get(e7) ?? 0) + 1;
      c7.set(e7, t8), t8 > f7 && (f7 = t8, l7 = e7), i8 = e7 < i8 ? e7 : i8, o11 = e7 > o11 ? e7 : o11, r14 += e7, a15++;
    }
  }
  if (0 === a15) return { statistics: { min: 0, max: 0, avg: 0, stddev: 0, mode: 0, median: 0 }, histogram: null };
  const h7 = r14 / a15;
  let g7 = 0;
  for (let w5 = 0; w5 < u11; w5++) n15 && !n15[w5] || (g7 += (t7[w5] - h7) ** 2);
  const p5 = n15 ? n15.filter((t8) => t8).length : u11, d5 = p5 <= 1 ? 0 : Math.sqrt(g7 / (p5 - 1));
  m7.sort((t8, n16) => t8 - n16);
  const x4 = a15 >>> 1, M3 = { min: i8, max: o11, avg: h7, stddev: d5, mode: l7, median: a15 % 2 ? m7[Math.floor(x4)] : (m7[x4 - 1] + m7[x4]) / 2 };
  if (["u8", "s8", "u4", "u2", "u1"].includes(e6)) {
    const e7 = o11 - i8 + 1, s9 = new Uint32Array(e7);
    for (let o12 = 0; o12 < u11; o12++) n15 && !n15[o12] || s9[t7[o12] - i8]++;
    return { statistics: M3, histogram: { min: i8 - 0.5, max: o11 + 0.5, size: e7, counts: s9 } };
  }
  const y4 = 256, b4 = new Uint32Array(y4), k4 = (o11 - i8) / y4;
  if (0 === k4) return { statistics: M3, histogram: { min: i8, max: o11, size: 1, counts: new Uint32Array(1).fill(a15) } };
  const v5 = new Uint32Array(y4 + 1);
  for (let w5 = 0; w5 < u11; w5++) n15 && !n15[w5] || v5[Math.floor((t7[w5] - i8) / k4)]++;
  for (let w5 = 0; w5 < y4 - 1; w5++) b4[w5] = v5[w5];
  return b4[y4 - 1] = v5[y4 - 1] + v5[y4], { statistics: M3, histogram: { min: i8, max: o11, size: y4, counts: b4 } };
}
function m4(t7) {
  const { pixels: n15, mask: e6, pixelType: s8, bandMasks: i8 } = t7, o11 = n15.map((t8, n16) => c3(t8, (i8 == null ? void 0 : i8[n16]) ?? e6, s8));
  return { statistics: o11.map(({ statistics: t8 }) => t8), histograms: o11.map(({ histogram: t8 }) => t8) };
}
function h3(t7) {
  var _a;
  if (!((_a = t7 == null ? void 0 : t7.pixels) == null ? void 0 : _a.length)) return null;
  const { pixels: n15, mask: e6, bandMasks: s8, pixelType: i8 } = t7, o11 = t7.width * t7.height, r14 = n15.length, a15 = [], l7 = [], f7 = 256;
  let u11, c7, m7, h7;
  for (let g7 = 0; g7 < r14; g7++) {
    m7 = new Uint32Array(f7);
    const r15 = n15[g7], p5 = (s8 == null ? void 0 : s8[g7]) ?? e6;
    if ("u8" === i8) {
      if (u11 = 255, c7 = 0, p5) {
        for (let t8 = 0; t8 < o11; t8++) if (p5[t8]) {
          const n16 = r15[t8];
          u11 = n16 < u11 ? n16 : u11, c7 = n16 > c7 ? n16 : c7, m7[n16]++;
        }
      } else for (let t8 = 0; t8 < o11; t8++) {
        const n16 = r15[t8];
        u11 = n16 < u11 ? n16 : u11, c7 = n16 > c7 ? n16 : c7, m7[n16]++;
      }
      m7 = m7.slice(u11, c7 + 1);
    } else {
      let n16 = false;
      t7.statistics || (t7.updateStatistics(), n16 = true);
      const e7 = t7.statistics;
      u11 = e7[g7].minValue, c7 = e7[g7].maxValue;
      const s9 = (c7 - u11) / f7;
      if (0 === s9) {
        !e7 || t7.validPixelCount || n16 || t7.updateStatistics();
        const s10 = (t7.validPixelCount || t7.width * t7.height) / f7;
        for (let t8 = 0; t8 < f7; t8++) m7[t8] = Math.round(s10 * (t8 + 1)) - Math.round(s10 * t8);
      } else {
        h7 = new Uint32Array(f7 + 1);
        for (let t8 = 0; t8 < o11; t8++) p5 && !p5[t8] || h7[Math.floor((r15[t8] - u11) / s9)]++;
        for (let t8 = 0; t8 < f7 - 1; t8++) m7[t8] = h7[t8];
        m7[f7 - 1] = h7[f7 - 1] + h7[f7];
      }
    }
    const d5 = "u8" === i8 ? u11 - 0.5 : u11, x4 = "u8" === i8 ? c7 + 0.5 : c7;
    a15.push({ min: d5, max: x4, size: m7.length, counts: m7 });
    let M3 = 0, y4 = 0, b4 = 0;
    for (let t8 = 0; t8 < m7.length; t8++) M3 += m7[t8], y4 += t8 * m7[t8];
    const k4 = y4 / M3;
    for (let t8 = 0; t8 < m7.length; t8++) b4 += m7[t8] * (t8 - k4) ** 2;
    const v5 = Math.sqrt(b4 / (M3 - 1)), w5 = (x4 - d5) / m7.length, z = (k4 + ("u8" === i8 ? 0 : 0.5)) * w5 + u11, C5 = v5 * w5;
    l7.push({ min: u11, max: c7, avg: z, stddev: C5 });
  }
  return { statistics: l7, histograms: a15 };
}
function g5(t7) {
  const n15 = [];
  for (let e6 = 0; e6 < t7.length; e6++) {
    const { min: s8, max: i8, size: o11, counts: r14 } = t7[e6];
    let a15 = 0, l7 = 0;
    for (let t8 = 0; t8 < o11; t8++) a15 += r14[t8], l7 += t8 * r14[t8];
    const f7 = l7 / a15;
    let u11 = 0;
    for (let t8 = 0; t8 < o11; t8++) u11 += r14[t8] * (t8 - f7) ** 2;
    const c7 = (i8 - s8) / o11, m7 = (f7 + 0.5) * c7 + s8, h7 = Math.sqrt(u11 / (a15 - 1)) * c7;
    n15.push({ min: s8, max: i8, avg: m7, stddev: h7 });
  }
  return n15;
}
function p2(n15, i8) {
  var _a;
  const { pixelBlock: o11, bandIds: a15, returnHistogramLut: l7, rasterInfo: f7 } = i8;
  let u11 = null, c7 = null, m7 = n15.stretchType;
  if ("number" == typeof m7 && (m7 = a9[m7]), n15.dra) if ("minMax" === m7 && (o11 == null ? void 0 : o11.statistics)) u11 = o11.statistics.map((t7) => [t7.minValue, t7.maxValue, 0, 0]);
  else {
    const t7 = h3(o11);
    u11 = null != t7 ? t7.statistics : null, c7 = null != t7 ? t7.histograms : null;
  }
  else u11 = ((_a = n15.statistics) == null ? void 0 : _a.length) ? n15.statistics : f7.statistics, c7 = "histograms" in n15 ? n15.histograms : void 0, c7 || (c7 = f7.histograms);
  "percentClip" !== m7 && "histogramEqualization" !== m7 || (c7 == null ? void 0 : c7.length) || (m7 = "minMax");
  const g7 = (u11 == null ? void 0 : u11.length) || (c7 == null ? void 0 : c7.length) || f7.bandCount, p5 = [], x4 = [];
  let M3, y4, b4, k4, v5, w5, z, C5, O4;
  u11 && !Array.isArray(u11[0]) && (u11 = u11.map((t7) => [t7.min, t7.max, t7.avg, t7.stddev]));
  const [A5, U3] = s2(f7.pixelType);
  if (!(u11 == null ? void 0 : u11.length)) {
    for (u11 = [], C5 = 0; C5 < g7; C5++) u11.push([A5, U3, 1, 1]);
    "standardDeviation" === m7 && (m7 = "minMax");
  }
  switch (m7) {
    case "none":
      for (C5 = 0; C5 < g7; C5++) p5[C5] = A5, x4[C5] = U3;
      break;
    case "minMax":
      for (C5 = 0; C5 < g7; C5++) {
        const t7 = u11[C5];
        p5[C5] = t7[0], x4[C5] = t7[1];
      }
      break;
    case "standardDeviation":
      {
        const { numberOfStandardDeviations: t7 = 2 } = n15;
        for (C5 = 0; C5 < g7; C5++) {
          const n16 = u11[C5];
          p5[C5] = n16[2] - t7 * n16[3], x4[C5] = n16[2] + t7 * n16[3], p5[C5] < n16[0] && (p5[C5] = n16[0]), x4[C5] > n16[1] && (x4[C5] = n16[1]);
        }
      }
      break;
    case "histogramEqualization":
      for (n2(c7), C5 = 0; C5 < g7; C5++) p5[C5] = c7[C5].min, x4[C5] = c7[C5].max;
      break;
    case "percentClip":
      for (n2(c7), C5 = 0; C5 < c7.length; C5++) {
        for (M3 = c7[C5], v5 = new Uint32Array(M3.size), k4 = [...M3.counts], k4.length >= 20 && (k4[0] = k4[1] = k4[2] = k4[k4.length - 1] = k4[k4.length - 2] = 0), b4 = 0, y4 = (M3.max - M3.min) / M3.size, z = -0.5 === M3.min && 1 === y4 ? 0.5 : 0, O4 = 0; O4 < M3.size; O4++) b4 += k4[O4], v5[O4] = b4;
        for (w5 = (n15.minPercent || 0) * b4 / 100, p5[C5] = M3.min + z, O4 = 0; O4 < M3.size; O4++) if (v5[O4] > w5) {
          p5[C5] = M3.min + y4 * (O4 + z);
          break;
        }
        for (w5 = (1 - (n15.maxPercent || 0) / 100) * b4, x4[C5] = M3.max + z, O4 = M3.size - 2; O4 >= 0; O4--) if (v5[O4] < w5) {
          x4[C5] = M3.min + y4 * (O4 + 2 - z);
          break;
        }
        if (x4[C5] < p5[C5]) {
          const t7 = p5[C5];
          p5[C5] = x4[C5], x4[C5] = t7;
        }
      }
      break;
    default:
      for (C5 = 0; C5 < g7; C5++) {
        const t7 = u11[C5];
        p5[C5] = t7[0], x4[C5] = t7[1];
      }
  }
  let T4, q, P4;
  "histogramEqualization" === m7 ? (n2(c7), q = c7[0].size || 256, T4 = 0, l7 && (P4 = c7.map((t7) => r11(t7)))) : (q = n15.max || 255, T4 = n15.min || 0);
  return d2({ minCutOff: p5, maxCutOff: x4, outMax: q, outMin: T4, histogramLut: P4 }, a15);
}
function d2(t7, n15) {
  if (null == n15 || 0 === n15.length) return t7;
  const e6 = Math.max.apply(null, n15), { minCutOff: s8, maxCutOff: i8, outMin: o11, outMax: r14, histogramLut: a15 } = t7;
  return s8.length === n15.length || s8.length <= e6 ? t7 : { minCutOff: n15.map((t8) => s8[t8]), maxCutOff: n15.map((t8) => i8[t8]), histogramLut: a15 ? n15.map((t8) => a15[t8]) : null, outMin: o11, outMax: r14 };
}
function x3(t7, n15) {
  const e6 = new Float32Array(t7);
  for (let s8 = 0; s8 < t7; s8++) n15[s8] > 1 ? n15[s8] > 2 ? e6[s8] = 6.5 + (n15[s8] - 2) ** 2.5 : e6[s8] = 6.5 + 100 * (2 - n15[s8]) ** 4 : e6[s8] = 1;
  return e6;
}
function M2(t7, e6) {
  var _a;
  if (!((_a = t7 == null ? void 0 : t7.pixels) == null ? void 0 : _a.length)) return t7;
  const { mask: s8, bandMasks: i8, width: o11, height: r14, pixels: a15 } = t7, { minCutOff: l7, maxCutOff: f7, gamma: u11 } = e6, c7 = e6.outMin || 0, m7 = e6.outMax || 255, h7 = o11 * r14, g7 = e6.outputPixelType || "u8", p5 = t7.pixels.map(() => g2.createEmptyBand(g7, h7)), d5 = p5.length, M3 = m7 - c7, y4 = [], b4 = [];
  for (let n15 = 0; n15 < d5; n15++) b4[n15] = f7[n15] - l7[n15], y4[n15] = 0 === b4[n15] ? 0 : M3 / b4[n15];
  const k4 = g7.startsWith("u") || g7.startsWith("s"), v5 = u11 && u11.length >= d5, w5 = !!e6.isRenderer;
  if (v5) {
    const t8 = x3(d5, u11);
    for (let n15 = 0; n15 < d5; n15++) {
      const e7 = (i8 == null ? void 0 : i8[n15]) ?? s8;
      for (let s9 = 0; s9 < h7; s9++) if (null == e7 || e7[s9]) {
        if (0 === b4[n15]) {
          p5[n15][s9] = c7;
          continue;
        }
        const e8 = a15[n15][s9], i9 = (e8 - l7[n15]) / b4[n15];
        let o12 = 1;
        if (u11[n15] > 1 && (o12 -= (1 / M3) ** (i9 * t8[n15])), e8 < f7[n15] && e8 > l7[n15]) {
          const t9 = o12 * M3 * i9 ** (1 / u11[n15]) + c7;
          p5[n15][s9] = w5 ? Math.floor(t9) : k4 ? Math.round(t9) : t9;
        } else e8 >= f7[n15] ? p5[n15][s9] = m7 : p5[n15][s9] = c7;
      }
    }
  } else for (let n15 = 0; n15 < d5; n15++) {
    const t8 = (i8 == null ? void 0 : i8[n15]) ?? s8;
    for (let e7 = 0; e7 < h7; e7++) if (null == t8 || t8[e7]) {
      const t9 = a15[n15][e7];
      if (t9 < f7[n15] && t9 > l7[n15]) {
        const s9 = (t9 - l7[n15]) * y4[n15] + c7;
        p5[n15][e7] = w5 ? Math.floor(s9) : k4 ? Math.round(s9) : s9;
      } else t9 >= f7[n15] ? p5[n15][e7] = m7 : p5[n15][e7] = c7;
    }
  }
  const z = new g2({ width: o11, height: r14, mask: s8, bandMasks: i8, pixels: p5, pixelType: g7 });
  return z.updateStatistics(), z;
}

// node_modules/@arcgis/core/layers/support/RasterBandInfo.js
var t5;
function n10(e6) {
  return e6 = Number(e6), isNaN(e6) ? void 0 : e6;
}
var o8 = t5 = class extends f {
  constructor() {
    super(...arguments), this.name = null, this.minWavelength = void 0, this.maxWavelength = void 0, this.radianceBias = void 0, this.radianceGain = void 0, this.reflectanceBias = void 0, this.reflectanceGain = void 0, this.solarIrradiance = void 0;
  }
  clone() {
    return new t5({ name: this.name, minWavelength: this.minWavelength, maxWavelength: this.maxWavelength, radianceBias: this.radianceBias, radianceGain: this.radianceGain, reflectanceBias: this.reflectanceBias, reflectanceGain: this.reflectanceGain, solarIrradiance: this.solarIrradiance });
  }
};
r([m({ json: { name: "BandName", write: true } })], o8.prototype, "name", void 0), r([m({ json: { name: "WavelengthMin", read: { reader: n10 }, write: true } })], o8.prototype, "minWavelength", void 0), r([m({ json: { name: "WavelengthMax", read: { reader: n10 }, write: true } })], o8.prototype, "maxWavelength", void 0), r([m({ json: { name: "RadianceBias", read: { reader: n10 }, write: true } })], o8.prototype, "radianceBias", void 0), r([m({ json: { name: "RadianceGain", read: { reader: n10 }, write: true } })], o8.prototype, "radianceGain", void 0), r([m({ json: { name: "ReflectanceBias", read: { reader: n10 }, write: true } })], o8.prototype, "reflectanceBias", void 0), r([m({ json: { name: "ReflectanceGain", read: { reader: n10 }, write: true } })], o8.prototype, "reflectanceGain", void 0), r([m({ json: { name: "SolarIrradiance", read: { reader: n10 }, write: true } })], o8.prototype, "solarIrradiance", void 0), o8 = t5 = r([a2("esri.layers.support.RasterBandInfo")], o8);
var s5 = o8;

// node_modules/@arcgis/core/layers/support/RasterSensorInfo.js
var n11;
function a11(o11) {
  return o11 = Number(o11), isNaN(o11) ? void 0 : o11;
}
var u6 = n11 = class extends f {
  constructor() {
    super(...arguments), this.acquisitionDate = void 0, this.cloudCover = void 0, this.productName = void 0, this.sensorName = null, this.sensorAzimuth = void 0, this.sensorElevation = void 0, this.sunAzimuth = void 0, this.sunElevation = void 0;
  }
  readAcquisitionDate(o11) {
    return new Date(o11);
  }
  writeAcquisitionDate(o11, e6) {
    e6.AcquisitionDate = o11.getTime();
  }
  clone() {
    return new n11({ acquisitionDate: this.acquisitionDate, cloudCover: this.cloudCover, productName: this.productName, sensorName: this.sensorName, sensorAzimuth: this.sensorAzimuth, sensorElevation: this.sensorElevation, sunAzimuth: this.sunAzimuth, sunElevation: this.sunElevation });
  }
};
r([m({ json: { name: "AcquisitionDate", write: true } })], u6.prototype, "acquisitionDate", void 0), r([o2("acquisitionDate")], u6.prototype, "readAcquisitionDate", null), r([r2("acquisitionDate")], u6.prototype, "writeAcquisitionDate", null), r([m({ json: { name: "CloudCover", read: { reader: a11 }, write: true } })], u6.prototype, "cloudCover", void 0), r([m({ json: { name: "ProductName", write: true } })], u6.prototype, "productName", void 0), r([m({ json: { name: "SensorName", write: true } })], u6.prototype, "sensorName", void 0), r([m({ json: { name: "SensorAzimuth", read: { reader: a11 }, write: true } })], u6.prototype, "sensorAzimuth", void 0), r([m({ json: { name: "SensorElevation", read: { reader: a11 }, write: true } })], u6.prototype, "sensorElevation", void 0), r([m({ json: { name: "SunAzimuth", read: { reader: a11 }, write: true } })], u6.prototype, "sunAzimuth", void 0), r([m({ json: { name: "SunElevation", read: { reader: a11 }, write: true } })], u6.prototype, "sunElevation", void 0), u6 = n11 = r([a2("esri.layers.support.RasterSensorInfo")], u6);
var c4 = u6;

// node_modules/@arcgis/core/layers/support/RasterStorageInfo.js
var p3;
var l5 = p3 = class extends f {
  constructor() {
    super(...arguments), this.blockWidth = void 0, this.blockHeight = void 0, this.compression = null, this.origin = null, this.firstPyramidLevel = null, this.maximumPyramidLevel = null, this.pyramidScalingFactor = 2, this.pyramidBlockWidth = null, this.pyramidBlockHeight = null, this.isVirtualTileInfo = false, this.tileInfo = null, this.transposeInfo = null, this.blockBoundary = null;
  }
  clone() {
    return new p3({ blockWidth: this.blockWidth, blockHeight: this.blockHeight, compression: this.compression, origin: a(this.origin), firstPyramidLevel: this.firstPyramidLevel, maximumPyramidLevel: this.maximumPyramidLevel, pyramidResolutions: a(this.pyramidResolutions), pyramidScalingFactor: this.pyramidScalingFactor, pyramidBlockWidth: this.pyramidBlockWidth, pyramidBlockHeight: this.pyramidBlockHeight, isVirtualTileInfo: this.isVirtualTileInfo, tileInfo: a(this.tileInfo), transposeInfo: a(this.transposeInfo), blockBoundary: a(this.blockBoundary) });
  }
};
r([m({ type: Number, json: { write: true } })], l5.prototype, "blockWidth", void 0), r([m({ type: Number, json: { write: true } })], l5.prototype, "blockHeight", void 0), r([m({ type: String, json: { write: true } })], l5.prototype, "compression", void 0), r([m({ type: j, json: { write: true } })], l5.prototype, "origin", void 0), r([m({ type: Number, json: { write: true } })], l5.prototype, "firstPyramidLevel", void 0), r([m({ type: Number, json: { write: true } })], l5.prototype, "maximumPyramidLevel", void 0), r([m({ json: { write: true } })], l5.prototype, "pyramidResolutions", void 0), r([m({ type: Number, json: { write: true } })], l5.prototype, "pyramidScalingFactor", void 0), r([m({ type: Number, json: { write: true } })], l5.prototype, "pyramidBlockWidth", void 0), r([m({ type: Number, json: { write: true } })], l5.prototype, "pyramidBlockHeight", void 0), r([m({ type: Boolean, json: { write: true } })], l5.prototype, "isVirtualTileInfo", void 0), r([m({ json: { write: true } })], l5.prototype, "tileInfo", void 0), r([m()], l5.prototype, "transposeInfo", void 0), r([m()], l5.prototype, "blockBoundary", void 0), l5 = p3 = r([a2("esri.layers.support.RasterStorageInfo")], l5);
var n12 = l5;

// node_modules/@arcgis/core/layers/support/RasterInfo.js
var h4;
var u7 = h4 = class extends f {
  constructor(t7) {
    super(t7), this.attributeTable = null, this.bandCount = null, this.colormap = null, this.extent = null, this.format = void 0, this.height = null, this.width = null, this.histograms = null, this.keyProperties = {}, this.multidimensionalInfo = null, this.noDataValue = null, this.pixelSize = null, this.pixelType = null, this.isPseudoSpatialReference = false, this.spatialReference = null, this.statistics = null, this.storageInfo = null, this.transform = null;
  }
  get bandInfos() {
    const t7 = this.keyProperties.BandProperties, { bandCount: e6 } = this;
    if (!(t7 == null ? void 0 : t7.length) || t7.length < e6) {
      const t8 = [];
      for (let o12 = 1; o12 <= e6; o12++) t8.push(new s5({ name: "band_" + o12 }));
      return t8;
    }
    const o11 = t7.map((t8) => s5.fromJSON(t8));
    for (let i8 = 0; i8 < o11.length; i8++) o11[i8].name = o11[i8].name || "band_" + (i8 + 1);
    return o11;
  }
  get dataType() {
    var _a, _b;
    const t7 = ((_b = (_a = this.keyProperties) == null ? void 0 : _a.DataType) == null ? void 0 : _b.toLowerCase()) ?? "generic";
    return "stdtime" === t7 ? "standard-time" : t7;
  }
  get nativeExtent() {
    return this._get("nativeExtent") || this.extent;
  }
  set nativeExtent(t7) {
    t7 && this._set("nativeExtent", t7);
  }
  get nativePixelSize() {
    if (null == this.transform || !this.transform.affectsPixelSize) return this.pixelSize;
    const t7 = this.nativeExtent;
    return { x: t7.width / this.width, y: t7.height / this.height };
  }
  get hasMultidimensionalTranspose() {
    var _a;
    return !!((_a = this.storageInfo) == null ? void 0 : _a.transposeInfo);
  }
  get sensorInfo() {
    var _a;
    if ((_a = this.keyProperties) == null ? void 0 : _a.SensorName) return c4.fromJSON(this.keyProperties);
  }
  clone() {
    return new h4({ attributeTable: a(this.attributeTable), bandCount: this.bandCount, colormap: a(this.colormap), extent: a(this.extent), format: this.format, height: this.height, width: this.width, histograms: a(this.histograms), keyProperties: a(this.keyProperties), multidimensionalInfo: a(this.multidimensionalInfo), noDataValue: this.noDataValue, pixelSize: a(this.pixelSize), pixelType: this.pixelType, isPseudoSpatialReference: this.isPseudoSpatialReference, spatialReference: a(this.spatialReference), statistics: a(this.statistics), storageInfo: a(this.storageInfo), transform: a(this.transform) });
  }
};
r([m({ json: { write: true } })], u7.prototype, "attributeTable", void 0), r([m({ json: { write: true } })], u7.prototype, "bandCount", void 0), r([m({ readOnly: true })], u7.prototype, "bandInfos", null), r([m({ json: { write: true } })], u7.prototype, "colormap", void 0), r([m({ type: String, readOnly: true })], u7.prototype, "dataType", null), r([m({ type: w, json: { write: true } })], u7.prototype, "extent", void 0), r([m({ type: w, json: { write: true } })], u7.prototype, "nativeExtent", null), r([m({ json: { write: true } })], u7.prototype, "nativePixelSize", null), r([m({ json: { write: true } })], u7.prototype, "format", void 0), r([m({ json: { write: true } })], u7.prototype, "height", void 0), r([m({ json: { write: true } })], u7.prototype, "width", void 0), r([m({ json: { write: true } })], u7.prototype, "hasMultidimensionalTranspose", null), r([m({ json: { write: true } })], u7.prototype, "histograms", void 0), r([m({ json: { write: true } })], u7.prototype, "keyProperties", void 0), r([m({ json: { write: true } })], u7.prototype, "multidimensionalInfo", void 0), r([m({ json: { write: true } })], u7.prototype, "noDataValue", void 0), r([m({ json: { write: true } })], u7.prototype, "pixelSize", void 0), r([m({ json: { write: true } })], u7.prototype, "pixelType", void 0), r([m()], u7.prototype, "isPseudoSpatialReference", void 0), r([m({ readOnly: true })], u7.prototype, "sensorInfo", null), r([m({ type: g, json: { write: true } })], u7.prototype, "spatialReference", void 0), r([m({ json: { write: true } })], u7.prototype, "statistics", void 0), r([m({ type: n12, json: { write: true } })], u7.prototype, "storageInfo", void 0), r([m({ json: { write: true } })], u7.prototype, "transform", void 0), u7 = h4 = r([a2("esri.layers.support.RasterInfo")], u7);
var m5 = u7;

// node_modules/@arcgis/core/layers/support/rasterFunctions/surfaceUtils.js
var s6 = 1;
var n13 = 1 / 111e3;
function a12(t7) {
  let { altitude: e6, azimuth: i8 } = t7;
  const { hillshadeType: s8, pixelSizePower: a15 = 1, pixelSizeFactor: o11 = 1, scalingType: l7, isGCS: r14, resolution: c7 } = t7, h7 = "multi-directional" === s8 ? 2 * t7.zFactor : t7.zFactor, { x: u11, y: f7 } = c7;
  let d5 = h7 / (8 * u11), p5 = h7 / (8 * f7);
  if (r14 && h7 > 1e-3 && (d5 /= n13, p5 /= n13), "adjusted" === l7) if (r14) {
    const t8 = u11 * n13, e7 = f7 * n13;
    d5 = (h7 + t8 ** a15 * o11) / (8 * t8), p5 = (h7 + e7 ** a15 * o11) / (8 * e7);
  } else d5 = (h7 + u11 ** a15 * o11) / (8 * u11), p5 = (h7 + f7 ** a15 * o11) / (8 * f7);
  let x4 = (90 - e6) * Math.PI / 180, w5 = Math.cos(x4), y4 = (360 - i8 + 90) * Math.PI / 180, m7 = Math.sin(x4) * Math.cos(y4), M3 = Math.sin(x4) * Math.sin(y4);
  const z = [315, 270, 225, 360, 180, 0], A5 = [60, 60, 60, 60, 60, 90], g7 = new Float32Array([3, 5, 3, 2, 1, 4]), F2 = g7.reduce((t8, e7) => t8 + e7), k4 = g7.map((t8) => t8 / F2), P4 = "multi-directional" === s8 ? z.length : 1, S4 = new Float32Array(6), C5 = new Float32Array(6), T4 = new Float32Array(6);
  if ("multi-directional" === s8) for (let n15 = 0; n15 < P4; n15++) e6 = A5[n15], i8 = z[n15], x4 = (90 - e6) * Math.PI / 180, w5 = Math.cos(x4), y4 = (360 - i8 + 90) * Math.PI / 180, m7 = Math.sin(x4) * Math.cos(y4), M3 = Math.sin(x4) * Math.sin(y4), S4[n15] = w5, C5[n15] = m7, T4[n15] = M3;
  else S4.fill(w5), C5.fill(m7), T4.fill(M3);
  return { resolution: c7, factor: [d5, p5], sinZcosA: m7, sinZsinA: M3, cosZ: w5, sinZcosAs: C5, sinZsinAs: T4, cosZs: S4, weights: k4, hillshadeType: ["traditional", "multi-directional"].indexOf(s8) };
}
function o9(t7, e6) {
  const { width: i8, height: n15 } = t7, a15 = i8 * n15, o11 = new Uint8Array(a15), l7 = null != t7.mask;
  let r14;
  if (l7) {
    r14 = new Uint8Array(t7.mask);
    for (let t8 = 0; t8 < r14.length; t8++) r14[t8] && (o11[t8] = 1, r14[t8] = 1);
  }
  const c7 = t7.pixels[0], h7 = new Float32Array(a15), u11 = new Float32Array(a15);
  let f7, d5 = 0;
  if (e6) {
    const { resolution: t8 } = e6, i9 = t8 ? (t8.x + t8.y) / 2 : 1;
    d5 = 200 * e6.zFactor / (i9 * i9), f7 = new Float32Array(a15);
  }
  const p5 = e6 == null ? void 0 : e6.curvatureType;
  let x4, w5, y4, m7, M3, z, A5, g7;
  for (let F2 = s6; F2 < n15 - s6; F2++) {
    const t8 = F2 * i8;
    for (let e7 = s6; e7 < i8 - s6; e7++) {
      const s8 = t8 + e7;
      if (!r14 || 0 !== r14[s8]) {
        if (r14) {
          if (r14[s8 - i8 - 1] + r14[s8 - i8] + r14[s8 - i8 + 1] + r14[s8 - 1] + r14[s8 + 1] + r14[s8 + i8 - 1] + r14[s8 + i8] + r14[s8 + i8 + 1] < 7) {
            o11[s8] = 0;
            continue;
          }
          x4 = r14[s8 - i8 - 1] ? c7[s8 - i8 - 1] : c7[s8], w5 = r14[s8 - i8] ? c7[s8 - i8] : c7[s8], y4 = r14[s8 - i8 + 1] ? c7[s8 - i8 + 1] : c7[s8], m7 = r14[s8 - 1] ? c7[s8 - 1] : c7[s8], M3 = r14[s8 + 1] ? c7[s8 + 1] : c7[s8], z = r14[s8 + i8 - 1] ? c7[s8 + i8 - 1] : c7[s8], A5 = r14[s8 + i8] ? c7[s8 + i8] : c7[s8], g7 = r14[s8 + i8 + 1] ? c7[s8 + i8 + 1] : c7[s8];
        } else x4 = c7[s8 - i8 - 1], w5 = c7[s8 - i8], y4 = c7[s8 - i8 + 1], m7 = c7[s8 - 1], M3 = c7[s8 + 1], z = c7[s8 + i8 - 1], A5 = c7[s8 + i8], g7 = c7[s8 + i8 + 1];
        if (h7[s8] = y4 + M3 + M3 + g7 - (x4 + m7 + m7 + z), u11[s8] = z + A5 + A5 + g7 - (x4 + w5 + w5 + y4), null != f7) {
          const t9 = c7[s8], e8 = 0.5 * (m7 + M3) - t9, i9 = 0.5 * (w5 + A5) - t9;
          if ("standard" === p5) f7[s8] = -d5 * (e8 + i9);
          else {
            const t10 = (-x4 + y4 + z - g7) / 4, n16 = (-m7 + M3) / 2, a16 = (w5 - A5) / 2, o12 = n16 * n16, l8 = a16 * a16, r15 = o12 + l8;
            r15 && (f7[s8] = "profile" === p5 ? d5 * (e8 * o12 + i9 * l8 + t10 * n16 * a16) / r15 : -d5 * (e8 * l8 + i9 * o12 - t10 * n16 * a16) / r15);
          }
        }
      }
    }
  }
  return { outMask: l7 ? o11 : null, dzxs: h7, dzys: u11, curvatures: f7 };
}
function l6(t7, e6, i8) {
  for (let s8 = 0; s8 < i8; s8++) t7[s8 * e6] = t7[s8 * e6 + 1], t7[(s8 + 1) * e6 - 1] = t7[(s8 + 1) * e6 - 2];
  for (let s8 = 1; s8 < e6 - 1; s8++) t7[s8] = t7[s8 + e6], t7[s8 + (i8 - 1) * e6] = t7[s8 + (i8 - 2) * e6];
}
function r12(n15, r14) {
  if (!o3(n15)) return n15;
  const { factor: c7, sinZcosA: h7, sinZsinA: u11, cosZ: f7, sinZcosAs: d5, sinZsinAs: p5, cosZs: x4, weights: w5 } = a12(r14), [y4, m7] = c7, M3 = "traditional" === r14.hillshadeType, { width: z, height: A5 } = n15, g7 = new Uint8Array(z * A5), { dzxs: F2, dzys: k4, outMask: P4 } = o9(n15);
  for (let t7 = s6; t7 < A5 - s6; t7++) {
    const e6 = t7 * z;
    for (let t8 = s6; t8 < z - s6; t8++) {
      const i8 = e6 + t8;
      if (!P4 || P4[i8]) {
        const t9 = F2[i8] * y4, e7 = k4[i8] * m7, s8 = Math.sqrt(1 + t9 * t9 + e7 * e7);
        let n16 = 0;
        if (M3) {
          let i9 = 255 * (f7 + u11 * e7 - h7 * t9) / s8;
          i9 < 0 && (i9 = 0), n16 = i9;
        } else {
          const i9 = p5.length;
          for (let a15 = 0; a15 < i9; a15++) {
            let i10 = 255 * (x4[a15] + p5[a15] * e7 - d5[a15] * t9) / s8;
            i10 < 0 && (i10 = 0), n16 += i10 * w5[a15];
          }
        }
        g7[i8] = 255 & n16;
      }
    }
  }
  l6(g7, z, A5);
  return new g2({ width: z, height: A5, pixels: [g7], mask: P4, pixelType: "u8", validPixelCount: n15.validPixelCount, statistics: [new l2(0, 255)] });
}
function c5(t7, e6, s8, n15) {
  if (!o3(t7) || !o3(e6)) return;
  const { min: a15, max: o11 } = n15, l7 = t7.pixels[0], { pixels: r14, mask: c7 } = e6, h7 = r14[0], u11 = 255.00001 / (o11 - a15), f7 = new Uint8ClampedArray(h7.length), d5 = new Uint8ClampedArray(h7.length), p5 = new Uint8ClampedArray(h7.length), x4 = s8.length - 1;
  for (let i8 = 0; i8 < h7.length; i8++) {
    if (c7 && 0 === c7[i8]) continue;
    const t8 = Math.floor((h7[i8] - a15) * u11), [e7, n16] = s8[t8 < 0 ? 0 : t8 > x4 ? x4 : t8], o12 = l7[i8], r15 = o12 * n16, w5 = r15 * (1 - Math.abs(e7 % 2 - 1)), y4 = o12 - r15;
    switch (Math.floor(e7)) {
      case 0:
        f7[i8] = r15 + y4, d5[i8] = w5 + y4, p5[i8] = y4;
        break;
      case 1:
        f7[i8] = w5 + y4, d5[i8] = r15 + y4, p5[i8] = y4;
        break;
      case 2:
        f7[i8] = y4, d5[i8] = r15 + y4, p5[i8] = w5 + y4;
        break;
      case 3:
        f7[i8] = y4, d5[i8] = w5 + y4, p5[i8] = r15 + y4;
        break;
      case 4:
        f7[i8] = w5 + y4, d5[i8] = y4, p5[i8] = r15 + y4;
        break;
      case 5:
      case 6:
        f7[i8] = r15 + y4, d5[i8] = y4, p5[i8] = w5 + y4;
    }
  }
  t7.pixels = [f7, d5, p5], t7.updateStatistics();
}
function h5(e6, a15) {
  if (!o3(e6)) return e6;
  const r14 = a15.zFactor, c7 = a15.pixelSizePower ?? 1, h7 = a15.pixelSizeFactor ?? 1, u11 = a15.slopeType, f7 = a15.isGCS, { x: d5, y: p5 } = a15.resolution;
  let x4 = r14 / (8 * d5), w5 = r14 / (8 * p5);
  f7 && Math.abs(r14 - 1) < 1e-4 && (x4 /= n13, w5 /= n13), "adjusted" === u11 && (x4 = (r14 + d5 ** c7 * h7) / (8 * d5), w5 = (r14 + p5 ** c7 * h7) / (8 * p5));
  const { dzxs: y4, dzys: m7, outMask: M3 } = o9(e6), { width: z, height: A5 } = e6, g7 = new Float32Array(z * A5);
  for (let t7 = s6; t7 < A5 - s6; t7++) {
    const e7 = t7 * z;
    for (let t8 = s6; t8 < z - s6; t8++) {
      const i8 = e7 + t8;
      if (!M3 || M3[i8]) {
        const s8 = y4[i8] * x4, n15 = m7[i8] * w5, a16 = Math.sqrt(s8 * s8 + n15 * n15);
        g7[e7 + t8] = "percent-rise" === u11 ? 100 * a16 : 57.2957795 * Math.atan(a16);
      }
    }
  }
  l6(g7, z, A5);
  const F2 = new g2({ width: z, height: A5, pixels: [g7], mask: M3, pixelType: "f32", validPixelCount: e6.validPixelCount });
  return F2.updateStatistics(), F2;
}
function u8(n15, a15 = {}) {
  if (!o3(n15)) return n15;
  const { resolution: r14 } = a15, c7 = r14 ? 1 / r14.x : 1, h7 = r14 ? 1 / r14.y : 1, { dzxs: u11, dzys: f7, outMask: d5 } = o9(n15), { width: p5, height: x4 } = n15, w5 = new Float32Array(p5 * x4);
  for (let t7 = s6; t7 < x4 - s6; t7++) {
    const e6 = t7 * p5;
    for (let t8 = s6; t8 < p5 - s6; t8++) {
      const i8 = e6 + t8;
      if (!d5 || d5[i8]) {
        const s8 = u11[i8] * c7, n16 = f7[i8] * h7;
        let a16 = -1;
        0 === s8 && 0 === n16 || (a16 = 90 - 57.29578 * Math.atan2(n16, -s8), a16 < 0 && (a16 += 360), 360 === a16 ? a16 = 0 : a16 > 360 && (a16 %= 360)), w5[e6 + t8] = a16;
      }
    }
  }
  l6(w5, p5, x4);
  return new g2({ width: p5, height: x4, pixels: [w5], mask: d5, pixelType: "f32", validPixelCount: n15.validPixelCount, statistics: [new l2(-1, 360)] });
}
function f5(e6, s8) {
  if (!o3(e6)) return e6;
  const { curvatures: n15, outMask: a15 } = o9(e6, s8), { width: r14, height: c7 } = e6;
  l6(n15, r14, c7);
  const h7 = new g2({ width: r14, height: c7, pixels: [n15], mask: a15, pixelType: "f32", validPixelCount: e6.validPixelCount });
  return h7.updateStatistics(), h7;
}
function d3(t7, e6, i8) {
  const { hillshadeType: s8, altitude: n15, azimuth: a15, zFactor: o11, pixelSizeFactor: l7, pixelSizePower: r14, slopeType: c7 } = t7;
  return { hillshadeType: s8, altitude: n15, azimuth: a15, zFactor: o11, pixelSizePower: r14, pixelSizeFactor: l7, scalingType: "scaled" === c7 ? "adjusted" : "none", resolution: e6, isGCS: i8 };
}

// node_modules/@arcgis/core/renderers/support/colorRampUtils.js
var C4 = ["random", "ndvi", "ndvi2", "ndvi3", "elevation", "gray", "hillshade"];
var m6 = [{ id: "aspect", type: "multipart", colorRamps: [{ fromColor: [190, 190, 190], toColor: [255, 45, 8] }, { fromColor: [255, 45, 8], toColor: [255, 181, 61] }, { fromColor: [255, 181, 61], toColor: [255, 254, 52] }, { fromColor: [255, 254, 52], toColor: [0, 251, 50] }, { fromColor: [0, 251, 50], toColor: [255, 254, 52] }, { fromColor: [0, 253, 255], toColor: [0, 181, 255] }, { fromColor: [0, 181, 255], toColor: [26, 35, 253] }, { fromColor: [26, 35, 253], toColor: [255, 57, 251] }, { fromColor: [255, 57, 251], toColor: [255, 45, 8] }] }, { id: "black-to-white", fromColor: [0, 0, 0], toColor: [255, 255, 255] }, { id: "blue-bright", fromColor: [204, 204, 255], toColor: [0, 0, 224] }, { id: "blue-light-to-dark", fromColor: [211, 229, 232], toColor: [46, 100, 140] }, { id: "blue-green-bright", fromColor: [203, 245, 234], toColor: [48, 207, 146] }, { id: "blue-green-light-to-dark", fromColor: [216, 242, 237], toColor: [21, 79, 74] }, { id: "brown-light-to-dark", fromColor: [240, 236, 170], toColor: [102, 72, 48] }, { id: "brown-to-blue-green-diverging-right", type: "multipart", colorRamps: [{ fromColor: [156, 85, 31], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [33, 130, 145] }] }, { id: "brown-to-blue-green-diverging-dark", type: "multipart", colorRamps: [{ fromColor: [110, 70, 45], toColor: [204, 204, 102] }, { fromColor: [204, 204, 102], toColor: [48, 100, 102] }] }, { id: "coefficient-bias", fromColor: [214, 214, 255], toColor: [0, 57, 148] }, { id: "cold-to-hot-diverging", type: "multipart", colorRamps: [{ fromColor: [69, 117, 181], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [214, 47, 39] }] }, { id: "condition-number", type: "multipart", colorRamps: [{ fromColor: [0, 97, 0], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [255, 34, 0] }] }, { id: "cyan-to-purple", type: "multipart", colorRamps: [{ fromColor: [0, 245, 245], toColor: [0, 0, 245] }, { fromColor: [0, 0, 245], toColor: [245, 0, 245] }] }, { id: "cyan-light-to-blue-dark", type: "multipart", colorRamps: [{ fromColor: [182, 237, 240], toColor: [31, 131, 224] }, { fromColor: [31, 131, 224], toColor: [9, 9, 145] }] }, { id: "distance", fromColor: [255, 200, 0], toColor: [0, 0, 255] }, { id: "elevation1", type: "multipart", colorRamps: [{ fromColor: [175, 240, 233], toColor: [255, 255, 179] }, { fromColor: [255, 255, 179], toColor: [0, 128, 64] }, { fromColor: [0, 128, 64], toColor: [252, 186, 3] }, { fromColor: [252, 186, 3], toColor: [128, 0, 0] }, { fromColor: [120, 0, 0], toColor: [105, 48, 13] }, { fromColor: [105, 48, 13], toColor: [171, 171, 171] }, { fromColor: [171, 171, 171], toColor: [255, 252, 255] }] }, { id: "elevation2", type: "multipart", colorRamps: [{ fromColor: [118, 219, 211], toColor: [255, 255, 199] }, { fromColor: [255, 255, 199], toColor: [255, 255, 128] }, { fromColor: [255, 255, 128], toColor: [217, 194, 121] }, { fromColor: [217, 194, 121], toColor: [135, 96, 38] }, { fromColor: [135, 96, 38], toColor: [150, 150, 181] }, { fromColor: [150, 150, 181], toColor: [181, 150, 181] }, { fromColor: [181, 150, 181], toColor: [255, 252, 255] }] }, { id: "errors", fromColor: [255, 235, 214], toColor: [196, 10, 10] }, { id: "gray-light-to-dark", fromColor: [219, 219, 219], toColor: [69, 69, 69] }, { id: "green-bright", fromColor: [204, 255, 204], toColor: [14, 204, 14] }, { id: "green-light-to-dark", fromColor: [220, 245, 233], toColor: [34, 102, 51] }, { id: "green-to-blue", type: "multipart", colorRamps: [{ fromColor: [32, 204, 16], toColor: [0, 242, 242] }, { fromColor: [0, 242, 242], toColor: [2, 33, 227] }] }, { id: "orange-bright", fromColor: [255, 235, 204], toColor: [240, 118, 5] }, { id: "orange-light-to-dark", fromColor: [250, 233, 212], toColor: [171, 65, 36] }, { id: "partial-spectrum", type: "multipart", colorRamps: [{ fromColor: [242, 241, 162], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [255, 0, 0] }, { fromColor: [252, 3, 69], toColor: [176, 7, 237] }, { fromColor: [176, 7, 237], toColor: [2, 29, 173] }] }, { id: "partial-spectrum-1-diverging", type: "multipart", colorRamps: [{ fromColor: [135, 38, 38], toColor: [240, 149, 12] }, { fromColor: [240, 149, 12], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [74, 80, 181] }, { fromColor: [74, 80, 181], toColor: [39, 32, 122] }] }, { id: "partial-spectrum-2-diverging", type: "multipart", colorRamps: [{ fromColor: [115, 77, 42], toColor: [201, 137, 52] }, { fromColor: [201, 137, 52], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [91, 63, 176] }, { fromColor: [91, 63, 176], toColor: [81, 13, 97] }] }, { id: "pink-to-yellow-green-diverging-bright", type: "multipart", colorRamps: [{ fromColor: [158, 30, 113], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [99, 110, 45] }] }, { id: "pink-to-yellow-green-diverging-dark", type: "multipart", colorRamps: [{ fromColor: [97, 47, 73], toColor: [204, 204, 102] }, { fromColor: [204, 204, 102], toColor: [22, 59, 15] }] }, { id: "precipitation", type: "multipart", colorRamps: [{ fromColor: [194, 82, 60], toColor: [237, 161, 19] }, { fromColor: [237, 161, 19], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [0, 219, 0] }, { fromColor: [0, 219, 0], toColor: [32, 153, 143] }, { fromColor: [32, 153, 143], toColor: [11, 44, 122] }] }, { id: "prediction", type: "multipart", colorRamps: [{ fromColor: [40, 146, 199], toColor: [250, 250, 100] }, { fromColor: [250, 250, 100], toColor: [232, 16, 20] }] }, { id: "purple-bright", fromColor: [255, 204, 255], toColor: [199, 0, 199] }, { id: "purple-to-green-diverging-bright", type: "multipart", colorRamps: [{ fromColor: [77, 32, 150], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [20, 122, 11] }] }, { id: "purple-to-green-diverging-dark", type: "multipart", colorRamps: [{ fromColor: [67, 14, 89], toColor: [204, 204, 102] }, { fromColor: [204, 204, 102], toColor: [24, 79, 15] }] }, { id: "purple-blue-bright", fromColor: [223, 184, 230], toColor: [112, 12, 242] }, { id: "purple-blue-light-to-dark", fromColor: [229, 213, 242], toColor: [93, 44, 112] }, { id: "purple-red-bright", fromColor: [255, 204, 225], toColor: [199, 0, 99] }, { id: "purple-red-light-to-dark", fromColor: [250, 215, 246], toColor: [143, 17, 57] }, { id: "red-bright", fromColor: [255, 204, 204], toColor: [219, 0, 0] }, { id: "red-light-to-dark", fromColor: [255, 224, 224], toColor: [143, 10, 10] }, { id: "red-to-blue-diverging-bright", type: "multipart", colorRamps: [{ fromColor: [196, 69, 57], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [48, 95, 207] }] }, { id: "red-to-blue-diverging-dark", type: "multipart", colorRamps: [{ fromColor: [107, 13, 13], toColor: [204, 204, 102] }, { fromColor: [204, 204, 102], toColor: [13, 53, 97] }] }, { id: "red-to-green", type: "multipart", colorRamps: [{ fromColor: [245, 0, 0], toColor: [245, 245, 0] }, { fromColor: [245, 245, 0], toColor: [0, 245, 0] }] }, { id: "red-to-green-diverging-bright", type: "multipart", colorRamps: [{ fromColor: [186, 20, 20], toColor: [255, 255, 191] }, { fromColor: [255, 255, 191], toColor: [54, 145, 33] }] }, { id: "red-to-green-diverging-dark", type: "multipart", colorRamps: [{ fromColor: [97, 21, 13], toColor: [204, 204, 102] }, { fromColor: [204, 204, 102], toColor: [16, 69, 16] }] }, { id: "slope", type: "multipart", colorRamps: [{ fromColor: [56, 168, 0], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [255, 0, 0] }] }, { id: "spectrum-full-bright", type: "multipart", colorRamps: [{ fromColor: [255, 0, 0], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [0, 255, 255] }, { fromColor: [0, 255, 255], toColor: [0, 0, 255] }] }, { id: "spectrum-full-dark", type: "multipart", colorRamps: [{ fromColor: [153, 0, 0], toColor: [153, 153, 0] }, { fromColor: [153, 153, 0], toColor: [0, 153, 153] }, { fromColor: [0, 153, 153], toColor: [0, 0, 153] }] }, { id: "spectrum-full-light", type: "multipart", colorRamps: [{ fromColor: [255, 153, 153], toColor: [255, 255, 153] }, { fromColor: [255, 255, 153], toColor: [153, 255, 255] }, { fromColor: [153, 255, 255], toColor: [153, 153, 255] }] }, { id: "surface", type: "multipart", colorRamps: [{ fromColor: [112, 153, 89], toColor: [242, 238, 162] }, { fromColor: [242, 238, 162], toColor: [242, 206, 133] }, { fromColor: [242, 206, 133], toColor: [194, 140, 124] }, { fromColor: [194, 140, 124], toColor: [255, 242, 255] }] }, { id: "temperature", type: "multipart", colorRamps: [{ fromColor: [255, 252, 255], toColor: [255, 0, 255] }, { fromColor: [255, 0, 255], toColor: [0, 0, 255] }, { fromColor: [0, 0, 255], toColor: [0, 255, 255] }, { fromColor: [0, 255, 255], toColor: [0, 255, 0] }, { fromColor: [0, 255, 0], toColor: [255, 255, 0] }, { fromColor: [255, 255, 0], toColor: [255, 128, 0] }, { fromColor: [255, 128, 0], toColor: [128, 0, 0] }] }, { id: "white-to-black", fromColor: [255, 255, 255], toColor: [0, 0, 0] }, { id: "yellow-to-dark-red", type: "multipart", colorRamps: [{ fromColor: [255, 255, 128], toColor: [242, 167, 46] }, { fromColor: [242, 167, 46], toColor: [107, 0, 0] }] }, { id: "yellow-to-green-to-dark-blue", type: "multipart", colorRamps: [{ fromColor: [255, 255, 128], toColor: [56, 224, 9] }, { fromColor: [56, 224, 9], toColor: [26, 147, 171] }, { fromColor: [26, 147, 171], toColor: [12, 16, 120] }] }, { id: "yellow-to-red", fromColor: [245, 245, 0], toColor: [255, 0, 0] }, { id: "yellow-green-bright", fromColor: [236, 252, 204], toColor: [157, 204, 16] }, { id: "yellow-green-light-to-dark", fromColor: [215, 240, 175], toColor: [96, 107, 45] }];
var a13 = new n3({ Aspect: "aspect", "Black to White": "black-to-white", "Blue Bright": "blue-bright", "Blue Light to Dark": "blue-light-to-dark", "Blue-Green Bright": "blue-green-bright", "Blue-Green Light to Dark": "blue-green-light-to-dark", "Brown Light to Dark": "brown-light-to-dark", "Brown to Blue Green Diverging, Bright": "brown-to-blue-green-diverging-right", "Brown to Blue Green Diverging, Dark": "brown-to-blue-green-diverging-dark", "Coefficient Bias": "coefficient-bias", "Cold to Hot Diverging": "cold-to-hot-diverging", "Condition Number": "condition-number", "Cyan to Purple": "cyan-to-purple", "Cyan-Light to Blue-Dark": "cyan-light-to-blue-dark", Distance: "distance", "Elevation #1": "elevation1", "Elevation #2": "elevation2", Errors: "errors", "Gray Light to Dark": "gray-light-to-dark", "Green Bright": "green-bright", "Green Light to Dark": "green-light-to-dark", "Green to Blue": "green-to-blue", "Orange Bright": "orange-bright", "Orange Light to Dark": "orange-light-to-dark", "Partial Spectrum": "partial-spectrum", "Partial Spectrum 1 Diverging": "partial-spectrum-1-diverging", "Partial Spectrum 2 Diverging": "partial-spectrum-2-diverging", "Pink to YellowGreen Diverging, Bright": "pink-to-yellow-green-diverging-bright", "Pink to YellowGreen Diverging, Dark": "pink-to-yellow-green-diverging-dark", Precipitation: "precipitation", Prediction: "prediction", "Purple Bright": "purple-bright", "Purple to Green Diverging, Bright": "purple-to-green-diverging-bright", "Purple to Green Diverging, Dark": "purple-to-green-diverging-dark", "Purple-Blue Bright": "purple-blue-bright", "Purple-Blue Light to Dark": "purple-blue-light-to-dark", "Purple-Red Bright": "purple-red-bright", "Purple-Red Light to Dark": "purple-red-light-to-dark", "Red Bright": "red-bright", "Red Light to Dark": "red-light-to-dark", "Red to Blue Diverging, Bright": "red-to-blue-diverging-bright", "Red to Blue Diverging, Dark": "red-to-blue-diverging-dark", "Red to Green": "red-to-green", "Red to Green Diverging, Bright": "red-to-green-diverging-bright", "Red to Green Diverging, Dark": "red-to-green-diverging-dark", Slope: "slope", "Spectrum-Full Bright": "spectrum-full-bright", "Spectrum-Full Dark": "spectrum-full-dark", "Spectrum-Full Light": "spectrum-full-light", Surface: "surface", Temperature: "temperature", "White to Black": "white-to-black", "Yellow to Dark Red": "yellow-to-dark-red", "Yellow to Green to Dark Blue": "yellow-to-green-to-dark-blue", "Yellow to Red": "yellow-to-red", "Yellow-Green Bright": "yellow-green-bright", "Yellow-Green Light to Dark": "yellow-green-light-to-dark" });
function g6(o11, r14) {
  if (!o11 || !r14 || o11.length !== r14.length) return false;
  for (let t7 = 0; t7 < o11.length; t7++) if (o11[t7] > r14[t7] + 2 || o11[t7] < r14[t7] - 2) return false;
  return true;
}
function p4(o11) {
  const r14 = o11.clone();
  return r14.fromColor = o11.toColor, r14.toColor = o11.fromColor, r14.algorithm = o11.algorithm, r14;
}
function u9(o11) {
  var _a;
  if ("multipart" === o11.type) {
    const r14 = o11.clone();
    return ((_a = r14.colorRamps) == null ? void 0 : _a.length) ? (r14.colorRamps = r14.colorRamps.reverse().map((o12) => p4(o12)), r14) : r14;
  }
  return p4(o11);
}
function f6(r14, t7) {
  if (!r14) return;
  const l7 = t7 ?? m6;
  let e6 = null;
  return "algorithmic" === r14.type ? l7.some((o11) => {
    if (g6(r14.fromColor.toRgb(), o11.fromColor) && g6(r14.toColor.toRgb(), o11.toColor)) return e6 = o11.id, true;
  }) : "multipart" === r14.type && l7.some((t8) => {
    const l8 = r14.colorRamps, i8 = t8.colorRamps;
    if (l8 && i8 && l8.length === i8.length && !i8.some((r15, t9) => {
      if (!g6(l8[t9].fromColor.toRgb(), new l(r15.fromColor).toRgb()) || !g6(l8[t9].toColor.toRgb(), new l(r15.toColor).toRgb())) return true;
    })) {
      if (e6) return true;
      e6 = t8.id;
    }
  }), e6;
}
function s7(o11, r14, t7 = false) {
  if (!o11) return;
  let l7 = false, e6 = f6(o11, r14);
  return null != e6 || t7 || (l7 = true, e6 = f6(o11 = u9(o11), r14)), e6 ? { id: e6, inverted: l7 } : void 0;
}
function c6(o11, r14 = false) {
  var _a;
  const t7 = "string" == typeof o11 ? o11 : (_a = s7(o11, void 0, r14)) == null ? void 0 : _a.id;
  return t7 ? a13.toJSON(t7) : null;
}
function d4(o11, r14 = "esriCIELabAlgorithm") {
  const t7 = m6.find(({ id: r15 }) => r15 === o11);
  return t7 ? t7.colorRamps ? { type: "multipart", colorRamps: t7.colorRamps.map((o12) => ({ type: "algorithmic", algorithm: r14, fromColor: [...o12.fromColor], toColor: [...o12.toColor] })) } : { type: "algorithmic", algorithm: r14, fromColor: [...t7.fromColor], toColor: [...t7.toColor] } : null;
}
function h6(o11) {
  const r14 = (o11 = o11 || {}).numColors || 256, t7 = o11.distanceOffset || 0, l7 = null != o11.isCustomInterval ? o11.isCustomInterval : null !== o11.distanceInterval && o11.distanceInterval !== 1 / (r14 - 1), e6 = o11.distanceInterval || 1 / (r14 - 1);
  return { ...o11, numColors: r14, distanceOffset: t7, interpolateAlpha: !!o11.interpolateAlpha, distanceInterval: e6, isCustomInterval: l7, weights: o11.weights };
}
function b3(o11, r14, t7) {
  const { numColors: l7, distanceOffset: e6, distanceInterval: i8, isCustomInterval: n15 } = t7, C5 = 0 === o11.s, m7 = 0 === r14.s;
  let a15 = o11.h, g7 = r14.h;
  C5 && !m7 ? a15 = g7 : m7 && !C5 && (r14 = { ...r14, h: a15 }, g7 = a15);
  let p5, u11 = Math.abs(g7 - a15);
  const f7 = 360;
  u11 < f7 / 2 ? p5 = (g7 - a15) * i8 : (u11 = f7 - u11, p5 = a15 > g7 ? u11 * i8 : -u11 * i8);
  const s8 = (r14.s - o11.s) * i8, c7 = (r14.v - o11.v) * i8;
  let { s: d5, v: h7 } = o11, b4 = a15;
  if (e6) {
    const o12 = e6 / i8;
    b4 = (b4 + o12 * p5 + f7) % f7, d5 += o12 * s8, h7 += o12 * c7;
  }
  const v5 = [];
  for (let k4 = 0; k4 < l7 - 1; k4++) v5.push({ h: b4, s: d5, v: h7 }), b4 = (b4 + p5 + f7) % f7, d5 += s8, h7 += c7;
  return v5.push(n15 ? { h: b4, s: d5, v: h7 } : r14), v5;
}
function v3(o11, r14, t7) {
  const { numColors: l7, distanceOffset: e6, distanceInterval: i8, isCustomInterval: n15 } = t7;
  let { l: C5, a: m7, b: a15 } = o11;
  const g7 = (r14.l - C5) * i8, p5 = (r14.a - m7) * i8, u11 = (r14.b - a15) * i8, f7 = [];
  if (e6) {
    const o12 = e6 / i8;
    C5 += o12 * g7, m7 += o12 * p5, a15 += o12 * u11;
  }
  for (let s8 = 0; s8 < l7 - 1; s8++) f7.push({ l: C5, a: m7, b: a15 }), C5 += g7, m7 += p5, a15 += u11;
  return f7.push(n15 ? { l: C5, a: m7, b: a15 } : r14), f7;
}
function k3(o11, r14, t7) {
  const { numColors: l7, distanceOffset: e6, distanceInterval: i8, isCustomInterval: n15 } = t7, C5 = o11.h, m7 = r14.h, a15 = 2 * Math.PI;
  let g7;
  if (C5 <= m7) {
    const o12 = m7 - C5, r15 = m7 - C5 - a15;
    g7 = Math.abs(r15) < Math.abs(o12) ? r15 : o12;
  } else {
    const o12 = m7 + a15 - C5, r15 = m7 - C5;
    g7 = Math.abs(r15) < Math.abs(o12) ? r15 : o12;
  }
  const p5 = g7 * i8, u11 = (r14.l - o11.l) * i8, f7 = (r14.c - o11.c) * i8;
  let { l: s8, c: c7, h: d5 } = o11;
  if (e6) {
    const o12 = e6 / i8;
    s8 += o12 * u11, c7 += o12 * f7, d5 = (d5 + o12 * p5 + a15) % a15;
  }
  const h7 = [];
  for (let b4 = 0; b4 < l7 - 1; b4++) h7.push({ l: s8, c: c7, h: d5 }), s8 += u11, c7 += f7, d5 = (d5 + p5 + a15) % a15;
  return h7.push(n15 ? { l: s8, c: c7, h: d5 } : r14), h7;
}
function y3(o11, i8) {
  let { fromColor: n15, toColor: C5 } = o11;
  n15 = [...n15], C5 = [...C5], 3 === n15.length && (n15 = n15.concat([255])), 3 === C5.length && (C5 = C5.concat([255]));
  const m7 = o11.algorithm || "esriCIELabAlgorithm", a15 = h6(i8), { numColors: g7, distanceOffset: p5, isCustomInterval: u11, interpolateAlpha: f7 } = a15;
  if (1 === g7 && 0 === p5) return [n15];
  if (2 === g7 && 0 === p5 && !u11) return [n15, C5];
  const s8 = { r: n15[0], g: n15[1], b: n15[2] }, c7 = { r: C5[0], g: C5[1], b: C5[2] }, d5 = "esriCIELabAlgorithm" === m7 ? v3(C(s8), C(c7), a15) : "esriHSVAlgorithm" === m7 ? b3(B(s8), B(c7), a15) : k3(H(s8), H(c7), a15), y4 = [], R3 = n15[3] ?? 255, w5 = ((C5[3] ?? 255) - R3) / (g7 - 1);
  for (let r14 = 0; r14 < g7; r14++) {
    const { r: o12, g: t7, b: l7 } = A(d5[r14]), i9 = f7 ? Math.round(R3 + w5 * r14) : 255;
    y4.push([o12, t7, l7, i9]);
  }
  return y4;
}
function R2(o11, r14) {
  const { numColors: t7, interpolateAlpha: l7 } = h6(r14);
  let e6 = r14 == null ? void 0 : r14.weights;
  const { colorRamps: i8 } = o11;
  if (e6) {
    const o12 = e6.reduce((o13, r15) => o13 + r15);
    e6 = e6.map((r15) => r15 / o12);
  } else {
    e6 = [];
    for (let o12 = 0; o12 < i8.length; o12++) e6[o12] = 1 / i8.length;
  }
  const n15 = [], C5 = 1 / (t7 - 1);
  let m7 = 0, a15 = false;
  for (let p5 = 0; p5 < i8.length; p5++) {
    const o12 = n15.length, r15 = a15 ? 0 : o12 * C5 - m7;
    m7 += e6[p5];
    let g8 = p5 === i8.length - 1 ? t7 - 1 - o12 : (e6[p5] - r15) / C5;
    if (a15 = Math.ceil(g8) === g8, g8 = Math.ceil(g8), 0 === g8) continue;
    const u11 = y3(i8[p5], { numColors: g8, interpolateAlpha: l7, distanceOffset: r15 / e6[p5], distanceInterval: C5 / e6[p5] });
    n15.push(...u11);
  }
  const g7 = [...i8[i8.length - 1].toColor];
  return 3 === g7.length && g7.push(255), n15.push(g7), n15;
}
function w4(o11, r14) {
  const t7 = a3(o11) ? o11.toJSON() : o11;
  return "multipart" === t7.type ? R2(t7, r14) : y3(t7, r14);
}
function B3(o11, r14) {
  const t7 = w4(o11, r14), l7 = r14 == null ? void 0 : r14.interpolateAlpha;
  return t7.forEach((o12, r15) => {
    o12.unshift(r15), l7 || o12.pop();
  }), t7;
}
function D3(o11) {
  const t7 = [];
  for (let l7 = 0; l7 < o11.length; l7 += 4) {
    const e6 = B({ r: o11[l7], g: o11[l7 + 1], b: o11[l7 + 2] });
    t7.push([e6.h / 60, e6.s / 100, 255 * e6.v / 100]);
  }
  return t7;
}
function I3(o11) {
  const t7 = B(o11);
  return { type: "HsvColor", Hue: t7.h, Saturation: t7.s, Value: t7.v, AlphaValue: 255 };
}
function G2(o11) {
  const r14 = o11.toJSON();
  return { Algorithm: (r14 == null ? void 0 : r14.Algorithm) || "esriHSVAlgorithm", type: "AlgorithmicColorRamp", FromColor: I3(o11.fromColor), ToColor: I3(o11.toColor) };
}
function A4(o11) {
  const r14 = c6(o11);
  if (!r14) return null;
  if ("algorithmic" === o11.type) return { ...G2(o11), Name: r14 };
  if (o11.colorRamps) {
    const t7 = o11.colorRamps.map(G2);
    return { type: "MultiPartColorRamp", NumColorRamps: t7.length, ArrayOfColorRamp: t7, Name: r14 };
  }
  return null;
}
function P3(o11) {
  const r14 = o11.reverse().map((o12) => {
    const r15 = o12.toString(16);
    return r15.length < 2 ? "0" + r15 : r15;
  });
  return 4294967295 & Number.parseInt(r14.join(""), 16);
}

// node_modules/@arcgis/core/renderers/support/rasterRendererChecks.js
function n14(n15) {
  var _a, _b, _c;
  return ["u8", "s8"].includes(n15.pixelType) && null != ((_b = (_a = n15.statistics) == null ? void 0 : _a[0]) == null ? void 0 : _b.min) && null != ((_c = n15.statistics[0]) == null ? void 0 : _c.max) && 1 === n15.bandCount;
}
function t6(t7, e6) {
  const { attributeTable: u11, bandCount: r14 } = t7;
  if (null == u11 && n14(t7)) return true;
  if (null == u11 || r14 > 1) return false;
  if (e6) {
    if (null == u11.fields.find((n15) => n15.name.toLowerCase() === e6.toLowerCase())) return false;
  }
  return true;
}
function e5(n15) {
  const { bandCount: t7, dataType: e6, pixelType: u11 } = n15;
  return "elevation" === e6 || "generic" === e6 && 1 === t7 && ("s16" === u11 || "s32" === u11 || "f32" === u11 || "f64" === u11);
}
function u10(n15, t7 = false) {
  const { bandCount: e6, colormap: u11, pixelType: r14 } = n15;
  return 1 === e6 && (!!(u11 == null ? void 0 : u11.length) || !t7 && "u8" === r14);
}
function r13(n15, t7 = false) {
  const { attributeTable: e6, bandCount: u11 } = n15;
  return 1 === u11 && (!t7 || null != e6 || null != n15.histograms);
}
function o10(n15) {
  const { dataType: t7 } = n15;
  return "vector-uv" === t7 || "vector-magdir" === t7;
}
function i7(n15) {
  const { dataType: t7 } = n15;
  return "vector-uv" === t7 || "vector-magdir" === t7;
}
function a14(n15) {
  return !!(n15 == null ? void 0 : n15.length) && n15.length <= 16384;
}

// node_modules/@arcgis/core/renderers/support/RasterSymbolizer.js
var L2 = class extends f {
  constructor(e6) {
    super(e6);
  }
  bind() {
    const { rendererJSON: e6 } = this;
    if (!e6) return { success: false };
    let t7;
    switch (this.lookup = { rendererJSON: {} }, e6.type) {
      case "uniqueValue":
        t7 = this._updateUVRenderer(e6);
        break;
      case "rasterColormap":
        t7 = this._updateColormapRenderer(e6);
        break;
      case "rasterStretch":
        t7 = this._updateStretchRenderer(e6);
        break;
      case "classBreaks":
        t7 = this._updateClassBreaksRenderer(e6);
        break;
      case "rasterShadedRelief":
        t7 = this._updateShadedReliefRenderer(e6);
        break;
      case "vectorField":
        t7 = this._updateVectorFieldRenderer();
        break;
      case "flowRenderer":
        t7 = this._updateFlowRenderer();
    }
    return t7;
  }
  symbolize(e6) {
    let t7 = e6 == null ? void 0 : e6.pixelBlock;
    if (!v4(t7)) return t7;
    if (e6.simpleStretchParams && "rasterStretch" === this.rendererJSON.type) return this.simpleStretch(t7, e6.simpleStretchParams);
    try {
      let r14;
      switch (t7.pixels.length > 3 && (t7 = t7.extractBands(e6.bandIds ?? [0, 1, 2])), this.rendererJSON.type) {
        case "uniqueValue":
        case "rasterColormap":
          r14 = this._symbolizeColormap(t7);
          break;
        case "classBreaks":
          r14 = this._symbolizeClassBreaks(t7);
          break;
        case "rasterStretch":
          r14 = this._symbolizeStretch(t7, e6.bandIds);
          break;
        case "rasterShadedRelief": {
          const s8 = e6.extent, a15 = s8.spatialReference.isGeographic, o11 = { x: (s8.xmax - s8.xmin) / t7.width, y: (s8.ymax - s8.ymin) / t7.height };
          r14 = this._symbolizeShadedRelief(t7, { isGCS: a15, resolution: o11 });
          break;
        }
      }
      return r14;
    } catch (s8) {
      return n.getLogger(this).error("symbolize", s8.message), t7;
    }
  }
  simpleStretch(e6, t7) {
    if (!v4(e6)) return e6;
    try {
      return e6.pixels.length > 3 && (e6 = e6.extractBands([0, 1, 2])), M2(e6, { ...t7, isRenderer: true });
    } catch (s8) {
      return n.getLogger(this).error("symbolize", s8.message), e6;
    }
  }
  generateWebGLParameters(e6) {
    if (["uniqueValue", "rasterColormap", "classBreaks"].includes(this.rendererJSON.type)) {
      const { indexedColormap: e7, offset: t8 } = this.lookup.colormapLut || {};
      return { colormap: e7, colormapOffset: t8, isClassBreaks: "classBreaks" === this.rendererJSON.type, type: "lut" };
    }
    const { pixelBlock: t7, isGCS: r14, resolution: s8, bandIds: a15 } = e6, { rendererJSON: o11 } = this;
    return "rasterStretch" === o11.type ? this._generateStretchWebGLParams(t7, o11, a15) : "rasterShadedRelief" === o11.type ? this._generateShadedReliefWebGLParams(o11, r14, s8 ?? void 0) : "vectorField" === o11.type ? this._generateVectorFieldWebGLParams(o11) : null;
  }
  _isLUTChanged(e6) {
    if (!this.lookup || !this.lookup.rendererJSON) return true;
    if ("colorRamp" in this.rendererJSON) {
      const t7 = this.rendererJSON.colorRamp;
      return e6 ? JSON.stringify(t7) !== JSON.stringify(this.lookup.rendererJSON.colorRamp) : (this.rendererJSON, this.lookup.rendererJSON, JSON.stringify(this.rendererJSON) !== JSON.stringify(this.lookup.rendererJSON));
    }
    return JSON.stringify(this.rendererJSON) !== JSON.stringify(this.lookup.rendererJSON);
  }
  _symbolizeColormap(e6) {
    if (this._isLUTChanged()) {
      if (!this.bind().success) return e6;
    }
    return h(e6, this.lookup.colormapLut);
  }
  _symbolizeClassBreaks(e6) {
    const { canUseIndexedLUT: t7 } = this._analyzeClassBreaks(this.rendererJSON);
    if (this._isLUTChanged()) {
      if (!this.bind().success) return e6;
    }
    return t7 ? h(e6, this.lookup.colormapLut) : u2(e6, this.lookup.remapLut ?? []);
  }
  _symbolizeStretch(e6, t7) {
    var _a, _b;
    const { rasterInfo: r14 } = this, { pixelType: s8, bandCount: a15 } = r14, o11 = this.rendererJSON, i8 = ["u8", "u16", "s8", "s16"].includes(s8);
    let u11, c7;
    const { dra: m7 } = o11, { gamma: f7 } = this.lookup;
    if ("histogramEqualization" === o11.stretchType) {
      const s9 = m7 ? null : (_a = this.lookup) == null ? void 0 : _a.histogramLut, a16 = p2(o11, { rasterInfo: r14, pixelBlock: e6, bandIds: t7, returnHistogramLut: !s9 }), n15 = M2(e6, { ...a16, gamma: f7, isRenderer: true });
      c7 = f2(n15, { lut: m7 ? a16.histogramLut : s9, offset: 0 });
    } else if (i8) {
      if (m7) {
        const a16 = p2(o11, { rasterInfo: r14, pixelBlock: e6, bandIds: t7 });
        u11 = a10({ pixelType: s8, ...a16, gamma: f7, rounding: "floor" });
      } else if (this._isLUTChanged()) {
        if (!this.bind().success) return e6;
        u11 = this.lookup ? this.lookup.stretchLut : null;
      } else u11 = this.lookup ? this.lookup.stretchLut : null;
      if (!u11) return e6;
      a15 > 1 && null != t7 && t7.length === (e6 == null ? void 0 : e6.pixels.length) && (u11 == null ? void 0 : u11.lut.length) === a15 && (u11 = { lut: t7.map((e7) => u11.lut[e7]), offset: u11.offset }), c7 = f2(e6, u11);
    } else {
      const s9 = p2(o11, { rasterInfo: r14, pixelBlock: e6, bandIds: t7 });
      c7 = M2(e6, { ...s9, gamma: f7, isRenderer: true });
    }
    if (o11.colorRamp) {
      if (this._isLUTChanged(true)) {
        if (!this.bind().success) return e6;
      }
      c7 = h(c7, (_b = this.lookup) == null ? void 0 : _b.colormapLut);
    }
    return c7;
  }
  _symbolizeShadedRelief(e6, t7) {
    var _a;
    const r14 = this.rendererJSON, s8 = { ...r14, ...t7 }, a15 = r12(e6, s8);
    if (!r14.colorRamp) return a15;
    let o11;
    if (this._isLUTChanged(true)) {
      if (!this.bind().success) return a15;
      o11 = this.lookup ? this.lookup.hsvMap : null;
    } else o11 = this.lookup ? this.lookup.hsvMap : null;
    if (!o11) return a15;
    const n15 = ((_a = this.rasterInfo.statistics) == null ? void 0 : _a[0]) ?? { min: 0, max: 8e3 };
    return c5(a15, e6, o11, n15), a15;
  }
  _isVectorFieldData() {
    const { bandCount: e6, dataType: t7 } = this.rasterInfo;
    return 2 === e6 && ("vector-magdir" === t7 || "vector-uv" === t7);
  }
  _updateVectorFieldRenderer() {
    return this._isVectorFieldData() ? { success: true } : { success: false, error: `Unsupported data type "${this.rasterInfo.dataType}"; VectorFieldRenderer only supports "vector-magdir" and "vector-uv".` };
  }
  _updateFlowRenderer() {
    return this._isVectorFieldData() ? { success: true } : { success: false, error: `Unsupported data type "${this.rasterInfo.dataType}"; FlowRenderer only supports "vector-magdir" and "vector-uv".` };
  }
  _updateUVRenderer(e6) {
    var _a;
    const { bandCount: t7, attributeTable: r14, pixelType: s8 } = this.rasterInfo, a15 = e6.field1;
    if (!a15) return { success: false, error: "Unsupported renderer; missing UniqueValueRenderer.field." };
    const o11 = e6.defaultSymbol, n15 = 1 === t7 && ["u8", "s8"].includes(s8);
    if (!t6(this.rasterInfo, a15) && !n15) return { success: false, error: "Unsupported data; UniqueValueRenderer is only supported on single band data with a valid raster attribute table." };
    const i8 = [];
    if (null != r14) {
      const t8 = r14.fields.find((e7) => "value" === e7.name.toLowerCase());
      if (!t8) return { success: false, error: "Unsupported data; the data's raster attribute table does not have a value field." };
      r14.features.forEach((r15) => {
        var _a2, _b;
        const s9 = (_a2 = e6.uniqueValueInfos) == null ? void 0 : _a2.find((e7) => String(e7.value) === String(r15.attributes[a15])), n16 = (_b = s9 == null ? void 0 : s9.symbol) == null ? void 0 : _b.color;
        n16 ? i8.push([r15.attributes[t8.name]].concat(n16)) : o11 && i8.push([r15.attributes[t8.name]].concat(o11.color));
      });
    } else {
      if ("value" !== a15.toLowerCase()) return { success: false, error: 'Unsupported renderer; UniqueValueRenderer.field must be "Value" when raster attribute table is not available.' };
      (_a = e6.uniqueValueInfos) == null ? void 0 : _a.forEach((e7) => {
        var _a2;
        const t8 = (_a2 = e7 == null ? void 0 : e7.symbol) == null ? void 0 : _a2.color;
        t8 ? i8.push([parseInt("" + e7.value, 10)].concat(t8)) : o11 && i8.push([parseInt("" + e7.value, 10)].concat(o11 == null ? void 0 : o11.color));
      });
    }
    if (0 === i8.length) return { success: false, error: "Invalid UniqueValueRenderer. Cannot find matching records in the raster attribute table." };
    const l7 = a5({ colormap: i8 });
    return this.lookup = { rendererJSON: e6, colormapLut: l7 }, this.canRenderInWebGL = a14(l7 == null ? void 0 : l7.indexedColormap), { success: true };
  }
  _updateColormapRenderer(e6) {
    if (!u10(this.rasterInfo)) return { success: false, error: "Unsupported data; the data source does not have a colormap." };
    const t7 = e6.colormapInfos.map((e7) => [e7.value].concat(e7.color)).sort((e7, t8) => e7[0] - t8[0]);
    if (!t7 || 0 === t7.length) return { success: false, error: "Unsupported renderer; ColormapRenderer must have meaningful colormapInfos." };
    const r14 = a5({ colormap: t7 });
    return this.lookup = { rendererJSON: e6, colormapLut: r14 }, this.canRenderInWebGL = a14(r14 == null ? void 0 : r14.indexedColormap), { success: true };
  }
  _updateShadedReliefRenderer(e6) {
    if (!e5(this.rasterInfo)) return { success: false, error: `Unsupported data type "${this.rasterInfo.dataType}"; ShadedReliefRenderer only supports "elevation", or single band float/s16 data.` };
    if (e6.colorRamp) {
      const t7 = B3(e6.colorRamp, { interpolateAlpha: true }), r14 = a5({ colormap: t7 }), s8 = D3(r14.indexedColormap);
      this.lookup = { rendererJSON: e6, colormapLut: r14, hsvMap: s8 };
    } else this.lookup = null;
    return this.canRenderInWebGL = true, { success: true };
  }
  _analyzeClassBreaks(e6) {
    const { attributeTable: t7, pixelType: r14 } = this.rasterInfo, s8 = null != t7 ? t7.fields.find((e7) => "value" === e7.name.toLowerCase()) : null, a15 = null != t7 ? t7.fields.find((t8) => t8.name.toLowerCase() === e6.field.toLowerCase()) : null, o11 = null != s8 && null !== a15;
    return { canUseIndexedLUT: ["u8", "u16", "s8", "s16"].includes(r14) || o11, tableValueField: s8, tableBreakField: a15 };
  }
  _updateClassBreaksRenderer(e6) {
    const { attributeTable: t7 } = this.rasterInfo, { canUseIndexedLUT: r14, tableValueField: s8, tableBreakField: a15 } = this._analyzeClassBreaks(e6), o11 = e6.classBreakInfos;
    if (!(o11 == null ? void 0 : o11.length)) return { success: false, error: "Unsupported renderer; missing or invalid ClassBreaksRenderer.classBreakInfos." };
    const n15 = o11.sort((e7, t8) => e7.classMaxValue - t8.classMaxValue), i8 = n15[n15.length - 1];
    let l7 = e6.minValue;
    if (!r14) {
      const t8 = [];
      for (let e7 = 0; e7 < n15.length; e7++) t8.push({ value: n15[e7].classMinValue ?? l7, mappedColor: n15[e7].symbol.color }), l7 = n15[e7].classMaxValue;
      return t8.push({ value: i8.classMaxValue, mappedColor: i8.symbol.color }), this.lookup = { rendererJSON: e6, remapLut: t8 }, this.canRenderInWebGL = false, { success: true };
    }
    const c7 = [];
    if (null != t7 && null != s8 && null !== a15 && s8 !== a15) {
      const r15 = s8.name, o12 = a15.name, i9 = n15[n15.length - 1], { classMaxValue: u11 } = i9;
      l7 = e6.minValue;
      for (const e7 of t7.features) {
        const t8 = e7.attributes[r15], s9 = e7.attributes[o12], a16 = s9 === u11 ? i9 : s9 < l7 ? null : n15.find(({ classMaxValue: e8 }) => e8 > s9);
        a16 && c7.push([t8].concat(a16.symbol.color));
      }
    } else {
      l7 = Math.floor(e6.minValue);
      for (let e7 = 0; e7 < n15.length; e7++) {
        const t8 = n15[e7];
        for (let e8 = l7; e8 < t8.classMaxValue; e8++) c7.push([e8].concat(t8.symbol.color));
        l7 = Math.ceil(t8.classMaxValue);
      }
      i8.classMaxValue === l7 && c7.push([i8.classMaxValue].concat(i8.symbol.color));
    }
    const p5 = a5({ colormap: c7, fillUnspecified: false });
    return this.lookup = { rendererJSON: e6, colormapLut: p5 }, this.canRenderInWebGL = a14(p5 == null ? void 0 : p5.indexedColormap), { success: true };
  }
  _updateStretchRenderer(e6) {
    var _a, _b;
    let { stretchType: t7, dra: r14 } = e6;
    if (!("none" === t7 || ((_a = e6.statistics) == null ? void 0 : _a.length) || O3(this.rasterInfo.statistics) || r14)) return { success: false, error: "Unsupported renderer; StretchRenderer.statistics is required when dynamic range adjustment is not used." };
    const s8 = e6.histograms || this.rasterInfo.histograms;
    !V2(e6.stretchType) || (s8 == null ? void 0 : s8.length) || r14 || (t7 = "minMax");
    const { computeGamma: a15, useGamma: o11, colorRamp: n15 } = e6;
    let { gamma: i8 } = e6;
    if (o11 && a15 && !(i8 == null ? void 0 : i8.length)) {
      const t8 = ((_b = e6.statistics) == null ? void 0 : _b.length) ? e6.statistics : this.rasterInfo.statistics;
      i8 = f4(this.rasterInfo.pixelType, t8);
    }
    const l7 = this.rasterInfo.pixelType, c7 = !r14 && ["u8", "u16", "s8", "s16"].includes(l7);
    if ("histogramEqualization" === t7) {
      const t8 = s8.map((e7) => r11(e7));
      this.lookup = { rendererJSON: e6, histogramLut: t8 };
    } else if (c7) {
      const t8 = p2(e6, { rasterInfo: this.rasterInfo }), r15 = a10({ pixelType: l7, ...t8, gamma: o11 ? i8 : null, rounding: "floor" });
      this.lookup = { rendererJSON: e6, stretchLut: r15 };
    }
    if (n15 && !T3(n15)) {
      const t8 = B3(n15, { interpolateAlpha: true });
      this.lookup || (this.lookup = { rendererJSON: e6 }), this.lookup.colormapLut = a5({ colormap: t8 }), this.lookup.rendererJSON = e6;
    }
    return this.lookup.gamma = o11 && (i8 == null ? void 0 : i8.length) ? i8 : null, this.canRenderInWebGL = true, { success: true };
  }
  _generateStretchWebGLParams(e6, t7, r14) {
    var _a;
    let s8 = null, a15 = null;
    const o11 = (_a = this.lookup) == null ? void 0 : _a.colormapLut;
    t7.colorRamp && o11 && (s8 = o11.indexedColormap, a15 = o11.offset), "histogramEqualization" === t7.stretchType && (t7 = { ...t7, stretchType: "minMax" });
    const { gamma: n15 } = this.lookup, i8 = !(!t7.useGamma || !(n15 == null ? void 0 : n15.some((e7) => 1 !== e7))), { minCutOff: l7, maxCutOff: u11, outMin: c7, outMax: p5 } = p2(t7, { rasterInfo: this.rasterInfo, pixelBlock: e6, bandIds: r14 });
    let h7 = 0;
    null != e6 && (h7 = e6.getPlaneCount(), 2 === h7 && ((e6 = e6.clone()).statistics = [e6.statistics[0]], e6.pixels = [e6.pixels[0]]));
    const { bandCount: m7 } = this.rasterInfo, f7 = Math.min(3, (r14 == null ? void 0 : r14.length) || h7 || m7, m7), y4 = new Float32Array(f7), b4 = s8 || i8 ? 1 : 255;
    let g7;
    for (g7 = 0; g7 < l7.length; g7++) y4[g7] = u11[g7] === l7[g7] ? 0 : (p5 - c7) / (u11[g7] - l7[g7]) / b4;
    const S4 = new Float32Array(f7);
    if (i8 && n15) for (g7 = 0; g7 < f7; g7++) n15[g7] > 1 ? n15[g7] > 2 ? S4[g7] = 6.5 + (n15[g7] - 2) ** 2.5 : S4[g7] = 6.5 + 100 * (2 - n15[g7]) ** 4 : S4[g7] = 1;
    return { bandCount: f7, outMin: c7 / b4, outMax: p5 / b4, minCutOff: l7, maxCutOff: u11, factor: y4, useGamma: i8, gamma: i8 ? n15 : [1, 1, 1], gammaCorrection: i8 ? S4 : [1, 1, 1], colormap: s8, colormapOffset: a15, stretchType: t7.stretchType, type: "stretch" };
  }
  _generateShadedReliefWebGLParams(e6, t7 = false, r14 = { x: 0, y: 0 }) {
    var _a, _b;
    let s8 = null, a15 = null;
    const o11 = (_a = this.lookup) == null ? void 0 : _a.colormapLut;
    e6.colorRamp && o11 && (s8 = o11.indexedColormap, a15 = o11.offset);
    const n15 = { ...e6, isGCS: t7, resolution: r14 }, i8 = a12(n15), l7 = (_b = this.rasterInfo.statistics) == null ? void 0 : _b[0];
    return { ...i8, minValue: (l7 == null ? void 0 : l7.min) ?? 0, maxValue: (l7 == null ? void 0 : l7.max) ?? 8e3, hillshadeType: "traditional" === e6.hillshadeType ? 0 : 1, type: "hillshade", colormap: s8, colormapOffset: a15 };
  }
  _generateVectorFieldWebGLParams(e6) {
    var _a, _b, _c;
    const { style: t7, inputUnit: r14, outputUnit: s8, visualVariables: a15, symbolTileSize: o11, flowRepresentation: n15 } = e6;
    let i8;
    const l7 = ((_a = this.rasterInfo.statistics) == null ? void 0 : _a[0].min) ?? 0, u11 = ((_b = this.rasterInfo.statistics) == null ? void 0 : _b[0].max) ?? 50, c7 = (a15 == null ? void 0 : a15.find((e7) => "sizeInfo" === e7.type)) ?? { type: "sizeInfo", field: "Magnitude", maxDataValue: u11, maxSize: 0.8 * o11, minDataValue: l7, minSize: 0.2 * o11 }, p5 = c7.minDataValue ?? l7, d5 = c7.maxDataValue ?? u11, h7 = null != c7.maxSize && null != c7.minSize ? [c7.minSize / o11, c7.maxSize / o11] : [0.2, 0.8];
    if ("wind_speed" === t7) {
      const e7 = (h7[0] + h7[1]) / 2;
      h7[0] = h7[1] = e7;
    }
    const m7 = null != p5 && null != d5 ? [p5, d5] : null;
    if ("classified_arrow" === t7) if (null != p5 && null != d5 && null != c7) {
      i8 = [];
      const e7 = (c7.maxDataValue - c7.minDataValue) / 5;
      for (let t8 = 0; t8 < 6; t8++) i8.push(c7.minDataValue + e7 * t8);
    } else i8 = [0, 1e-6, 3.5, 7, 10.5, 14];
    const f7 = "flow_to" === n15 === ("ocean_current_kn" === t7 || "ocean_current_m" === t7) ? 0 : Math.PI, y4 = a15 == null ? void 0 : a15.find((e7) => "rotationInfo" === e7.type);
    return { breakValues: i8, dataRange: m7, inputUnit: r14, outputUnit: s8, symbolTileSize: o11, symbolPercentRange: h7, style: t7 || "single_arrow", rotation: f7, rotationType: ((_c = this.rasterInfo.storageInfo) == null ? void 0 : _c.tileInfo) && "vector-uv" === this.rasterInfo.dataType ? "geographic" : (y4 == null ? void 0 : y4.rotationType) || e6.rotationType, type: "vectorField" };
  }
};
r([m({ json: { write: true } })], L2.prototype, "rendererJSON", void 0), r([m({ type: m5, json: { write: true } })], L2.prototype, "rasterInfo", void 0), r([m({ json: { write: true } })], L2.prototype, "lookup", void 0), r([m()], L2.prototype, "canRenderInWebGL", void 0), L2 = r([a2("esri.renderers.support.RasterSymbolizer")], L2);
var _ = L2;
function V2(e6) {
  return "percentClip" === e6 || "histogramEqualization" === e6;
}
function O3(e6) {
  return null != e6 && e6.length > 0 && null != e6[0].min && null != e6[0].max;
}
function v4(e6) {
  return o3(e6) && 0 !== e6.validPixelCount;
}
function T3(e6) {
  return "algorithmic" === e6.type && ["0,0,0,255", "0,0,0"].includes(e6.fromColor.join(",")) && ["255,255,255,255", "255,255,255"].includes(e6.toColor.join(","));
}

export {
  r9 as r,
  n8 as n,
  r10 as r2,
  L,
  R,
  D,
  U,
  N,
  F,
  B2 as B,
  P2 as P,
  j2 as j,
  n12 as n2,
  m5 as m,
  n13 as n3,
  a12 as a,
  r12 as r3,
  c5 as c,
  h5 as h,
  u8 as u,
  f5 as f,
  d3 as d,
  C4 as C,
  m6 as m2,
  a13 as a2,
  c6 as c2,
  d4 as d2,
  w4 as w,
  B3 as B2,
  D3 as D2,
  A4 as A,
  P3 as P2,
  t6 as t,
  e5 as e,
  u10 as u2,
  r13 as r4,
  o10 as o,
  i7 as i,
  a14 as a3,
  n9 as n4,
  a9 as a4,
  a10 as a5,
  l4 as l,
  m4 as m3,
  h3 as h2,
  g5 as g,
  p2 as p,
  x3 as x,
  M2 as M,
  _
};
//# sourceMappingURL=chunk-5XQEH26Y.js.map
