import {
  n as n2,
  r as r3
} from "./chunk-6ZPEBUNI.js";
import "./chunk-6ALL3HYU.js";
import {
  i
} from "./chunk-TQ54TTVN.js";
import {
  j,
  y
} from "./chunk-EVT35YP5.js";
import "./chunk-ZGL6Q57M.js";
import "./chunk-KDQTUT24.js";
import "./chunk-TZAPBN5J.js";
import "./chunk-FKL5AVF4.js";
import "./chunk-CKPBZSTT.js";
import "./chunk-HB2JTNV2.js";
import "./chunk-3T3LUDWR.js";
import "./chunk-VBS2Y7KE.js";
import "./chunk-Q3K5MAUZ.js";
import "./chunk-DPVSO6BH.js";
import "./chunk-2XVRGGEF.js";
import "./chunk-U6IFI7EK.js";
import "./chunk-JMY2H33H.js";
import "./chunk-BXIXSFGX.js";
import "./chunk-OMMWWGIU.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-AHZHHHCW.js";
import "./chunk-OC7D2HR4.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-T23XXKIL.js";
import "./chunk-4V237NE5.js";
import "./chunk-F3ZOBTPK.js";
import {
  p,
  r as r2
} from "./chunk-3MXRSVIZ.js";
import {
  h
} from "./chunk-YGTM4JUB.js";
import "./chunk-73FHIZIF.js";
import "./chunk-ICIPRMPO.js";
import {
  e
} from "./chunk-2IVHP3HQ.js";
import "./chunk-EHD5KM2T.js";
import "./chunk-G6LMYOSA.js";
import "./chunk-YNC2IEH2.js";
import "./chunk-QJXYURT2.js";
import "./chunk-CGJUTDVJ.js";
import "./chunk-D6FJTDNK.js";
import "./chunk-GYV5TPN6.js";
import {
  g
} from "./chunk-T6QS4ZNU.js";
import "./chunk-D3FSVA7H.js";
import "./chunk-KV3S4QI2.js";
import "./chunk-ECMDQ4LS.js";
import "./chunk-LP6TMAPE.js";
import "./chunk-RENLZYKC.js";
import "./chunk-2X7T37AY.js";
import "./chunk-2IGXKE5P.js";
import "./chunk-4NJWIUZG.js";
import "./chunk-K5RYAJV4.js";
import "./chunk-W6D3ECTZ.js";
import "./chunk-QXDQJEIU.js";
import "./chunk-SEUZ3J6J.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-RCLWOQNR.js";
import "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-2M53HYNY.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-FG3XOAFD.js";
import "./chunk-GN5RE63N.js";
import "./chunk-2WXAPZBK.js";
import {
  s3 as s
} from "./chunk-E2I7HYXQ.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import "./chunk-CRH37WFF.js";
import "./chunk-YFGQMO6E.js";
import "./chunk-HAF6QJ32.js";
import {
  m
} from "./chunk-H77COA2S.js";
import {
  a4 as a
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  b
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import {
  n2 as n
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/views/2d/layers/WMTSLayerView2D.js
var y2 = [0, 0];
var _ = class extends i(r3(j(y))) {
  constructor() {
    super(...arguments), this._tileStrategy = null, this._fetchQueue = null, this.layer = null;
  }
  get tileMatrixSet() {
    var _a;
    const { activeLayer: e2 } = this.layer, { tileMatrixSet: t } = e2;
    if (t && s((_a = t.tileInfo) == null ? void 0 : _a.spatialReference, this.view.spatialReference)) return t;
    const i2 = this._getTileMatrixSetBySpatialReference(e2);
    return i2 && i2.id !== e2.tileMatrixSetId ? (e2.tileMatrixSetId = i2.id, i2) : null;
  }
  update(e2) {
    this._fetchQueue.pause(), this._fetchQueue.state = e2.state, this._tileStrategy.update(e2), this._fetchQueue.resume();
  }
  attach() {
    var _a;
    const e2 = (_a = this.tileMatrixSet) == null ? void 0 : _a.tileInfo;
    e2 && (this._tileInfoView = new h(e2), this._fetchQueue = new p({ tileInfoView: this._tileInfoView, concurrency: 16, process: (e3, t) => this.fetchTile(e3, t), scheduler: this.scheduler, priority: g.MAPVIEW_FETCH_QUEUE }), this._tileStrategy = new r2({ cachePolicy: "keep", resampling: true, acquireTile: (e3) => this.acquireTile(e3), releaseTile: (e3) => this.releaseTile(e3), tileInfoView: this._tileInfoView }), this.addAttachHandles(this._updatingHandles.add(() => {
      var _a2, _b;
      return [(_b = (_a2 = this.layer) == null ? void 0 : _a2.activeLayer) == null ? void 0 : _b.styleId, this.tileMatrixSet];
    }, () => this.doRefresh())), super.attach());
  }
  detach() {
    var _a, _b;
    super.detach(), (_a = this._tileStrategy) == null ? void 0 : _a.destroy(), (_b = this._fetchQueue) == null ? void 0 : _b.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = null;
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e2) {
    var _a;
    return ((_a = this.layer.activeLayer.tileMatrixSets) == null ? void 0 : _a.some((t) => {
      var _a2;
      return s((_a2 = t.tileInfo) == null ? void 0 : _a2.spatialReference, e2);
    })) ?? false;
  }
  async doRefresh() {
    if (this.attached) {
      if (this.suspended) return this._tileStrategy.clear(), void this.requestUpdate();
      this._fetchQueue.reset(), this._tileStrategy.refresh((e2) => this._updatingHandles.addPromise(this._enqueueTileFetch(e2)));
    }
  }
  acquireTile(e2) {
    const t = this._bitmapView.createTile(e2), i2 = t.bitmap;
    return [i2.x, i2.y] = this._tileInfoView.getTileCoords(y2, t.key), i2.resolution = this._tileInfoView.getTileResolution(t.key), [i2.width, i2.height] = this._tileInfoView.tileInfo.size, this._updatingHandles.addPromise(this._enqueueTileFetch(t)), this._bitmapView.addChild(t), this.requestUpdate(), t;
  }
  releaseTile(e2) {
    this._fetchQueue.abort(e2.key.id), this._bitmapView.removeChild(e2), e2.once("detach", () => e2.destroy()), this.requestUpdate();
  }
  async fetchTile(e2, t = {}) {
    const s2 = "tilemapCache" in this.layer ? this.layer.tilemapCache : null, { signal: r4, resamplingLevel: a2 = 0 } = t;
    if (!s2) return this._fetchImage(e2, r4);
    const l = new e(0, 0, 0, 0);
    let o;
    try {
      await s2.fetchAvailabilityUpsample(e2.level, e2.row, e2.col, l, { signal: r4 }), o = await this._fetchImage(l, r4);
    } catch (n3) {
      if (b(n3)) throw n3;
      if (a2 < 3) {
        const i2 = this._tileInfoView.getTileParentId(e2.id);
        if (i2) {
          const s3 = new e(i2), r5 = await this.fetchTile(s3, { ...t, resamplingLevel: a2 + 1 });
          return n2(this._tileInfoView, r5, s3, e2);
        }
      }
      throw n3;
    }
    return n2(this._tileInfoView, o, l, e2);
  }
  canResume() {
    const e2 = super.canResume();
    return e2 ? null !== this.tileMatrixSet : e2;
  }
  async _enqueueTileFetch(e2) {
    if (!this._fetchQueue.has(e2.key.id)) {
      try {
        const t = await this._fetchQueue.push(e2.key);
        e2.bitmap.source = t, e2.bitmap.width = this._tileInfoView.tileInfo.size[0], e2.bitmap.height = this._tileInfoView.tileInfo.size[1], e2.once("attach", () => this.requestUpdate());
      } catch (s2) {
        b(s2) || n.getLogger(this).error(s2);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e2, t) {
    return this.layer.fetchImageBitmapTile(e2.level, e2.row, e2.col, { signal: t });
  }
  _getTileMatrixSetBySpatialReference(e2) {
    var _a;
    return (_a = e2.tileMatrixSets) == null ? void 0 : _a.find((e3) => {
      var _a2;
      return s((_a2 = e3.tileInfo) == null ? void 0 : _a2.spatialReference, this.view.spatialReference);
    });
  }
};
r([m({ readOnly: true })], _.prototype, "tileMatrixSet", null), _ = r([a("esri.views.2d.layers.WMTSLayerView2D")], _);
var w = _;
export {
  w as default
};
//# sourceMappingURL=WMTSLayerView2D-766D52RZ.js.map
