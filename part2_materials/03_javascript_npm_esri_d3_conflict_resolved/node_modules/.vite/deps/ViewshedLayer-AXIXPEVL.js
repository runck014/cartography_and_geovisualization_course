import {
  b as b2,
  c as c2
} from "./chunk-LMPEOQ4I.js";
import {
  c
} from "./chunk-AG6DAYYM.js";
import "./chunk-7P5DKDVJ.js";
import "./chunk-HYP7W2PT.js";
import "./chunk-ECH6FTFX.js";
import "./chunk-XUTNI6FK.js";
import "./chunk-7Z4L4IHM.js";
import "./chunk-L6HI4BLZ.js";
import "./chunk-5FROWG6B.js";
import "./chunk-NW7VXBHZ.js";
import {
  b
} from "./chunk-V47ZBW5W.js";
import "./chunk-HKYICNT2.js";
import {
  S
} from "./chunk-VGUQMPM6.js";
import "./chunk-NIWINVGG.js";
import "./chunk-DOENTAA7.js";
import "./chunk-CGSFKZP2.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-D6FJTDNK.js";
import "./chunk-ECMDQ4LS.js";
import "./chunk-RENLZYKC.js";
import {
  a as a3
} from "./chunk-B3SR7LF7.js";
import {
  f
} from "./chunk-QMGMKWTA.js";
import "./chunk-2IGXKE5P.js";
import "./chunk-ZICJB3ML.js";
import "./chunk-TA32QX7Z.js";
import {
  l
} from "./chunk-NYLBGE62.js";
import "./chunk-K5RYAJV4.js";
import {
  X
} from "./chunk-XGYM66XX.js";
import "./chunk-JOOGZSAP.js";
import "./chunk-J6GHQIZ2.js";
import {
  A,
  d
} from "./chunk-W6D3ECTZ.js";
import "./chunk-MGMVRMXQ.js";
import {
  n,
  t
} from "./chunk-SEUZ3J6J.js";
import "./chunk-BWTCR2DR.js";
import "./chunk-SMOTPOZ7.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import {
  V
} from "./chunk-RCLWOQNR.js";
import "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-B6VE32RA.js";
import "./chunk-AIYFWM42.js";
import "./chunk-2M53HYNY.js";
import {
  r as r3,
  s as s2
} from "./chunk-6YWQXXBX.js";
import "./chunk-Q7TEBZSN.js";
import {
  j2 as j,
  w
} from "./chunk-FG3XOAFD.js";
import "./chunk-GN5RE63N.js";
import {
  r as r2
} from "./chunk-2WXAPZBK.js";
import "./chunk-E2I7HYXQ.js";
import "./chunk-P5H5PJSC.js";
import {
  s
} from "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import "./chunk-CRH37WFF.js";
import "./chunk-YFGQMO6E.js";
import {
  u2 as u
} from "./chunk-HAF6QJ32.js";
import {
  m
} from "./chunk-H77COA2S.js";
import {
  a2 as a,
  a4 as a2
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import "./chunk-GRW2QIBT.js";
import {
  o
} from "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/analysis/Viewshed.js
var u2 = class extends u(l) {
  constructor(e) {
    super(e), this.observer = null, this.farDistance = 1e3, this.heading = 0, this.tilt = 90, this.horizontalFieldOfView = 45, this.verticalFieldOfView = 45, this.feature = null;
  }
  isValid() {
    return null != this.observer && this.farDistance > 0;
  }
  equals(e) {
    return o(this.observer, e.observer) && this.farDistance === e.farDistance && this.heading === e.heading && this.tilt === e.tilt && this.horizontalFieldOfView === e.horizontalFieldOfView && this.verticalFieldOfView === e.verticalFieldOfView && c2(this.feature, e.feature);
  }
};
r([m({ type: j, json: { write: true } })], u2.prototype, "observer", void 0), r([m({ type: Number, nonNullable: true, range: { min: 0 }, json: { write: { isRequired: true } } })], u2.prototype, "farDistance", void 0), r([m({ type: Number, nonNullable: true, json: { write: { isRequired: true } } }), s((e) => a3.normalize(a(e), void 0, true))], u2.prototype, "heading", void 0), r([m({ type: Number, nonNullable: true, range: { min: 0, max: 180 }, json: { write: { isRequired: true } } })], u2.prototype, "tilt", void 0), r([m({ type: Number, nonNullable: true, range: { min: 0, max: 360 }, json: { write: { isRequired: true } } })], u2.prototype, "horizontalFieldOfView", void 0), r([m({ type: Number, nonNullable: true, range: { min: 0, max: 180 }, json: { write: { isRequired: true } } })], u2.prototype, "verticalFieldOfView", void 0), r([m(b2)], u2.prototype, "feature", void 0), r([m({ json: { read: false } })], u2.prototype, "isValid", null), u2 = r([a2("esri.analysis.Viewshed")], u2);
var d2 = u2;

// node_modules/@arcgis/core/analysis/ViewshedAnalysis.js
var f2 = V.ofType(d2);
var y = class extends c {
  constructor(e) {
    super(e), this.type = "viewshed", this._extent = null;
  }
  initialize() {
    this.addHandles(d(() => this._computeExtent(), (e) => {
      null == e.pending && (this._extent = e.extent);
    }, A));
  }
  get viewsheds() {
    return this._get("viewsheds") || new f2();
  }
  set viewsheds(e) {
    this._set("viewsheds", n(e, this.viewsheds, f2));
  }
  get spatialReference() {
    for (const e of this.viewsheds) if (null != e.observer) return e.observer.spatialReference;
    return null;
  }
  get extent() {
    return this._extent;
  }
  get requiredPropertiesForEditing() {
    return this.viewsheds.items.map(({ observer: e }) => e);
  }
  async waitComputeExtent() {
    const e = this._computeExtent();
    null != e.pending && await e.pending;
  }
  _computeExtent() {
    const { spatialReference: e } = this;
    if (null == e) return { pending: null, extent: null };
    const t2 = this.viewsheds.filter((e2) => null != e2.observer), r4 = t2.map((e2) => e2.observer).toArray(), n2 = X(r4, e);
    if (null != n2.pending) return { pending: n2.pending, extent: null };
    return { pending: null, extent: n2.geometries.map((e2, r5) => {
      const n3 = t2.at(r5);
      return null != e2 && null != n3 ? this._computeViewshedExtent(this.viewsheds.at(r5), e2) : null;
    }).filter((e2) => null != e2).reduce((e2, t3) => x(e2, t3), null) };
  }
  _computeViewshedExtent(e, t2) {
    const { farDistance: r4, heading: n2, tilt: s3, horizontalFieldOfView: i, verticalFieldOfView: p } = e, { spatialReference: c3 } = t2, u4 = i / 2, m2 = p / 2, d3 = r4 / c3.metersPerUnit, f3 = [a3.normalize(n2 - u4), n2, a3.normalize(n2 + u4)], y3 = w.fromPoint(t2), x2 = (e2) => {
      const t3 = f3.map((t4) => a3.normalize(t4 - e2));
      if (t3[0] > t3[2] || 360 === i) return d3;
      const r5 = t3.map((e3) => Math.abs(e3 > 180 ? 360 - e3 : e3)).reduce((e3, t4) => e3 > t4 ? t4 : e3);
      return r5 > 90 ? 0 : d3 * Math.cos(s2(r5));
    };
    y3.xmax += x2(90), y3.xmin -= x2(-90), y3.ymax += x2(0), y3.ymin -= x2(180);
    const w3 = t2.z;
    if (null != w3) {
      let e2 = w3, t3 = w3;
      const n3 = s3 - 90, i2 = r3(n3 + m2, -90, 90), o2 = r3(n3 - m2, -90, 90), l2 = (c3 == null ? void 0 : c3.isGeographic) ? r4 : d3;
      e2 += l2 * v(i2), t3 += l2 * v(o2);
      const p2 = g(m2) * l2, h = v(n3) * p2 * (1 - g(u4));
      s3 < 90 && (e2 -= h), s3 > 90 && (t3 -= h), y3.zmax = Math.max(e2, w3), y3.zmin = Math.min(t3, w3);
    }
    return y3;
  }
  clear() {
    this.viewsheds.removeAll();
  }
};
function x(e, t2) {
  return null == e ? t2 : null == t2 ? e : e.union(t2);
}
function g(e) {
  return Math.cos(s2(e));
}
function v(e) {
  return Math.sin(s2(e));
}
r([m({ type: ["viewshed"] })], y.prototype, "type", void 0), r([m({ cast: t, type: f2, nonNullable: true })], y.prototype, "viewsheds", null), r([m({ readOnly: true })], y.prototype, "spatialReference", null), r([m()], y.prototype, "_extent", void 0), r([m({ readOnly: true })], y.prototype, "extent", null), r([m({ readOnly: true })], y.prototype, "requiredPropertiesForEditing", null), y = r([a2("esri.analysis.ViewshedAnalysis")], y);
var w2 = y;

// node_modules/@arcgis/core/layers/ViewshedLayer.js
var u3 = class extends b(S(f)) {
  constructor(e) {
    super(e), this.type = "viewshed", this.operationalLayerType = "ViewshedLayer", this.source = new w2(), this.opacity = 1;
  }
  initialize() {
    this.addHandles(d(() => this.source, (e, r4) => {
      null != r4 && r4.parent === this && (r4.parent = null), null != e && (e.parent = this);
    }, A));
  }
  async load() {
    return this.addResolvingPromise(this.source.waitComputeExtent()), this;
  }
  get spatialReference() {
    return this.source.spatialReference;
  }
  get fullExtent() {
    return this.source.extent;
  }
  releaseAnalysis(e) {
    this.source === e && (this.source = new w2());
  }
  get analysis() {
    return this.source;
  }
  set analysis(e) {
    this.source = e;
  }
  get viewsheds() {
    return this.source.viewsheds;
  }
  set viewsheds(e) {
    this.source.viewsheds = e;
  }
  writeViewsheds(e, r4, s3, t2) {
    r4.viewsheds = e.filter((e2) => e2.isValid()).map((e2) => e2.toJSON(t2)).toJSON();
  }
};
r([m({ json: { read: false }, readOnly: true })], u3.prototype, "type", void 0), r([m({ type: ["ViewshedLayer"] })], u3.prototype, "operationalLayerType", void 0), r([m({ nonNullable: true })], u3.prototype, "source", void 0), r([m({ readOnly: true })], u3.prototype, "spatialReference", null), r([m({ readOnly: true })], u3.prototype, "fullExtent", null), r([m({ readOnly: true, json: { read: false, write: false, origins: { service: { read: false, write: false }, "portal-item": { read: false, write: false }, "web-document": { read: false, write: false } } } })], u3.prototype, "opacity", void 0), r([m({ type: ["show", "hide"] })], u3.prototype, "listMode", void 0), r([m({ type: V.ofType(d2), json: { write: { ignoreOrigin: true }, origins: { "web-scene": { write: { ignoreOrigin: true } } } } })], u3.prototype, "viewsheds", null), r([r2("web-scene", "viewsheds")], u3.prototype, "writeViewsheds", null), u3 = r([a2("esri.layers.ViewshedLayer")], u3);
var y2 = u3;
export {
  y2 as default
};
//# sourceMappingURL=ViewshedLayer-AXIXPEVL.js.map
