import {
  w
} from "./chunk-FG3XOAFD.js";
import {
  r as r2
} from "./chunk-2WXAPZBK.js";
import {
  n
} from "./chunk-7O7KFKCG.js";
import {
  f
} from "./chunk-HAF6QJ32.js";
import {
  m
} from "./chunk-H77COA2S.js";
import {
  a4 as a2
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  a
} from "./chunk-PKLD5YJF.js";

// node_modules/@arcgis/core/rest/support/QuantizationParameters.js
var n2;
var c = new n({ upperLeft: "upper-left", lowerLeft: "lower-left" });
var m2 = n2 = class extends f {
  constructor(e) {
    super(e), this.extent = null, this.mode = "view", this.originPosition = "upper-left", this.tolerance = 1;
  }
  clone() {
    return new n2(a({ extent: this.extent, mode: this.mode, originPosition: this.originPosition, tolerance: this.tolerance }));
  }
};
r([m({ type: w, json: { write: { overridePolicy() {
  return { enabled: "view" === this.mode };
} } } })], m2.prototype, "extent", void 0), r([m({ type: ["view", "edit"], json: { write: true } })], m2.prototype, "mode", void 0), r([m({ type: String, json: { read: c.read, write: c.write } })], m2.prototype, "originPosition", void 0), r([m({ type: Number, json: { write: { overridePolicy() {
  return { enabled: "view" === this.mode };
} } } })], m2.prototype, "tolerance", void 0), m2 = n2 = r([a2("esri.rest.support.QuantizationParameters")], m2);
var a3 = m2;

// node_modules/@arcgis/core/rest/support/spatialRelationships.js
var s = new n({ esriSpatialRelIntersects: "intersects", esriSpatialRelContains: "contains", esriSpatialRelCrosses: "crosses", esriSpatialRelDisjoint: "disjoint", esriSpatialRelEnvelopeIntersects: "envelope-intersects", esriSpatialRelIndexIntersects: "index-intersects", esriSpatialRelOverlaps: "overlaps", esriSpatialRelTouches: "touches", esriSpatialRelWithin: "within", esriSpatialRelRelation: "relation" });

// node_modules/@arcgis/core/rest/support/StatisticDefinition.js
var c2;
var n3 = new n({ count: "count", sum: "sum", min: "min", max: "max", avg: "avg", stddev: "stddev", var: "var", exceedslimit: "exceedslimit", percentile_cont: "percentile-continuous", percentile_disc: "percentile-discrete", EnvelopeAggregate: "envelope-aggregate", CentroidAggregate: "centroid-aggregate", ConvexHullAggregate: "convex-hull-aggregate" });
var p = c2 = class extends f {
  constructor(t) {
    super(t), this.maxPointCount = void 0, this.maxRecordCount = void 0, this.maxVertexCount = void 0, this.onStatisticField = null, this.outStatisticFieldName = null, this.statisticType = null, this.statisticParameters = null;
  }
  writeStatisticParameters(t, e) {
    "percentile-continuous" !== this.statisticType && "percentile-discrete" !== this.statisticType || (e.statisticParameters = a(t));
  }
  clone() {
    return new c2({ maxPointCount: this.maxPointCount, maxRecordCount: this.maxRecordCount, maxVertexCount: this.maxVertexCount, onStatisticField: this.onStatisticField, outStatisticFieldName: this.outStatisticFieldName, statisticType: this.statisticType, statisticParameters: a(this.statisticParameters) });
  }
};
r([m({ type: Number, json: { write: true } })], p.prototype, "maxPointCount", void 0), r([m({ type: Number, json: { write: true } })], p.prototype, "maxRecordCount", void 0), r([m({ type: Number, json: { write: true } })], p.prototype, "maxVertexCount", void 0), r([m({ type: String, json: { write: true } })], p.prototype, "onStatisticField", void 0), r([m({ type: String, json: { write: true } })], p.prototype, "outStatisticFieldName", void 0), r([m({ type: String, json: { read: { source: "statisticType", reader: n3.read }, write: { target: "statisticType", writer: n3.write } } })], p.prototype, "statisticType", void 0), r([m({ type: Object })], p.prototype, "statisticParameters", void 0), r([r2("statisticParameters")], p.prototype, "writeStatisticParameters", null), p = c2 = r([a2("esri.rest.support.StatisticDefinition")], p);
var m3 = p;

export {
  a3 as a,
  s,
  m3 as m
};
//# sourceMappingURL=chunk-LE3YW4Y3.js.map
