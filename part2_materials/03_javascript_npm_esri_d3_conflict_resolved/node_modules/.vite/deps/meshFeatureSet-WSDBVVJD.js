import {
  $
} from "./chunk-NIDCEUGW.js";
import {
  i as i2,
  n as n2
} from "./chunk-STQZLKY5.js";
import {
  a,
  i
} from "./chunk-ZWM63JM7.js";
import "./chunk-4SD3BG5E.js";
import "./chunk-BXIXSFGX.js";
import "./chunk-7Z4L4IHM.js";
import "./chunk-AFW7JFZH.js";
import "./chunk-LY6SU3A2.js";
import "./chunk-3XL6ZT4G.js";
import "./chunk-XLSAKOM6.js";
import "./chunk-L6HI4BLZ.js";
import {
  s
} from "./chunk-F3IC5LHL.js";
import "./chunk-SGDQIAAB.js";
import "./chunk-U5TYWISK.js";
import "./chunk-QYBCLVRN.js";
import "./chunk-WEHSG4M3.js";
import "./chunk-CKKQRCEC.js";
import "./chunk-2HAJDS7Q.js";
import "./chunk-23GTDA23.js";
import "./chunk-E6A2OXXU.js";
import "./chunk-5FROWG6B.js";
import "./chunk-NW7VXBHZ.js";
import "./chunk-K6ALWBKT.js";
import "./chunk-2KYWMOKS.js";
import "./chunk-GENAMNI4.js";
import {
  d as d2
} from "./chunk-PVHAAI32.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-WC6QRPBL.js";
import "./chunk-D6FJTDNK.js";
import "./chunk-ECMDQ4LS.js";
import "./chunk-LP6TMAPE.js";
import "./chunk-RENLZYKC.js";
import {
  d
} from "./chunk-6Q7GN2CW.js";
import "./chunk-MYUZZ3A3.js";
import "./chunk-2IGXKE5P.js";
import "./chunk-JFI4ESYU.js";
import "./chunk-4X2UADDH.js";
import "./chunk-ZICJB3ML.js";
import "./chunk-AVBIV2K3.js";
import "./chunk-4NJWIUZG.js";
import "./chunk-NYLBGE62.js";
import "./chunk-QCBTLG25.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-K5RYAJV4.js";
import "./chunk-XGYM66XX.js";
import "./chunk-JOOGZSAP.js";
import "./chunk-J6GHQIZ2.js";
import "./chunk-W6D3ECTZ.js";
import "./chunk-SEUZ3J6J.js";
import "./chunk-BWTCR2DR.js";
import "./chunk-SMOTPOZ7.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import "./chunk-TSVUPARM.js";
import "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-RCLWOQNR.js";
import "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-SEG3PRUR.js";
import "./chunk-B6VE32RA.js";
import "./chunk-AIYFWM42.js";
import "./chunk-2M53HYNY.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-Q7TEBZSN.js";
import {
  w
} from "./chunk-FG3XOAFD.js";
import "./chunk-GN5RE63N.js";
import {
  g
} from "./chunk-2WXAPZBK.js";
import "./chunk-E2I7HYXQ.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import "./chunk-CRH37WFF.js";
import "./chunk-YFGQMO6E.js";
import "./chunk-HAF6QJ32.js";
import "./chunk-H77COA2S.js";
import {
  r2 as r
} from "./chunk-7LJCT7EA.js";
import "./chunk-MV5XBD6C.js";
import "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import {
  n2 as n
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/rest/support/meshFeatureSet.js
var p = () => n.getLogger("esri.rest.support.meshFeatureSet");
function l(t, r2, s2) {
  const o = s2.features;
  s2.features = [], delete s2.geometryType;
  const a2 = d2.fromJSON(s2);
  if (a2.geometryType = "mesh", !s2.assetMaps) return a2;
  const u = g2(r2, s2.assetMaps), i3 = t.sourceSpatialReference ?? g.WGS84, m = s2.globalIdFieldName, { outFields: c } = t, p2 = null != c && c.length > 0 ? y(c.includes("*") ? null : new Set(c)) : () => ({});
  for (const n3 of o) {
    const t2 = E(n3, m, i3, r2, u);
    a2.features.push(new d({ geometry: t2, attributes: p2(n3) }));
  }
  return a2;
}
function y(e) {
  return ({ attributes: t }) => {
    if (!t) return {};
    if (!e) return t;
    for (const r2 in t) e.has(r2) || delete t[r2];
    return t;
  };
}
function E(e, t, r2, n3, a2) {
  const u = e.attributes[t], i3 = a2.get(u);
  if (null == i3 || !e.geometry) return null;
  const f = n2(e.attributes, r2, n3.transformFieldRoles), p2 = w.fromJSON(e.geometry);
  p2.spatialReference = r2;
  const l2 = i2(e.attributes, n3.transformFieldRoles), y2 = r2.isGeographic ? "local" : "georeferenced", E2 = d3(i3);
  return E2 ? $.createWithExternalSource(f, E2, { extent: p2, transform: l2, vertexSpace: y2, unitConversionDisabled: true }) : $.createIncomplete(f, { extent: p2, transform: l2, vertexSpace: y2 });
}
var h;
function g2(e, t) {
  const s2 = /* @__PURE__ */ new Map();
  for (const o of t) {
    const t2 = o.parentGlobalId;
    if (null == t2) continue;
    const n3 = o.assetName, a2 = o.assetType, u = o.assetHash, f = o.assetURL, m = o.conversionStatus, c = o.seqNo, l2 = s(a2, e.supportedFormats);
    if (!l2) {
      p().error("mesh-feature-set:unknown-format", `Service returned an asset of type ${a2}, but it does not list it as a supported type`);
      continue;
    }
    const y2 = r(s2, t2, () => ({ files: /* @__PURE__ */ new Map() }));
    r(y2.files, n3, () => ({ name: n3, type: a2, mimeType: l2, status: S(m), parts: [] })).parts[c] = { hash: u, url: f };
  }
  return s2;
}
function d3(e) {
  const t = Array.from(e.files.values()), r2 = new Array();
  for (const s2 of t) {
    if (s2.status !== h.COMPLETED) return null;
    const e2 = new Array();
    for (const t2 of s2.parts) {
      if (!t2) return null;
      e2.push(new i(t2.url, t2.hash));
    }
    r2.push(new a(s2.name, s2.mimeType, e2));
  }
  return r2;
}
function S(e) {
  switch (e) {
    case "COMPLETED":
    case "SUBMITTED":
      return h.COMPLETED;
    case "INPROGRESS":
      return h.PENDING;
    default:
      return h.FAILED;
  }
}
!function(e) {
  e[e.FAILED = 0] = "FAILED", e[e.PENDING = 1] = "PENDING", e[e.COMPLETED = 2] = "COMPLETED";
}(h || (h = {}));
export {
  g2 as assetMapFromAssetMapsJSON,
  E as extractMesh,
  l as meshFeatureSetFromJSON
};
//# sourceMappingURL=meshFeatureSet-WSDBVVJD.js.map
