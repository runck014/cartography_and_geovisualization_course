import {
  E,
  I,
  N
} from "./chunk-N77L5742.js";
import {
  d as d2,
  f,
  j as j2,
  p as p2,
  y
} from "./chunk-FHQJQISR.js";
import "./chunk-5PXF5FL6.js";
import {
  a,
  l,
  u
} from "./chunk-2L7UGRIC.js";
import "./chunk-E6IUAXXM.js";
import {
  m
} from "./chunk-NJKQE6C5.js";
import "./chunk-ENHHZ2WV.js";
import "./chunk-HKWBRI3V.js";
import {
  V
} from "./chunk-NW6OWOSJ.js";
import "./chunk-EVK6ZSVY.js";
import "./chunk-MSUBZ5BW.js";
import {
  j,
  x
} from "./chunk-YEDSTDY4.js";
import "./chunk-P4TUSPKE.js";
import {
  et,
  nt,
  ot,
  rt,
  tt
} from "./chunk-OMMWWGIU.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-HACIIBEF.js";
import "./chunk-2BVPGUC2.js";
import "./chunk-BN24XFSK.js";
import "./chunk-547Z5YIS.js";
import "./chunk-4WB72ND2.js";
import "./chunk-LIUBAYCM.js";
import "./chunk-BLYF375M.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-WPERPIJF.js";
import {
  Z
} from "./chunk-RXJCBLN2.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-XKMN3LJN.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-T6QS4ZNU.js";
import "./chunk-D3FSVA7H.js";
import "./chunk-6B4OMNPA.js";
import "./chunk-3GQ4PJDJ.js";
import "./chunk-QEJMJI2R.js";
import "./chunk-ECCHNTW6.js";
import "./chunk-WWNVF22O.js";
import {
  i as i2
} from "./chunk-SUZN3TAH.js";
import "./chunk-K5RYAJV4.js";
import "./chunk-XGYM66XX.js";
import "./chunk-JOOGZSAP.js";
import "./chunk-J6GHQIZ2.js";
import "./chunk-W6D3ECTZ.js";
import "./chunk-PJNOPBRY.js";
import "./chunk-23TJP3F6.js";
import "./chunk-EMVTPRQK.js";
import "./chunk-EDGKOPSL.js";
import "./chunk-QXDQJEIU.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-SEUZ3J6J.js";
import {
  H,
  K
} from "./chunk-BWTCR2DR.js";
import "./chunk-SMOTPOZ7.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-7FJIOZSE.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2PK57UYA.js";
import {
  p
} from "./chunk-3L2AYCZY.js";
import "./chunk-TSVUPARM.js";
import "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import {
  i
} from "./chunk-JS7R723S.js";
import "./chunk-RCLWOQNR.js";
import "./chunk-DOTSJZHK.js";
import {
  d
} from "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-RD2BBQYN.js";
import "./chunk-SEG3PRUR.js";
import "./chunk-B6VE32RA.js";
import "./chunk-AIYFWM42.js";
import "./chunk-2M53HYNY.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-FG3XOAFD.js";
import "./chunk-GN5RE63N.js";
import "./chunk-2WXAPZBK.js";
import {
  U as U2,
  s3 as s2
} from "./chunk-E2I7HYXQ.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import {
  U
} from "./chunk-CRH37WFF.js";
import "./chunk-YFGQMO6E.js";
import "./chunk-HAF6QJ32.js";
import "./chunk-H77COA2S.js";
import "./chunk-7LJCT7EA.js";
import "./chunk-MV5XBD6C.js";
import {
  b
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import {
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/layers/graphics/sources/geojson/GeoJSONSourceWorker.js
var D = { hasAttachments: false, capabilities: "query, editing, create, delete, update", useStandardizedQueries: true, supportsCoordinatesQuantization: true, supportsReturningQueryGeometry: true, advancedQueryCapabilities: { supportsQueryAttachments: false, supportsQueryWithCacheHint: true, supportsQueryWithDistance: true, supportsQueryWithResultType: true, supportsStatistics: true, supportsPercentileStatistics: true, supportsReturningGeometryCentroid: true, supportsDistinct: true, supportsReturningQueryExtent: true, supportsReturningGeometryProperties: false, supportsHavingClause: true, supportsOrderBy: true, supportsPagination: true, supportsSqlExpression: true, supportsDisjointSpatialRel: true } };
var Q = class {
  constructor() {
    this._queryEngine = null, this._snapshotFeatures = async (e) => {
      const t = await this._fetch(e);
      return this._createFeatures(t);
    };
  }
  destroy() {
    var _a;
    (_a = this._queryEngine) == null ? void 0 : _a.destroy(), this._queryEngine = this._createDefaultAttributes = null;
  }
  async load(e, t = {}) {
    this._loadOptions = { url: e.url, customParameters: e.customParameters };
    const i3 = [], [r] = await Promise.all([e.url ? this._fetch(t == null ? void 0 : t.signal) : null, this._checkProjection(e.spatialReference)]), n2 = I(r, { geometryType: e.geometryType }), o = e.fields || n2.fields || [], l2 = null != e.hasZ ? e.hasZ : n2.hasZ, u2 = n2.geometryType;
    let d3 = e.objectIdField || n2.objectIdFieldName || "__OBJECTID";
    const p3 = e.spatialReference || U2;
    let c = e.timeInfo;
    o === n2.fields && n2.unknownFields.length > 0 && i3.push({ name: "geojson-layer:unknown-field-types", message: "Some fields types couldn't be inferred from the features and were dropped", details: { unknownFields: n2.unknownFields } });
    const y2 = new Z(o);
    let h = y2.get(d3);
    h ? ("esriFieldTypeString" !== h.type && (h.type = "esriFieldTypeOID"), h.editable = false, h.nullable = false, d3 = h.name) : (h = { alias: d3, name: d3, type: "string" === n2.objectIdFieldType ? "esriFieldTypeString" : "esriFieldTypeOID", editable: false, nullable: false }, o.unshift(h));
    const _ = {};
    for (const a2 of o) {
      if (null == a2.name && (a2.name = a2.alias), null == a2.alias && (a2.alias = a2.name), !a2.name) throw new s("geojson-layer:invalid-field-name", "field name is missing", { field: a2 });
      if (!i2.jsonValues.includes(a2.type)) throw new s("geojson-layer:invalid-field-type", `invalid type for field "${a2.name}"`, { field: a2 });
      if (a2.name !== h.name) {
        const e2 = H(a2);
        void 0 !== e2 && (_[a2.name] = e2);
      }
      null == a2.length && (a2.length = K(a2));
    }
    if (c) {
      if (c.startTimeField) {
        const e2 = y2.get(c.startTimeField);
        e2 ? (c.startTimeField = e2.name, e2.type = "esriFieldTypeDate") : c.startTimeField = null;
      }
      if (c.endTimeField) {
        const e2 = y2.get(c.endTimeField);
        e2 ? (c.endTimeField = e2.name, e2.type = "esriFieldTypeDate") : c.endTimeField = null;
      }
      if (c.trackIdField) {
        const e2 = y2.get(c.trackIdField);
        e2 ? c.trackIdField = e2.name : (c.trackIdField = null, i3.push({ name: "geojson-layer:invalid-timeInfo-trackIdField", message: "trackIdField is missing", details: { timeInfo: c } }));
      }
      c.startTimeField || c.endTimeField || (i3.push({ name: "geojson-layer:invalid-timeInfo", message: "startTimeField and endTimeField are missing", details: { timeInfo: c } }), c = null);
    }
    const F = u2 ? u(u2) : void 0, b2 = y2.dateFields.length ? { timeZoneIANA: i } : null, T = { warnings: i3, featureErrors: [], layerDefinition: { ...D, drawingInfo: F ?? void 0, templates: l(_), extent: void 0, geometryType: u2, objectIdField: d3, fields: o, hasZ: !!l2, timeInfo: c, dateFieldsTimeReference: b2 } };
    this._queryEngine = new V({ fieldsIndex: Z.fromLayerJSON({ fields: o, timeInfo: c, dateFieldsTimeReference: b2 }), geometryType: u2, hasM: false, hasZ: l2, objectIdField: d3, spatialReference: p3, timeInfo: c, featureStore: new m({ geometryType: u2, hasM: false, hasZ: l2 }) });
    const w = this._queryEngine.fieldsIndex.requiredFields.indexOf(h);
    w > -1 && this._queryEngine.fieldsIndex.requiredFields.splice(w, 1), this._createDefaultAttributes = a(_, d3);
    const q = await this._createFeatures(r);
    this._objectIdGenerator = this._createObjectIdGenerator(this._queryEngine, q);
    const x2 = this._normalizeFeatures(q, T.featureErrors);
    this._queryEngine.featureStore.addMany(x2);
    const { fullExtent: Q2, timeExtent: v } = await this._queryEngine.fetchRecomputedExtents();
    if (T.layerDefinition.extent = Q2, v) {
      const { start: e2, end: t2 } = v;
      T.layerDefinition.timeInfo.timeExtent = [e2, t2];
    }
    return T;
  }
  async applyEdits(e) {
    const { spatialReference: t, geometryType: s3 } = this._queryEngine;
    return await Promise.all([j2(t, s3), x(e.adds, t), x(e.updates, t)]), await this._waitSnapshotComplete(), this._applyEdits(e);
  }
  async queryFeatures(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQuery(e, t.signal);
  }
  async queryFeatureCount(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForCount(e, t.signal);
  }
  async queryObjectIds(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForIds(e, t.signal);
  }
  async queryExtent(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForExtent(e, t.signal);
  }
  async querySnapping(e, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForSnapping(e, t.signal);
  }
  async refresh(e) {
    var _a;
    this._loadOptions.customParameters = e, (_a = this._snapshotTask) == null ? void 0 : _a.abort(), this._snapshotTask = d(this._snapshotFeatures), this._snapshotTask.promise.then((e2) => {
      this._queryEngine.featureStore.clear(), this._objectIdGenerator = this._createObjectIdGenerator(this._queryEngine, e2);
      const t = this._normalizeFeatures(e2);
      t && this._queryEngine.featureStore.addMany(t);
    }, (e2) => {
      this._queryEngine.featureStore.clear(), b(e2) || n.getLogger("esri.layers.GeoJSONLayer").error(new s("geojson-layer:refresh", "An error occurred during refresh", { error: e2 }));
    }), await this._waitSnapshotComplete();
    const { fullExtent: n2, timeExtent: a2 } = await this._queryEngine.fetchRecomputedExtents();
    return { extent: n2, timeExtent: a2 };
  }
  async _createFeatures(e) {
    if (null == e) return [];
    const { geometryType: t, hasZ: s3, objectIdField: i3 } = this._queryEngine, r = N(e, { geometryType: t, hasZ: s3, objectIdField: i3 });
    if (!s2(this._queryEngine.spatialReference, U2)) for (const n2 of r) null != n2.geometry && (n2.geometry = ot(j(rt(n2.geometry, this._queryEngine.geometryType, this._queryEngine.hasZ, false), U2, this._queryEngine.spatialReference)));
    return r;
  }
  async _waitSnapshotComplete() {
    if (this._snapshotTask && !this._snapshotTask.finished) {
      try {
        await this._snapshotTask.promise;
      } catch {
      }
      return this._waitSnapshotComplete();
    }
  }
  async _fetch(t) {
    const { url: s3, customParameters: i3 } = this._loadOptions, r = (await U(s3 ?? "", { responseType: "json", query: { ...i3 }, signal: t })).data;
    return E(r), r;
  }
  _normalizeFeatures(e, t) {
    const { objectIdField: s3, fieldsIndex: i3 } = this._queryEngine, r = [];
    for (const n2 of e) {
      const e2 = this._createDefaultAttributes(), a2 = p2(i3, e2, n2.attributes, true);
      a2 ? t == null ? void 0 : t.push(a2) : (this._assignObjectId(e2, n2.attributes, true), n2.attributes = e2, n2.objectId = e2[s3], r.push(n2));
    }
    return r;
  }
  async _applyEdits(e) {
    const { adds: t, updates: s3, deletes: i3 } = e, r = { addResults: [], deleteResults: [], updateResults: [], uidToObjectId: {} };
    if ((t == null ? void 0 : t.length) && this._applyAddEdits(r, t), (s3 == null ? void 0 : s3.length) && this._applyUpdateEdits(r, s3), i3 == null ? void 0 : i3.length) {
      for (const e2 of i3) r.deleteResults.push(d2(e2));
      this._queryEngine.featureStore.removeManyById(i3);
    }
    const { fullExtent: n2, timeExtent: a2 } = await this._queryEngine.fetchRecomputedExtents();
    return { extent: n2, timeExtent: a2, featureEditResults: r };
  }
  _applyAddEdits(e, t) {
    const { addResults: s3 } = e, { geometryType: i3, hasM: r, hasZ: a2, objectIdField: o, spatialReference: l2, featureStore: u2, fieldsIndex: p3 } = this._queryEngine, c = [];
    for (const d3 of t) {
      if (d3.geometry && i3 !== p(d3.geometry)) {
        s3.push(f("Incorrect geometry type."));
        continue;
      }
      const t2 = this._createDefaultAttributes(), r2 = p2(p3, t2, d3.attributes);
      if (r2) s3.push(r2);
      else {
        if (this._assignObjectId(t2, d3.attributes), d3.attributes = t2, null != d3.uid) {
          const t3 = d3.attributes[o];
          e.uidToObjectId[d3.uid] = t3;
        }
        if (null != d3.geometry) {
          const e2 = d3.geometry.spatialReference ?? l2;
          d3.geometry = j(y(d3.geometry, e2), e2, l2);
        }
        c.push(d3), s3.push(d2(d3.attributes[o]));
      }
    }
    u2.addMany(et([], c, i3, a2, r, o));
  }
  _applyUpdateEdits({ updateResults: e }, t) {
    const { geometryType: s3, hasM: i3, hasZ: r, objectIdField: a2, spatialReference: o, featureStore: l2, fieldsIndex: u2 } = this._queryEngine;
    for (const d3 of t) {
      const { attributes: t2, geometry: m2 } = d3, y2 = t2 == null ? void 0 : t2[a2];
      if (null == y2) {
        e.push(f(`Identifier field ${a2} missing`));
        continue;
      }
      if (!l2.has(y2)) {
        e.push(f(`Feature with object id ${y2} missing`));
        continue;
      }
      const f2 = nt(l2.getFeature(y2), s3, r, i3);
      if (null != m2) {
        if (s3 !== p(m2)) {
          e.push(f("Incorrect geometry type."));
          continue;
        }
        const t3 = m2.spatialReference ?? o;
        f2.geometry = j(y(m2, t3), t3, o);
      }
      if (t2) {
        const s4 = p2(u2, f2.attributes, t2);
        if (s4) {
          e.push(s4);
          continue;
        }
      }
      l2.add(tt(f2, s3, r, i3, a2)), e.push(d2(y2));
    }
  }
  _createObjectIdGenerator(e, t) {
    const s3 = e.fieldsIndex.get(e.objectIdField);
    if ("esriFieldTypeString" === s3.type) return () => s3.name + "-" + Date.now().toString(16);
    let i3 = Number.NEGATIVE_INFINITY;
    for (const r of t) r.objectId && (i3 = Math.max(i3, r.objectId));
    return i3 = Math.max(0, i3) + 1, () => i3++;
  }
  _assignObjectId(e, t, s3 = false) {
    const i3 = this._queryEngine.objectIdField;
    e[i3] = s3 && i3 in t ? t[i3] : this._objectIdGenerator();
  }
  async _checkProjection(e) {
    try {
      await x(U2, e);
    } catch {
      throw new s("geojson-layer", "Projection not supported");
    }
  }
};
export {
  Q as default
};
//# sourceMappingURL=GeoJSONSourceWorker-2VVZFN45.js.map
