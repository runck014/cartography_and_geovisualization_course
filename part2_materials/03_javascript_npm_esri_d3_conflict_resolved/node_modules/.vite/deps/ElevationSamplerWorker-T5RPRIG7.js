import {
  B
} from "./chunk-SGDQIAAB.js";
import "./chunk-U5TYWISK.js";
import "./chunk-QYBCLVRN.js";
import "./chunk-WEHSG4M3.js";
import "./chunk-CKKQRCEC.js";
import {
  a
} from "./chunk-2HAJDS7Q.js";
import "./chunk-23GTDA23.js";
import "./chunk-E6A2OXXU.js";
import "./chunk-5FROWG6B.js";
import "./chunk-NW7VXBHZ.js";
import {
  h
} from "./chunk-P4TUSPKE.js";
import "./chunk-GENAMNI4.js";
import "./chunk-URFLFG2R.js";
import "./chunk-D6FJTDNK.js";
import "./chunk-QEJMJI2R.js";
import "./chunk-LP6TMAPE.js";
import "./chunk-RENLZYKC.js";
import "./chunk-NYLBGE62.js";
import "./chunk-XGYM66XX.js";
import "./chunk-JOOGZSAP.js";
import "./chunk-J6GHQIZ2.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-TSVUPARM.js";
import "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-FG3XOAFD.js";
import "./chunk-GN5RE63N.js";
import "./chunk-2WXAPZBK.js";
import "./chunk-E2I7HYXQ.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import "./chunk-CRH37WFF.js";
import "./chunk-YFGQMO6E.js";
import "./chunk-HAF6QJ32.js";
import "./chunk-H77COA2S.js";
import "./chunk-7LJCT7EA.js";
import "./chunk-MV5XBD6C.js";
import "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import "./chunk-PKLD5YJF.js";
import {
  has
} from "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/geometry/support/meshUtils/ElevationSamplerWorker.js
var n = class {
  async createIndex(t, r) {
    var _a;
    const n2 = new Array();
    if (!((_a = t.vertexAttributes) == null ? void 0 : _a.position)) return new h();
    const o2 = a2(t), s2 = null != r ? await r.invoke("createIndexThread", o2, { transferList: n2 }) : this.createIndexThread(o2).result;
    return i().fromJSON(s2);
  }
  createIndexThread(e) {
    const t = i();
    if (!e) return { result: t.toJSON() };
    const r = new Float64Array(e.position);
    return e.components ? s(t, r, e.components.map((e2) => new Uint32Array(e2))) : o(t, r);
  }
};
function o(e, t) {
  const r = new Array(t.length / 9);
  let n2 = 0;
  for (let o2 = 0; o2 < t.length; o2 += 9) r[n2++] = c(t, o2, o2 + 3, o2 + 6);
  return e.load(r), { result: e.toJSON() };
}
function s(e, t, r) {
  let n2 = 0;
  for (const a3 of r) n2 += a3.length / 3;
  const o2 = new Array(n2);
  let s2 = 0;
  for (const a3 of r) for (let e2 = 0; e2 < a3.length; e2 += 3) o2[s2++] = c(t, 3 * a3[e2], 3 * a3[e2 + 1], 3 * a3[e2 + 2]);
  return e.load(o2), { result: e.toJSON() };
}
function a2(e) {
  var _a;
  const { vertexAttributes: { position: n2 }, vertexSpace: o2, spatialReference: s2, transform: a3 } = e, i2 = (_a = B({ vertexAttributes: { position: n2 }, vertexSpace: o2, spatialReference: s2, transform: a3 }, a.absolute, { allowBufferReuse: true })) == null ? void 0 : _a.position;
  return i2 ? !e.components || e.components.some((e2) => !e2.faces) ? { position: i2.buffer } : { position: i2.buffer, components: e.components.map((e2) => e2.faces) } : null;
}
function i() {
  return new h(9, has("esri-csp-restrictions") ? (e) => e : [".minX", ".minY", ".maxX", ".maxY"]);
}
function c(e, t, r, n2) {
  return { minX: Math.min(e[t], e[r], e[n2]), maxX: Math.max(e[t], e[r], e[n2]), minY: Math.min(e[t + 1], e[r + 1], e[n2 + 1]), maxY: Math.max(e[t + 1], e[r + 1], e[n2 + 1]), p0: [e[t], e[t + 1], e[t + 2]], p1: [e[r], e[r + 1], e[r + 2]], p2: [e[n2], e[n2 + 1], e[n2 + 2]] };
}
export {
  n as default
};
//# sourceMappingURL=ElevationSamplerWorker-T5RPRIG7.js.map
