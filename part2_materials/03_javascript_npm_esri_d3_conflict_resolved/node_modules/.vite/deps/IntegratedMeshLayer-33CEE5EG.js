import {
  j as j2
} from "./chunk-CSMPF4LP.js";
import "./chunk-4CLN3LZB.js";
import {
  a as a4,
  m as m2,
  p as p2,
  y
} from "./chunk-TBUJ73Y6.js";
import {
  R,
  V as V2
} from "./chunk-VVKTZSKL.js";
import {
  $,
  Z,
  w
} from "./chunk-F5BQ5T2D.js";
import "./chunk-UHYXHDMF.js";
import "./chunk-JEA2CH67.js";
import "./chunk-FDS5NNQY.js";
import "./chunk-ACRZEGQW.js";
import "./chunk-NT3C5DNX.js";
import {
  i
} from "./chunk-ZZTUJWOP.js";
import {
  l
} from "./chunk-SVRTKGNR.js";
import "./chunk-H4E2VVPD.js";
import {
  e
} from "./chunk-FLUE3DMC.js";
import {
  j
} from "./chunk-RG7AMCT5.js";
import {
  t
} from "./chunk-IGMG7ERK.js";
import {
  b
} from "./chunk-V47ZBW5W.js";
import {
  c
} from "./chunk-HKYICNT2.js";
import {
  S
} from "./chunk-VGUQMPM6.js";
import "./chunk-YQIF7GJR.js";
import "./chunk-4ISVH4NS.js";
import "./chunk-NIWINVGG.js";
import "./chunk-DOENTAA7.js";
import "./chunk-CGSFKZP2.js";
import "./chunk-BVHISPUT.js";
import {
  f as f2
} from "./chunk-QMGMKWTA.js";
import "./chunk-2IGXKE5P.js";
import "./chunk-ZICJB3ML.js";
import "./chunk-TA32QX7Z.js";
import "./chunk-P3GRQ2CH.js";
import {
  J,
  on
} from "./chunk-XGYM66XX.js";
import "./chunk-JOOGZSAP.js";
import "./chunk-J6GHQIZ2.js";
import "./chunk-VEUN2EF3.js";
import {
  C,
  v
} from "./chunk-W6D3ECTZ.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-BWTCR2DR.js";
import "./chunk-SMOTPOZ7.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-7FJIOZSE.js";
import "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import "./chunk-TSVUPARM.js";
import {
  v2
} from "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import {
  V
} from "./chunk-RCLWOQNR.js";
import "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-RD2BBQYN.js";
import "./chunk-SEG3PRUR.js";
import "./chunk-B6VE32RA.js";
import {
  p
} from "./chunk-AIYFWM42.js";
import "./chunk-2M53HYNY.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-FG3XOAFD.js";
import {
  o
} from "./chunk-GN5RE63N.js";
import {
  r as r2
} from "./chunk-2WXAPZBK.js";
import "./chunk-E2I7HYXQ.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import {
  U
} from "./chunk-CRH37WFF.js";
import {
  I
} from "./chunk-YFGQMO6E.js";
import {
  f,
  u2 as u
} from "./chunk-HAF6QJ32.js";
import {
  m
} from "./chunk-H77COA2S.js";
import {
  a4 as a3,
  s4 as s2
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  a as a2
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import {
  a,
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/layers/support/SceneModification.js
var l2;
var y2 = l2 = class extends f {
  constructor(e2) {
    super(e2), this.geometry = null, this.type = "clip";
  }
  writeGeometry(e2, r3, o2, s3) {
    var _a;
    if (((_a = s3.layer) == null ? void 0 : _a.spatialReference) && !s3.layer.spatialReference.equals(this.geometry.spatialReference)) {
      if (!J(e2.spatialReference, s3.layer.spatialReference)) return void ((s3 == null ? void 0 : s3.messages) && s3.messages.push(new s2("scenemodification:unsupported", "Scene modifications with incompatible spatial references are not supported", { modification: this, spatialReference: s3.layer.spatialReference, context: s3 })));
      const p3 = new v2();
      on(e2, p3, s3.layer.spatialReference), r3[o2] = p3.toJSON(s3);
    } else r3[o2] = e2.toJSON(s3);
    delete r3[o2].spatialReference;
  }
  clone() {
    return new l2({ geometry: a(this.geometry), type: this.type });
  }
};
r([m({ type: v2 }), j2()], y2.prototype, "geometry", void 0), r([r2(["web-scene", "portal-item"], "geometry")], y2.prototype, "writeGeometry", null), r([m({ type: ["clip", "mask", "replace"], nonNullable: true }), j2()], y2.prototype, "type", void 0), y2 = l2 = r([a3("esri.layers.support.SceneModification")], y2);
var f3 = y2;

// node_modules/@arcgis/core/layers/support/SceneModifications.js
var m3;
var n2 = m3 = class extends u(V.ofType(f3)) {
  constructor(r3) {
    super(r3), this.url = null;
  }
  clone() {
    return new m3({ url: this.url, items: this.items.map((r3) => r3.clone()) });
  }
  toJSON(r3) {
    return this.toArray().map((o2) => o2.toJSON(r3)).filter((r4) => !!r4.geometry);
  }
  static fromJSON(r3, o2) {
    const t2 = new m3();
    for (const e2 of r3) t2.add(f3.fromJSON(e2, o2));
    return t2;
  }
  static async fromUrl(r3, t2, e2) {
    const i2 = { url: I(r3), origin: "service" }, c2 = await U(r3, { responseType: "json", signal: e2 == null ? void 0 : e2.signal }), n3 = t2.toJSON(), a6 = [];
    for (const o2 of c2.data) a6.push(f3.fromJSON({ ...o2, geometry: { ...o2.geometry, spatialReference: n3 } }, i2));
    return new m3({ url: r3, items: a6 });
  }
};
r([m({ type: String })], n2.prototype, "url", void 0), n2 = m3 = r([a3("esri.layers.support.SceneModifications")], n2);
var a5 = n2;

// node_modules/@arcgis/core/layers/IntegratedMeshLayer.js
var A = class extends R(l(b(j(t(S(e(i(f2)))))))) {
  constructor(...e2) {
    super(...e2), this.geometryType = "mesh", this.operationalLayerType = "IntegratedMeshLayer", this.type = "integrated-mesh", this.nodePages = null, this.materialDefinitions = null, this.textureSetDefinitions = null, this.geometryDefinitions = null, this.serviceUpdateTimeStamp = null, this.profile = "mesh-pyramids", this.modifications = null, this._modificationsSource = null, this.path = null, this.definitionExpression = null;
  }
  initialize() {
    this.addHandles(v(() => this.modifications, "after-changes", () => this.modifications = this.modifications, C));
  }
  normalizeCtorArgs(e2, t2) {
    return "string" == typeof e2 ? { url: e2, ...t2 } : e2;
  }
  readModifications(e2, t2, o2) {
    this._modificationsSource = { url: p(e2, o2), context: o2 };
  }
  set elevationInfo(e2) {
    this._set("elevationInfo", e2), this._validateElevationInfo();
  }
  async load(e2) {
    return this.addResolvingPromise(this._doLoad(e2)), this;
  }
  async _doLoad(e2) {
    const t2 = e2 == null ? void 0 : e2.signal;
    try {
      await this.loadFromPortal({ supportedTypes: ["Scene Service"] }, e2);
    } catch (o2) {
      a2(o2);
    }
    if (await this._fetchService(t2), null != this._modificationsSource) {
      const t3 = await a5.fromUrl(this._modificationsSource.url, this.spatialReference, e2);
      this.setAtOrigin("modifications", t3, this._modificationsSource.context.origin), this._modificationsSource = null;
    }
    await this._fetchIndexAndUpdateExtent(this.nodePages, t2);
  }
  beforeSave() {
    if (null != this._modificationsSource) return this.load().then(() => {
    }, () => {
    });
  }
  async saveAs(e2, t2) {
    return this._debouncedSaveOperations(V2.SAVE_AS, { ...t2, getTypeKeywords: () => this._getTypeKeywords(), portalItemLayerType: "integrated-mesh" }, e2);
  }
  async save() {
    const e2 = { getTypeKeywords: () => this._getTypeKeywords(), portalItemLayerType: "integrated-mesh" };
    return this._debouncedSaveOperations(V2.SAVE, e2);
  }
  validateLayer(e2) {
    if (e2.layerType && "IntegratedMesh" !== e2.layerType) throw new s("integrated-mesh-layer:layer-type-not-supported", "IntegratedMeshLayer does not support this layer type", { layerType: e2.layerType });
    if (isNaN(this.version.major) || isNaN(this.version.minor)) throw new s("layer:service-version-not-supported", "Service version is not supported.", { serviceVersion: this.version.versionString, supportedVersions: "1.x" });
    if (this.version.major > 1) throw new s("layer:service-version-too-new", "Service version is too new.", { serviceVersion: this.version.versionString, supportedVersions: "1.x" });
  }
  _getTypeKeywords() {
    return ["IntegratedMeshLayer"];
  }
  _validateElevationInfo() {
    const e2 = this.elevationInfo, t2 = "Integrated mesh layers";
    $(n.getLogger(this), Z(t2, "absolute-height", e2)), $(n.getLogger(this), w(t2, e2));
  }
};
r([m({ type: String, readOnly: true })], A.prototype, "geometryType", void 0), r([m({ type: ["show", "hide"] })], A.prototype, "listMode", void 0), r([m({ type: ["IntegratedMeshLayer"] })], A.prototype, "operationalLayerType", void 0), r([m({ json: { read: false }, readOnly: true })], A.prototype, "type", void 0), r([m({ type: p2, readOnly: true })], A.prototype, "nodePages", void 0), r([m({ type: [a4], readOnly: true })], A.prototype, "materialDefinitions", void 0), r([m({ type: [y], readOnly: true })], A.prototype, "textureSetDefinitions", void 0), r([m({ type: [m2], readOnly: true })], A.prototype, "geometryDefinitions", void 0), r([m({ readOnly: true })], A.prototype, "serviceUpdateTimeStamp", void 0), r([m({ type: a5 }), j2({ origins: ["web-scene", "portal-item"], type: "resource", prefix: "modifications" })], A.prototype, "modifications", void 0), r([o(["web-scene", "portal-item"], "modifications")], A.prototype, "readModifications", null), r([m(c)], A.prototype, "elevationInfo", null), r([m({ type: String, json: { origins: { "web-scene": { read: true, write: true }, "portal-item": { read: true, write: true } }, read: false } })], A.prototype, "path", void 0), A = r([a3("esri.layers.IntegratedMeshLayer")], A);
var P = A;
export {
  P as default
};
//# sourceMappingURL=IntegratedMeshLayer-33CEE5EG.js.map
