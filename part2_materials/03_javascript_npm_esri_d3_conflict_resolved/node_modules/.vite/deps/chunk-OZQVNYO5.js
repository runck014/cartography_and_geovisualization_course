import {
  C,
  I,
  M,
  f,
  m,
  y
} from "./chunk-2RIHQI4N.js";
import {
  l
} from "./chunk-4NJWIUZG.js";

// node_modules/@arcgis/core/symbols/support/cimSymbolUtils.js
function C2(o) {
  const r = [];
  return u(y(o), r), r.length ? new l(f(r[0])) : null;
}
function u(e, t) {
  var _a;
  if (!e) return;
  let n;
  n = "CIMTextSymbol" === e.type ? e.symbol : e;
  const a = "CIMPolygonSymbol" === e.type;
  if (n == null ? void 0 : n.symbolLayers) {
    for (const i of n.symbolLayers) if (!(i.colorLocked || a && (m(i) || M(i) && i.markerPlacement && I(i.markerPlacement)))) switch (i.type) {
      case "CIMPictureMarker":
      case "CIMPictureStroke":
      case "CIMPictureFill":
        i.tintColor && b(t, i.tintColor);
        break;
      case "CIMVectorMarker":
        (_a = i.markerGraphics) == null ? void 0 : _a.forEach((e2) => {
          u(e2.symbol, t);
        });
        break;
      case "CIMSolidStroke":
      case "CIMSolidFill":
        b(t, i.color);
        break;
      case "CIMHatchFill":
        u(i.lineSymbol, t);
    }
  }
}
function b(e, t) {
  for (const o of e) if (o.join(".") === t.join(".")) return;
  e.push(t);
}
function I2(o, r, n) {
  r instanceof l || (r = new l(r));
  const s = y(o);
  s && k(s, r, n);
}
function k(e, t, a) {
  var _a;
  if (!e) return;
  let i;
  i = "CIMTextSymbol" === e.type ? e.symbol : e;
  const c = "CIMPolygonSymbol" === (i == null ? void 0 : i.type);
  if (i == null ? void 0 : i.symbolLayers) for (const f2 of i.symbolLayers) {
    if (f2.colorLocked) continue;
    if (c) {
      if (a) {
        const { layersToColor: e3 } = a;
        if ((m(f2) || M(f2) && f2.markerPlacement && I(f2.markerPlacement)) && "fill" === e3 || C(f2) && "outline" === e3) continue;
      } else if (m(f2) || M(f2) && f2.markerPlacement && I(f2.markerPlacement)) continue;
    }
    const e2 = t.toArray();
    switch (f2.type) {
      case "CIMPictureMarker":
      case "CIMPictureStroke":
      case "CIMPictureFill":
        f2.tintColor = e2;
        break;
      case "CIMVectorMarker":
        (_a = f2.markerGraphics) == null ? void 0 : _a.forEach((e3) => {
          k(e3.symbol, t, a);
        });
        break;
      case "CIMSolidStroke":
      case "CIMSolidFill":
        f2.color = e2;
        break;
      case "CIMHatchFill":
        k(f2.lineSymbol, t, a);
    }
  }
}

export {
  C2 as C,
  I2 as I
};
//# sourceMappingURL=chunk-OZQVNYO5.js.map
