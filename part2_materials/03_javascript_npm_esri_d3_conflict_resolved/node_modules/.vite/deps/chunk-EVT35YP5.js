import {
  n as n5
} from "./chunk-TZAPBN5J.js";
import {
  a as a2,
  r as r2
} from "./chunk-HB2JTNV2.js";
import {
  i,
  m as m2,
  r as r3
} from "./chunk-T23XXKIL.js";
import {
  a as a3,
  l
} from "./chunk-F3ZOBTPK.js";
import {
  h
} from "./chunk-GYV5TPN6.js";
import {
  s as s2
} from "./chunk-2IGXKE5P.js";
import {
  A,
  d,
  v
} from "./chunk-W6D3ECTZ.js";
import {
  n as n3
} from "./chunk-SEUZ3J6J.js";
import {
  f as f2
} from "./chunk-3L2AYCZY.js";
import {
  v2
} from "./chunk-VUJERGGB.js";
import {
  V
} from "./chunk-RCLWOQNR.js";
import {
  o
} from "./chunk-DOTSJZHK.js";
import {
  n as n2
} from "./chunk-2M53HYNY.js";
import {
  n as n4,
  w
} from "./chunk-FG3XOAFD.js";
import {
  f
} from "./chunk-HAF6QJ32.js";
import {
  b2 as b,
  m
} from "./chunk-H77COA2S.js";
import {
  a4 as a
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  u
} from "./chunk-R2PAF6JT.js";
import {
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";

// node_modules/@arcgis/core/linkChart/utils.js
function e(e3) {
  return null != e3 && "object" == typeof e3 && "2d" === e3.type && "linkchart" === e3.view2dType;
}

// node_modules/@arcgis/core/views/layers/support/ClipArea.js
var t = class extends f {
  get version() {
    return this.commitVersionProperties(), (this._get("version") || 0) + 1;
  }
};
r([m({ readOnly: true })], t.prototype, "version", null), t = r([a("esri.views.layers.support.ClipArea")], t);
var p = t;

// node_modules/@arcgis/core/views/layers/support/ClipRect.js
var s3;
var i2 = s3 = class extends p {
  constructor(t2) {
    super(t2), this.type = "rect", this.left = null, this.right = null, this.top = null, this.bottom = null;
  }
  clone() {
    return new s3({ left: this.left, right: this.right, top: this.top, bottom: this.bottom });
  }
  commitVersionProperties() {
    this.commitProperty("left"), this.commitProperty("right"), this.commitProperty("top"), this.commitProperty("bottom");
  }
};
r([m({ type: [Number, String], json: { write: true } })], i2.prototype, "left", void 0), r([m({ type: [Number, String], json: { write: true } })], i2.prototype, "right", void 0), r([m({ type: [Number, String], json: { write: true } })], i2.prototype, "top", void 0), r([m({ type: [Number, String], json: { write: true } })], i2.prototype, "bottom", void 0), i2 = s3 = r([a("esri.views.layers.support.ClipRect")], i2);
var p2 = i2;

// node_modules/@arcgis/core/views/layers/support/Geometry.js
var y;
var c = { base: n4, key: "type", typeMap: { extent: w, polygon: v2 } };
var n6 = y = class extends p {
  constructor(o2) {
    super(o2), this.type = "geometry", this.geometry = null;
  }
  clone() {
    var _a;
    return new y({ geometry: ((_a = this.geometry) == null ? void 0 : _a.clone()) ?? null });
  }
  commitVersionProperties() {
    this.commitProperty("geometry");
  }
};
r([m({ types: c, json: { read: f2, write: true } })], n6.prototype, "geometry", void 0), n6 = y = r([a("esri.views.layers.support.Geometry")], n6);
var a4 = n6;

// node_modules/@arcgis/core/views/layers/support/Path.js
var e2 = class extends p {
  constructor(r4) {
    super(r4), this.type = "path", this.path = [];
  }
  commitVersionProperties() {
    this.commitProperty("path");
  }
};
r([m({ type: [[[Number]]], json: { write: true } })], e2.prototype, "path", void 0), e2 = r([a("esri.views.layers.support.Path")], e2);
var p3 = e2;

// node_modules/@arcgis/core/views/2d/layers/LayerView2D.js
var S = V.ofType({ key: "type", base: null, typeMap: { rect: p2, path: p3, geometry: a4 } });
var b2 = new (V.ofType(i))();
var j = (y3) => {
  let v3 = class extends y3 {
    constructor() {
      super(...arguments), this.attached = false, this.clips = new S(), this.highlights = null, this.lastUpdateId = -1, this.moving = false, this.updateRequested = false, this._visibleAtCurrentScale = true;
    }
    initialize() {
      var _a, _b, _c;
      const e3 = ((_a = this.view) == null ? void 0 : _a.spatialReferenceLocked) ?? true, t2 = (_b = this.view) == null ? void 0 : _b.spatialReference;
      t2 && e3 && !this.spatialReferenceSupported ? this.addResolvingPromise(Promise.reject(new s("layerview:spatial-reference-incompatible", "The spatial reference of this layer does not meet the requirements of the view", { layer: this.layer }))) : (this.container || (this.container = new n5()), this.container.fadeTransitionEnabled = true, this.container.visible = false, this.container.endTransitions(), this.addHandles([d(() => this.suspended, (e4) => {
        this.container && (this.container.visible = !e4);
      }, A), d(() => this.updateSuspended, (e4) => {
        this.view && !e4 && this.updateRequested && this.view.requestUpdate();
      }, A), d(() => {
        var _a2;
        return ((_a2 = this.layer) == null ? void 0 : _a2.opacity) ?? 1;
      }, (e4) => {
        this.container && (this.container.opacity = e4);
      }, A), d(() => this.layer && "blendMode" in this.layer ? this.layer.blendMode : "normal", (e4) => {
        this.container && (this.container.blendMode = e4);
      }, A), d(() => this.layer && "effect" in this.layer ? this.layer.effect : null, (e4) => {
        this.container && (this.container.effect = e4);
      }, A), d(() => this._mergedHighlights.items.map((e4) => ({ name: e4.name, options: { fillColor: e4.options.color, haloColor: e4.options.haloColor, fillOpacity: e4.options.fillOpacity, haloOpacity: e4.options.haloOpacity, haloWidth: e4.options.haloWidth, haloBlur: e4.options.haloBlur } })), () => {
        this.container.highlightGradient = a3(this.container.highlightGradient, this._mergedHighlights.items);
      }, A), d(() => this._mergedHighlights.items.map((e4) => e4.name), () => {
        this._updateHighlights();
      }), v(() => this.clips, "change", () => {
        this.container && (this.container.clips = this.clips);
      }, A), d(() => {
        var _a2;
        return { scale: (_a2 = this.view) == null ? void 0 : _a2.scale, scaleRange: this.layer && "effectiveScaleRange" in this.layer ? this.layer.effectiveScaleRange : null };
      }, ({ scale: e4, scaleRange: t3 }) => {
        const i3 = r2(t3, e4);
        i3 !== this._visibleAtCurrentScale && (this._visibleAtCurrentScale = i3);
      }, A)], "constructor"), ((_c = this.view) == null ? void 0 : _c.whenLayerView) ? this.view.whenLayerView(this.layer).then((e4) => {
        e4 === this && this.processAttach();
      }, () => {
      }) : this.when().then(() => {
        this.processAttach();
      }, () => {
      }));
    }
    _updateHighlights() {
    }
    destroy() {
      this.processDetach(), this.updateRequested = false;
    }
    get highlightOptions() {
      return r3(this);
    }
    set highlightOptions(e3) {
      m2(this, e3);
    }
    get _mergedHighlights() {
      if (!this.view) return b2;
      if (!this.highlights) return this.view.highlights;
      const e3 = this.view.highlights.clone();
      for (const t2 of this.highlights) {
        const i3 = e3.find((e4) => e4.name === t2.name);
        i3 && (i3.options = t2.options);
      }
      return e3;
    }
    get scheduler() {
      return this.view.scheduler;
    }
    get spatialReferenceSupported() {
      var _a;
      const e3 = (_a = this.view) == null ? void 0 : _a.spatialReference;
      return null == e3 || this.supportsSpatialReference(e3);
    }
    get updating() {
      var _a;
      return this.spatialReferenceSupported && (!this.attached || !this.suspended && (this.updateRequested || this.isUpdating()) || !!((_a = this._updatingHandles) == null ? void 0 : _a.updating) || this.container.transitioning);
    }
    get visibleAtCurrentScale() {
      return this._visibleAtCurrentScale;
    }
    processAttach() {
      this.isResolved() && !this.attached && !this.destroyed && this.spatialReferenceSupported && (this.attach(), this.attached = true, this.requestUpdate());
    }
    processDetach() {
      this.attached && (this.attached = false, this.removeHandles("attach"), this.detach(), this.updateRequested = false);
    }
    requestUpdate() {
      this.destroyed || this.updateRequested || (this.updateRequested = true, this.updateSuspended || this.view.requestUpdate());
    }
    processUpdate(e3) {
      !this.isFulfilled() || this.isResolved() ? (this._set("updateParameters", e3), this.updateRequested && !this.updateSuspended && (this.updateRequested = false, this.update(e3))) : this.updateRequested = false;
    }
    hitTest(e3, t2) {
      return Promise.resolve(null);
    }
    supportsSpatialReference(e3) {
      return true;
    }
    canResume() {
      var _a;
      if (!this.spatialReferenceSupported) return false;
      switch ((_a = this.layer) == null ? void 0 : _a.type) {
        case "link-chart":
        case "knowledge-graph-sublayer":
          break;
        default:
          if (e(this.view) && !this.view.inGeographicLayout) return false;
      }
      return !!super.canResume() && this.visibleAtCurrentScale;
    }
    getSuspendInfo() {
      const e3 = super.getSuspendInfo(), t2 = !this.spatialReferenceSupported;
      return t2 && (e3.spatialReferenceNotSupported = t2), e3;
    }
    addAttachHandles(e3) {
      this.addHandles(e3, "attach");
    }
    _getHighlightBits(e3) {
      e3 = new Set(e3);
      let t2 = 1, i3 = 0;
      if (!this.view) return 0;
      const s4 = this._mergedHighlights;
      for (const { name: r4 } of s4) e3.delete(r4) && (i3 = t2), t2 <<= 1;
      for (const o2 of e3) n.getLogger(this).error("#highlights", `${o2} was not found. Features in this group will not be highlighted.`);
      return i3;
    }
  };
  return r([m()], v3.prototype, "attached", void 0), r([m({ type: S, set(e3) {
    const t2 = n3(e3, this._get("clips"), S);
    this._set("clips", t2);
  } })], v3.prototype, "clips", void 0), r([m()], v3.prototype, "container", void 0), r([m({ type: l })], v3.prototype, "highlightOptions", null), r([m({ type: V.ofType(i) })], v3.prototype, "highlights", void 0), r([m()], v3.prototype, "_mergedHighlights", null), r([m()], v3.prototype, "moving", void 0), r([m({ readOnly: true })], v3.prototype, "spatialReferenceSupported", null), r([m({ readOnly: true })], v3.prototype, "updateParameters", void 0), r([m()], v3.prototype, "updateRequested", void 0), r([m()], v3.prototype, "updating", null), r([m()], v3.prototype, "view", void 0), r([m()], v3.prototype, "_visibleAtCurrentScale", void 0), r([m({ readOnly: true })], v3.prototype, "visibleAtCurrentScale", null), v3 = r([a("esri.views.2d.layers.LayerView2D")], v3), v3;
};

// node_modules/@arcgis/core/views/layers/LayerView.js
var u2 = class extends s2(n2(o.EventedMixin(b))) {
  constructor(e3) {
    super(e3), this._updatingHandles = new h(), this.layer = null, this.parent = null;
  }
  initialize() {
    this.when().catch((e3) => {
      var _a;
      if ("layerview:create-error" !== e3.name) {
        const t2 = this.layer && this.layer.id || "no id", r4 = ((_a = this.layer) == null ? void 0 : _a.title) || "no title";
        n.getLogger(this).error("#resolve()", `Failed to resolve layer view (layer title: '${r4}', id: '${t2}')`, e3);
      }
    });
  }
  destroy() {
    this._updatingHandles = u(this._updatingHandles);
  }
  get fullOpacity() {
    var _a, _b;
    return (((_a = this.layer) == null ? void 0 : _a.opacity) ?? 1) * (((_b = this.parent) == null ? void 0 : _b.fullOpacity) ?? 1);
  }
  get suspended() {
    return this.destroyed || !this.canResume();
  }
  get suspendInfo() {
    return this.getSuspendInfo();
  }
  get legendEnabled() {
    var _a;
    return !this.suspended && true === ((_a = this.layer) == null ? void 0 : _a.legendEnabled);
  }
  get updating() {
    var _a;
    return !(!((_a = this._updatingHandles) == null ? void 0 : _a.updating) && !this.isUpdating());
  }
  get updatingProgress() {
    return this.updating ? 0 : 1;
  }
  get updateSuspended() {
    return this.suspended;
  }
  get visible() {
    var _a;
    return true === ((_a = this.layer) == null ? void 0 : _a.visible);
  }
  set visible(e3) {
    this._overrideIfSome("visible", e3);
  }
  get visibleAtCurrentScale() {
    return true;
  }
  get visibleAtCurrentTimeExtent() {
    var _a;
    const e3 = this.view.timeExtent, t2 = (_a = this.layer) == null ? void 0 : _a.visibilityTimeExtent;
    return !e3 || !t2 || !e3.intersection(t2).isEmpty;
  }
  canResume() {
    var _a, _b, _c;
    const e3 = this.layer && "effectiveScaleRange" in this.layer ? this.layer.effectiveScaleRange : null;
    return this.visible && ((_a = this.layer) == null ? void 0 : _a.loaded) && !((_b = this.parent) == null ? void 0 : _b.suspended) && ((_c = this.view) == null ? void 0 : _c.ready) && a2(e3) && this.visibleAtCurrentScale && this.visibleAtCurrentTimeExtent || false;
  }
  getSuspendInfo() {
    var _a, _b;
    const e3 = ((_a = this.parent) == null ? void 0 : _a.suspended) ? this.parent.suspendInfo : {}, t2 = this;
    ((_b = t2.view) == null ? void 0 : _b.ready) || (e3.viewNotReady = true), this.layer && this.layer.loaded || (e3.layerNotLoaded = true);
    const r4 = this.layer && "effectiveScaleRange" in this.layer ? this.layer.effectiveScaleRange : null;
    return a2(r4) && this.visibleAtCurrentScale || (e3.outsideScaleRange = true), this.visibleAtCurrentTimeExtent || (e3.outsideVisibilityTimeExtent = true), this.visible || (e3.layerInvisible = true), e3;
  }
  isUpdating() {
    return false;
  }
};
r([m()], u2.prototype, "view", void 0), r([m()], u2.prototype, "fullOpacity", null), r([m()], u2.prototype, "layer", void 0), r([m()], u2.prototype, "parent", void 0), r([m({ readOnly: true })], u2.prototype, "suspended", null), r([m({ readOnly: true })], u2.prototype, "suspendInfo", null), r([m({ readOnly: true })], u2.prototype, "legendEnabled", null), r([m({ type: Boolean, readOnly: true })], u2.prototype, "updating", null), r([m({ readOnly: true })], u2.prototype, "updatingProgress", null), r([m()], u2.prototype, "updateSuspended", null), r([m()], u2.prototype, "visible", null), r([m({ readOnly: true })], u2.prototype, "visibleAtCurrentScale", null), r([m({ readOnly: true })], u2.prototype, "visibleAtCurrentTimeExtent", null), u2 = r([a("esri.views.layers.LayerView")], u2);
var y2 = u2;

export {
  a4 as a,
  j,
  y2 as y
};
//# sourceMappingURL=chunk-EVT35YP5.js.map
