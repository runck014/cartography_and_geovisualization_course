import {
  n4 as n2,
  t as t3
} from "./chunk-KDQTUT24.js";
import {
  e as e2
} from "./chunk-TZAPBN5J.js";
import {
  o as o2
} from "./chunk-CKPBZSTT.js";
import {
  U2 as U,
  _,
  g3 as g
} from "./chunk-7PP3YNSG.js";
import {
  b as b4
} from "./chunk-Q3K5MAUZ.js";
import {
  E as E2
} from "./chunk-U6IFI7EK.js";
import {
  t
} from "./chunk-AHZHHHCW.js";
import {
  E as E3,
  e
} from "./chunk-F3ZOBTPK.js";
import {
  t as t2
} from "./chunk-EHD5KM2T.js";
import {
  m as m2,
  p
} from "./chunk-QJXYURT2.js";
import {
  M,
  b as b3,
  f,
  h,
  i,
  l,
  o
} from "./chunk-D6FJTDNK.js";
import {
  C,
  D,
  E,
  F,
  G,
  I,
  O,
  R
} from "./chunk-KV3S4QI2.js";
import {
  d as d2
} from "./chunk-6Q7GN2CW.js";
import {
  d
} from "./chunk-W6D3ECTZ.js";
import {
  u
} from "./chunk-YVSEBNS4.js";
import {
  s as s2
} from "./chunk-6YWQXXBX.js";
import {
  j2 as j,
  w
} from "./chunk-FG3XOAFD.js";
import {
  b2,
  m
} from "./chunk-H77COA2S.js";
import {
  a4 as a
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  b,
  s
} from "./chunk-GRW2QIBT.js";
import {
  n2 as n
} from "./chunk-PKLD5YJF.js";

// node_modules/@arcgis/core/views/2d/engine/flow/utils.js
function n3(n5) {
  const i4 = t4(s3(n5)), o5 = i4, a3 = true, l6 = Math.max(i4 / 2, 5), r3 = Math.round(u(n5.maxPathLength) / l6) + 1, u5 = 10, { density: c4 } = n5;
  return { smoothing: u(n5.smoothing), interpolate: true, velocityScale: "flow-from" === n5.flowRepresentation ? 1 : -1, verticesPerLine: r3, minSpeedThreshold: 1e-3, segmentLength: l6, maxTurnAngle: 1, collisions: a3, lineCollisionWidth: o5, lineSpacing: u5, density: c4 };
}
function t4(e4) {
  return "constant" === e4.kind ? e4.value[0] : e4.values[e4.values.length - 1];
}
function i2(e4) {
  const n5 = e4.toRgba();
  return [n5[0] / 255, n5[1] / 255, n5[2] / 255, n5[3]];
}
function o3(e4) {
  return { kind: "constant", value: [0.1, 0.1, 0.1, 1] };
}
function s3(n5) {
  if (!n5.hasVisualVariables("size")) return { kind: "constant", value: [u(n5.trailWidth)] };
  const t7 = n5.getVisualVariablesForType("size")[0], i4 = [], o5 = [];
  let s6;
  if (t7.stops) {
    for (const n6 of t7.stops) i4.push(n6.value), o5.push(u(n6.size));
    s6 = t7.stops.length;
  } else i4.push(t7.minDataValue, t7.maxDataValue), o5.push(u(t7.minSize), u(t7.maxSize)), s6 = 2;
  return { kind: "ramp", stops: i4, values: o5, count: s6 };
}
function a2(e4) {
  if (!e4.hasVisualVariables("color")) return { kind: "constant", value: i2(e4.color) };
  const n5 = e4.getVisualVariablesForType("color")[0], t7 = [], o5 = [];
  for (const s6 of n5.stops) t7.push(s6.value), Array.prototype.push.apply(o5, i2(s6.color));
  return { kind: "ramp", stops: t7, values: o5, count: n5.stops.length };
}
function l2(e4) {
  if (!e4.hasVisualVariables("opacity")) return { kind: "constant", value: [1] };
  const n5 = e4.getVisualVariablesForType("opacity")[0], t7 = [], i4 = [];
  for (const o5 of n5.stops) t7.push(o5.value), i4.push(o5.opacity);
  return { kind: "ramp", stops: t7, values: i4, count: n5.stops.length };
}
function r2(e4, n5, t7, i4) {
  switch (n5) {
    case "int":
      e4.setUniform1iv(t7, i4);
      break;
    case "float":
      e4.setUniform1fv(t7, i4);
      break;
    case "vec2":
      e4.setUniform2fv(t7, i4);
      break;
    case "vec3":
      e4.setUniform3fv(t7, i4);
      break;
    case "vec4":
      e4.setUniform4fv(t7, i4);
  }
}
function u2(e4, n5, t7, i4) {
  "constant" === i4.kind ? r2(e4, t7, `u_${n5}`, i4.value) : (r2(e4, "float", `u_${n5}_stops`, i4.stops), r2(e4, t7, `u_${n5}_values`, i4.values), e4.setUniform1i(`u_${n5}_count`, i4.count));
}
function c(e4, n5) {
  let t7 = true;
  return t7 = t7 && e4.collisions === n5.collisions, t7 = t7 && e4.density === n5.density, t7 = t7 && e4.interpolate === n5.interpolate, t7 = t7 && e4.lineCollisionWidth === n5.lineCollisionWidth, t7 = t7 && e4.lineSpacing === n5.lineSpacing, t7 = t7 && e4.maxTurnAngle === n5.maxTurnAngle, t7 = t7 && e4.minSpeedThreshold === n5.minSpeedThreshold, t7 = t7 && e4.segmentLength === n5.segmentLength, t7 = t7 && e4.smoothing === n5.smoothing, t7 = t7 && e4.velocityScale === n5.velocityScale, t7 = t7 && e4.verticesPerLine === n5.verticesPerLine, t7;
}
function p2(e4, n5) {
  return e4 === n5 || null != e4 && null != n5 && e4.equals(n5);
}
function f2(e4, n5) {
  if (!c(e4.simulationSettings, n5.simulationSettings)) return false;
  if (!p2(e4.timeExtent, n5.timeExtent)) return false;
  let t7 = true;
  return t7 = t7 && e4.loadImagery === n5.loadImagery, t7 = t7 && e4.createFlowMesh === n5.createFlowMesh, t7 = t7 && e4.color.kind === n5.color.kind, t7 = t7 && e4.opacity.kind === n5.opacity.kind, t7 = t7 && e4.size.kind === n5.size.kind, t7;
}

// node_modules/@arcgis/core/views/2d/engine/flow/styles/Imagery.js
var f3 = class _f {
  constructor(t7) {
    this._params = t7, this.animated = false;
  }
  isCompatible(t7) {
    if (!(t7 instanceof _f)) return false;
    if (!p2(this._params.timeExtent, t7._params.timeExtent)) return false;
    let e4 = true;
    return e4 = e4 && this._params.loadImagery === t7._params.loadImagery, e4 = e4 && this._params.color.kind === t7._params.color.kind, e4 = e4 && this._params.opacity.kind === t7._params.opacity.kind, e4;
  }
  async load(a3, e4) {
    const { extent: r3, size: s6 } = a3;
    s(e4);
    const o5 = await this._params.loadImagery(r3, s6[0], s6[1], this._params.timeExtent, e4);
    return new x(o5, { color: this._params.color, opacity: this._params.opacity });
  }
  render(t7, a3, r3) {
    const { context: s6 } = t7, { program: n5 } = r3;
    s6.setFaceCullingEnabled(false), s6.setBlendingEnabled(true), s6.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), s6.useProgram(n5), n5.setUniformMatrix3fv("u_dvsMat3", a3.dvsMat3), s6.bindTexture(r3.texture, 0), n5.setUniform1i("u_texture", 0), n5.setUniform1f("u_Min", r3.min), n5.setUniform1f("u_Max", r3.max), u2(n5, "color", "vec4", this._params.color), u2(n5, "opacity", "float", this._params.opacity), s6.bindVAO(r3.vertexArray), s6.drawArrays(E.TRIANGLE_STRIP, 0, 4);
  }
};
var d3 = /* @__PURE__ */ new Map();
d3.set("a_position", 0), d3.set("a_texcoord", 1);
var w2 = /* @__PURE__ */ new Map([["geometry", [new t("a_position", 2, C.UNSIGNED_SHORT, 0, 8), new t("a_texcoord", 2, C.UNSIGNED_SHORT, 4, 8)]]]);
var u3 = { vsPath: "raster/flow/imagery", fsPath: "raster/flow/imagery", attributes: d3 };
var x = class {
  constructor(t7, a3) {
    this._flowData = t7, this._values = a3;
  }
  attach(t7) {
    const { context: a3 } = t7, { width: e4, height: s6 } = this._flowData, o5 = E2.createVertex(a3, F.STATIC_DRAW, new Uint16Array([0, 0, 0, 1, e4, 0, 1, 1, 0, s6, 0, 0, e4, s6, 1, 0])), i4 = /* @__PURE__ */ new Map([["geometry", o5]]), _4 = new o2(a3, d3, w2, i4), f9 = [];
    "ramp" === this._values.color.kind && f9.push("vvColor"), "ramp" === this._values.opacity.kind && f9.push("vvOpacity");
    const x2 = t7.painter.materialManager.getProgram(u3, f9);
    let g3 = 1e6, y2 = -1e6;
    for (let r3 = 0; r3 < s6; r3++) for (let t8 = 0; t8 < e4; t8++) if (0 !== this._flowData.mask[r3 * e4 + t8]) {
      const a4 = this._flowData.data[2 * (r3 * e4 + t8)], s7 = this._flowData.data[2 * (r3 * e4 + t8) + 1], o6 = Math.sqrt(a4 * a4 + s7 * s7);
      g3 = Math.min(g3, o6), y2 = Math.max(y2, o6);
    }
    const A = new Uint8Array(4 * e4 * s6);
    for (let r3 = 0; r3 < s6; r3++) for (let t8 = 0; t8 < e4; t8++) if (0 !== this._flowData.mask[r3 * e4 + t8]) {
      const a4 = this._flowData.data[2 * (r3 * e4 + t8)], s7 = this._flowData.data[2 * (r3 * e4 + t8) + 1], o6 = (Math.sqrt(a4 * a4 + s7 * s7) - g3) / (y2 - g3);
      A[4 * (r3 * e4 + t8)] = 255 * o6, A[4 * (r3 * e4 + t8) + 1] = 0, A[4 * (r3 * e4 + t8) + 2] = 0, A[4 * (r3 * e4 + t8) + 3] = 255;
    } else A[4 * (r3 * e4 + t8)] = 0, A[4 * (r3 * e4 + t8) + 1] = 0, A[4 * (r3 * e4 + t8) + 2] = 0, A[4 * (r3 * e4 + t8) + 3] = 0;
    const M2 = new p();
    M2.internalFormat = G.RGBA, M2.wrapMode = D.CLAMP_TO_EDGE, M2.flipped = true, M2.width = e4, M2.height = s6;
    const b5 = new m2(a3, M2, A);
    this.vertexArray = _4, this.program = x2, this.texture = b5, this.min = g3, this.max = y2, this._flowData = null;
  }
  detach() {
    this.vertexArray.dispose(), this.texture.dispose();
  }
  get ready() {
    return this.program.compiled;
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/styles/Particles.js
var _2 = class __ {
  constructor(t7) {
    this._params = t7;
  }
  get animated() {
    return this._params.flowSpeed > 0;
  }
  isCompatible(t7) {
    return t7 instanceof __ && f2(this._params, t7._params);
  }
  async load(e4, a3) {
    const { extent: s6, size: r3 } = e4;
    s(a3);
    const i4 = await this._params.loadImagery(s6, r3[0], r3[1], this._params.timeExtent, a3), { vertexData: o5, indexData: n5 } = await this._params.createFlowMesh("Particles", this._params.simulationSettings, i4, a3);
    return new c2(o5, n5, { color: this._params.color, opacity: this._params.opacity, size: this._params.size });
  }
  render(t7, e4, s6) {
    const { context: n5 } = t7, { program: m5 } = s6;
    n5.setFaceCullingEnabled(false), n5.setBlendingEnabled(true), n5.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), n5.useProgram(m5), m5.setUniform1f("u_time", e4.time), m5.setUniform1f("u_trailLength", this._params.trailLength), m5.setUniform1f("u_flowSpeed", this._params.flowSpeed), m5.setUniform1f("u_featheringSize", this._params.featheringSize), m5.setUniform1f("u_featheringOffset", this._params.featheringOffset), m5.setUniform1f("u_introFade", this._params.introFade ? 1 : 0), m5.setUniform1f("u_fadeToZero", this._params.fadeToZero ? 1 : 0), m5.setUniform1f("u_decayRate", this._params.decayRate), m5.setUniformMatrix3fv("u_dvsMat3", e4.dvsMat3), m5.setUniformMatrix3fv("u_displayViewMat3", e4.displayViewMat3), u2(m5, "color", "vec4", this._params.color), u2(m5, "opacity", "float", this._params.opacity), u2(m5, "size", "float", this._params.size), n5.bindVAO(s6.vertexArray), n5.drawElements(E.TRIANGLES, s6.indexCount, C.UNSIGNED_INT, 0);
  }
};
var l3 = /* @__PURE__ */ new Map();
l3.set("a_xyts0", 0), l3.set("a_xyts1", 1), l3.set("a_typeIdDurationSeed", 2), l3.set("a_extrudeInfo", 3);
var h2 = /* @__PURE__ */ new Map([["geometry", [new t("a_xyts0", 4, C.FLOAT, 0, 64), new t("a_xyts1", 4, C.FLOAT, 16, 64), new t("a_typeIdDurationSeed", 4, C.FLOAT, 32, 64), new t("a_extrudeInfo", 4, C.FLOAT, 48, 64)]]]);
var f4 = { vsPath: "raster/flow/particles", fsPath: "raster/flow/particles", attributes: l3 };
var c2 = class {
  constructor(t7, e4, a3) {
    this._vertexData = t7, this._indexData = e4, this._values = a3;
  }
  attach(t7) {
    const { context: e4 } = t7, a3 = E2.createVertex(e4, F.STATIC_DRAW, this._vertexData), r3 = E2.createIndex(e4, F.STATIC_DRAW, this._indexData), i4 = /* @__PURE__ */ new Map([["geometry", a3]]), o5 = new o2(e4, l3, h2, i4, r3), p4 = [];
    "ramp" === this._values.color.kind && p4.push("vvColor"), "ramp" === this._values.opacity.kind && p4.push("vvOpacity"), "ramp" === this._values.size.kind && p4.push("vvSize");
    const _4 = t7.painter.materialManager.getProgram(f4, p4);
    this.vertexArray = o5, this.program = _4, this.indexCount = this._indexData.length, this._vertexData = null, this._indexData = null;
  }
  detach() {
    this.vertexArray.dispose();
  }
  get ready() {
    return this.program.compiled;
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/styles/Stack.js
var t5 = class _t {
  constructor(t7) {
    this._styles = t7;
  }
  get animated() {
    return this._styles.reduce((t7, s6) => t7 || s6.animated, false);
  }
  isCompatible(s6) {
    if (!(s6 instanceof _t)) return false;
    if (this._styles.length !== s6._styles.length) return false;
    const e4 = this._styles.length;
    for (let t7 = 0; t7 < e4; t7++) if (!this._styles[t7].isCompatible(s6._styles[t7])) return false;
    return true;
  }
  async load(t7, e4) {
    const r3 = await Promise.all(this._styles.map((s6) => s6.load(t7, e4)));
    return new s4(r3);
  }
  render(t7, s6, e4) {
    for (let r3 = 0; r3 < this._styles.length; r3++) this._styles[r3].render(t7, s6, e4.resources[r3]);
  }
};
var s4 = class {
  constructor(t7) {
    this.resources = t7;
  }
  attach(t7) {
    for (const s6 of this.resources) s6.attach(t7);
  }
  detach() {
    for (const t7 of this.resources) t7.detach();
  }
  get ready() {
    return this.resources.reduce((t7, s6) => t7 && s6.ready, true);
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/styles/Streamlines.js
var _3 = class __ {
  constructor(e4) {
    this._params = e4;
  }
  get animated() {
    return this._params.flowSpeed > 0;
  }
  isCompatible(e4) {
    return e4 instanceof __ && f2(this._params, e4._params);
  }
  async load(t7, a3) {
    const { extent: s6, size: r3 } = t7;
    s(a3);
    const i4 = await this._params.loadImagery(s6, r3[0], r3[1], this._params.timeExtent, a3), { vertexData: o5, indexData: n5 } = await this._params.createFlowMesh("Streamlines", this._params.simulationSettings, i4, a3);
    return new d4(o5, n5, { color: this._params.color, opacity: this._params.opacity, size: this._params.size });
  }
  render(e4, t7, s6) {
    const { context: n5 } = e4, { program: m5 } = s6;
    n5.setFaceCullingEnabled(false), n5.setBlendingEnabled(true), n5.setBlendFunction(R.ONE, R.ONE_MINUS_SRC_ALPHA), n5.useProgram(m5), m5.setUniform1f("u_time", t7.time), m5.setUniform1f("u_trailLength", this._params.trailLength), m5.setUniform1f("u_flowSpeed", this._params.flowSpeed), m5.setUniform1f("u_featheringSize", this._params.featheringSize), m5.setUniform1f("u_featheringOffset", this._params.featheringOffset), m5.setUniform1f("u_introFade", this._params.introFade ? 1 : 0), m5.setUniform1f("u_fadeToZero", this._params.fadeToZero ? 1 : 0), m5.setUniform1f("u_decayRate", this._params.decayRate), m5.setUniformMatrix3fv("u_dvsMat3", t7.dvsMat3), m5.setUniformMatrix3fv("u_displayViewMat3", t7.displayViewMat3), u2(m5, "color", "vec4", this._params.color), u2(m5, "opacity", "float", this._params.opacity), u2(m5, "size", "float", this._params.size), n5.bindVAO(s6.vertexArray), n5.drawElements(E.TRIANGLES, s6.indexCount, C.UNSIGNED_INT, 0);
  }
};
var l4 = /* @__PURE__ */ new Map();
l4.set("a_positionAndSide", 0), l4.set("a_timeInfo", 1), l4.set("a_extrude", 2), l4.set("a_speed", 3);
var h3 = /* @__PURE__ */ new Map([["geometry", [new t("a_positionAndSide", 3, C.FLOAT, 0, 36), new t("a_timeInfo", 3, C.FLOAT, 12, 36), new t("a_extrude", 2, C.FLOAT, 24, 36), new t("a_speed", 1, C.FLOAT, 32, 36)]]]);
var f5 = { vsPath: "raster/flow/streamlines", fsPath: "raster/flow/streamlines", attributes: l4 };
var d4 = class {
  constructor(e4, t7, a3) {
    this._vertexData = e4, this._indexData = t7, this._values = a3;
  }
  attach(e4) {
    const { context: t7 } = e4, a3 = E2.createVertex(t7, F.STATIC_DRAW, this._vertexData), r3 = E2.createIndex(t7, F.STATIC_DRAW, this._indexData), i4 = /* @__PURE__ */ new Map([["geometry", a3]]), o5 = new o2(t7, l4, h3, i4, r3), p4 = [];
    "ramp" === this._values.color.kind && p4.push("vvColor"), "ramp" === this._values.opacity.kind && p4.push("vvOpacity"), "ramp" === this._values.size.kind && p4.push("vvSize");
    const _4 = e4.painter.materialManager.getProgram(f5, p4);
    this.vertexArray = o5, this.program = _4, this.indexCount = this._indexData.length, this._vertexData = null, this._indexData = null;
  }
  detach() {
    this.vertexArray.dispose();
  }
  get ready() {
    return this.program.compiled;
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/createFlowStyle.js
var m3 = 4;
var u4 = 1;
var f6 = 0.5;
var p3 = true;
var d5 = true;
var y = 2.3;
function g2(g3, w3) {
  const { flowSpeed: h6, trailLength: v } = g3, S = n3(g3);
  let j2 = null;
  const k = { opacity: l2(g3), size: s3(g3) };
  let x2 = a2(g3);
  if ("none" === g3.background) k.color = x2;
  else {
    "constant" === x2.kind && (x2 = { kind: "ramp", stops: [0, 1], values: [0, 0, 0, 1, x2.value[0], x2.value[1], x2.value[2], x2.value[3]], count: 2 });
    const e4 = { loadImagery: w3.loadImagery, timeExtent: w3.timeExtent, color: x2, opacity: { kind: "constant", value: [1] } };
    j2 = new f3(e4), k.color = o3();
  }
  const I2 = { loadImagery: w3.loadImagery, createFlowMesh: w3.createFlowMesh, simulationSettings: S, timeExtent: w3.timeExtent, trailLength: v, flowSpeed: h6, featheringSize: u4, featheringOffset: f6, introFade: p3, fadeToZero: d5, decayRate: y, color: k.color, opacity: k.opacity, size: k.size }, z = "butt" === g3.trailCap || t4(s3(g3)) <= m3 ? new _3(I2) : new _2(I2);
  return null != j2 ? new t5([j2, z]) : z;
}

// node_modules/@arcgis/core/views/2d/engine/flow/BrushFlow.js
var s5 = class extends t3 {
  constructor() {
    super(...arguments), this._visualState = { time: 0, dvsMat3: e(), displayViewMat3: e() };
  }
  dispose() {
  }
  prepareState(t7) {
    const { context: e4 } = t7;
    e4.setColorMask(true, true, true, true), e4.setStencilFunction(O.EQUAL, 0, 255);
  }
  draw(t7, e4) {
    const { requestRender: a3, allowDelayedRender: s6 } = t7, { displayData: i4 } = e4;
    if (null == i4) return;
    if ("loaded" === i4.state.name && i4.attach(t7), "attached" !== i4.state.name) return;
    const r3 = i4.state.resources;
    !s6 || r3.ready || null == a3 ? (this._visualState.time = t7.time / 1e3, this._visualState.dvsMat3 = e4.transforms.displayViewScreenMat3, this._visualState.displayViewMat3 = t7.state.displayViewMat3, i4.flowStyle.render(t7, this._visualState, r3), i4.flowStyle.animated && null != a3 && a3()) : a3();
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/FlowContainer.js
var t6 = class extends n2 {
  constructor() {
    super(...arguments), this.flowStyle = null;
  }
  doRender(e4) {
    super.doRender(e4);
  }
  prepareRenderPasses(s6) {
    const t7 = s6.registerRenderPass({ name: "flow", brushes: [s5], target: () => this.children, drawPhase: E3.MAP });
    return [...super.prepareRenderPasses(s6), t7];
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/FlowDisplayData.js
var e3 = class {
  constructor(t7, e4, s6, a3) {
    this.state = { name: "created" }, this.flowStyle = t7, this.extent = e4, this.size = s6, this.pixelRatio = a3;
  }
  async load() {
    const t7 = new AbortController();
    this.state = { name: "loading", abortController: t7 };
    const e4 = { extent: this.extent, size: this.size, pixelRatio: this.pixelRatio }, s6 = await this.flowStyle.load(e4, t7.signal);
    this.state = { name: "loaded", resources: s6 };
  }
  attach(e4) {
    if ("loaded" !== this.state.name) return void n.getLogger("esri.views.2d.engine.flow.FlowDisplayData").error("Only loaded resources can be attached.");
    const s6 = this.state.resources;
    s6.attach(e4), this.state = { name: "attached", resources: s6 };
  }
  detach() {
    if ("loading" === this.state.name) return this.state.abortController.abort(), void (this.state = { name: "detached" });
    "attached" === this.state.name && (this.state.resources.detach(), this.state = { name: "detached" });
  }
  update(t7) {
    if (!this.flowStyle.isCompatible(t7.flowStyle)) return false;
    return !(!this.extent.equals(t7.extent) || this.size[0] !== t7.size[0] || this.size[1] !== t7.size[1] || this.pixelRatio !== t7.pixelRatio) && (this.flowStyle = t7.flowStyle, true);
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/FlowDisplayObject.js
var o4 = class extends e2 {
  constructor() {
    super(...arguments), this._displayData = null;
  }
  get displayData() {
    return this._displayData;
  }
  set displayData(t7) {
    this._displayData = t7, this.requestRender();
  }
  clear() {
    null != this._displayData && (this._displayData.detach(), this._displayData = null, this.requestRender());
  }
  setTransform(r3) {
    const { displayData: l6 } = this;
    if (null == l6) return;
    const o5 = l6.extent.xmin, n5 = l6.extent.ymax, p4 = [0, 0];
    r3.toScreen(p4, [o5, n5]);
    const m5 = (l6.extent.xmax - l6.extent.xmin) / l6.size[0] / r3.resolution, c4 = s2(r3.rotation), { displayViewScreenMat3: x2 } = this.transforms;
    l(x2, [-1, 1, 0]), f(x2, x2, [2 / (r3.size[0] * r3.pixelRatio), -2 / (r3.size[1] * r3.pixelRatio), 1]), M(x2, x2, [p4[0], p4[1], 0]), h(x2, x2, c4), f(x2, x2, [m5 * r3.pixelRatio, m5 * r3.pixelRatio, 1]);
  }
  _createTransforms() {
    return { displayViewScreenMat3: e() };
  }
};

// node_modules/@arcgis/core/views/2d/engine/flow/FlowStrategy.js
var m4 = 1.15;
var d6 = class extends b2 {
  constructor(t7) {
    super(t7), this._flowDisplayObject = new o4(), this._loading = null;
  }
  initialize() {
    this.flowContainer.addChild(this._flowDisplayObject);
  }
  destroy() {
    this._clear(), this.flowContainer.removeAllChildren();
  }
  get updating() {
    return null != this._loading;
  }
  update(t7) {
    const { flowStyle: o5 } = this.flowContainer;
    if (null == o5) return void this._clear();
    const { extent: e4, rotation: a3, resolution: r3, pixelRatio: l6 } = t7.state, p4 = f7(e4, a3);
    p4.expand(m4);
    const c4 = [Math.round((p4.xmax - p4.xmin) / r3), Math.round((p4.ymax - p4.ymin) / r3)], d9 = new e3(o5, p4, c4, l6);
    if (null != this._loading) {
      if (this._loading.update(d9)) return;
      this._loading.detach(), this._loading = null;
    }
    null != this._flowDisplayObject.displayData && this._flowDisplayObject.displayData.update(d9) || (d9.load().then(() => {
      this._flowDisplayObject.clear(), this._flowDisplayObject.displayData = this._loading, this._loading = null;
    }, (t8) => {
      b(t8) || (n.getLogger(this).error("A resource failed to load.", t8), this._loading = null);
    }), this._loading = d9);
  }
  _clear() {
    this._flowDisplayObject.clear(), null != this._loading && (this._loading.detach(), this._loading = null);
  }
};
r([m()], d6.prototype, "_loading", void 0), r([m()], d6.prototype, "flowContainer", void 0), r([m()], d6.prototype, "updating", null), d6 = r([a("esri.views.2d.engine.flow.FlowStrategy")], d6);
var h4 = d6;
function f7(t7, o5) {
  const i4 = new j({ x: (t7.xmax + t7.xmin) / 2, y: (t7.ymax + t7.ymin) / 2, spatialReference: t7.spatialReference }), s6 = t7.xmax - t7.xmin, a3 = t7.ymax - t7.ymin, r3 = Math.abs(Math.cos(s2(o5))), n5 = Math.abs(Math.sin(s2(o5))), p4 = r3 * s6 + n5 * a3, m5 = n5 * s6 + r3 * a3, d9 = new w({ xmin: i4.x - p4 / 2, ymin: i4.y - m5 / 2, xmax: i4.x + p4 / 2, ymax: i4.y + m5 / 2, spatialReference: t7.spatialReference });
  return d9.centerAt(i4), d9;
}

// node_modules/@arcgis/core/views/2d/engine/flow/FlowView2D.js
var h5 = class extends b2 {
  constructor() {
    super(...arguments), this._loadImagery = (t7, e4, i4, o5, r3) => g(this.layer, t7, e4, i4, o5, r3), this._createFlowMesh = (t7, e4, i4, o5) => this.layer.createFlowMesh({ meshType: t7, flowData: i4, simulationSettings: e4 }, { signal: o5 }), this.attached = false, this.type = "flow", this.timeExtent = null, this.redrawOrRefetch = async () => {
      this._updateVisualization();
    };
  }
  get updating() {
    return !this.attached || this._strategy.updating;
  }
  attach() {
    const { layer: t7 } = this, e4 = () => {
      this._loadImagery = (e5, i4, o5, r3, s6) => g(t7, e5, i4, o5, r3, s6), this._updateVisualization();
    };
    "multidimensionalDefinition" in t7 ? this.addHandles(d(() => t7.multidimensionalDefinition, e4)) : this.addHandles([d(() => t7.mosaicRule, e4), d(() => t7.rasterFunction, e4), d(() => t7.definitionExpression, e4)]), this.container = new t6(), this._strategy = new h4({ flowContainer: this.container }), this._updateVisualization();
  }
  detach() {
    var _a;
    this._strategy.destroy(), (_a = this.container) == null ? void 0 : _a.removeAllChildren(), this.container = null, this.removeHandles();
  }
  update(t7) {
    t7.stationary ? this._strategy.update(t7) : this.layerView.requestUpdate();
  }
  hitTest(t7) {
    return new d2({ attributes: {}, geometry: t7.clone(), layer: this.layer });
  }
  moveEnd() {
  }
  async doRefresh() {
  }
  _updateVisualization() {
    const t7 = this.layer.renderer;
    if (null == t7 || "flow" !== t7.type) return;
    const e4 = g2(t7, { loadImagery: this._loadImagery, createFlowMesh: this._createFlowMesh, timeExtent: this.timeExtent });
    this.container.flowStyle = e4, this.layerView.requestUpdate();
  }
};
r([m()], h5.prototype, "_strategy", void 0), r([m()], h5.prototype, "attached", void 0), r([m()], h5.prototype, "container", void 0), r([m()], h5.prototype, "layer", void 0), r([m()], h5.prototype, "layerView", void 0), r([m()], h5.prototype, "type", void 0), r([m()], h5.prototype, "updating", null), r([m()], h5.prototype, "timeExtent", void 0), h5 = r([a("esri.views.2d.engine.flow.FlowView2D")], h5);
var d7 = h5;

// node_modules/@arcgis/core/views/2d/engine/imagery/BrushVectorField.js
var n4 = new Float32Array([0.27058823529411763, 0.4588235294117647, 0.7098039215686275, 1, 0.396078431372549, 0.5372549019607843, 0.7215686274509804, 1, 0.5176470588235295, 0.6196078431372549, 0.7294117647058823, 1, 0.6352941176470588, 0.7058823529411765, 0.7411764705882353, 1, 0.7529411764705882, 0.8, 0.7450980392156863, 1, 0.8705882352941177, 0.8901960784313725, 0.7490196078431373, 1, 1, 1, 0.7490196078431373, 1, 1, 0.8627450980392157, 0.6313725490196078, 1, 0.9803921568627451, 0.7254901960784313, 0.5176470588235295, 1, 0.9607843137254902, 0.596078431372549, 0.4117647058823529, 1, 0.9294117647058824, 0.4588235294117647, 0.3176470588235294, 1, 0.9098039215686274, 0.08235294117647059, 0.08235294117647059, 1]);
var i3 = new Float32Array([0, 92 / 255, 230 / 255, 1]);
var l5 = { beaufort_ft: n4, beaufort_m: n4, beaufort_km: n4, beaufort_mi: n4, beaufort_kn: new Float32Array([0.1568627450980392, 0.5725490196078431, 0.7803921568627451, 1, 0.34901960784313724, 0.6352941176470588, 0.7294117647058823, 1, 0.5058823529411764, 0.7019607843137254, 0.6705882352941176, 1, 0.6274509803921569, 0.7607843137254902, 0.6078431372549019, 1, 0.7490196078431373, 0.8313725490196079, 0.5411764705882353, 1, 0.8549019607843137, 0.9019607843137255, 0.4666666666666667, 1, 0.9803921568627451, 0.9803921568627451, 0.39215686274509803, 1, 0.9882352941176471, 0.8352941176470589, 0.3254901960784314, 1, 0.9882352941176471, 0.7019607843137254, 0.4, 1, 0.9803921568627451, 0.5529411764705883, 0.20392156862745098, 1, 0.9686274509803922, 0.43137254901960786, 0.16470588235294117, 1, 0.9411764705882353, 0.2784313725490196, 0.11372549019607843, 1]), classified_arrow: new Float32Array([0.2196078431372549, 0.6588235294117647, 0, 1, 0.5450980392156862, 1.2117647058823529, 0, 1, 1, 1, 0, 1, 1, 0.5019607843137255, 0, 1, 1, 0, 0, 1]), ocean_current_m: new Float32Array([0.3058823529411765, 0.10196078431372549, 0.6, 1, 0.7019607843137254, 0.10588235294117647, 0.10196078431372549, 1, 0.792156862745098, 0.5019607843137255, 0.10196078431372549, 1, 0.6941176470588235, 0.6941176470588235, 0.6941176470588235, 1]), ocean_current_kn: new Float32Array([0, 0, 0, 1, 0, 0.1450980392156863, 0.39215686274509803, 1, 0.3058823529411765, 0.10196078431372549, 0.6, 1, 0.592156862745098, 0, 0.39215686274509803, 1, 0.7019607843137254, 0.10588235294117647, 0.10196078431372549, 1, 0.6941176470588235, 0.3058823529411765, 0.10196078431372549, 1, 0.792156862745098, 0.5019607843137255, 0.10196078431372549, 1, 0.6941176470588235, 0.7019607843137254, 0.20392156862745098, 1, 0.6941176470588235, 0.6941176470588235, 0.6941176470588235, 1]), simple_scalar: i3, single_arrow: i3, wind_speed: new Float32Array([0, 0, 0, 1]) };
var c3 = [0, 20];
var d8 = class extends t3 {
  constructor() {
    super(...arguments), this._desc = { magdir: { vsPath: "raster/magdir", fsPath: "raster/magdir", attributes: /* @__PURE__ */ new Map([["a_pos", 0], ["a_offset", 1], ["a_vv", 2]]) }, scalar: { vsPath: "raster/scalar", fsPath: "raster/scalar", attributes: /* @__PURE__ */ new Map([["a_pos", 0], ["a_offset", 1], ["a_vv", 2]]) } };
  }
  dispose() {
  }
  prepareState({ context: e4 }) {
    e4.setBlendingEnabled(true), e4.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), e4.setColorMask(true, true, true, true), e4.setStencilWriteMask(0), e4.setStencilTestEnabled(true), e4.setStencilOp(I.KEEP, I.KEEP, I.REPLACE);
  }
  draw(e4, a3) {
    if (null == a3.source || 0 === a3.source.validPixelCount) return;
    const { context: t7, timeline: s6 } = e4;
    if (s6.begin(this.name), t7.setStencilFunction(O.EQUAL, a3.stencilRef, 255), a3.updateVectorFieldVAO(e4), "scalar" === e4.renderPass) {
      const t8 = a3.vaoData.scalar;
      t8 && this._drawScalars(e4, a3, t8.vao, t8.elementCount);
    } else {
      const t8 = a3.vaoData.magdir;
      t8 && this._drawTriangles(e4, a3, t8.vao, t8.elementCount);
    }
    s6.end(this.name);
  }
  _drawTriangles(e4, a3, t7, r3) {
    const { context: n5, painter: i4, requestRender: d9, allowDelayedRender: m5 } = e4, { symbolizerParameters: u5 } = a3, f9 = u5.dataRange ? ["dataRange"] : [];
    "geographic" === u5.rotationType && f9.push("rotationGeographic");
    const _4 = i4.materialManager.getProgram(this._desc.magdir, f9);
    if (m5 && null != d9 && !_4.compiled) return void d9();
    n5.useProgram(_4);
    const { coordScale: g3, opacity: p4, transforms: y2 } = a3;
    _4.setUniform2fv("u_coordScale", g3), _4.setUniform1f("u_opacity", p4), _4.setUniformMatrix3fv("u_dvsMat3", y2.displayViewScreenMat3);
    const { style: S, dataRange: b5, rotation: h6, symbolPercentRange: v } = u5;
    _4.setUniform4fv("u_colors", l5[S]), _4.setUniform2fv("u_dataRange", b5 || c3), _4.setUniform1f("u_rotation", h6), _4.setUniform2fv("u_symbolPercentRange", v);
    const w3 = this._getSymbolSize(e4, a3);
    _4.setUniform2fv("u_symbolSize", w3), n5.bindVAO(t7), n5.drawElements(E.TRIANGLES, r3, C.UNSIGNED_INT, 0);
  }
  _drawScalars(e4, a3, t7, r3) {
    const { context: n5, painter: i4, requestRender: l6, allowDelayedRender: d9 } = e4, { symbolizerParameters: m5 } = a3, u5 = [];
    "wind_speed" === m5.style ? u5.push("innerCircle") : m5.dataRange && u5.push("dataRange"), "geographic" === m5.rotationType && u5.push("rotationGeographic");
    const f9 = i4.materialManager.getProgram(this._desc.scalar, u5);
    if (d9 && null != l6 && !f9.compiled) return void l6();
    n5.useProgram(f9);
    const { coordScale: _4, opacity: g3, transforms: p4 } = a3;
    f9.setUniform2fv("u_coordScale", _4), f9.setUniform1f("u_opacity", g3), f9.setUniformMatrix3fv("u_dvsMat3", p4.displayViewScreenMat3);
    const { dataRange: y2, symbolPercentRange: S } = m5;
    f9.setUniform2fv("u_dataRange", y2 || c3), f9.setUniform2fv("u_symbolPercentRange", S);
    const b5 = this._getSymbolSize(e4, a3);
    f9.setUniform2fv("u_symbolSize", b5), n5.bindVAO(t7), n5.drawElements(E.TRIANGLES, r3, C.UNSIGNED_INT, 0);
  }
  _getSymbolSize(e4, a3) {
    const t7 = a3.key ? 2 ** (e4.displayLevel - a3.key.level) : a3.resolution / e4.state.resolution, { symbolTileSize: r3 } = a3.symbolizerParameters;
    return [r3 / (Math.round((a3.width - a3.offset[0]) / r3) * r3) / t7, r3 / (Math.round((a3.height - a3.offset[1]) / r3) * r3) / t7];
  }
};

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFDisplayObject.js
var f8 = class extends e2 {
  constructor(t7 = null) {
    super(), this._source = null, this._symbolizerParameters = null, this._vaoInvalidated = true, this.coordScale = [1, 1], this.height = null, this.key = null, this.offset = null, this.stencilRef = 0, this.resolution = null, this.pixelRatio = 1, this.x = 0, this.y = 0, this.rotation = 0, this.rawPixelData = null, this.vaoData = null, this.width = null, this.source = t7;
  }
  destroy() {
    var _a, _b;
    null != this.vaoData && ((_a = this.vaoData.magdir) == null ? void 0 : _a.vao.dispose(), (_b = this.vaoData.scalar) == null ? void 0 : _b.vao.dispose(), this.vaoData = null);
  }
  get symbolizerParameters() {
    return this._symbolizerParameters;
  }
  set symbolizerParameters(t7) {
    JSON.stringify(this._symbolizerParameters) !== JSON.stringify(t7) && (this._symbolizerParameters = t7, this.invalidateVAO());
  }
  get source() {
    return this._source;
  }
  set source(t7) {
    this._source = t7, this.invalidateVAO();
  }
  invalidateVAO() {
    var _a, _b;
    this._vaoInvalidated || null == this.vaoData || ((_a = this.vaoData.magdir) == null ? void 0 : _a.vao.dispose(), (_b = this.vaoData.scalar) == null ? void 0 : _b.vao.dispose(), this.vaoData = null, this._vaoInvalidated = true, this.requestRender());
  }
  updateVectorFieldVAO(t7) {
    if (this._vaoInvalidated) {
      if (this._vaoInvalidated = false, null != this.source && null == this.vaoData) {
        const { style: e4 } = this.symbolizerParameters;
        switch (e4) {
          case "beaufort_ft":
          case "beaufort_km":
          case "beaufort_kn":
          case "beaufort_m":
          case "beaufort_mi":
          case "classified_arrow":
          case "ocean_current_kn":
          case "ocean_current_m":
          case "single_arrow":
            {
              const e5 = U(this.source, this.symbolizerParameters), a3 = this._createVectorFieldVAO(t7.context, e5);
              this.vaoData = { magdir: a3 };
            }
            break;
          case "simple_scalar":
            {
              const e5 = _(this.source, this.symbolizerParameters), a3 = this._createVectorFieldVAO(t7.context, e5);
              this.vaoData = { scalar: a3 };
            }
            break;
          case "wind_speed": {
            const e5 = U(this.source, this.symbolizerParameters), a3 = this._createVectorFieldVAO(t7.context, e5), s6 = _(this.source, this.symbolizerParameters), i4 = this._createVectorFieldVAO(t7.context, s6);
            this.vaoData = { magdir: a3, scalar: i4 };
          }
        }
      }
      this.ready(), this.requestRender();
    }
  }
  _createTransforms() {
    return { displayViewScreenMat3: e() };
  }
  setTransform(r3) {
    const l6 = o(this.transforms.displayViewScreenMat3), [n5, c4] = r3.toScreenNoRotation([0, 0], [this.x, this.y]), h6 = this.resolution / this.pixelRatio / r3.resolution, m5 = h6 * this.width, u5 = h6 * this.height, d9 = Math.PI * this.rotation / 180;
    M(l6, l6, t2(n5, c4)), M(l6, l6, t2(m5 / 2, u5 / 2)), h(l6, l6, -d9), M(l6, l6, t2(-m5 / 2, -u5 / 2)), b3(l6, l6, t2(m5, u5)), i(this.transforms.displayViewScreenMat3, r3.displayViewMat3, l6);
  }
  onAttach() {
    this.invalidateVAO();
  }
  onDetach() {
    this.invalidateVAO();
  }
  _createVectorFieldVAO(t7, e4) {
    const { vertexData: a3, indexData: s6 } = e4, i4 = E2.createVertex(t7, F.STATIC_DRAW, new Float32Array(a3)), r3 = E2.createIndex(t7, F.STATIC_DRAW, new Uint32Array(s6)), o5 = b4("vector-field", { geometry: [{ location: 0, name: "a_pos", count: 2, type: C.FLOAT, normalized: false }, { location: 1, name: "a_offset", count: 2, type: C.FLOAT, normalized: false }, { location: 2, name: "a_vv", count: 2, type: C.FLOAT, normalized: false }] });
    return { vao: new o2(t7, o5.attributes, o5.bufferLayouts, /* @__PURE__ */ new Map([["geometry", i4]]), r3), elementCount: s6.length };
  }
};

export {
  d7 as d,
  d8 as d2,
  f8 as f
};
//# sourceMappingURL=chunk-7HSA5ETO.js.map
