import {
  E,
  F as F2,
  R,
  c,
  ue
} from "./chunk-VD7LJKWR.js";
import "./chunk-QJUE5NJJ.js";
import {
  F
} from "./chunk-F4M4YVE2.js";
import "./chunk-S6R6PMEL.js";
import "./chunk-JHMJSZI5.js";
import "./chunk-2L7UGRIC.js";
import "./chunk-E6IUAXXM.js";
import "./chunk-NJKQE6C5.js";
import "./chunk-ENHHZ2WV.js";
import "./chunk-HKWBRI3V.js";
import "./chunk-NW6OWOSJ.js";
import "./chunk-EVK6ZSVY.js";
import "./chunk-MSUBZ5BW.js";
import "./chunk-YEDSTDY4.js";
import "./chunk-P4TUSPKE.js";
import "./chunk-OMMWWGIU.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-HACIIBEF.js";
import "./chunk-2BVPGUC2.js";
import "./chunk-BN24XFSK.js";
import "./chunk-547Z5YIS.js";
import "./chunk-4WB72ND2.js";
import "./chunk-LIUBAYCM.js";
import "./chunk-BLYF375M.js";
import {
  l as l2
} from "./chunk-SVRTKGNR.js";
import "./chunk-JED7FM2Q.js";
import "./chunk-FFUKJAFO.js";
import "./chunk-H4E2VVPD.js";
import "./chunk-CQFC4JO6.js";
import "./chunk-VS5MKM3H.js";
import "./chunk-CQTV4C3X.js";
import "./chunk-764E6KTP.js";
import "./chunk-GEPD6W23.js";
import "./chunk-TP6LRQ42.js";
import "./chunk-ZE6OS33V.js";
import "./chunk-MWZJIOOL.js";
import "./chunk-ULSRCITK.js";
import {
  e as e2
} from "./chunk-FLUE3DMC.js";
import "./chunk-5GQ62KHN.js";
import "./chunk-YAGJS3MX.js";
import "./chunk-43KBLSS3.js";
import {
  j
} from "./chunk-RG7AMCT5.js";
import {
  f
} from "./chunk-PV3ZZQOV.js";
import {
  l
} from "./chunk-SM2VXWMT.js";
import "./chunk-WYO25WZZ.js";
import "./chunk-OC7D2HR4.js";
import {
  t as t2
} from "./chunk-IGMG7ERK.js";
import {
  b
} from "./chunk-V47ZBW5W.js";
import {
  y
} from "./chunk-HKYICNT2.js";
import {
  S
} from "./chunk-VGUQMPM6.js";
import "./chunk-KKH7HGO3.js";
import "./chunk-Z3NV3VCK.js";
import "./chunk-7VNQKVOW.js";
import "./chunk-PNVXSHN2.js";
import "./chunk-3DVL3O3F.js";
import "./chunk-RN66FJAW.js";
import "./chunk-QYSQ6XPQ.js";
import "./chunk-2RIHQI4N.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-NXGNMEHZ.js";
import "./chunk-TWYDW6LU.js";
import "./chunk-PVHAAI32.js";
import "./chunk-MLATPUII.js";
import "./chunk-NVFQGMP6.js";
import "./chunk-P2IB5HBH.js";
import "./chunk-XX37BOHH.js";
import "./chunk-5CRXWQ3Y.js";
import "./chunk-4RFCLPAF.js";
import "./chunk-4ISVH4NS.js";
import "./chunk-NIWINVGG.js";
import "./chunk-DOENTAA7.js";
import "./chunk-CGSFKZP2.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-WPERPIJF.js";
import "./chunk-RXJCBLN2.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-XKMN3LJN.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-DB6SP72M.js";
import "./chunk-T6QS4ZNU.js";
import "./chunk-D3FSVA7H.js";
import "./chunk-6B4OMNPA.js";
import "./chunk-3GQ4PJDJ.js";
import "./chunk-QEJMJI2R.js";
import {
  f as f2
} from "./chunk-QMGMKWTA.js";
import "./chunk-2EGO74J5.js";
import "./chunk-4SUK447J.js";
import "./chunk-2X7T37AY.js";
import "./chunk-XQH2QDB2.js";
import "./chunk-6Q7GN2CW.js";
import "./chunk-MYUZZ3A3.js";
import "./chunk-2IGXKE5P.js";
import "./chunk-JFI4ESYU.js";
import "./chunk-4X2UADDH.js";
import "./chunk-ZICJB3ML.js";
import "./chunk-AVBIV2K3.js";
import "./chunk-4NJWIUZG.js";
import "./chunk-F3NUC2RS.js";
import "./chunk-LE3YW4Y3.js";
import "./chunk-TA32QX7Z.js";
import "./chunk-NYLL2YZF.js";
import "./chunk-P3GRQ2CH.js";
import "./chunk-NYLBGE62.js";
import "./chunk-LPNAPHOF.js";
import "./chunk-QCBTLG25.js";
import "./chunk-ECCHNTW6.js";
import "./chunk-WWNVF22O.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-K5RYAJV4.js";
import "./chunk-XGYM66XX.js";
import "./chunk-JOOGZSAP.js";
import "./chunk-J6GHQIZ2.js";
import {
  n as n3
} from "./chunk-VEUN2EF3.js";
import {
  C,
  d
} from "./chunk-W6D3ECTZ.js";
import "./chunk-PJNOPBRY.js";
import "./chunk-23TJP3F6.js";
import "./chunk-EMVTPRQK.js";
import "./chunk-EDGKOPSL.js";
import "./chunk-QXDQJEIU.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-SEUZ3J6J.js";
import "./chunk-BWTCR2DR.js";
import "./chunk-SMOTPOZ7.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-7FJIOZSE.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import "./chunk-TSVUPARM.js";
import "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import {
  V as V2
} from "./chunk-RCLWOQNR.js";
import "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-RD2BBQYN.js";
import "./chunk-SEG3PRUR.js";
import "./chunk-B6VE32RA.js";
import {
  m as m2,
  p
} from "./chunk-AIYFWM42.js";
import "./chunk-2M53HYNY.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-FG3XOAFD.js";
import {
  o
} from "./chunk-GN5RE63N.js";
import {
  r as r3
} from "./chunk-2WXAPZBK.js";
import "./chunk-E2I7HYXQ.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import "./chunk-CRH37WFF.js";
import {
  V,
  Y
} from "./chunk-YFGQMO6E.js";
import "./chunk-HAF6QJ32.js";
import {
  e,
  m,
  n2,
  t3 as t
} from "./chunk-H77COA2S.js";
import {
  a4 as a2,
  r2
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  a
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import {
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/layers/KnowledgeGraphLayer.js
var U = class extends l(t2(f(l2(b(j(S(e2(f2)))))))) {
  constructor(e3) {
    super(e3), this._graphTypeLookup = /* @__PURE__ */ new Map(), this._namedTypesModified = false, this.dataManager = null, this.definitionSetMap = null, this.knowledgeGraph = null, this.layers = new (V2.ofType(ue))(), this.memberEntityTypes = null, this.memberRelationshipTypes = null, this.operationalLayerType = "KnowledgeGraphLayer", this.sublayerIdsCache = /* @__PURE__ */ new Map(), this.tables = new (V2.ofType(ue))(), this.type = "knowledge-graph", this.url = null, this.addHandles(d(() => this.layers.concat(this.tables), (e4, t3) => this._handleSublayersChange(e4, t3), C));
  }
  load(e3) {
    return this.addResolvingPromise(this._doLoad(e3)), Promise.resolve(this);
  }
  async _doLoad(e3) {
    try {
      await this.loadFromPortal({ supportedTypes: ["Knowledge Graph Layer"] }, e3);
    } catch (t3) {
      a(t3);
    }
    await this._fetchMetadata(), await this._initializeLayerProperties(), this.loadLayerAssumingLocalCache(), await c(this);
  }
  async _fetchMetadata() {
    if (!this.url) throw new s("knowledge-graph:missing-url", "KnowledgeGraphLayer must be created with a url");
    const e3 = await F(this.url);
    this.knowledgeGraph = e3, this._forEachGraphType((e4) => {
      e4.name && this._graphTypeLookup.set(e4.name, e4);
    });
  }
  async _initializeLayerProperties() {
    this.originIdOf("inclusionModeDefinition") === e.USER ? this._validateInclusionModeDefinition() : await this._initializeInclusionModeDefinition(), this._setMemberTypes(), this.dataManager = new E({ knowledgeGraph: this.knowledgeGraph, inclusionModeDefinition: this.inclusionModeDefinition });
  }
  async _initializeInclusionModeDefinition() {
    const e3 = this.definitionSetMap ? await F2(this.definitionSetMap, true) : { generateAllSublayers: true, namedTypeDefinitions: /* @__PURE__ */ new Map() };
    [...this.layers.toArray(), ...this.tables.toArray()].forEach((t3) => {
      const i = this._graphTypeLookup.get(t3.graphTypeName);
      i && !e3.namedTypeDefinitions.has(i.name) && e3.namedTypeDefinitions.set(i.name, { useAllData: true });
    }), this.setAtOrigin("inclusionModeDefinition", e3, t(this.originIdOf("definitionSetMap")));
  }
  _validateInclusionModeDefinition() {
    const { inclusionModeDefinition: e3 } = this;
    if (!e3) return;
    const { namedTypeDefinitions: t3 } = e3;
    if ((t3 == null ? void 0 : t3.size) > 0) t3.forEach((e4, i) => {
      const s2 = this._graphTypeLookup.get(i);
      if (!s2) return n.getLogger(this).warn(`A named type, ${i}, was in the inclusion list that wasn't in the data model and will be removed`), void t3.delete(i);
      "relationship" !== s2.type && "entity" !== s2.type && (n.getLogger(this).warn(`A named type, ${i}, was in the inclusion list that wasn't properly modeled and will be removed`), t3.delete(i));
    });
    else if (!e3.generateAllSublayers) throw new s("knowledge-graph:composite-layer-constructor", "If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined");
  }
  _setMemberTypes() {
    var _a, _b;
    let e3 = [], t3 = [];
    const { inclusionModeDefinition: i } = this, o2 = i == null ? void 0 : i.namedTypeDefinitions;
    !i || i.generateAllSublayers ? (e3 = ((_a = this.knowledgeGraph.dataModel) == null ? void 0 : _a.entityTypes) ?? [], t3 = ((_b = this.knowledgeGraph.dataModel) == null ? void 0 : _b.relationshipTypes) ?? []) : o2 && o2.size > 0 && o2.forEach((i2, o3) => {
      const s2 = this._graphTypeLookup.get(o3);
      switch (s2 == null ? void 0 : s2.type) {
        case "relationship":
          t3.push(s2);
          break;
        case "entity":
          e3.push(s2);
      }
    }), this.memberEntityTypes = e3, this.memberRelationshipTypes = t3;
  }
  _forEachGraphType(e3) {
    var _a, _b;
    [...((_a = this.knowledgeGraph.dataModel) == null ? void 0 : _a.entityTypes) ?? [], ...((_b = this.knowledgeGraph.dataModel) == null ? void 0 : _b.relationshipTypes) ?? []].forEach((t3) => {
      e3(t3);
    });
  }
  _refreshNamedTypes() {
    this._namedTypesModified = true;
    for (const e3 of this.layers) e3.emit("refresh", { dataChanged: true });
    for (const e3 of this.tables) e3.emit("refresh", { dataChanged: true });
  }
  async _handleNewRecords(e3) {
    const t3 = [];
    this.dataManager.addToLayer(e3);
    for (const i of e3) this.sublayerIdsCache.has(i.typeName) || (this.sublayerIdsCache.set(i.typeName, /* @__PURE__ */ new Set()), t3.push(i.typeName)), this.sublayerIdsCache.get(i.typeName).add(i.id);
    for (const i of t3) {
      const e4 = this._graphTypeLookup.get(i);
      e4 && (this._addSublayer(e4), "entity" === e4.type ? this.dataManager.entityTypeNames.add(i) : this.dataManager.relationshipTypeNames.add(i), this.dataManager.sublayerCaches.set(i, /* @__PURE__ */ new Map()));
    }
    await c(this, t3), this._refreshNamedTypes();
  }
  _createSublayers(e3, t3, i) {
    e3.forEach((e4) => {
      const o2 = this._createSublayer(e4);
      i(o2) && t3.push(o2), this._updateSublayerCaches(e4);
    });
  }
  _addSublayer(e3) {
    const t3 = this._createSublayer(e3);
    return t3.geometryType ? this.layers.push(t3) : this.tables.push(t3), t3;
  }
  _createSublayer(e3) {
    return new ue({ objectType: e3, parentCompositeLayer: this, graphType: e3.type });
  }
  _updateSublayers(e3, t3) {
    t3.forEach((t4) => {
      t4.parentCompositeLayer = this;
      const i = e3.find((e4) => e4.type === t4.graphType && e4.name === t4.graphTypeName);
      i && (t4.objectType = i, this._updateSublayerCaches(i));
    });
  }
  _updateSublayerCaches(e3) {
    const t3 = this.dataManager.sublayerCaches;
    t3.has(e3.name) || t3.set(e3.name, /* @__PURE__ */ new Map());
  }
  _saveUrlAsNewResource(e3, t3, i, o2) {
    e3[t3] = "<pending>", i.pendingOperations.push(x(this.inclusionModeDefinition).then((s2) => {
      const a3 = P(o2);
      e3[t3] = a3.itemRelativeUrl, i.toAdd.push({ resource: a3, content: { type: "blob", blob: s2 }, compress: false, finish: (e4) => {
        this.definitionSetMap = e4.url;
      } });
    }));
  }
  _displaysAllRecords(e3) {
    for (const [, { useAllData: t3 }] of e3.namedTypeDefinitions) if (!t3) return false;
    return true;
  }
  _handleSublayersChange(e3, t3) {
    t3 && (t3.forEach((e4) => {
      e4.parent = null;
    }), this.removeHandles("sublayers-owner")), e3 && (e3.forEach((e4) => {
      e4.parent = this;
    }), this.addHandles([e3.on("after-add", ({ item: e4 }) => {
      e4.parent = this;
    }), e3.on("after-remove", ({ item: e4 }) => {
      e4.parent = null;
    })], "sublayers-owner"));
  }
  readDefinitionSetMap(e3, t3, i) {
    return p(e3, i);
  }
  writeDefinitionSetMap(e3, t3, i, o2) {
    const s2 = o2 == null ? void 0 : o2.portalItem, a3 = o2 == null ? void 0 : o2.resources, r4 = n2(o2 == null ? void 0 : o2.origin);
    if (!s2 || !a3 || null == r4) return void (e3 && (t3[i] = m2(e3, o2)));
    const { inclusionModeDefinition: n4 } = this;
    if (!n4 || this._displaysAllRecords(n4)) return void (this.definitionSetMap = null);
    const p2 = this.originIdOf("inclusionModeDefinition");
    if (p2 === e.USER || this._namedTypesModified || r4 < p2) this._saveUrlAsNewResource(t3, i, a3, s2);
    else if (r4 === p2 && e3) {
      const r5 = m2(e3, o2);
      Y(r5) ? this._saveUrlAsNewResource(t3, i, a3, s2) : t3[i] = r5;
    }
  }
  set inclusionModeDefinition(e3) {
    "loaded" !== this.loadStatus && "failed" !== this.loadStatus ? this._set("inclusionModeDefinition", e3) : n.getLogger(this).error("#inclusionModeDefinition", "inclusionModeDefinition cannot be changed after the layer is loaded.");
  }
  loadLayerAssumingLocalCache() {
    var _a, _b;
    const e3 = [...this.memberEntityTypes, ...this.memberRelationshipTypes];
    this.originIdOf("layers") === e.DEFAULTS ? this._createSublayers(e3, this.layers, (e4) => !!e4.geometryType) : this._updateSublayers(e3, this.layers), this.originIdOf("tables") === e.DEFAULTS ? this._createSublayers(e3, this.tables, (e4) => !e4.geometryType) : this._updateSublayers(e3, this.tables), (_b = (_a = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions) == null ? void 0 : _b.forEach((e4, t3) => {
      var _a2;
      const i = r2(this.sublayerIdsCache, t3, () => /* @__PURE__ */ new Set());
      (_a2 = e4.members) == null ? void 0 : _a2.forEach((e5) => {
        i.add(e5.id);
      });
    });
  }
  async addRecords(e3) {
    await this._handleNewRecords(e3);
  }
  async removeRecords(e3) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const t3 = [];
    for (const i of e3) false === ((_c = (_b = (_a = this.dataManager.inclusionModeDefinition) == null ? void 0 : _a.namedTypeDefinitions) == null ? void 0 : _b.get(i.typeName)) == null ? void 0 : _c.useAllData) && ((_g = (_f = (_e = (_d = this.dataManager.inclusionModeDefinition) == null ? void 0 : _d.namedTypeDefinitions) == null ? void 0 : _e.get(i.typeName)) == null ? void 0 : _f.members) == null ? void 0 : _g.has(i.id)) && t3.push(i);
    this.dataManager.removeFromLayer(t3);
    for (const i of t3) (_h = this.sublayerIdsCache.get(i.typeName)) == null ? void 0 : _h.delete(i.id);
    return this._refreshNamedTypes(), t3;
  }
};
r([m()], U.prototype, "dataManager", void 0), r([m({ json: { write: { ignoreOrigin: true, writerEnsuresNonNull: true } } })], U.prototype, "definitionSetMap", void 0), r([o("definitionSetMap")], U.prototype, "readDefinitionSetMap", null), r([r3("definitionSetMap")], U.prototype, "writeDefinitionSetMap", null), r([m()], U.prototype, "inclusionModeDefinition", null), r([m()], U.prototype, "knowledgeGraph", void 0), r([m({ type: V2.ofType(ue), json: { write: { ignoreOrigin: true } } })], U.prototype, "layers", void 0), r([m()], U.prototype, "memberEntityTypes", void 0), r([m()], U.prototype, "memberRelationshipTypes", void 0), r([m({ type: ["KnowledgeGraphLayer"] })], U.prototype, "operationalLayerType", void 0), r([m()], U.prototype, "sublayerIdsCache", void 0), r([m({ type: V2.ofType(ue), json: { write: { ignoreOrigin: true } } })], U.prototype, "tables", void 0), r([m({ json: { read: false } })], U.prototype, "type", void 0), r([m(y)], U.prototype, "url", void 0), U = r([a2("esri.layers.KnowledgeGraphLayer")], U);
var O = U;
async function x(e3) {
  const t3 = await R(e3);
  return new Blob([t3], { type: "application/x-protobuf" });
}
function P(e3) {
  const t3 = `definitionSetMap-${n3()}.dat`, i = V("knowledgeGraphLayer", t3);
  return e3.resourceFromPath(i);
}
export {
  O as default
};
//# sourceMappingURL=KnowledgeGraphLayer-72LZQ6P2.js.map
