import {
  i as i7,
  n as n15,
  o as o11,
  o2 as o12,
  r as r12
} from "./chunk-54SL3UDC.js";
import {
  t as t11
} from "./chunk-TZIYE4OW.js";
import {
  a as a2,
  c as c7,
  r as r13,
  s as s12
} from "./chunk-UPSMWQS5.js";
import {
  e as e11
} from "./chunk-XSUL7LNZ.js";
import {
  g as g5,
  i as i8,
  m as m10,
  r as r15
} from "./chunk-T23XXKIL.js";
import {
  r as r14
} from "./chunk-NSVZKQ66.js";
import {
  _ as _3,
  d as d7,
  t2 as t9
} from "./chunk-BZVFVFOB.js";
import {
  Gt,
  H,
  Y,
  Z,
  _ as _4,
  at,
  ft,
  gt,
  ht,
  jt,
  kt,
  lt,
  mt,
  ot,
  pt,
  tt,
  ut,
  wt,
  xt,
  yt
} from "./chunk-7RAZQP6S.js";
import {
  e as e9
} from "./chunk-256XKGQW.js";
import {
  m as m9
} from "./chunk-4V237NE5.js";
import {
  a as a3,
  e as e10,
  l as l6
} from "./chunk-F3ZOBTPK.js";
import {
  e as e8,
  t as t10
} from "./chunk-2EUWU26M.js";
import {
  o as o10
} from "./chunk-XK5EJSYF.js";
import {
  t as t8
} from "./chunk-EZCH3ZAJ.js";
import {
  c as c6,
  l as l5,
  n as n14
} from "./chunk-DB6SP72M.js";
import {
  r as r10,
  t as t7
} from "./chunk-H2FDONTV.js";
import {
  n as n11
} from "./chunk-LQRCM67O.js";
import "./chunk-3MXRSVIZ.js";
import {
  h as h7,
  s as s9
} from "./chunk-YGTM4JUB.js";
import {
  i as i6
} from "./chunk-KDUYQUT4.js";
import {
  n as n10
} from "./chunk-73FHIZIF.js";
import {
  f as f3,
  i as i5,
  s as s11,
  u as u6
} from "./chunk-ICIPRMPO.js";
import {
  e as e7
} from "./chunk-2IVHP3HQ.js";
import {
  t as t6
} from "./chunk-EHD5KM2T.js";
import "./chunk-G6LMYOSA.js";
import {
  s as s10
} from "./chunk-YNC2IEH2.js";
import "./chunk-QJXYURT2.js";
import "./chunk-CGJUTDVJ.js";
import {
  l as l4
} from "./chunk-BOSRS73G.js";
import "./chunk-WC6QRPBL.js";
import {
  M as M4,
  h as h5,
  i as i4,
  o as o9,
  r as r9
} from "./chunk-D6FJTDNK.js";
import {
  h as h6
} from "./chunk-GYV5TPN6.js";
import {
  p as p2,
  z
} from "./chunk-ZOEKS56J.js";
import "./chunk-IYJHGZBJ.js";
import {
  I,
  I2
} from "./chunk-T6QS4ZNU.js";
import "./chunk-D3FSVA7H.js";
import {
  P as P2
} from "./chunk-6B4OMNPA.js";
import "./chunk-3GQ4PJDJ.js";
import "./chunk-QEJMJI2R.js";
import "./chunk-KV3S4QI2.js";
import {
  n as n9
} from "./chunk-ECMDQ4LS.js";
import {
  S as S2,
  e as e6,
  m as m5,
  o as o8,
  r as r8
} from "./chunk-LP6TMAPE.js";
import {
  g as g4
} from "./chunk-RENLZYKC.js";
import {
  B,
  e as e3,
  n as n4,
  r as r5,
  t as t4
} from "./chunk-M7BSX2JD.js";
import {
  i,
  n2 as n6
} from "./chunk-N7UV77NP.js";
import {
  n as n7
} from "./chunk-J7T52XOR.js";
import {
  u as u3,
  w as w2
} from "./chunk-KZYGXJYH.js";
import {
  L as L2,
  m as m8
} from "./chunk-KFSYVBTW.js";
import {
  r as r11
} from "./chunk-HFPXZJAJ.js";
import {
  m as m7
} from "./chunk-VGE7RXNF.js";
import "./chunk-B3SR7LF7.js";
import {
  n as n13
} from "./chunk-EKHEOE6A.js";
import {
  n as n12
} from "./chunk-VIP4NQFO.js";
import {
  v as v3
} from "./chunk-BVHISPUT.js";
import "./chunk-QMGMKWTA.js";
import {
  m as m6
} from "./chunk-2EGO74J5.js";
import "./chunk-4SUK447J.js";
import "./chunk-2X7T37AY.js";
import "./chunk-XQH2QDB2.js";
import {
  d as d6
} from "./chunk-6Q7GN2CW.js";
import "./chunk-MYUZZ3A3.js";
import {
  i as i2
} from "./chunk-2IGXKE5P.js";
import "./chunk-JFI4ESYU.js";
import "./chunk-4X2UADDH.js";
import "./chunk-ZICJB3ML.js";
import "./chunk-AVBIV2K3.js";
import {
  l as l3
} from "./chunk-4NJWIUZG.js";
import {
  b as b3
} from "./chunk-F3NUC2RS.js";
import "./chunk-LE3YW4Y3.js";
import {
  p as p3
} from "./chunk-TA32QX7Z.js";
import "./chunk-NYLL2YZF.js";
import {
  d as d5
} from "./chunk-P3GRQ2CH.js";
import {
  i as i3
} from "./chunk-NYLBGE62.js";
import "./chunk-LPNAPHOF.js";
import "./chunk-QCBTLG25.js";
import "./chunk-ECCHNTW6.js";
import "./chunk-WWNVF22O.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-K5RYAJV4.js";
import {
  B as B2,
  J,
  K,
  W,
  _ as _2
} from "./chunk-XGYM66XX.js";
import "./chunk-JOOGZSAP.js";
import "./chunk-J6GHQIZ2.js";
import "./chunk-VEUN2EF3.js";
import {
  A as A3,
  C,
  P,
  d as d3,
  p,
  v as v2,
  w
} from "./chunk-W6D3ECTZ.js";
import "./chunk-PJNOPBRY.js";
import "./chunk-23TJP3F6.js";
import "./chunk-EMVTPRQK.js";
import "./chunk-EDGKOPSL.js";
import "./chunk-QXDQJEIU.js";
import "./chunk-MGMVRMXQ.js";
import {
  n as n8
} from "./chunk-SEUZ3J6J.js";
import "./chunk-BWTCR2DR.js";
import "./chunk-SMOTPOZ7.js";
import {
  c as c5
} from "./chunk-YVSEBNS4.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-EZXLBRAS.js";
import {
  c as c4,
  l as l2
} from "./chunk-7FJIOZSE.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import "./chunk-TSVUPARM.js";
import {
  v2 as v4
} from "./chunk-VUJERGGB.js";
import {
  s as s6
} from "./chunk-NTI2OCVI.js";
import {
  M as M3,
  s as s8,
  u as u4
} from "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import {
  e as e5,
  u as u5
} from "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import {
  h as h4,
  o as o6
} from "./chunk-JS7R723S.js";
import {
  V
} from "./chunk-RCLWOQNR.js";
import {
  o as o5
} from "./chunk-DOTSJZHK.js";
import {
  _,
  d as d2
} from "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-RD2BBQYN.js";
import "./chunk-SEG3PRUR.js";
import {
  m as m4
} from "./chunk-B6VE32RA.js";
import "./chunk-AIYFWM42.js";
import {
  m as m3,
  n as n5
} from "./chunk-2M53HYNY.js";
import {
  M as M2,
  o as o7,
  r as r7,
  s as s7
} from "./chunk-6YWQXXBX.js";
import "./chunk-Q7TEBZSN.js";
import {
  M,
  R,
  e as e4,
  f as f2,
  j2 as j,
  t as t5,
  w as w3
} from "./chunk-FG3XOAFD.js";
import "./chunk-GN5RE63N.js";
import {
  g as g3
} from "./chunk-2WXAPZBK.js";
import {
  d as d4,
  r as r6,
  s3 as s5
} from "./chunk-E2I7HYXQ.js";
import {
  c as c3,
  g as g2
} from "./chunk-P5H5PJSC.js";
import {
  s as s4
} from "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import "./chunk-CRH37WFF.js";
import "./chunk-YFGQMO6E.js";
import {
  f
} from "./chunk-HAF6QJ32.js";
import {
  A as A2,
  b2,
  c as c2,
  m as m2,
  o2 as o,
  o3 as o2,
  r as r2,
  t2 as t,
  t4 as t2,
  v
} from "./chunk-H77COA2S.js";
import {
  a4 as a,
  h as h3,
  n as n3,
  r2 as r4,
  s4 as s3
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  A,
  E,
  L,
  S,
  b,
  c2 as c,
  d,
  e as e2,
  g,
  h as h2,
  m,
  o as o3,
  o2 as o4,
  s as s2,
  u as u2
} from "./chunk-GRW2QIBT.js";
import {
  e,
  l,
  u
} from "./chunk-R2PAF6JT.js";
import {
  n as n2,
  r as r3,
  t as t3
} from "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import {
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";
import {
  F,
  h,
  has
} from "./chunk-XKQWTZMW.js";
import "./chunk-R4AWRGAT.js";
import "./chunk-5674S6ZB.js";
import "./chunk-V2NNZQEU.js";
import "./chunk-V6OQZUXX.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/views/BreakpointsOwner.js
var l7 = { widthBreakpoint: { getValue(e25) {
  const i22 = e25.viewSize[0], s28 = e25.breakpoints, a22 = this.values;
  return i22 <= s28.xsmall ? a22.xsmall : i22 <= s28.small ? a22.small : i22 <= s28.medium ? a22.medium : i22 <= s28.large ? a22.large : a22.xlarge;
}, values: { xsmall: "xsmall", small: "small", medium: "medium", large: "large", xlarge: "xlarge" }, valueToClassName: { xsmall: "esri-view-width-xsmall esri-view-width-less-than-small esri-view-width-less-than-medium esri-view-width-less-than-large esri-view-width-less-than-xlarge", small: "esri-view-width-small esri-view-width-greater-than-xsmall esri-view-width-less-than-medium esri-view-width-less-than-large esri-view-width-less-than-xlarge", medium: "esri-view-width-medium esri-view-width-greater-than-xsmall esri-view-width-greater-than-small esri-view-width-less-than-large esri-view-width-less-than-xlarge", large: "esri-view-width-large esri-view-width-greater-than-xsmall esri-view-width-greater-than-small esri-view-width-greater-than-medium esri-view-width-less-than-xlarge", xlarge: "esri-view-width-xlarge esri-view-width-greater-than-xsmall esri-view-width-greater-than-small esri-view-width-greater-than-medium esri-view-width-greater-than-large" } }, heightBreakpoint: { getValue(e25) {
  const i22 = e25.viewSize[1], s28 = e25.breakpoints, a22 = this.values;
  return i22 <= s28.xsmall ? a22.xsmall : i22 <= s28.small ? a22.small : i22 <= s28.medium ? a22.medium : i22 <= s28.large ? a22.large : a22.xlarge;
}, values: { xsmall: "xsmall", small: "small", medium: "medium", large: "large", xlarge: "xlarge" }, valueToClassName: { xsmall: "esri-view-height-xsmall esri-view-height-less-than-small esri-view-height-less-than-medium esri-view-height-less-than-large esri-view-height-less-than-xlarge", small: "esri-view-height-small esri-view-height-greater-than-xsmall esri-view-height-less-than-medium esri-view-height-less-than-large esri-view-height-less-than-xlarge", medium: "esri-view-height-medium esri-view-height-greater-than-xsmall esri-view-height-greater-than-small esri-view-height-less-than-large esri-view-height-less-than-xlarge", large: "esri-view-height-large esri-view-height-greater-than-xsmall esri-view-height-greater-than-small esri-view-height-greater-than-medium esri-view-height-less-than-xlarge", xlarge: "esri-view-height-xlarge esri-view-height-greater-than-xsmall esri-view-height-greater-than-small esri-view-height-greater-than-medium esri-view-height-greater-than-large" } }, orientation: { getValue(e25) {
  const i22 = e25.viewSize, s28 = i22[0], a22 = i22[1], t29 = this.values;
  return a22 >= s28 ? t29.portrait : t29.landscape;
}, values: { portrait: "portrait", landscape: "landscape" }, valueToClassName: { portrait: "esri-view-orientation-portrait", landscape: "esri-view-orientation-landscape" } } };
var h8 = { xsmall: 544, small: 768, medium: 992, large: 1200 };
function n16(e25) {
  const i22 = e25;
  return i22 && i22.xsmall < i22.small && i22.small < i22.medium && i22.medium < i22.large;
}
function m11(e25, i22) {
  return i22 ? l7[e25].valueToClassName[i22].split(" ") : [];
}
var o13 = (o32) => {
  let g13 = class extends o32 {
    constructor(...e25) {
      super(...e25), this.orientation = null, this.widthBreakpoint = null, this.heightBreakpoint = null, this.breakpoints = h8;
    }
    initialize() {
      this.addHandles(d3(() => [this.breakpoints, this.size], () => this._updateClassNames(), P));
    }
    destroy() {
      this.destroyed || this._removeActiveClassNames();
    }
    set breakpoints(e25) {
      if (e25 === this._get("breakpoints")) return;
      if (!n16(e25)) {
        const i22 = JSON.stringify(h8, null, 2);
        console.warn("provided breakpoints are not valid, using defaults:" + i22), e25 = h8;
      }
      this._set("breakpoints", { ...e25 });
    }
    _updateClassNames() {
      if (!this.container) return;
      const e25 = t2.acquire(), s28 = t2.acquire();
      let a22, t29 = false;
      for (a22 in l7) {
        const i22 = this[a22], r30 = l7[a22].getValue({ viewSize: this.size, breakpoints: this.breakpoints });
        i22 !== r30 && (t29 = true, this[a22] = r30, m11(a22, i22).forEach((e26) => s28.push(e26)), m11(a22, r30).forEach((i23) => e25.push(i23)));
      }
      t29 && (this._applyClassNameChanges(e25, s28), t2.release(e25), t2.release(s28));
    }
    _applyClassNameChanges(e25, i22) {
      const s28 = this.container;
      s28 && (i22.forEach((e26) => s28.classList.remove(e26)), e25.forEach((e26) => s28.classList.add(e26)));
    }
    _removeActiveClassNames() {
      const e25 = this.container;
      if (!e25) return;
      let i22;
      for (i22 in l7) m11(i22, this[i22]).forEach((i23) => e25.classList.remove(i23));
    }
  };
  return r([m2()], g13.prototype, "breakpoints", null), r([m2()], g13.prototype, "orientation", void 0), r([m2()], g13.prototype, "widthBreakpoint", void 0), r([m2()], g13.prototype, "heightBreakpoint", void 0), g13 = r([a("esri.views.BreakpointsOwner")], g13), g13;
};

// node_modules/@arcgis/core/views/overlay/ViewOverlay.js
var a4 = class extends b2 {
  constructor() {
    super(...arguments), this.items = new V(), this._watchUpdatingTracking = new h6(), this._callbacks = /* @__PURE__ */ new Map(), this._projector = i(), this._hiddenProjector = i();
  }
  get needsRender() {
    return this.items.length > 0;
  }
  get updating() {
    var _a;
    return ((_a = this._watchUpdatingTracking) == null ? void 0 : _a.updating) ?? false;
  }
  initialize() {
    const t29 = document.createElement("div");
    t29.className = "esri-overlay-surface", this._set("surface", t29), this._hiddenSurface = document.createElement("div"), this._hiddenSurface.setAttribute("style", "visibility: hidden;"), t29.appendChild(this._hiddenSurface), this._watchUpdatingTracking.addOnCollectionChange(() => this.items, (t30) => {
      for (const e25 of t30.added) {
        const t31 = () => e25.render();
        this._callbacks.set(e25, t31), this._projector.append(this.surface, t31);
      }
      for (const e25 of t30.removed) {
        const t31 = this._projector.detach(this._callbacks.get(e25));
        this.surface.removeChild(t31.domNode), this._callbacks.delete(e25);
      }
    });
  }
  addItem(t29) {
    this.items.add(t29);
  }
  removeItem(t29) {
    this.items.remove(t29);
  }
  destroy() {
    this.items.removeAll(), this._callbacks.forEach((t29) => this._projector.detach(t29)), this._callbacks = null, this._projector = null, this._watchUpdatingTracking.destroy();
  }
  render() {
    this._projector.renderNow();
  }
  computeBoundingRect(t29) {
    const e25 = this._hiddenSurface, o32 = this._hiddenProjector;
    let r30;
    const s28 = () => (r30 = t29.render(), r30);
    o32.append(e25, s28), o32.renderNow();
    const i22 = { left: 0, top: 0, right: 0, bottom: 0 };
    if (r30 == null ? void 0 : r30.domNode) {
      const t30 = r30.domNode.getBoundingClientRect();
      i22.left = t30.left, i22.top = t30.top, i22.right = t30.right, i22.bottom = t30.bottom;
    }
    for (o32.detach(s28); e25.firstChild; ) e25.removeChild(e25.firstChild);
    return i22;
  }
  overlaps(t29, e25) {
    const o32 = this.computeBoundingRect(t29), r30 = this.computeBoundingRect(e25);
    return Math.max(o32.left, r30.left) <= Math.min(o32.right, r30.right) && Math.max(o32.top, r30.top) <= Math.min(o32.bottom, r30.bottom);
  }
  get hasVisibleItems() {
    return this.items.some((t29) => t29.visible);
  }
  async prepare() {
    await document.fonts.load(this._fontString()).catch(() => {
    });
  }
  renderCanvas(t29, e25) {
    const o32 = !!(e25 == null ? void 0 : e25.disableDecorations);
    if (!this.items.some((t30) => t30.visible && !(o32 && t30.isDecoration))) return;
    const r30 = t29.getContext("2d");
    r30.save(), r30.font = this._fontString(), this.items.forEach((t30) => {
      o32 && t30.isDecoration || (r30.save(), t30.renderCanvas(r30), r30.restore());
    }), r30.restore();
  }
  _fontString() {
    return `10px ${getComputedStyle(this.surface).fontFamily}`;
  }
};
r([m2({ readOnly: true })], a4.prototype, "surface", void 0), r([m2({ readOnly: true })], a4.prototype, "items", void 0), r([m2({ readOnly: true })], a4.prototype, "needsRender", null), r([m2({ readOnly: true })], a4.prototype, "_watchUpdatingTracking", void 0), r([m2({ readOnly: true })], a4.prototype, "updating", null), a4 = r([a("esri.views.overlay.ViewOverlay")], a4);
var c8 = a4;

// node_modules/@arcgis/core/views/DOMContainer.js
var p4 = [0, 0];
function m12(e25) {
  const t29 = (e25.ownerDocument || window.document).defaultView, s28 = e25.getBoundingClientRect();
  return p4[0] = s28.left + ((t29 == null ? void 0 : t29.pageXOffset) ?? 0), p4[1] = s28.top + ((t29 == null ? void 0 : t29.pageYOffset) ?? 0), p4;
}
function f4(e25) {
  e25 && (e25.textContent = "", e25.parentNode && e25.parentNode.removeChild(e25));
}
function g6(e25) {
  const t29 = document.createElement("div");
  return e25.appendChild(t29), t29;
}
var y = 16;
var _5 = 750;
var v5 = 512;
var C2 = 2;
var w4 = (p27) => {
  let w11 = class extends p27 {
    constructor(...e25) {
      super(...e25), this._freqInfo = { freq: y, time: _5 }, this._overlayRenderTaskHandle = null, this.height = 0, this.messagesCommon = null, this.overlay = null, this.position = null, this.resizing = false, this.root = null, this.surface = null, this.suspended = true, this.ui = null, this.userContent = null, this.width = 0, this.widthBreakpoint = null, this.addHandles([d3(() => this.cursor, (e26) => {
        const { surface: t29 } = this;
        t29 && t29.setAttribute("data-cursor", e26);
      }), d3(() => this.navigating, (e26) => {
        const { surface: t29 } = this;
        t29 && t29.setAttribute("data-navigating", e26.toString());
      })]);
    }
    initialize() {
      this.addHandles([d3(() => this.ui, (e25, t29) => this._handleUIChange(e25, t29), P), this.on("focus", () => this.notifyChange("focused")), this.on("blur", () => this.notifyChange("focused"))]);
    }
    destroy() {
      this.destroyed || (this.ui = u(this.ui), this.container = null);
    }
    get container() {
      return this._get("container") ?? null;
    }
    set container(e25) {
      const i22 = this._get("container"), o32 = n4(e25);
      if (o32 || "string" != typeof e25 || n.getLogger(this).error("#container", `element with id '${e25}' not found`), i22 === o32) return;
      if (this._stopMeasuring(), i22 && (i22.classList.remove("esri-view"), this._overlayRenderTaskHandle && (this._overlayRenderTaskHandle.remove(), this._overlayRenderTaskHandle = null), this.overlay && (this.overlay.destroy(), this._set("overlay", null)), this.root && (f4(this.root), this._set("root", null)), this.userContent && (t4(this.userContent, i22), f4(this.userContent), this._set("userContent", null))), !o32) return this._set("width", 0), this._set("height", 0), this._set("position", null), this._set("suspended", true), this._set("surface", null), void this._set("container", null);
      o32.classList.add("esri-view");
      const h20 = document.createElement("div");
      h20.className = "esri-view-user-storage", t4(o32, h20), o32.appendChild(h20), this._set("userContent", h20);
      const l21 = document.createElement("div");
      l21.className = "esri-view-root", o32.insertBefore(l21, o32.firstChild), this._set("root", l21);
      const u17 = document.createElement("div");
      u17.className = "esri-view-surface", u17.setAttribute("role", "application"), u17.tabIndex = 0, l21.appendChild(u17), this._set("surface", u17);
      const p28 = new c8();
      l21.appendChild(p28.surface), this._set("overlay", p28), this.addHandles(d3(() => p28.needsRender, (e26) => {
        e26 && !this._overlayRenderTaskHandle ? this._overlayRenderTaskHandle = A2({ render: () => {
          var _a;
          return (_a = this.overlay) == null ? void 0 : _a.render();
        } }) : this._overlayRenderTaskHandle = l(this._overlayRenderTaskHandle);
      })), this.forceDOMReadyCycle(), this._set("container", o32), this._startMeasuring();
    }
    get focused() {
      const e25 = document.activeElement === this.surface;
      return document.hasFocus() && e25;
    }
    get size() {
      return [this.width, this.height];
    }
    blur() {
      var _a;
      (_a = this.surface) == null ? void 0 : _a.blur();
    }
    focus() {
      var _a;
      (_a = this.surface) == null ? void 0 : _a.focus();
    }
    pageToContainer(e25, t29, s28) {
      const i22 = this.position;
      return e25 -= i22 ? i22[0] : 0, t29 -= i22 ? i22[1] : 0, s28 ? (s28[0] = e25, s28[1] = t29) : s28 = [e25, t29], s28;
    }
    containerToPage(e25, t29, s28) {
      const i22 = this.position;
      return e25 += i22 ? i22[0] : 0, t29 += i22 ? i22[1] : 0, s28 ? (s28[0] = e25, s28[1] = t29) : s28 = [e25, t29], s28;
    }
    _handleUIChange(e25, t29) {
      this.removeHandles("ui"), t29 && t29 !== e25 && t29.destroy(), e25 && (e25.view = this, this.addHandles(d3(() => this.root, (t30) => {
        e25.container = t30 ? g6(t30) : null;
      }, P), "ui")), this._set("ui", e25);
    }
    _stopMeasuring() {
      this.removeHandles("measuring"), this._get("resizing") && this._set("resizing", false);
    }
    _startMeasuring() {
      const e25 = this._freqInfo;
      e25.freq = y, e25.time = _5, this.addHandles([o4(window, "resize", () => {
        e25.freq = y, e25.time = _5;
      }), A2({ prepare: (e26) => {
        const t29 = this._measure(), s28 = this._freqInfo;
        if (s28.time += e26.deltaTime, t29 && (s28.freq = y, this._get("resizing") || this._set("resizing", true)), s28.time < s28.freq) return;
        s28.time = 0;
        const i22 = this._position();
        s28.freq = i22 || t29 ? y : Math.min(_5, s28.freq * C2), !t29 && s28.freq >= v5 && this._get("resizing") && this._set("resizing", false);
      } })], "measuring"), this._measure(), this._position();
    }
    _measure() {
      const e25 = this.container, t29 = e25 ? e25.clientWidth : 0, s28 = e25 ? e25.clientHeight : 0;
      if (0 === t29 || 0 === s28) return this.suspended || this._set("suspended", true), false;
      const i22 = this.width, r30 = this.height;
      return t29 === i22 && s28 === r30 ? (this.suspended && this._set("suspended", false), false) : (this._set("width", t29), this._set("height", s28), this.suspended && this._set("suspended", false), this.emit("resize", { oldWidth: i22, oldHeight: r30, width: t29, height: s28 }), true);
    }
    _position() {
      const e25 = this.container, t29 = this.position, s28 = e25 && m12(e25);
      return !!s28 && ((!t29 || s28[0] !== t29[0] || s28[1] !== t29[1]) && (this._set("position", [s28[0], s28[1]]), true));
    }
    forceDOMReadyCycle() {
    }
  };
  return r([m2()], w11.prototype, "container", null), r([m2({ readOnly: true })], w11.prototype, "focused", null), r([m2({ readOnly: true })], w11.prototype, "height", void 0), r([m2()], w11.prototype, "messagesCommon", void 0), r([m2({ type: c8 })], w11.prototype, "overlay", void 0), r([m2({ readOnly: true })], w11.prototype, "position", void 0), r([m2({ readOnly: true })], w11.prototype, "resizing", void 0), r([m2({ readOnly: true })], w11.prototype, "root", void 0), r([m2({ value: null, readOnly: true })], w11.prototype, "size", null), r([m2({ readOnly: true })], w11.prototype, "surface", void 0), r([m2({ readOnly: true })], w11.prototype, "suspended", void 0), r([m2()], w11.prototype, "ui", void 0), r([m2({ readOnly: true })], w11.prototype, "userContent", void 0), r([m2({ readOnly: true })], w11.prototype, "width", void 0), r([m2()], w11.prototype, "widthBreakpoint", void 0), w11 = r([a("esri.views.DOMContainer")], w11), w11;
};

// node_modules/@arcgis/core/views/PopupView.js
function m13(p27) {
  return null != p27 && "open" in p27 && "declaredClass" in p27;
}
function f5(p27) {
  return null != p27 && "declaredClass" in p27 && "dockOptions" in p27;
}
var w5 = (a22) => {
  let w11 = class extends a22 {
    constructor() {
      super(...arguments), this._popupSetupTask = null, this.popup = {}, this.popupEnabled = true;
    }
    initialize() {
      this.addHandles([d3(() => [this.ui, this.popup], ([p27, e25], t29) => {
        const o32 = "popup", i22 = "manual";
        if (t29) {
          const [p28, e26] = t29;
          p28 && m13(e26) && (e26.view = null, f5(e26) && p28.remove(e26, o32));
        }
        p27 && m13(e25) && (e25.view = this, f5(e25) && p27.add(e25, { key: o32, position: i22, internal: true }));
      }, P), this.on("click", (p27) => {
        this.popup && this.popupEnabled && ("mouse" !== p27.pointerType || 0 === p27.button) && (m13(this.popup) ? this.popup.viewModel.handleViewClick(p27) : p27.async(async () => {
          await this.setupPopup(), m13(this.popup) && !this.destroyed && this.ready && this.popupEnabled && this.popup.viewModel.handleViewClick(p27);
        }));
      }, _3.WIDGET)]), w(() => this.ready && this.popupEnabled && !this.updating).then(() => {
        import("./Popup-UGZHQY4Z.js");
      });
    }
    destroy() {
      this.destroyed || this.closePopup();
    }
    async openPopup(p27) {
      if (m13(this.popup)) return this.popup.open(p27);
      try {
        if (await this.setupPopup(), !this.popup) return void n.getLogger(this).error(new s("view:null-popup", "Popup is null and can't be opened"));
        this.popup.open(p27);
      } catch {
      }
    }
    closePopup() {
      var _a;
      (_a = this._popupSetupTask) == null ? void 0 : _a.abort(), m13(this.popup) && this.popup.close();
    }
    async fetchPopupFeatures(p27, e25) {
      return await this.when(), this._popupHitsToFeatures(await this._getPopupHits(p27, e25), e25);
    }
    async setupPopup() {
      var _a;
      if ((_a = this._popupSetupTask) == null ? void 0 : _a.abort(), this.popup && !m13(this.popup)) return this._popupSetupTask = d2(async (p27) => {
        const { default: e25 } = await import("./Popup-UGZHQY4Z.js");
        if (s2(p27), !this.popup || m13(this.popup)) return;
        const t29 = this.popup;
        delete t29.open, delete t29.close, this.popup = new e25(t29);
      }), this._popupSetupTask.promise;
    }
    async _popupHitsToFeatures({ location: p27, hits: e25 }, t29) {
      const o32 = [], i22 = [];
      let a23 = false;
      const u17 = E(t29, has("popup-view-fetch-timeout") ?? P3), n33 = (p28) => {
        const e26 = new y2(p28);
        return i22.push(e26), o32.push(e26.promise), e26;
      }, c26 = (p28) => {
        const e26 = i22.at(-1);
        return e26 && e26.layerView === p28 && !a23 ? e26 : n33(p28);
      };
      for (const s28 of e25) if ("graphic" in s28) {
        c26(s28.layerView).graphics.push(s28.graphic), a23 = false;
      } else o32.push(s28.layerView.fetchPopupFeaturesAtLocation(s28.mapPoint, u17)), a23 = true;
      i22.map((p28) => p28.resolve(u17));
      const h20 = g(o32).then((p28) => p28.filter((p29) => !!p29).flat());
      return { pendingFeatures: o32, allGraphicsPromise: h20, location: p27 };
    }
    async _getPopupHits(p27, e25) {
      const { hits: t29, location: o32 } = await this.popupHitTest(p27);
      s2(e25);
      const s28 = [];
      for (const i22 of t29) if ("graphic" in i22) {
        if (this._isValidPopupGraphic(i22.graphic, e25)) {
          const p28 = this._isValidPopupGraphicsLayerView(i22.layerView) ? i22.layerView : void 0;
          s28.push({ graphic: i22.graphic, layerView: p28 });
        }
      } else this._isValidPopupLocationLayerView(i22.layerView) && s28.push({ mapPoint: i22.mapPoint, layerView: i22.layerView });
      return { hits: s28, location: o32 };
    }
    _isValidPopupGraphic(p27, e25) {
      return p27 && !!p27.getEffectivePopupTemplate(e25 == null ? void 0 : e25.defaultPopupTemplateEnabled);
    }
    _isValidPopupGraphicsLayerView(p27) {
      return !p27 || (!("layer" in p27) || !p27.suspended) && "fetchPopupFeaturesFromGraphics" in p27;
    }
    _isValidPopupLocationLayerView(p27) {
      return (!("layer" in p27) || !p27.suspended) && "fetchPopupFeaturesAtLocation" in p27;
    }
  };
  return r([m2()], w11.prototype, "popup", void 0), r([m2()], w11.prototype, "popupEnabled", void 0), w11 = r([a("esri.views.PopupView")], w11), w11;
};
var y2 = class {
  constructor(p27) {
    this.layerView = p27, this._resolver = L(), this.graphics = [];
  }
  get promise() {
    return this._resolver.promise;
  }
  resolve(p27) {
    const { layerView: e25, graphics: t29, _resolver: o32 } = this;
    if (!e25) return o32.resolve(t29), o32.promise;
    let i22;
    return e25.fetchPopupFeaturesFromGraphics(t29, p27).catch((p28) => (i22 = p28, null)).then((p28) => {
      p28 ? o32.resolve(p28) : o32.reject(i22);
    }), o32.promise;
  }
};
var P3 = 5e3;

// node_modules/@arcgis/core/support/AnalysesCollection.js
var t12 = class extends n14 {
  constructor(e25) {
    super(e25), this.addHandles(this.on("before-add", (e26) => {
      null != e26.item && e26.item.parent === this.owner && (n.getLogger(this).warn("Analysis inside the collection must be unique. Not adding this element again."), e26.preventDefault());
    }));
  }
  _own(e25) {
    e25.parent = this.owner;
  }
  _release(e25) {
    e25.parent = null;
  }
};
t12 = r([a("esri.support.AnalysesCollection")], t12);

// node_modules/@arcgis/core/views/BasemapView.js
var n17 = class extends b2 {
  constructor(e25) {
    super(e25), this.view = null, this.baseLayerViews = new V(), this.referenceLayerViews = new V(), this._loadingHandle = d3(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.basemap;
    }, (e26) => {
      e26 && e26.load().catch(() => {
      });
    }, P);
  }
  destroy() {
    this._set("view", null), this._loadingHandle && (this._loadingHandle.remove(), this._loadingHandle = null);
    for (const e25 of this.baseLayerViews) e25.destroy();
    this.baseLayerViews.length = 0;
    for (const e25 of this.referenceLayerViews) e25.destroy();
    this.referenceLayerViews.length = 0;
  }
  get suspended() {
    return !this.view || this.view.suspended;
  }
  get updating() {
    var _a, _b, _c;
    if ((_a = this.view) == null ? void 0 : _a.suspended) return false;
    const e25 = (_c = (_b = this.view) == null ? void 0 : _b.map) == null ? void 0 : _c.basemap;
    return !!e25 && (!!e25.loaded && (this.baseLayerViews.some((e26) => e26.updating) || this.referenceLayerViews.some((e26) => e26.updating)));
  }
};
r([m2({ constructOnly: true })], n17.prototype, "view", void 0), r([m2({ readOnly: true })], n17.prototype, "baseLayerViews", void 0), r([m2({ readOnly: true })], n17.prototype, "referenceLayerViews", void 0), r([m2({ readOnly: true })], n17.prototype, "suspended", null), r([m2({ type: Boolean, readOnly: true })], n17.prototype, "updating", null), n17 = r([a("esri.views.BasemapView")], n17);
var p5 = n17;

// node_modules/@arcgis/core/views/LayerViewManager.js
function V2(e25) {
  return "tryRecycleWith" in e25;
}
function v6(e25) {
  return null != e25 && "object" == typeof e25 && "layerViews" in e25;
}
var L3 = class {
  constructor(e25, r30, t29) {
    this.layer = e25, this.view = r30, this.layerViewImporter = t29, this._controller = new AbortController(), this._deferred = L(), this._started = false, this.done = false, this.promise = this._deferred.promise, m(this._controller.signal, () => {
      const r31 = new s("cancelled:layerview-create", "layerview creation cancelled", { layer: e25 });
      this._deferred.reject(r31);
    });
  }
  tryRecycle(e25) {
    if (!this.done || !this.layerView || !V2(this.layerView)) return null;
    const r30 = this.layer.type, i22 = this._controller.signal;
    for (let t29 = 0; t29 < e25.length; t29++) {
      const s28 = e25[t29];
      if (s28.type !== r30) continue;
      const a22 = this.layerView.tryRecycleWith(s28, { signal: i22 });
      if (a22) {
        e25.splice(t29, 1), this.layer = s28;
        const r31 = this.layerView, i23 = r31.view;
        return this.promise = Promise.race([a22.then(() => (s2(this._controller.signal), s28.emit("layerview-destroy", { view: i23, layerView: r31 }), i23.emit("layerview-destroy", { view: i23, layerView: r31 }), s28.emit("layerview-create", { view: i23, layerView: r31 }), i23.emit("layerview-create", { view: i23, layerView: r31 }), r31)), new Promise((e26, r32) => m(this._controller.signal, () => r32(u2())))]), this.promise;
      }
    }
    return null;
  }
  destroy() {
    this._controller.abort();
    const { layerView: e25 } = this;
    if (e25) {
      const { layer: r30, view: i22 } = this;
      r30.emit("layerview-destroy", { view: i22, layerView: e25 }), i22.emit("layerview-destroy", { layer: r30, layerView: e25 });
    }
    this.done = true, this.layer = null, this.layerView = null, this.view = null, this.layerViewImporter = null, this._map = null;
  }
  async start() {
    var _a, _b;
    if (this._started) return;
    this._started = true;
    const { _controller: { signal: e25 }, layer: r30, view: t29 } = this;
    this._map = t29.map;
    try {
      let o32, l21;
      if (await r30.load({ signal: e25 }), r30.prefetchResources && await r30.prefetchResources({ signal: e25 }), C3(r30)) o32 = await r30.createLayerView(t29, { signal: e25 });
      else {
        if (!this.layerViewImporter.hasLayerViewModule(r30)) throw new s("layer:view-not-supported", "No layerview implementation was found");
        const s28 = await this.layerViewImporter.importLayerView(r30);
        s2(e25), o32 = "default" in s28 ? new s28.default({ layer: r30, view: t29 }) : new s28({ layer: r30, view: t29 });
      }
      const n33 = () => {
        l21 = l(l21), o32.destroyed || o32.destroy(), o32.layer = null, o32.parent = null, o32.view = null, this.done = true;
      };
      l21 = m(e25, n33), s2(e25);
      try {
        await o32.when();
      } catch (s28) {
        throw n33(), s28;
      }
      const c26 = (_b = (_a = this._map) == null ? void 0 : _a.allLayers) == null ? void 0 : _b.includes(r30);
      if (!c26) return n33(), void this._deferred.reject(new s("view:no-layerview-for-layer", "The layer has been removed from the map", { layer: r30 }));
      this.layerView = o32, r30.emit("layerview-create", { view: t29, layerView: o32 }), t29.emit("layerview-create", { layer: r30, layerView: o32 }), this.done = true, this._deferred.resolve(o32);
    } catch (s28) {
      r30.emit("layerview-create-error", { view: t29, error: s28 }), t29.emit("layerview-create-error", { layer: r30, error: s28 }), this.done = true, this._deferred.reject(new s("layerview:create-error", "layerview creation failed", { layer: r30, error: s28 }));
    }
  }
};
var M5 = class extends b2 {
  constructor(e25) {
    super(e25), this._layerLayerViewInfoMap = /* @__PURE__ */ new Map(), this._recyclingInfoMap = /* @__PURE__ */ new Map(), this._watchUpdatingTracking = new h6(), this.supportsGround = true, this._preloadLayerViewModules = () => {
      var _a;
      const e26 = (_a = this.view.map) == null ? void 0 : _a.allLayers;
      if (e26) for (const r30 of e26) this.layerViewImporter.hasLayerViewModule(r30) && this.layerViewImporter.importLayerView(r30);
    }, this._reschedule = () => this.destroyed ? Promise.reject() : (null == this._workPromise && (this._workPromise = L(), this._workPromise.promise.catch(() => {
    })), this.removeHandles("reschedule"), this.addHandles(v(this._doWork), "reschedule"), this._workPromise.promise), this._doWork = () => {
      var _a, _b, _c;
      if (this.destroyed) return;
      const e26 = this.view.map;
      if (this._map !== e26 && (this.clear(), this._map = e26), null == this._workPromise) return void this.notifyChange("updating");
      this.removeHandles("reschedule"), this.removeHandles("collection-change");
      const r30 = /* @__PURE__ */ new Set(), i22 = [], t29 = this.view.ready, s28 = (e27) => {
        if (null != e27) {
          for (const a23 of e27) if (a23) {
            r30.add(a23);
            const e28 = this._layerLayerViewInfoMap.get(a23);
            e28 && t29 ? e28.start() : e28 || this._recyclingInfoMap.has(a23) || i22.push(a23), "layers" in a23 && a23.layers && s28(a23.layers);
          }
        }
      };
      for (const o32 of this._rootCollectionNames) s28(o2(this, o32));
      for (const [o32, l21] of this._layerLayerViewInfoMap) if (!r30.has(o32)) {
        this._layerLayerViewInfoMap.delete(l21.layer);
        const e27 = l21.tryRecycle(i22);
        e27 ? (this.notifyChange("updating"), this._recyclingInfoMap.set(l21.layer, l21), e27.then(() => {
          this.notifyChange("updating"), this._recyclingInfoMap.delete(l21.layer), this._layerLayerViewInfoMap.set(l21.layer, l21), this._reschedule();
        }).catch(() => {
          this.notifyChange("updating"), this._recyclingInfoMap.delete(l21.layer), l21.destroy(), this._reschedule();
        })) : l21.destroy();
      }
      for (const [o32, l21] of this._recyclingInfoMap) r30.has(o32) || (this.notifyChange("updating"), this._recyclingInfoMap.delete(l21.layer), l21.destroy());
      for (const o32 of i22) this._createLayerView(o32);
      this._refreshCollections();
      const a22 = [(_a = e26 == null ? void 0 : e26.ground) == null ? void 0 : _a.layers, (_b = e26 == null ? void 0 : e26.basemap) == null ? void 0 : _b.baseLayers, (_c = e26 == null ? void 0 : e26.basemap) == null ? void 0 : _c.referenceLayers, e26 == null ? void 0 : e26.layers].filter((e27) => !!e27);
      r30.forEach((e27) => "layers" in e27 && a22.push(e27.layers)), this.addHandles(a22.map((e27) => this._watchUpdatingTracking.addOnCollectionChange(() => e27, this._reschedule)), "collection-change"), this._workPromise.resolve(), this._workPromise = null;
    };
  }
  initialize() {
    this.addHandles([v2(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.map) == null ? void 0 : _b.allLayers;
    }, "change", this._preloadLayerViewModules, { onListenerAdd: this._preloadLayerViewModules }), d3(() => {
      const e25 = this.view, r30 = e25 == null ? void 0 : e25.map;
      return [r30 == null ? void 0 : r30.basemap, r30 == null ? void 0 : r30.ground, r30 == null ? void 0 : r30.layers, e25 == null ? void 0 : e25.ready];
    }, () => this._reschedule(), A3)]), this._preloadLayerViewModules(), this._reschedule();
  }
  destroy() {
    this.clear(), n13(this._recyclingInfoMap), n13(this._layerLayerViewInfoMap), this._watchUpdatingTracking.destroy(), this._map = null, null != this._workPromise && (this._workPromise.reject(u2()), this._workPromise = null);
  }
  get _layersToLayerViews() {
    const e25 = [["view.map.basemap.baseLayers", "view.basemapView.baseLayerViews"], ["view.map.layers", "view.layerViews"], ["view.map.basemap.referenceLayers", "view.basemapView.referenceLayerViews"]];
    return this.supportsGround && e25.push(["view.map.ground.layers", "view.groundView.layerViews"]), new Map(e25);
  }
  get _rootCollectionNames() {
    return Array.from(this._layersToLayerViews.keys());
  }
  get updating() {
    return null != this._workPromise || this._watchUpdatingTracking.updating || n3(this._layerLayerViewInfoMap, (e25) => !e25.done) || this._recyclingInfoMap.size > 0;
  }
  get updatingRemaining() {
    let e25 = 0;
    for (const r30 of this._layerLayerViewInfoMap.values()) r30.done || ++e25;
    return e25;
  }
  clear() {
    this.destroyed || (n13(this._layerLayerViewInfoMap), this._refreshCollections());
  }
  async whenLayerView(e25) {
    if (await this._reschedule(), !this._layerLayerViewInfoMap.has(e25)) {
      if (this._recyclingInfoMap.has(e25)) return this._recyclingInfoMap.get(e25).promise;
      throw new s("view:no-layerview-for-layer", "No layerview has been found for the layer", { layer: e25 });
    }
    return this._layerLayerViewInfoMap.get(e25).promise;
  }
  isCreatingLayerViewsForLayer(e25, r30) {
    var _a;
    this.commitProperty("updatingRemaining");
    const i22 = this._layerLayerViewInfoMap.get(e25);
    if (!(i22 == null ? void 0 : i22.done)) return true;
    const t29 = i22.layerView;
    return !(!t29 || !r30 || t29.parent === r30) || !!(i22.done && t29 && "layers" in e25 && ((_a = e25.layers) == null ? void 0 : _a.length)) && e25.layers.some((e26) => this.isCreatingLayerViewsForLayer(e26, t29));
  }
  _refreshCollections() {
    for (const [e25, r30] of this._layersToLayerViews) this._populateLayerViewsOwners(o2(this, e25), o2(this, r30), this.view);
    this.notifyChange("updating"), this.notifyChange("updatingRemaining");
  }
  _populateLayerViewsOwners(e25, r30, i22) {
    if (!e25 || !r30) return void (r30 && r30.removeAll());
    let t29 = 0;
    for (const s28 of e25) {
      const e26 = this._layerLayerViewInfoMap.get(s28);
      if (!(e26 == null ? void 0 : e26.layerView)) continue;
      const a22 = e26.layerView;
      a22.layer = s28, a22.parent = i22, r30.at(t29) !== a22 && r30.splice(t29, 0, a22), "layers" in s28 && v6(a22) && this._populateLayerViewsOwners(s28.layers, a22.layerViews, a22), t29 += 1;
    }
    t29 < r30.length && r30.splice(t29, r30.length);
  }
  _createLayerView(e25) {
    e25.load().catch(() => {
    }), this.layerViewImporter.hasLayerViewModule(e25) && this.layerViewImporter.importLayerView(e25);
    const r30 = new L3(e25, this.view, this.layerViewImporter);
    r30.promise.then(() => this._refreshCollections(), (r31) => {
      r31 && (b(r31) || "cancelled:layerview-create" === r31.name) || n.getLogger(this).error(`Failed to create layerview for layer title:'${e25.title ?? "no title"}', id:'${e25.id ?? "no id"}' of type '${e25.type}'.`, { layer: e25, error: r31 }), this._refreshCollections();
    }), this._layerLayerViewInfoMap.set(e25, r30), this.view.ready && r30.start(), this.notifyChange("updating"), this.notifyChange("updatingRemaining");
  }
};
r([m2()], M5.prototype, "_workPromise", void 0), r([m2({ readOnly: true })], M5.prototype, "_watchUpdatingTracking", void 0), r([m2({ readOnly: true })], M5.prototype, "_layersToLayerViews", null), r([m2({ readOnly: true })], M5.prototype, "_rootCollectionNames", null), r([m2()], M5.prototype, "layerViewImporter", void 0), r([m2()], M5.prototype, "supportsGround", void 0), r([m2({ readOnly: true })], M5.prototype, "updating", null), r([m2({ readOnly: true })], M5.prototype, "updatingRemaining", null), r([m2({ constructOnly: true })], M5.prototype, "view", void 0), M5 = r([a("esri.views.LayerViewManager")], M5);
var I3 = M5;
function C3(e25) {
  return "createLayerView" in e25 && null != e25.createLayerView;
}

// node_modules/@arcgis/core/views/Magnifier.js
var i9 = class extends b2 {
  constructor(o32) {
    super(o32), this.factor = 1.5, this.offset = c5(0, 0), this.position = null, this.size = 120, this.maskUrl = null, this.maskEnabled = true, this.overlayUrl = null, this.overlayEnabled = true, this.visible = true;
  }
  get version() {
    return this.commitProperty("factor"), this.commitProperty("offset"), this.commitProperty("position"), this.commitProperty("visible"), this.commitProperty("size"), this.commitProperty("maskUrl"), this.commitProperty("maskEnabled"), this.commitProperty("overlayUrl"), this.commitProperty("overlayEnabled"), (this._get("version") || 0) + 1;
  }
};
r([m2({ type: Number })], i9.prototype, "factor", void 0), r([m2({ nonNullable: true })], i9.prototype, "offset", void 0), r([m2()], i9.prototype, "position", void 0), r([m2({ type: Number, range: { min: 0 } })], i9.prototype, "size", void 0), r([m2()], i9.prototype, "maskUrl", void 0), r([m2()], i9.prototype, "maskEnabled", void 0), r([m2()], i9.prototype, "overlayUrl", void 0), r([m2()], i9.prototype, "overlayEnabled", void 0), r([m2({ readOnly: true })], i9.prototype, "version", null), r([m2({ type: Boolean })], i9.prototype, "visible", void 0), i9 = r([a("esri.views.Magnifier")], i9);
var p6 = i9;

// node_modules/@arcgis/core/views/support/selectionUtils.js
function e12(e25) {
  return !!(null != e25 && "object" == typeof e25 && "createQuery" in e25 && e25.createQuery && "on" in e25 && e25.on);
}

// node_modules/@arcgis/core/views/SelectionManager.js
var y3 = class extends o5.EventedAccessor {
  constructor(e25) {
    super(e25), this._selectionMap = new s10(), this._sources = new V(), this._trashCan = [], this._layerEditHandles = new V(), this._vizTaskId = 0, this.showHighlight = true;
  }
  initialize() {
    this.addHandles([d3(() => [this.view, this.showHighlight], () => this._refreshVisualization()), v2(() => this.sources, "change", (e26) => {
      const t29 = this._selectionMap;
      for (const s28 of e26.removed) t29.delete(s28);
      this._refreshListeners(), this._refreshVisualization();
    }, { onListenerAdd: () => this._refreshListeners() })]);
    const e25 = new V();
    this.view.when().then(() => {
      this.view.map && (this.view.map.allLayers.flatten((e26) => "sublayers" in e26 && e26.sublayers ? e26.sublayers : null).forEach((t29) => {
        (e12(t29) && !c4(t29) || l2(t29)) && e25.add(t29);
      }), this.sources = e25);
    });
  }
  destroy() {
    this._layerEditHandles.drain(l);
  }
  get selections() {
    return Array.from(this._selectionMap.entries()).map((e25) => {
      const [t29, s28] = e25;
      return { layer: t29, selection: [...s28.selection] };
    });
  }
  get count() {
    let e25 = 0;
    for (const t29 of this._selectionMap.values()) e25 += t29.selection.length;
    return e25;
  }
  get hasSelection() {
    return this.count > 0;
  }
  get sources() {
    return this._sources;
  }
  set sources(e25) {
    n8(e25, this._sources);
  }
  async getSelectedFeatures(e25, t29 = {}, s28 = "layerView") {
    const { view: i22, selections: o32 } = this, n33 = (void 0 !== e25 ? o32.filter((t30) => e25.includes(t30.layer)) : o32).filter((e26) => e26.selection.length > 0).map(async (e26) => {
      const { layer: o33, selection: n34 } = e26, l21 = l2(o33) ? o33.parent : o33;
      if (null == l21 || !S3(l21)) return null;
      if ("layer" === s28) return M6(l21, n34, t29);
      if (v7(l21)) return null;
      const r30 = await i22.whenLayerView(l21).catch(() => null);
      return r30 ? M6(r30, n34, t29) : null;
    });
    return (await Promise.all(n33)).filter((e26) => null != e26);
  }
  updateSelection(e25) {
    const s28 = /* @__PURE__ */ new Map();
    for (const [t29, n33] of this._selectionMap) s28.set(t29, [...n33.selection]);
    let i22 = false;
    const o32 = e25.current.concat(e25.added);
    for (const t29 of o32) {
      const e26 = t29.sourceLayer, o33 = t29.getObjectId();
      if (this.sources.includes(e26) && (e12(e26) || l2(e26)) && null !== o33) {
        const t30 = r4(s28, e26, () => []);
        t30.includes(o33) || (t30.push(o33), i22 = true);
      }
    }
    for (const t29 of e25.removed) {
      const e26 = t29.sourceLayer, o33 = t29.getObjectId();
      if (this.sources.includes(e26) && (e12(e26) || l2(e26)) && null !== o33) {
        const t30 = s28.get(e26), n33 = t30 == null ? void 0 : t30.indexOf(o33);
        void 0 !== n33 && n33 >= 0 && (t30 == null ? void 0 : t30.splice(n33, 1), i22 = true);
      }
    }
    if (i22) {
      const { _selectionMap: e26, _trashCan: i23 } = this, o33 = [];
      for (const [n33, l21] of s28) {
        const s29 = e26.get(n33);
        void 0 !== s29 && i23.push(s29), e26.set(n33, { selection: l21 }), o33.push({ layer: n33, selection: l21, ...h(void 0 !== s29 ? s29.selection : [], l21) });
      }
      this._onSelectionChange(o33);
    }
  }
  setSelection(e25, t29) {
    this._setSelection(e25, t29);
  }
  getSelection(e25) {
    const t29 = this._selectionMap.get(e25);
    return t29 == null ? void 0 : t29.selection;
  }
  appendToSelection(e25, t29) {
    const s28 = this._selectionMap.get(e25), i22 = void 0 !== s28 ? [...s28.selection] : [];
    for (const o32 of t29) i22.includes(o32) || i22.push(o32);
    this._setSelection(e25, i22);
  }
  removeFromSelection(e25, t29) {
    const s28 = this._selectionMap.get(e25);
    if (!s28) return;
    const i22 = [];
    for (const o32 of s28.selection) t29.includes(o32) || i22.push(o32);
    this._setSelection(e25, i22);
  }
  toggleInSelection(e25, t29) {
    const s28 = this._selectionMap.get(e25);
    if (!s28 || 0 === s28.selection.length) return void this._setSelection(e25, t29);
    const i22 = new Set(s28.selection), o32 = new Set(t29), n33 = c2(i22, o32);
    this._setSelection(e25, Array.from(n33));
  }
  clear() {
    const e25 = this._selectionMap.values();
    this._trashCan.push(...e25);
    const t29 = [];
    for (const [s28, i22] of this._selectionMap.entries()) t29.push({ layer: s28, added: [], removed: [...i22.selection], selection: [] });
    this._selectionMap.clear(), this._onSelectionChange(t29);
  }
  _onSelectionChange(e25) {
    this._refreshVisualization(), this.emit("selection-change", { view: this.view, changes: e25 });
  }
  _refreshVisualization() {
    var _a;
    if (null == this.view || null == this.sources) return;
    for (this._vizTaskId++; this._trashCan.length > 0; ) {
      const e26 = this._trashCan.pop();
      (_a = e26 == null ? void 0 : e26.highlightHandle) == null ? void 0 : _a.remove();
    }
    const { sources: e25, view: t29, _selectionMap: s28, showHighlight: i22 } = this, o32 = this._vizTaskId;
    for (const n33 of e25) {
      const e26 = s28.get(n33), l21 = l2(n33) ? n33.parent : n33;
      if (null != l21 && S3(l21)) {
        if (v7(l21)) continue;
        t29.whenLayerView(l21).then((t30) => {
          var _a2;
          (_a2 = e26 == null ? void 0 : e26.highlightHandle) == null ? void 0 : _a2.remove(), null != e26 && i22 && o32 === this._vizTaskId && "highlight" in t30 && "function" == typeof t30.highlight && e26.selection.length > 0 && (e26.highlightHandle = t30.highlight(e26.selection, "selection"));
        }).catch(() => {
          var _a2;
          (_a2 = e26 == null ? void 0 : e26.highlightHandle) == null ? void 0 : _a2.remove();
        });
      }
    }
  }
  _refreshListeners() {
    this._layerEditHandles.drain(l);
    for (const e25 of this.sources) {
      const t29 = l2(e25) ? e25.parent : e25;
      if (null != t29 && e12(t29)) {
        const s28 = t29.on("edits", (t30) => {
          this._handleEditChanges(t30, e25);
        });
        this._layerEditHandles.push(s28);
      }
    }
  }
  _handleEditChanges(e25, t29) {
    if (void 0 !== e25.deletedFeatures && e25.deletedFeatures.length > 0 && this._selectionMap.has(t29)) {
      const i22 = e25.deletedFeatures.filter((e26) => null == e26.error).map((e26) => e26.objectId).filter(F);
      this.removeFromSelection(t29, i22);
    }
  }
  _setSelection(e25, s28) {
    if (!this.sources.includes(e25)) throw new Error(`Cannot set selection on layer ${e25.title} because it is not in 'sources'`);
    const i22 = this._selectionMap.get(e25);
    if (void 0 === i22 || !j2(i22, { selection: s28 })) {
      void 0 !== i22 && this._trashCan.push(i22), this._selectionMap.set(e25, { selection: [...s28] });
      const o32 = { layer: e25, selection: [...s28], ...h(void 0 !== i22 ? i22.selection : [], s28) };
      this._onSelectionChange([o32]);
    }
  }
};
r([m2({ readOnly: true, nonNullable: true })], y3.prototype, "selections", null), r([m2({ readOnly: true, nonNullable: true })], y3.prototype, "count", null), r([m2({ constructOnly: true, nonNullable: true })], y3.prototype, "view", void 0), r([m2({ readOnly: true, nonNullable: true })], y3.prototype, "hasSelection", null), r([m2()], y3.prototype, "showHighlight", void 0), r([m2()], y3.prototype, "sources", null), y3 = r([a("esri.views.SelectionManager")], y3);
var v7 = (e25) => {
  var _a;
  return l2(e25) ? true === ((_a = e25.parent) == null ? void 0 : _a.isTable) : e25.isTable;
};
var w6 = (e25) => void 0 !== e25.layer;
var S3 = (e25) => void 0 !== (e25 == null ? void 0 : e25.when);
var j2 = (e25, t29) => {
  if (null == e25 && null == t29) return true;
  if (null != e25 && null == t29 || null == e25 && null != t29) return false;
  if (null != e25 && null != t29 && null != e25.selection && null != t29.selection) {
    const s28 = [...e25.selection], i22 = [...t29.selection];
    if (s28.length !== i22.length) return false;
    s28.sort(), i22.sort();
    for (let e26 = 0; e26 < s28.length; e26++) if (s28[e26] !== i22[e26]) return false;
  }
  return true;
};
var M6 = async (e25, t29, s28 = {}) => {
  let i22;
  if (w6(e25)) {
    const o32 = e25;
    i22 = void 0 === o32 ? null : await o32.queryFeatures(new b3({ ...s28, objectIds: t29 })).then((t30) => ({ data: t30, layer: e25.layer }));
  } else {
    const o32 = e25;
    i22 = void 0 === o32 ? null : await o32.queryFeatures(new b3({ ...s28, objectIds: t29 })).then((e26) => ({ data: e26, layer: o32 }));
  }
  return i22;
};
var b4 = y3;

// node_modules/@arcgis/core/views/Theme.js
var p7 = class extends i3(b2) {
  constructor(o32) {
    super(o32), this.accentColor = new l3([255, 127, 0]), this.textColor = new l3([255, 255, 255]);
  }
};
r([m2({ type: l3, nonNullable: true })], p7.prototype, "accentColor", void 0), r([m2({ type: l3, nonNullable: true })], p7.prototype, "textColor", void 0), p7 = r([a("esri.views.Theme")], p7);
var l8 = p7;

// node_modules/@arcgis/core/views/input/IViewEvents.js
var t13;
!function(t29) {
  t29[t29.Left = 0] = "Left", t29[t29.Middle = 1] = "Middle", t29[t29.Right = 2] = "Right";
}(t13 || (t13 = {}));

// node_modules/@arcgis/core/views/input/ViewEvents.js
var r16 = ["click", "double-click", "immediate-click", "immediate-double-click", "hold", "drag", "key-down", "key-up", "pointer-down", "pointer-move", "pointer-up", "pointer-drag", "mouse-wheel", "pointer-enter", "pointer-leave", "gamepad", "focus", "blur"];
var o14 = {};
function s13(t29) {
  return !!o14[t29];
}
function p8(t29) {
  for (const e25 of t29) if (!s13(e25)) return false;
  return true;
}
r16.forEach((t29) => {
  o14[t29] = true;
});
var c9 = class {
  constructor(t29) {
    this._handlers = /* @__PURE__ */ new Map(), this._counter = 0, this._handlerCounts = /* @__PURE__ */ new Map(), this.view = t29, this.inputManager = null;
  }
  connect(t29) {
    t29 && this.disconnect(), this.inputManager = t29, this._handlers.forEach(({ handler: t30, priority: e25 }, n33) => {
      var _a;
      return (_a = this.inputManager) == null ? void 0 : _a.installHandlers(n33, [t30], e25);
    });
  }
  disconnect() {
    this.inputManager && this._handlers.forEach((t29, e25) => {
      var _a;
      return (_a = this.inputManager) == null ? void 0 : _a.uninstallHandlers(e25);
    }), this.inputManager = null;
  }
  destroy() {
    this.disconnect(), this._handlers.clear(), this.view = null;
  }
  on(e25, n33, a22, r30) {
    const o32 = Array.isArray(e25) ? e25 : e25.split(",");
    if (!p8(o32)) return o32.some(s13) && console.error("Error: registering input events and other events on the view at the same time is not supported."), null;
    let c26, u17;
    Array.isArray(n33) ? u17 = n33 : (c26 = n33, u17 = []), "function" == typeof a22 ? c26 = a22 : r30 = a22, r30 = null != r30 ? r30 : _3.DEFAULT;
    const m26 = this._createUniqueGroupName(), d21 = new l9(this.view, o32, u17, c26);
    this._handlers.set(m26, { handler: d21, priority: r30 });
    for (const t29 of o32) {
      const e26 = this._handlerCounts.get(t29) || 0;
      this._handlerCounts.set(t29, e26 + 1);
    }
    return this.inputManager && this.inputManager.installHandlers(m26, [d21], r30), e2(() => this._removeHandler(m26, o32));
  }
  hasHandler(t29) {
    return !!this._handlerCounts.get(t29);
  }
  _removeHandler(t29, e25) {
    if (this._handlers.has(t29)) {
      this._handlers.delete(t29);
      for (const t30 of e25) {
        const e26 = this._handlerCounts.get(t30);
        void 0 === e26 || (1 === e26 ? this._handlerCounts.delete(t30) : this._handlerCounts.set(t30, e26 - 1));
      }
    }
    this.inputManager && this.inputManager.uninstallHandlers(t29);
  }
  _createUniqueGroupName() {
    return this._counter += 1, `viewEvents_${this._counter}`;
  }
};
var l9 = class extends t9 {
  constructor(t29, e25, n33, a22) {
    super(true), this._latestDragStart = void 0, this.view = t29;
    for (const i22 of e25) switch (i22) {
      case "click":
        this.registerIncoming("click", n33, (e26) => a22(d8(t29, e26)));
        break;
      case "double-click":
        this.registerIncoming("double-click", n33, (e26) => a22(g7(t29, e26)));
        break;
      case "immediate-click":
        this.registerIncoming("immediate-click", n33, (e26) => a22(y4(t29, e26)));
        break;
      case "immediate-double-click":
        this.registerIncoming("immediate-double-click", n33, (e26) => a22(v8(t29, e26)));
        break;
      case "hold":
        this.registerIncoming("hold", n33, (e26) => a22(h9(t29, e26)));
        break;
      case "drag":
        this.registerIncoming("drag", n33, (t30) => {
          const e26 = this._wrapDrag(t30);
          e26 && a22(e26);
        });
        break;
      case "key-down":
        this.registerIncoming("key-down", n33, (t30) => a22(f6(t30)));
        break;
      case "key-up":
        this.registerIncoming("key-up", n33, (t30) => a22(k(t30)));
        break;
      case "pointer-down":
        this.registerIncoming("pointer-down", n33, (t30) => a22(I4(t30, "pointer-down")));
        break;
      case "pointer-move":
        this.registerIncoming("pointer-move", n33, (t30) => a22(I4(t30, "pointer-move")));
        break;
      case "pointer-up":
        this.registerIncoming("pointer-up", n33, (t30) => a22(I4(t30, "pointer-up")));
        break;
      case "pointer-drag":
        this.registerIncoming("pointer-drag", n33, (t30) => a22(D(t30)));
        break;
      case "mouse-wheel":
        this.registerIncoming("mouse-wheel", n33, (t30) => a22(P4(t30)));
        break;
      case "pointer-enter":
        this.registerIncoming("pointer-enter", n33, (t30) => a22(I4(t30, "pointer-enter")));
        break;
      case "pointer-leave":
        this.registerIncoming("pointer-leave", n33, (t30) => a22(I4(t30, "pointer-leave")));
        break;
      case "gamepad":
        this.registerIncoming("gamepad", n33, (t30) => {
          a22(_6(t30));
        });
        break;
      case "focus":
        this.registerIncoming("focus", n33, (t30) => {
          a22(u7(t30));
        });
        break;
      case "blur":
        this.registerIncoming("blur", n33, (t30) => {
          a22(m14(t30));
        });
    }
  }
  _wrapDrag(t29) {
    const n33 = t29.data, { x: a22, y: i22 } = n33.center, { action: r30, pointerType: o32, button: s28 } = n33;
    if ("start" === r30 && (this._latestDragStart = n33), !this._latestDragStart) return;
    const p27 = n33.pointer.native, c26 = n33.buttons, { cancelable: l21, timestamp: u17 } = t29, m26 = { x: this._latestDragStart.center.x, y: this._latestDragStart.center.y };
    return "end" === r30 && (this._latestDragStart = void 0), { type: "drag", action: r30, x: a22, y: i22, origin: m26, pointerType: o32, button: s28, buttons: c26, radius: n33.radius, angle: M2(n33.angle), native: p27, timestamp: u17, cancelable: l21, stopPropagation: () => t29.stopPropagation(), async: (e25) => t29.async(e25), preventDefault: () => t29.preventDefault() };
  }
};
function u7(t29) {
  return { type: "focus", timestamp: t29.timestamp, native: t29.data.native, cancelable: t29.cancelable, stopPropagation: () => t29.stopPropagation(), async: (e25) => t29.async(e25), preventDefault: () => t29.preventDefault() };
}
function m14(t29) {
  return { type: "blur", timestamp: t29.timestamp, native: t29.data.native, cancelable: t29.cancelable, stopPropagation: () => t29.stopPropagation(), async: (e25) => t29.async(e25), preventDefault: () => t29.preventDefault() };
}
function d8(t29, e25) {
  const { pointerType: a22, button: i22, buttons: r30, x: o32, y: s28, native: p27, eventId: c26 } = e25.data, { cancelable: l21, timestamp: u17 } = e25;
  return { type: "click", pointerType: a22, button: i22, buttons: r30, x: o32, y: s28, native: p27, timestamp: u17, screenPoint: c5(o32, s28), mapPoint: b5(t29, o32, s28), eventId: c26, cancelable: l21, stopPropagation: () => e25.stopPropagation(), async: (t30) => e25.async(t30), preventDefault: () => e25.preventDefault() };
}
function g7(t29, e25) {
  const { pointerType: n33, button: a22, buttons: i22, x: r30, y: o32, native: s28, eventId: p27 } = e25.data, { cancelable: c26, timestamp: l21 } = e25;
  return { type: "double-click", pointerType: n33, button: a22, buttons: i22, x: r30, y: o32, native: s28, timestamp: l21, mapPoint: b5(t29, r30, o32), eventId: p27, cancelable: c26, stopPropagation: () => e25.stopPropagation(), async: (t30) => e25.async(t30), preventDefault: () => e25.preventDefault() };
}
function y4(t29, e25) {
  const { pointerType: n33, button: a22, buttons: i22, x: r30, y: o32, native: s28, eventId: p27 } = e25.data, c26 = s28.pointerId, { cancelable: l21, timestamp: u17 } = e25;
  return { type: "immediate-click", pointerId: c26, pointerType: n33, button: a22, buttons: i22, x: r30, y: o32, native: s28, timestamp: u17, mapPoint: b5(t29, r30, o32), eventId: p27, cancelable: l21, stopPropagation: () => e25.stopPropagation(), async: (t30) => e25.async(t30), preventDefault: () => e25.preventDefault() };
}
function v8(t29, e25) {
  const { pointerType: n33, button: a22, buttons: i22, x: r30, y: o32, native: s28, eventId: p27 } = e25.data, c26 = s28.pointerId, { cancelable: l21, timestamp: u17 } = e25;
  return { type: "immediate-double-click", pointerId: c26, pointerType: n33, button: a22, buttons: i22, x: r30, y: o32, native: s28, timestamp: u17, mapPoint: b5(t29, r30, o32), eventId: p27, cancelable: l21, stopPropagation: () => e25.stopPropagation(), async: (t30) => e25.async(t30), preventDefault: () => e25.preventDefault() };
}
function h9(t29, e25) {
  const { pointerType: n33, button: a22, buttons: i22, x: r30, y: o32, native: s28 } = e25.data, { cancelable: p27, timestamp: c26 } = e25;
  return { type: "hold", pointerType: n33, button: a22, buttons: i22, x: r30, y: o32, native: s28, timestamp: c26, mapPoint: b5(t29, r30, o32), cancelable: p27, stopPropagation: () => e25.stopPropagation(), async: (t30) => e25.async(t30), preventDefault: () => e25.preventDefault() };
}
function b5(t29, e25, a22) {
  return t29.toMap(c5(e25, a22), { exclude: [] });
}
function f6(t29) {
  const { key: e25, repeat: n33, native: a22 } = t29.data, { cancelable: i22, timestamp: r30 } = t29;
  return { type: "key-down", key: e25, repeat: n33, native: a22, timestamp: r30, cancelable: i22, stopPropagation: () => t29.stopPropagation(), async: (e26) => t29.async(e26), preventDefault: () => t29.preventDefault() };
}
function k(t29) {
  const { key: e25, native: n33 } = t29.data, { cancelable: a22, timestamp: i22 } = t29;
  return { type: "key-up", key: e25, native: n33, timestamp: i22, cancelable: a22, stopPropagation: () => t29.stopPropagation(), async: (e26) => t29.async(e26), preventDefault: () => t29.preventDefault() };
}
function I4(t29, e25) {
  const { x: n33, y: a22, button: i22, buttons: r30, native: o32, eventId: s28 } = t29.data, p27 = o32.pointerId, c26 = o32.pointerType, { cancelable: l21, timestamp: u17 } = t29;
  return { type: e25, x: n33, y: a22, pointerId: p27, pointerType: c26, button: i22, buttons: r30, native: o32, timestamp: u17, eventId: s28, cancelable: l21, stopPropagation: () => t29.stopPropagation(), async: (e26) => t29.async(e26), preventDefault: () => t29.preventDefault() };
}
function D(t29) {
  const { x: e25, y: n33, buttons: a22, native: i22, eventId: r30 } = t29.data.currentEvent, { button: o32 } = t29.data.startEvent, s28 = t29.data.startEvent.native.pointerId, p27 = t29.data.startEvent.native.pointerType, c26 = t29.data.action, l21 = { x: t29.data.startEvent.x, y: t29.data.startEvent.y }, { cancelable: u17, timestamp: m26 } = t29;
  return { type: "pointer-drag", x: e25, y: n33, pointerId: s28, pointerType: p27, button: o32, buttons: a22, action: c26, origin: l21, native: i22, timestamp: m26, eventId: r30, cancelable: u17, stopPropagation: () => t29.stopPropagation(), async: (e26) => t29.async(e26), preventDefault: () => t29.preventDefault() };
}
function P4(t29) {
  const { cancelable: e25, data: n33, timestamp: a22 } = t29, { x: i22, y: r30, deltaY: o32, native: s28 } = n33;
  return { type: "mouse-wheel", x: i22, y: r30, deltaY: o32, native: s28, timestamp: a22, cancelable: e25, stopPropagation: () => t29.stopPropagation(), async: (e26) => t29.async(e26), preventDefault: () => t29.preventDefault() };
}
function _6(t29) {
  const { action: e25, state: n33, device: a22 } = t29.data, { cancelable: i22, timestamp: r30 } = t29, { buttons: o32, axes: s28 } = n33;
  return { type: "gamepad", device: a22, timestamp: r30, action: e25, buttons: o32, axes: s28, cancelable: i22, stopPropagation: () => t29.stopPropagation(), async: (e26) => t29.async(e26), preventDefault: () => t29.preventDefault() };
}

// node_modules/@arcgis/core/views/interactive/interactiveToolUtils.js
function o15(t29) {
  return [t29.on("before-add", (o32) => {
    const i22 = o32.item;
    if (null == i22 || t29.includes(i22)) return n.getLogger("esri.views.interactive.interactiveToolUtils").warn("Tool is either already in the list of tools or tool is `null`. Not adding tool."), void o32.preventDefault();
    i22.onAdd();
  }), t29.on("after-remove", (e25) => {
    const t30 = e25.item;
    t30.active && (t30.view.activeTool = null), t30.destroy();
  })];
}
function i10(e25) {
  return e25.visible && null != e25.getEditableFlag && e25.getEditableFlag(o11.USER) && e25.getEditableFlag(o11.MANAGER);
}

// node_modules/@arcgis/core/views/interactive/ToolViewManagerManipulatorState.js
var i11 = class {
  constructor() {
    this._pointerLocations = /* @__PURE__ */ new Map(), this._hoveredManipulators = /* @__PURE__ */ new Map(), this._grabbedManipulators = /* @__PURE__ */ new Map(), this._draggedManipulators = /* @__PURE__ */ new Map(), this._stopDrag = false, this._externallyDragging = false, this._revertToNullActiveTool = false, this._cursor = null;
  }
  get cursor() {
    return this._cursor;
  }
  hasFocusedManipulators() {
    return this._grabbedManipulators.size > 0 || this._draggedManipulators.size > 0;
  }
  handleInputEvent(e25, o32) {
    const a22 = () => e25.stopPropagation();
    switch (e25.type) {
      case "pointer-move":
        l10(e25.pointerType) && this._pointerLocations.set(e25.pointerId, { x: e25.x, y: e25.y, pointerType: e25.pointerType });
        break;
      case "drag":
        this._grabbedManipulators.size > 0 ? this._stopDrag = true : "start" === e25.action ? this._externallyDragging = true : "end" === e25.action && (this._externallyDragging = false), this._stopDrag && (a22(), "end" === e25.action && (this._stopDrag = false));
        break;
      case "pointer-down": {
        if (!p9(e25)) break;
        const t29 = n15(e25), i22 = s14(t29, e25.pointerType, o32.forEachTool);
        if (null == i22) break;
        const n33 = i22.manipulator, l21 = i22.tool;
        null == n33 || null == l21 || !n33.interactive || n33.grabbable && n33.grabbableForEvent(e25) || !n33.grabbing || n33.dragging || this._releaseManipulatorBeforeDragging(n33, e25, o32), null != n33 && null != l21 && n33.interactive && n33.grabbable && n33.grabbableForEvent(e25) && !n33.grabbing && (this._grabbedManipulators.set(e25.pointerId, { manipulator: n33, tool: l21, start: t29, pointerType: e25.pointerType }), 1 === this._grabbedManipulators.size && null == o32.activeTool && (this._revertToNullActiveTool = true, o32.setActiveTool(i22.tool)), n33.grabbing = true, n33.events.emit("grab-changed", { action: "start", pointerType: e25.pointerType, screenPoint: t29 }), a22());
        break;
      }
      case "pointer-up":
        this._draggedManipulators.has(e25.pointerId) || this._handlePointerEnd(e25, o32);
        break;
      case "pointer-drag": {
        if (!p9(e25)) break;
        const i22 = this._grabbedManipulators.get(e25.pointerId), n33 = i22 == null ? void 0 : i22.manipulator, s28 = i22 == null ? void 0 : i22.tool;
        if (null == n33 || null == s28) break;
        const l21 = n15(e25);
        l21.x = r7(l21.x, 0, o32.view.width), l21.y = r7(l21.y, 0, o32.view.height);
        const u17 = i22.start, c26 = this._draggedManipulators.get(e25.pointerId);
        switch (e25.action) {
          case "start":
          case "update":
            "update" !== e25.action && 1 !== this._grabbedManipulators.size || (n33.dragging = true, c26 ? n33.events.emit("drag", { action: "update", start: u17, screenPoint: l21 }) : n33.events.emit("drag", { action: "start", start: u17, screenPoint: l21, pointerType: e25.pointerType }), this._draggedManipulators.set(e25.pointerId, { tool: s28, manipulator: n33, start: u17 }));
            break;
          case "end":
            n33.dragging = false, c26 && n33.events.emit("drag", { action: "end", start: u17, screenPoint: l21 }), this._draggedManipulators.delete(e25.pointerId), this._handlePointerEnd(e25, o32);
        }
        a22();
        break;
      }
      case "immediate-click": {
        const t29 = n15(e25), i22 = s14(t29, e25.pointerType, o32.forEachTool);
        if (u8(e25) || o32.forEachTool((e26) => {
          if ((null == i22 || i22.tool !== e26 || e26.automaticManipulatorSelection) && e26.manipulators) {
            let t30 = false;
            e26.manipulators.forEach(({ manipulator: e27 }) => {
              e27.selected && (e27.selected = false, t30 = true);
            }), t30 && e26.onManipulatorSelectionChanged && e26.onManipulatorSelectionChanged();
          }
        }), null == i22) break;
        const { manipulator: n33, tool: l21 } = i22;
        if (!n33.interactive) break;
        n33.selectable && l21.automaticManipulatorSelection && (n33.selected = !n33.selected, l21.onManipulatorSelectionChanged && l21.onManipulatorSelectionChanged());
        const p27 = e25.native.shiftKey;
        n33.events.emit("immediate-click", { screenPoint: t29, button: e25.button, pointerType: e25.pointerType, shiftKey: p27, stopPropagation: a22 }), c10(n33, a22);
        break;
      }
      case "click": {
        const t29 = n15(e25), i22 = s14(t29, e25.pointerType, o32.forEachTool), n33 = i22 == null ? void 0 : i22.manipulator;
        if (null == n33 || !n33.interactive) break;
        const l21 = e25.native.shiftKey;
        n33.events.emit(e25.type, { screenPoint: t29, button: e25.button, pointerType: e25.pointerType, shiftKey: l21 }), a22();
        break;
      }
      case "double-click": {
        const t29 = n15(e25), i22 = s14(t29, e25.pointerType, o32.forEachTool), n33 = null != i22 ? i22.manipulator : null;
        if (null == n33 || !n33.interactive) break;
        const l21 = e25.native.shiftKey;
        n33.events.emit("double-click", { screenPoint: t29, button: e25.button, pointerType: e25.pointerType, shiftKey: l21, stopPropagation: a22 }), c10(n33, a22);
        break;
      }
      case "immediate-double-click": {
        const t29 = n15(e25), i22 = s14(t29, e25.pointerType, o32.forEachTool), n33 = null != i22 ? i22.manipulator : null;
        if (null == n33 || !n33.interactive) break;
        const l21 = e25.native.shiftKey;
        n33.events.emit("immediate-double-click", { screenPoint: t29, button: e25.button, pointerType: e25.pointerType, shiftKey: l21, stopPropagation: a22 }), "mouse" === e25.pointerType && c10(n33, a22);
        break;
      }
    }
    this._onFocusChange(o32.forEachTool);
  }
  _releaseManipulatorBeforeDragging(e25, t29, o32) {
    e25.grabbing = false, e25.events.emit("grab-changed", { action: "end", pointerType: t29.pointerType, screenPoint: n15(t29) }), this._grabbedManipulators.forEach(({ manipulator: t30 }, o33) => {
      t30 === e25 && this._grabbedManipulators.delete(o33);
    }), this._afterManipulatorRelease(o32.setActiveTool);
  }
  _handlePointerEnd(e25, t29) {
    var _a;
    const o32 = (_a = this._grabbedManipulators.get(e25.pointerId)) == null ? void 0 : _a.manipulator;
    null != o32 && o32.grabbing && (o32.grabbing = false, o32.events.emit("grab-changed", { action: "end", pointerType: e25.pointerType, screenPoint: n15(e25) }), this._grabbedManipulators.delete(e25.pointerId), this._afterManipulatorRelease(t29.setActiveTool));
  }
  _onFocusChange(e25) {
    this._updateCursor(), this._updateFocusedManipulatorTools(e25);
  }
  _updateCursor() {
    this._grabbedManipulators.size > 0 ? this._cursor = n18(this._grabbedManipulators) || "grabbing" : this._hoveredManipulators.size > 0 ? this._cursor = n18(this._hoveredManipulators) || "pointer" : this._cursor = null;
  }
  _updateFocusedManipulatorTools(t29) {
    const o32 = /* @__PURE__ */ new Set(), a22 = /* @__PURE__ */ new Set();
    this._grabbedManipulators.forEach(({ tool: e25 }) => {
      o32.add(e25);
    }), this._hoveredManipulators.forEach(({ tool: e25 }) => {
      a22.add(e25);
    }), t29((t30) => {
      t30.hasGrabbedManipulators = o32.has(t30), t30.hasHoveredManipulators = a22.has(t30);
      const r30 = this._grabbedManipulators.values(), i22 = o(r30, ({ tool: e25 }) => e25 === t30);
      t30.firstGrabbedManipulator = null != i22 ? i22.manipulator : null;
    });
  }
  clearPointers(e25, { forEachTool: t29, setActiveTool: o32 }, a22 = true, r30) {
    const i22 = (t30, o33) => t30 === e25 && (null == r30 || r30 === o33);
    this._grabbedManipulators.forEach(({ tool: e26, manipulator: t30, pointerType: o33 }, a23) => {
      i22(e26, t30) && (this._grabbedManipulators.delete(a23), t30.grabbing = false, t30.events.emit("grab-changed", { action: "end", screenPoint: null, pointerType: o33 }));
    }), this._draggedManipulators.forEach(({ tool: e26, manipulator: t30 }, o33) => {
      i22(e26, t30) && (this._draggedManipulators.delete(o33), t30.dragging = false, t30.events.emit("drag", { action: "cancel" }));
    }), a22 && this._hoveredManipulators.forEach(({ tool: e26, manipulator: t30 }, o33) => {
      i22(e26, t30) && (this._hoveredManipulators.delete(o33), t30.hovering = false);
    }), this._afterManipulatorRelease(o32), this._onFocusChange(t29);
  }
  updateHoveredStateFromKnownPointers(e25) {
    this._pointerLocations.forEach((t29, a22) => {
      this._updateHoveredStateForPointerAtScreenPosition(c5(t29.x, t29.y), a22, t29.pointerType, e25);
    });
  }
  handleHoverEvent(e25, t29) {
    const o32 = e25.type;
    "pointer-up" !== o32 && "immediate-click" !== o32 && "pointer-move" !== o32 || !l10(e25.pointerType) || ("pointer-up" !== o32 && this._externallyDragging ? this._clearHoveredManipulatorStates(e25.pointerId) : this._updateHoveredStateForPointerAtScreenPosition(n15(e25), e25.pointerId, e25.pointerType, t29));
  }
  _updateHoveredStateForPointerAtScreenPosition(e25, t29, o32, a22) {
    var _a;
    let r30 = s14(e25, o32, a22);
    const i22 = (_a = this._hoveredManipulators.get(t29)) == null ? void 0 : _a.manipulator;
    null == r30 || r30.manipulator.interactive || (r30 = null), null != r30 && i22 === r30.manipulator || (null != i22 && (i22.hovering = false), null != r30 ? (r30.manipulator.hovering = true, this._hoveredManipulators.set(t29, r30)) : this._hoveredManipulators.delete(t29), this._onFocusChange(a22));
  }
  _afterManipulatorRelease(e25) {
    0 === this._grabbedManipulators.size && this._revertToNullActiveTool && (e25(null), this._revertToNullActiveTool = false);
  }
  _clearHoveredManipulatorStates(e25) {
    this._hoveredManipulators.forEach(({ manipulator: t29 }, o32) => {
      e25 === o32 && (this._hoveredManipulators.delete(e25), t29.hovering = false);
    });
  }
};
function n18(e25) {
  for (const { manipulator: t29 } of e25.values()) if (null != t29 && t29.interactive) {
    if (t29.grabbing && t29.grabCursor) return t29.grabCursor;
    if (t29.cursor) return t29.cursor;
  }
  return null;
}
function s14(e25, t29, o32) {
  let r30 = null;
  return o32((o33) => {
    if (null == o33.manipulators || !i10(o33)) return false;
    const i22 = o33.manipulators.intersect(e25, t29);
    return null != i22 && (r30 = { tool: o33, manipulator: i22 }, true);
  }), r30;
}
function l10(e25) {
  return "mouse" === e25;
}
function p9(e25) {
  return "mouse" !== e25.pointerType || 0 === e25.button;
}
function u8(e25) {
  return !!e25.native.shiftKey;
}
function c10(e25, t29) {
  (e25 == null ? void 0 : e25.consumesClicks) && t29();
}

// node_modules/@arcgis/core/views/ToolViewManager.js
var _7 = "attached";
var g8 = "tools";
var T = 1e3;
var f7 = class extends b2 {
  constructor(t29) {
    super(t29), this._updatingHandles = new h6(), this._clock = o3, this._manipulatorState = new i11(), this.tools = new V(), this.cursor = null, this._interacting = false, this._interactingTimeout = T, this._interactingTimeoutHandle = null, this._forEachTool = (t30) => {
      for (const o32 of this.tools.items) if (t30(o32)) return;
    };
  }
  initialize() {
    this.addHandles([this.view.on(r16, (t29) => {
      this._handleInputEvent(t29);
    }, _3.TOOL), ...o15(this.tools), this.tools.on("before-add", ({ item: t29 }) => {
      this._updateToolEditableFlag(t29);
    }), this.tools.on("before-remove", ({ item: t29 }) => {
      this._manipulatorState.clearPointers(t29, this._manipulatorStateEventArgs), this._updateCursor();
    }), this.tools.on("change", () => {
      this._refreshToolWatchers();
    })]);
  }
  destroy() {
    this.activeTool = null, this.tools.drain((t29) => t29.destroy()), this._clearInteractingTimeout(), this._interacting = false, this._updatingHandles.destroy();
  }
  get _manipulatorStateEventArgs() {
    return { forEachTool: this._forEachTool, activeTool: this.activeTool, setActiveTool: (t29) => {
      this.activeTool = t29;
    }, view: this.view };
  }
  set activeTool(t29) {
    if (null != t29 && !this.view.ready) return void n.getLogger(this).error("Cannot set active tool while view is not ready.");
    if (t29 === this.activeTool) return;
    const o32 = this.activeTool;
    this._set("activeTool", t29), null != o32 && o32.deactivate(), null != t29 && t29.activate(), this._removeIncompleteTools(t29);
    for (const e25 of this.tools) {
      this._updateToolEditableFlag(e25);
      const t30 = i10(e25);
      null != this.activeTool && t30 || this._manipulatorState.clearPointers(e25, this._manipulatorStateEventArgs, !t30);
    }
    this._updateCursor();
  }
  get updating() {
    return this._updatingHandles.updating || this.tools.some((t29) => t29.updating);
  }
  get interacting() {
    return this._interacting;
  }
  _clearInteractingTimeout() {
    this._interactingTimeoutHandle = l(this._interactingTimeoutHandle);
  }
  _startInteractingTimeout() {
    this._clearInteractingTimeout(), this._interactingTimeoutHandle = this._clock.setTimeout(() => this._interacting = false, this._interactingTimeout);
  }
  attach() {
    var _a;
    "3d" === this.view.type ? this.addHandles([d3(() => {
      const { state: t29 } = this.view;
      return "camera" in t29 && t29.camera;
    }, () => this._forEachManipulator((t29) => t29.onViewChange())), (_a = this.view.elevationProvider) == null ? void 0 : _a.on("elevation-change", (t29) => this._forEachManipulator((o32) => o32.onElevationChange(t29)))], _7) : this.addHandles(d3(() => this.view.extent, () => this._forEachManipulator((t29) => t29.onViewChange())));
  }
  detach() {
    this.activeTool = null, this.tools.removeAll(), this.removeHandles(_7), this._clearInteractingTimeout(), this._interacting = false;
  }
  _forEachManipulator(t29) {
    this._forEachTool((o32) => {
      o32.manipulators && o32.manipulators.forEach(({ manipulator: e25 }) => t29(e25, o32));
    });
  }
  _handleInputEvent(t29) {
    let o32 = false;
    const e25 = { ...t29, stopPropagation: () => {
      o32 = true, t29.stopPropagation();
    } };
    null != this.activeTool ? this.activeTool.handleInputEvent && this.activeTool.handleInputEvent(e25) : this._forEachTool((t30) => {
      !o32 && t30.visible && t30.handleInputEvent(e25);
    }), !o32 && "key-down" === t29.type && "Escape" === t29.key && this.activeTool && (t29.stopPropagation(), this.activeTool = null), this._manipulatorState.handleInputEvent(e25, this._manipulatorStateEventArgs), o32 || null == this.activeTool || this.activeTool.handleInputEventAfter(e25), this._manipulatorState.handleHoverEvent(e25, this._forEachTool), this._updateCursor(), "pointer-move" === t29.type && (this._manipulatorState.hasFocusedManipulators() || this.activeTool) && (this._interacting = true, this._startInteractingTimeout());
  }
  _refreshToolWatchers() {
    this.removeHandles(g8), this._forEachTool((t29) => {
      if (t29 instanceof b2) {
        const o32 = d3(() => [t29.cursor, t29.visible, t29.editable], () => {
          i10(t29) || this._manipulatorState.clearPointers(t29, this._manipulatorStateEventArgs), this._updateCursor();
        });
        this.addHandles(o32, g8);
      }
      t29.manipulators && this.addHandles([t29.manipulators.on("after-remove", (o32) => {
        this._manipulatorState.clearPointers(t29, this._manipulatorStateEventArgs, true, o32.item.manipulator);
      }), t29.manipulators.on("change", () => {
        this._manipulatorState.updateHoveredStateFromKnownPointers(this._forEachTool), this._updateCursor();
      })], g8);
    }), this._manipulatorState.updateHoveredStateFromKnownPointers(this._forEachTool), this._updateCursor();
  }
  _updateToolEditableFlag(t29) {
    var _a;
    (_a = t29.setEditableFlag) == null ? void 0 : _a.call(t29, o11.MANAGER, null == this.activeTool || t29 === this.activeTool);
  }
  _updateCursor() {
    let t29 = this._manipulatorState.cursor;
    null == t29 && this._forEachTool((o32) => !(null == o32.cursor || !o32.visible) && (t29 = o32.cursor, true)), this._get("cursor") !== t29 && this._set("cursor", t29);
  }
  _removeIncompleteTools(t29) {
    this.tools.filter((o32) => (null == t29 || o32 !== t29) && !o32.created && o32.removeIncompleteOnCancel).forEach((t30) => {
      this.tools.remove(t30);
    });
  }
  get test() {
  }
};
r([m2({ constructOnly: true, nonNullable: true })], f7.prototype, "view", void 0), r([m2({ value: null })], f7.prototype, "activeTool", null), r([m2({ readOnly: true, type: V })], f7.prototype, "tools", void 0), r([m2({ readOnly: true })], f7.prototype, "cursor", void 0), r([m2({ readOnly: true })], f7.prototype, "updating", null), r([m2()], f7.prototype, "_interacting", void 0), r([m2({ readOnly: true })], f7.prototype, "interacting", null), f7 = r([a("esri.views.ToolViewManager")], f7);

// node_modules/@arcgis/core/views/input/gamepad/GamepadInputDevice.js
var n19 = class extends b2 {
  constructor(e25) {
    super(), this.nativeIndex = null, this._detectedDeviceType = "unknown", "standard" === e25.mapping ? this._detectedDeviceType = "standard" : i12.test(e25.id) ? this._detectedDeviceType = "spacemouse" : this._detectedDeviceType = "unknown", this.nativeIndex = e25.index;
  }
  get native() {
    const e25 = navigator.getGamepads ? navigator.getGamepads() : [];
    return null != this.nativeIndex && this.nativeIndex < e25.length ? e25[this.nativeIndex] : null;
  }
  get deviceType() {
    return this._detectedDeviceType;
  }
  get axisThreshold() {
    return a5[this.deviceType];
  }
};
r([m2({ nonNullable: true, readOnly: true })], n19.prototype, "nativeIndex", void 0), r([m2({ type: String, readOnly: true })], n19.prototype, "deviceType", null), r([m2({ type: Number, readOnly: true })], n19.prototype, "axisThreshold", null), n19 = r([a("esri.views.input.gamepad.GamepadInputDevice")], n19);
var o16 = n19;
var i12 = new RegExp("^(3dconnexion|space(mouse|navigator|pilot|explorer))", "i");
var a5 = { standard: 0.15, spacemouse: 0.025, unknown: 0 };

// node_modules/@arcgis/core/views/input/gamepad/GamepadSettings.js
var p10 = class extends b2 {
  constructor(...o32) {
    super(...o32), this.devices = new V(), this.enabledFocusMode = "document";
  }
};
r([m2({ type: V.ofType(o16), readOnly: true })], p10.prototype, "devices", void 0), r([m2({ type: ["document", "view", "none"] })], p10.prototype, "enabledFocusMode", void 0), p10 = r([a("esri.views.input.gamepad.GamepadSettings")], p10);
var i13 = p10;

// node_modules/@arcgis/core/views/input/Input.js
var p11 = class extends b2 {
  constructor() {
    super(...arguments), this.gamepad = new i13();
  }
};
r([m2({ readOnly: true })], p11.prototype, "gamepad", void 0), p11 = r([a("esri.views.input.Input")], p11);
var a6 = p11;

// node_modules/@arcgis/core/views/navigation/gamepad/GamepadSettings.js
var s15 = class extends b2 {
  constructor(o32) {
    super(o32), this.enabled = true, this.device = null, this.mode = "pan", this.tiltDirection = "forward-down", this.velocityFactor = 1;
  }
};
r([m2({ type: Boolean, nonNullable: true })], s15.prototype, "enabled", void 0), r([m2({ type: o16 })], s15.prototype, "device", void 0), r([m2({ type: ["pan", "zoom"], nonNullable: true })], s15.prototype, "mode", void 0), r([m2({ type: ["forward-down", "forward-up"], nonNullable: true })], s15.prototype, "tiltDirection", void 0), r([m2({ type: Number, nonNullable: true })], s15.prototype, "velocityFactor", void 0), s15 = r([a("esri.views.navigation.gamepad.GamepadSettings")], s15);
var i14 = s15;

// node_modules/@arcgis/core/views/navigation/Navigation.js
var m15 = class extends b2 {
  constructor(o32) {
    super(o32), this.browserTouchPanEnabled = true, this.gamepad = new i14(), this.momentumEnabled = true, this.mouseWheelZoomEnabled = true;
  }
  get effectiveMomentumEnabled() {
    return this.momentumEnabled && !o10();
  }
};
r([m2({ type: Boolean })], m15.prototype, "browserTouchPanEnabled", void 0), r([m2({ type: i14, nonNullable: true })], m15.prototype, "gamepad", void 0), r([m2({ type: Boolean })], m15.prototype, "momentumEnabled", void 0), r([m2({ type: Boolean })], m15.prototype, "mouseWheelZoomEnabled", void 0), m15 = r([a("esri.views.navigation.Navigation")], m15);
var p12 = m15;

// node_modules/@arcgis/core/geometry/support/heightModelInfoUtils.js
var o17;
function l11(e25) {
  var _a;
  if ("integrated-mesh-3dtiles" === e25.type) return null;
  const i22 = e25.url ? d5(e25.url) : void 0, a22 = (_a = e25.spatialReference) == null ? void 0 : _a.vcsWkid;
  return !(null == a22 && null != i22 && "ImageServer" === i22.serverType) && h10(e25) && e25.heightModelInfo ? e25.heightModelInfo : d9(e25) ? v3.deriveUnitFromSR(p13, e25.spatialReference) : null;
}
function h10(e25) {
  return "heightModelInfo" in e25;
}
function u9(e25) {
  if ("unknown" === e25.type || !("capabilities" in e25)) return false;
  switch (e25.type) {
    case "catalog":
    case "catalog-footprint":
    case "csv":
    case "feature":
    case "geojson":
    case "subtype-group":
    case "ogc-feature":
    case "oriented-imagery":
    case "wfs":
    case "knowledge-graph-sublayer":
      return true;
    default:
      return false;
  }
}
function d9(e25) {
  return u9(e25) ? !!(e25.capabilities && e25.capabilities.data && e25.capabilities.data.supportsZ) : f8(e25);
}
function g9(e25) {
  return null != e25.layers || f8(e25) || u9(e25) || h10(e25);
}
function f8(e25) {
  switch (e25.type) {
    case "building-scene":
    case "elevation":
    case "integrated-mesh":
    case "integrated-mesh-3dtiles":
    case "point-cloud":
    case "scene":
    case "voxel":
      return true;
    case "base-dynamic":
    case "base-elevation":
    case "base-tile":
    case "bing-maps":
    case "catalog":
    case "catalog-footprint":
    case "catalog-dynamic-group":
    case "csv":
    case "dimension":
    case "geojson":
    case "feature":
    case "focusArea":
    case "subtype-group":
    case "geo-rss":
    case "graphics":
    case "group":
    case "imagery":
    case "imagery-tile":
    case "kml":
    case "knowledge-graph":
    case "link-chart":
    case "knowledge-graph-sublayer":
    case "line-of-sight":
    case "map-image":
    case "map-notes":
    case "media":
    case "ogc-feature":
    case "open-street-map":
    case "oriented-imagery":
    case "parquet":
    case "route":
    case "stream":
    case "tile":
    case "unknown":
    case "unsupported":
    case "vector-tile":
    case "video":
    case "viewshed":
    case "wcs":
    case "web-tile":
    case "wfs":
    case "wms":
    case "wmts":
    case null:
      return false;
  }
  return false;
}
!function(e25) {
  e25[e25.Ok = 0] = "Ok", e25[e25.Units = 1] = "Units", e25[e25.HeightModel = 2] = "HeightModel", e25[e25.CRS = 3] = "CRS", e25[e25.Unsupported = 4] = "Unsupported";
}(o17 || (o17 = {}));
var p13 = new v3({ heightModel: "gravity-related-height" });

// node_modules/@arcgis/core/views/support/projectionUtils.js
var n20;
var s16 = null;
async function c11(r30) {
  s16 || (s16 = import("./geometryServiceUtils-6L6FBVHH.js").then((e25) => n20 = e25)), await s16, s2(r30);
}
async function p14(e25, s28, a22, m26) {
  if (!e25) return null;
  const l21 = e25.spatialReference;
  return _2() || J(l21, s28) ? K(e25, s28) : n20 ? n20.projectGeometry(e25, s28, a22, m26) : (await Promise.race([c11(m26), W(m26)]), p14(e25, s28, a22, m26));
}

// node_modules/@arcgis/core/views/support/DefaultsFromMap.js
var d10 = class extends b2 {
  constructor(e25) {
    super(e25), this.required = { extent: false, heightModelInfo: false, tileInfo: false }, this.defaultSpatialReference = null, this.userSpatialReference = null, this.sourcePreloadCount = 10, this.priorityCollection = null, this.requiresExtentInSpatialReference = true, this.suspended = false, this._projectExtentTask = { task: null, input: null, output: null, spatialReference: null };
  }
  destroy() {
    this._projectExtentTask.task && (this._projectExtentTask.task = e(this._projectExtentTask.task)), this._set("map", null);
  }
  get ready() {
    return !this._spatialReferenceTask.updating && !this._tileInfoTask.updating && !this._extentTask.updating;
  }
  get heightModelInfoReady() {
    return !this._heightModelInfoTask.updating;
  }
  get spatialReference() {
    return this.userSpatialReference ?? this._spatialReferenceTask.spatialReference;
  }
  get extent() {
    return this._extentTask.extent;
  }
  get heightModelInfo() {
    return this._heightModelInfoTask.heightModelInfo;
  }
  get vcsWkid() {
    return this._heightModelInfoTask.vcsWkid;
  }
  get latestVcsWkid() {
    return this._heightModelInfoTask.latestVcsWkid;
  }
  get viewingMode() {
    return null == this.userSpatialReference || this.userSpatialReference.equals(this._spatialReferenceTask.spatialReference) ? this._spatialReferenceTask.viewingMode : null;
  }
  get tileInfo() {
    return this._tileInfoTask.tileInfo;
  }
  get mapCollections() {
    var _a, _b, _c, _d;
    const e25 = (_a = this.map) == null ? void 0 : _a.call(this), t29 = [];
    return null != this.priorityCollection && t29.push(this.priorityCollection), t29.push({ parent: e25 == null ? void 0 : e25.basemap, layers: (_b = e25 == null ? void 0 : e25.basemap) == null ? void 0 : _b.baseLayers }, { layers: e25 == null ? void 0 : e25.layers }, { parent: e25 == null ? void 0 : e25.ground, layers: (_c = e25 == null ? void 0 : e25.ground) == null ? void 0 : _c.layers }, { parent: e25 == null ? void 0 : e25.basemap, layers: (_d = e25 == null ? void 0 : e25.basemap) == null ? void 0 : _d.referenceLayers }), t29;
  }
  get _spatialReferenceTask() {
    if (this.suspended) return this._get("_spatialReferenceTask") ?? { updating: false };
    let e25;
    if (this._collectLayers(this.mapCollections, (t30) => {
      const n33 = this._getSupportedSpatialReferences(t30);
      if (n33.length > 0) {
        const t31 = this._narrowDownSpatialReferenceCandidates(e25, n33);
        null != t31 && (e25 = t31);
      }
      return 1 === (e25 == null ? void 0 : e25.length);
    }) && 1 !== (e25 == null ? void 0 : e25.length)) return { updating: true };
    const t29 = this._pickSpatialReferenceCandidate(e25);
    return { spatialReference: (t29 == null ? void 0 : t29.spatialReference) ?? null, viewingMode: (t29 == null ? void 0 : t29.viewingMode) ?? null, updating: false };
  }
  get _tileInfoTask() {
    var _a, _b;
    if (!this.required.tileInfo) return this._get("_tileInfoTask") ?? { updating: false };
    const e25 = (_a = this.map) == null ? void 0 : _a.call(this), t29 = this.spatialReference;
    if (!t29) return { updating: this._spatialReferenceTask.updating };
    let n33;
    const a22 = this._collectLayers([{ parent: e25 == null ? void 0 : e25.basemap, layers: (_b = e25 == null ? void 0 : e25.basemap) == null ? void 0 : _b.baseLayers }, { layers: e25 == null ? void 0 : e25.layers }], (e26) => {
      var _a2;
      return !(!("tileInfo" in e26) || !((_a2 = e26.tileInfo) == null ? void 0 : _a2.spatialReference.equals(t29))) && (n33 = e26, true);
    }, (e26) => "tileInfo" in e26);
    if (n33) {
      return { tileInfo: n33.tileInfo, updating: false };
    }
    return { updating: a22 };
  }
  get _heightModelInfoTask() {
    var _a;
    if (!this.required.heightModelInfo || this.suspended && ((_a = this._get("_heightModelInfoTask")) == null ? void 0 : _a.heightModelInfo)) return this._get("_heightModelInfoTask") ?? { updating: false };
    let e25 = {};
    const t29 = this._collectLayers(this.mapCollections, (t30) => {
      var _a2, _b;
      const n33 = l11(t30);
      return !!n33 && (e25 = { heightModelInfo: n33, vcsWkid: (_a2 = t30.spatialReference) == null ? void 0 : _a2.vcsWkid, latestVcsWkid: (_b = t30.spatialReference) == null ? void 0 : _b.latestVcsWkid }, true);
    }, (e26) => g9(e26));
    return { ...e25, updating: t29 };
  }
  get _extentCandidatesTask() {
    if (this.suspended || !this.required.extent) return this._get("_extentCandidatesTask") ?? { updating: false };
    if (!this.spatialReference) return { updating: this._spatialReferenceTask.updating };
    const e25 = [], t29 = this._collectLayers(this.mapCollections, (t30) => {
      const n33 = "fullExtents" in t30 && t30.fullExtents || (null != t30.fullExtent ? [t30.fullExtent] : []), a22 = this.requiresExtentInSpatialReference ? null : n33[0], s28 = n33.find((e26) => e26.spatialReference.equals(this.spatialReference)) ?? a22;
      if (s28) return e25.push({ extent: s28, layer: t30 }), true;
      if (this._getSupportedSpatialReferences(t30).length > 0) for (const i22 of n33) e25.push({ extent: i22, layer: t30 });
      return false;
    });
    return { candidates: e25, updating: t29 };
  }
  get _extentTask() {
    const { candidates: e25, updating: t29 } = this._extentCandidatesTask;
    if (t29) return { updating: t29 };
    if (null == e25 || 0 === e25.length) return { updating: false };
    if (!this.spatialReference) return { updating: this._spatialReferenceTask.updating };
    const i22 = this._pickExtentCandidate(e25), r30 = this.spatialReference;
    return i22.extent.equals(this._projectExtentTask.input) && r30.equals(this._projectExtentTask.spatialReference) ? { extent: this._projectExtentTask.output, updating: null != this._projectExtentTask.task && !this._projectExtentTask.task.finished } : (null != this._projectExtentTask.task && (this._projectExtentTask.task = e(this._projectExtentTask.task)), this._projectExtentTask = { input: i22.extent.clone(), output: null, spatialReference: r30.clone(), task: d2(async (e26) => {
      try {
        const t30 = await p14(i22.extent, r30, "portalItem" in i22.layer ? i22.layer.portalItem : void 0, e26);
        this._projectExtentTask = { ...this._projectExtentTask, task: null, output: t30 };
      } catch (t30) {
        if (c(e26)) return;
        this._projectExtentTask = { ...this._projectExtentTask, task: null };
      }
    }) }, { updating: true });
  }
  _narrowDownSpatialReferenceCandidates(e25, t29) {
    if (null == e25) return t29;
    const n33 = new Array();
    for (const a22 of e25) for (const e26 of t29) {
      if (!a22.spatialReference.equals(e26.spatialReference)) continue;
      const t30 = h11(a22.viewingMode, e26.viewingMode);
      if (false !== t30) {
        n33.push({ spatialReference: a22.spatialReference, viewingMode: t30 });
        break;
      }
    }
    return n33.length > 0 ? n33 : null;
  }
  _pickSpatialReferenceCandidate(e25) {
    const t29 = this.defaultSpatialReference;
    return null == e25 || e25.length < 1 ? t29 ? { spatialReference: t29, viewingMode: null } : null : (null != t29 && e25.length > 1 && e25.some(({ spatialReference: e26 }) => e26.equals(t29)) && (e25 = e25.filter(({ spatialReference: e26 }) => e26.equals(t29))), e25.length > 1 && e25.some(({ viewingMode: e26 }) => e26 !== l4.Local) && (e25 = e25.filter(({ viewingMode: e26 }) => e26 !== l4.Local)), e25[0]);
  }
  _getSupportedSpatialReferences(e25) {
    const t29 = "supportedSpatialReferences" in e25 && e25.supportedSpatialReferences || (e25.spatialReference ? [e25.spatialReference] : []);
    if (0 === t29.length) return [];
    const n33 = [];
    for (const a22 of t29) {
      const t30 = this.getSpatialReferenceSupport(a22, e25);
      if (null != t30) {
        const e26 = t30.constraints ?? [{ spatialReference: a22, viewingMode: null }];
        for (const { spatialReference: t31, viewingMode: a23 } of e26) this.requiresExtentInSpatialReference && null != this.userSpatialReference && !t31.equals(this.userSpatialReference) || n33.push({ spatialReference: t31, viewingMode: a23 });
      }
    }
    return n33;
  }
  _pickExtentCandidate(e25) {
    const t29 = this.spatialReference;
    return e25.find(({ extent: e26 }) => t29.equals(e26.spatialReference)) || e25[0];
  }
  _collectLayers(e25, t29, n33 = () => true) {
    var _a;
    if ("loaded" !== this._loadMaybe((_a = this.map) == null ? void 0 : _a.call(this))) return true;
    const a22 = new f9(n33, t29);
    for (const s28 of e25) if (this._collectCollection(s28, a22), a22.done || a22.preloading === this.sourcePreloadCount) break;
    return a22.updating;
  }
  _collectCollection(e25, t29) {
    if (e25.layers) {
      switch (this._loadMaybe(e25.parent)) {
        case "loading":
          return t29.updating = true, void ++t29.preloading;
        case "failed":
          return;
      }
      for (const n33 of e25.layers) if (t29.layerFilter(n33)) {
        switch (this._loadMaybe(n33)) {
          case "failed":
            continue;
          case "loading":
            t29.updating = true, ++t29.preloading;
            break;
          case "loaded":
            if (t29.updating || (t29.done = t29.pushLayer(n33)), t29.done || t29.preloading === this.sourcePreloadCount) break;
            "layers" in n33 && this._collectCollection({ layers: n33.layers }, t29);
        }
        if (t29.done || t29.preloading === this.sourcePreloadCount) break;
      }
    }
  }
  _loadMaybe(e25) {
    return e25 && "loadStatus" in e25 && null != e25.loadStatus ? "not-loaded" === e25.loadStatus ? (e25.load().catch((e26) => {
      b(e26);
    }), "loading") : e25.loadStatus : "loaded";
  }
};
r([m2()], d10.prototype, "required", void 0), r([m2({ constructOnly: true })], d10.prototype, "map", void 0), r([m2({ constructOnly: true })], d10.prototype, "getSpatialReferenceSupport", void 0), r([m2()], d10.prototype, "defaultSpatialReference", void 0), r([m2()], d10.prototype, "userSpatialReference", void 0), r([m2()], d10.prototype, "sourcePreloadCount", void 0), r([m2()], d10.prototype, "priorityCollection", void 0), r([m2()], d10.prototype, "requiresExtentInSpatialReference", void 0), r([m2()], d10.prototype, "suspended", void 0), r([m2({ readOnly: true })], d10.prototype, "ready", null), r([m2({ readOnly: true })], d10.prototype, "heightModelInfoReady", null), r([m2({ readOnly: true })], d10.prototype, "spatialReference", null), r([m2({ readOnly: true })], d10.prototype, "extent", null), r([m2({ readOnly: true })], d10.prototype, "heightModelInfo", null), r([m2({ readOnly: true })], d10.prototype, "vcsWkid", null), r([m2({ readOnly: true })], d10.prototype, "latestVcsWkid", null), r([m2({ readOnly: true })], d10.prototype, "viewingMode", null), r([m2({ readOnly: true })], d10.prototype, "tileInfo", null), r([m2({ readOnly: true })], d10.prototype, "mapCollections", null), r([m2({ readOnly: true })], d10.prototype, "_spatialReferenceTask", null), r([m2({ readOnly: true })], d10.prototype, "_tileInfoTask", null), r([m2({ readOnly: true })], d10.prototype, "_heightModelInfoTask", null), r([m2({ readOnly: true })], d10.prototype, "_extentCandidatesTask", null), r([m2()], d10.prototype, "_extentTask", null), r([m2()], d10.prototype, "_projectExtentTask", void 0), d10 = r([a("esri.views.support.DefaultsFromMap")], d10);
var f9 = class {
  constructor(e25, t29) {
    this.layerFilter = e25, this.pushLayer = t29, this.preloading = -1, this.updating = false, this.done = false;
  }
};
function h11(e25, t29) {
  return null != e25 ? null != t29 ? e25 === t29 && e25 : e25 : t29;
}

// node_modules/@arcgis/core/views/View.js
var W2;
var G = W2 = class extends o5.EventedMixin(n5(b2)) {
  constructor(e25) {
    super(e25), this._userSpatialReference = null, this._cursor = null, this.handles = new r2(), this.updatingHandles = new h6(), this.allLayerViews = new n12({ getCollections: () => {
      var _a, _b, _c;
      return [(_a = this.basemapView) == null ? void 0 : _a.baseLayerViews, (_b = this.groundView) == null ? void 0 : _b.layerViews, this.layerViews, (_c = this.basemapView) == null ? void 0 : _c.referenceLayerViews];
    }, getChildrenFunction: B3 }), this.groundView = null, this.basemapView = null, this.fatalError = null, this.graphics = new c6(), this.analyses = new t12(), this.typeSpecificPreconditionsReady = true, this.layerViews = new V(), this.magnifier = new p6(), this.padding = { left: 0, top: 0, right: 0, bottom: 0 }, this.ready = false, this.spatialReferenceWarningDelay = 1e3, this.supportsGround = true, this.type = null, this.scale = null, this.updating = false, this.initialExtentRequired = true, this.input = new a6(), this.navigation = new p12(), this.layerViewManager = null, this.analysisViewManager = null, this.isHeightModelInfoRequired = false, this.width = null, this.height = null, this.resizing = false, this.suspended = false, this.viewEvents = new c9(this), this.persistableViewModels = new V(), this._isValid = false, this._readyCycleForced = false, this._lockedSpatialReference = null, this._userTimeZone = null, this._lockedTimeZone = null, this._userTimeExtent = null, this._lockedTimeExtent = null, this.theme = null, this.handles.add(d3(() => this.preconditionsReady, (e26) => {
      var _a, _b;
      const t29 = this.ready;
      if (e26 ? (this._lockedSpatialReference = this.spatialReference, this._lockedTimeZone = this.timeZone, this._lockedTimeExtent = this.timeExtent, W2.views.add(this)) : (this._lockedSpatialReference = null, W2.views.remove(this)), this.notifyChange("spatialReference"), !e26 && t29) (_a = this.toolViewManager) == null ? void 0 : _a.detach(), null != this.analysisViewManager && this.analysisViewManager.detach(), (_b = this.layerViewManager) == null ? void 0 : _b.clear(), this._teardown();
      else if (e26 && !t29) {
        try {
          this._startup();
        } catch (i22) {
          return void queueMicrotask(() => {
            this.fatalError = new s("startup-error", null, i22);
          });
        }
        null != this.analysisViewManager && this.analysisViewManager.attach(), this.toolViewManager.attach();
      }
    }, C));
  }
  initialize() {
    this.addResolvingPromise(Promise.all([this.loadAsyncDependencies(), this.validate()]).then(() => (this._isValid = true, w(() => this.ready)))), this.basemapView = new p5({ view: this }), this.layerViewManager = new I3({ view: this, layerViewImporter: { importLayerView: (e25) => this.importLayerView(e25), hasLayerViewModule: (e25) => this.hasLayerViewModule(e25) }, supportsGround: this.supportsGround }), this.toolViewManager = new f7({ view: this }), this._setupSpatialReferenceLogger(), this.selectionManager = new b4({ view: this }), this.addHandles([d3(() => this.initialExtentRequired, (e25) => this.defaultsFromMap.required = { ...this.defaultsFromMap.required, extent: e25 }, A3), d3(() => this.ready, (e25) => {
      this.defaultsFromMap && (this.defaultsFromMap.suspended = e25, this.defaultsFromMap.userSpatialReference = e25 ? this.spatialReference : this._userSpatialReference);
    }, C), d3(() => this._userSpatialReference, (e25) => {
      this.defaultsFromMap && (this.defaultsFromMap.userSpatialReference = e25);
    }, A3)]);
  }
  _setupSpatialReferenceLogger() {
    let e25 = null;
    this.addHandles([d3(() => {
      var _a;
      return (_a = this.defaultsFromMap) == null ? void 0 : _a.ready;
    }, (t29) => {
      var _a;
      const i22 = ((_a = this.map) == null ? void 0 : _a.allLayers.length) > 0;
      if (t29 && !this.spatialReference && i22) {
        if (null != e25) return;
        const t30 = e2(() => e25 = e(e25));
        e25 = d2(async (t31) => {
          try {
            await A(this.spatialReferenceWarningDelay, null, t31);
          } catch {
            return;
          } finally {
            e25 = null;
          }
          n.getLogger(this).warn("#spatialReference", "no spatial reference could be derived from the currently added map layers");
        }), this.addHandles(t30, "spatial-reference-logger-task");
      } else this.removeHandles("spatial-reference-logger-task");
    }, { sync: true })]);
  }
  destroy() {
    var _a, _b;
    this.destroyed || (W2.views.remove(this), this.viewEvents.destroy(), this.allLayerViews.destroy(), this.navigation && (this.navigation.destroy(), this._set("navigation", null)), this.graphics = u(this.graphics), this.analyses = u(this.analyses), this.defaultsFromMap.destroy(), this._set("defaultsFromMap", null), u(this.analysisViewManager), this.toolViewManager = u(this.toolViewManager), this.layerViewManager = u(this.layerViewManager), this.selectionManager = u(this.selectionManager), this.basemapView = u(this.basemapView), (_a = this.groundView) == null ? void 0 : _a.destroy(), (_b = this.layerViews) == null ? void 0 : _b.forEach((e25) => e25.destroy()), this.layerViews.length = 0, this.invalidate(), this._emitter.clear(), this.handles.destroy(), this.map = u(this.map), this.updatingHandles.destroy());
  }
  _startup() {
    this._set("ready", true);
  }
  _teardown() {
    this._set("ready", false);
  }
  whenReady() {
    return Promise.resolve(this);
  }
  toMap() {
    return n.getLogger(this).error("#toMap()", "Not implemented on this instance of View"), null;
  }
  get activeTool() {
    var _a;
    return (_a = this.toolViewManager) == null ? void 0 : _a.activeTool;
  }
  set activeTool(e25) {
    this.toolViewManager && (this.toolViewManager.activeTool = e25);
  }
  get animation() {
    return this._get("animation");
  }
  set animation(e25) {
    this._set("animation", e25);
  }
  get center() {
    return null;
  }
  get defaultsFromMapSettings() {
    return {};
  }
  get defaultsFromMap() {
    return new d10({ required: { tileInfo: false, heightModelInfo: false, extent: false }, map: () => this.map, getSpatialReferenceSupport: (e25, t29) => this.getSpatialReferenceSupport(e25, t29), ...this.defaultsFromMapSettings });
  }
  get extent() {
    return this._get("extent");
  }
  set extent(e25) {
    this._set("extent", e25);
  }
  get heightModelInfo() {
    return this.getDefaultHeightModelInfo();
  }
  get interacting() {
    return this.navigating;
  }
  get navigating() {
    return false;
  }
  get preconditionsReady() {
    var _a;
    return !(this.fatalError || !this._isValid || this._readyCycleForced || !this.map || m4.isLoadable(this.map) && !this.map.loaded || 0 === this.width || 0 === this.height || !this.spatialReference || !this._validateSpatialReference(this.spatialReference) || !this._lockedSpatialReference && !((_a = this.defaultsFromMap) == null ? void 0 : _a.ready) || !this.typeSpecificPreconditionsReady);
  }
  get resolution() {
    return 0;
  }
  set map(e25) {
    e25 !== this._get("map") && ((e25 == null ? void 0 : e25.destroyed) && (n.getLogger(this).warn("#map", "The provided map is already destroyed", { map: e25 }), e25 = null), m4.isLoadable(e25) && e25.load().catch(() => {
    }), this.constructed && !this.destroyed && (this.forceReadyCycle(), this._lockedSpatialReference = null), this._set("map", e25));
  }
  get spatialReference() {
    var _a, _b;
    const e25 = this._userSpatialReference || this._lockedSpatialReference || this.getDefaultSpatialReference() || null;
    if (e25 && ((_b = (_a = this.defaultsFromMap) == null ? void 0 : _a.required) == null ? void 0 : _b.heightModelInfo)) {
      const t29 = e25.clone();
      return t29.vcsWkid = this.defaultsFromMap.vcsWkid, t29.latestVcsWkid = this.defaultsFromMap.latestVcsWkid, t29;
    }
    return e25;
  }
  set spatialReference(e25) {
    const t29 = !s5(e25, this._get("spatialReference"));
    this._set("_userSpatialReference", e25), t29 && (this._set("spatialReference", e25), this._spatialReferenceChanged(e25));
  }
  _spatialReferenceChanged(e25) {
  }
  get stationary() {
    return !this.animation && !this.navigating && !this.resizing;
  }
  get timeExtent() {
    return this._userTimeExtent ?? this._lockedTimeExtent ?? this.getDefaultTimeExtent() ?? null;
  }
  set timeExtent(e25) {
    this._userTimeExtent = e25;
  }
  get timeZone() {
    return this._userTimeZone ?? this._lockedTimeZone ?? this.getDefaultTimeZone() ?? o6;
  }
  set timeZone(e25) {
    this._userTimeZone = e25, h4(e25) || n.getLogger(this).warn("#timeZone", `the parsed value '${e25}' may not be a valid IANA time zone`);
  }
  get tools() {
    var _a;
    return (_a = this.toolViewManager) == null ? void 0 : _a.tools;
  }
  get initialExtent() {
    var _a;
    return (_a = this.defaultsFromMap) == null ? void 0 : _a.extent;
  }
  get cursor() {
    var _a;
    return ((_a = this.toolViewManager) == null ? void 0 : _a.cursor) ?? this._cursor ?? "default";
  }
  set cursor(e25) {
    this._cursor = e25, this.notifyChange("cursor");
  }
  get size() {
    return [this.width, this.height];
  }
  get effectiveTheme() {
    return this.theme ?? new l8();
  }
  whenLayerView(e25) {
    var _a;
    return ((_a = this.layerViewManager) == null ? void 0 : _a.whenLayerView(e25)) ?? Promise.reject();
  }
  getDefaultSpatialReference() {
    var _a;
    return (_a = this.defaultsFromMap) == null ? void 0 : _a.spatialReference;
  }
  getDefaultHeightModelInfo() {
    var _a;
    return (this.map && "heightModelInfo" in this.map ? this.map.heightModelInfo : void 0) ?? ((_a = this.defaultsFromMap) == null ? void 0 : _a.heightModelInfo) ?? null;
  }
  getDefaultTimeZone() {
    return null;
  }
  getDefaultTimeExtent() {
    return null;
  }
  importLayerView(e25) {
    throw new s("importLayerView() not implemented");
  }
  hasLayerViewModule(e25) {
    return false;
  }
  async validate() {
  }
  async loadAsyncDependencies() {
  }
  invalidate() {
    this._isValid = false;
  }
  getSpatialReferenceSupport() {
    return { constraints: null };
  }
  _validateSpatialReference(e25) {
    return null != this.getSpatialReferenceSupport(e25);
  }
  when(e25, t29) {
    return this.isResolved() && !this.ready && n.getLogger(this).warn("#when()", "Calling view.when() while the view is no longer ready but was already resolved once will resolve immediately. Use reactiveUtils.whenOnce(() => view.ready).then(...) instead."), super.when(e25, t29);
  }
  forceReadyCycle() {
    this.ready && (p(() => this.destroyed || false === this.preconditionsReady, () => this._readyCycleForced = false, { once: true }), this._readyCycleForced = true);
  }
  addAndActivateTool(e25) {
    this.toolViewManager.tools.add(e25), this.activeTool = e25;
  }
  tryFatalErrorRecovery() {
    this.fatalError = null;
  }
};
G.views = new V(), r([m2()], G.prototype, "_userSpatialReference", void 0), r([m2()], G.prototype, "activeTool", null), r([m2({ readOnly: true })], G.prototype, "allLayerViews", void 0), r([m2()], G.prototype, "groundView", void 0), r([m2()], G.prototype, "animation", null), r([m2()], G.prototype, "basemapView", void 0), r([m2()], G.prototype, "center", null), r([m2()], G.prototype, "defaultsFromMapSettings", null), r([m2()], G.prototype, "defaultsFromMap", null), r([m2()], G.prototype, "fatalError", void 0), r([m2({ type: w3 })], G.prototype, "extent", null), r([m2(l5(c6, "graphics"))], G.prototype, "graphics", void 0), r([m2(l5(t12, "analyses"))], G.prototype, "analyses", void 0), r([m2({ readOnly: true, type: v3 })], G.prototype, "heightModelInfo", null), r([m2({ readOnly: true })], G.prototype, "interacting", null), r([m2({ readOnly: true })], G.prototype, "navigating", null), r([m2({ readOnly: true, dependsOn: ["fatalError", "_isValid", "_readyCycleForced", "map", "map.loaded?", "width", "height", "spatialReference", "_lockedSpatialReference", "defaultsFromMap.ready", "typeSpecificPreconditionsReady"] })], G.prototype, "preconditionsReady", null), r([m2({ readOnly: true })], G.prototype, "typeSpecificPreconditionsReady", void 0), r([m2({ type: V, readOnly: true })], G.prototype, "layerViews", void 0), r([m2()], G.prototype, "resolution", null), r([m2({ type: p6 })], G.prototype, "magnifier", void 0), r([m2({ value: null, type: L2 })], G.prototype, "map", null), r([m2()], G.prototype, "padding", void 0), r([m2({ readOnly: true })], G.prototype, "ready", void 0), r([m2({ type: g3 })], G.prototype, "spatialReference", null), r([m2()], G.prototype, "spatialReferenceWarningDelay", void 0), r([m2()], G.prototype, "stationary", null), r([m2({ readOnly: true })], G.prototype, "supportsGround", void 0), r([m2({ type: p3 })], G.prototype, "timeExtent", null), r([m2({ type: String, nonNullable: true })], G.prototype, "timeZone", null), r([m2()], G.prototype, "tools", null), r([m2()], G.prototype, "toolViewManager", void 0), r([m2({ readOnly: true })], G.prototype, "type", void 0), r([m2({ type: Number })], G.prototype, "scale", void 0), r([m2({ readOnly: true })], G.prototype, "updating", void 0), r([m2({ readOnly: true })], G.prototype, "initialExtentRequired", void 0), r([m2({ readOnly: true })], G.prototype, "initialExtent", null), r([m2()], G.prototype, "cursor", null), r([m2({ readOnly: true })], G.prototype, "input", void 0), r([m2({ type: p12, nonNullable: true })], G.prototype, "navigation", void 0), r([m2()], G.prototype, "layerViewManager", void 0), r([m2()], G.prototype, "analysisViewManager", void 0), r([m2()], G.prototype, "selectionManager", void 0), r([m2()], G.prototype, "width", void 0), r([m2()], G.prototype, "height", void 0), r([m2({ readOnly: true })], G.prototype, "resizing", void 0), r([m2({ value: null, readOnly: true })], G.prototype, "size", null), r([m2({ readOnly: true })], G.prototype, "suspended", void 0), r([m2({ readOnly: true })], G.prototype, "viewEvents", void 0), r([m2({ readOnly: true })], G.prototype, "persistableViewModels", void 0), r([m2()], G.prototype, "_isValid", void 0), r([m2()], G.prototype, "_readyCycleForced", void 0), r([m2()], G.prototype, "_lockedSpatialReference", void 0), r([m2()], G.prototype, "_userTimeZone", void 0), r([m2()], G.prototype, "_lockedTimeZone", void 0), r([m2()], G.prototype, "_userTimeExtent", void 0), r([m2()], G.prototype, "_lockedTimeExtent", void 0), r([m2({ type: l8 })], G.prototype, "theme", void 0), r([m2({ readOnly: true, type: l8 })], G.prototype, "effectiveTheme", null), G = W2 = r([a("esri.views.View")], G);
var N = globalThis.$arcgis;
N && !N.views && Object.defineProperty(N, "views", { configurable: false, enumerable: true, writable: false, value: G.views });
var $ = G;
function B3(e25) {
  return e25.layerViews;
}

// node_modules/@arcgis/core/views/ViewAnimation.js
var p15 = class extends m3 {
  constructor(t29) {
    super(t29), this.state = "running", this.target = null, this._resolver = null;
  }
  initialize() {
    this._resolver = L(), this.addResolvingPromise(this._resolver.promise);
  }
  get done() {
    return "finished" === this.state || "stopped" === this.state;
  }
  stop() {
    var _a;
    "stopped" !== this.state && "finished" !== this.state && (this._set("state", "stopped"), (_a = this._resolver) == null ? void 0 : _a.reject(new s("ViewAnimation stopped")));
  }
  finish() {
    var _a;
    "stopped" !== this.state && "finished" !== this.state && (this._set("state", "finished"), (_a = this._resolver) == null ? void 0 : _a.resolve());
  }
  update(t29, s28) {
    s28 || (s28 = S(t29) ? "waiting-for-target" : "running"), this._set("target", t29), this._set("state", s28);
  }
};
r([m2({ readOnly: true })], p15.prototype, "done", null), r([m2({ readOnly: true, type: String })], p15.prototype, "state", void 0), r([m2()], p15.prototype, "target", void 0), p15 = r([a("esri.views.ViewAnimation")], p15), function(t29) {
  t29.State = { RUNNING: "running", STOPPED: "stopped", FINISHED: "finished", WAITING_FOR_TARGET: "waiting-for-target" };
}(p15 || (p15 = {}));
var a7 = p15;

// node_modules/@arcgis/core/core/libs/gl-matrix-2/types/vec2.js
function n21(n33) {
  return n33 instanceof Float32Array && n33.length >= 2;
}
function r17(n33) {
  return Array.isArray(n33) && n33.length >= 2;
}
function t14(t29) {
  return n21(t29) || r17(t29);
}

// node_modules/@arcgis/core/views/2d/ViewState.js
var G2;
var O = [0, 0];
var W3 = G2 = class extends f {
  constructor(t29) {
    super(t29), this._viewpoint2D = { center: n9(), rotation: 0, scale: 0, spatialReference: void 0 }, this.center = [0, 0], this.extent = new w3(), this.id = 0, this.inverseTransform = e9(), this.resolution = 0, this.rotation = 0, this.scale = 0, this.transform = e9(), this.transformNoRotation = e9(), this.displayMat3 = e10(), this.displayViewMat3 = e10(), this.viewMat3 = e10(), this.viewMat2d = n10(), this.worldScreenWidth = 0, this.size = [0, 0];
  }
  set pixelRatio(t29) {
    this._set("pixelRatio", t29), this._update();
  }
  set size(t29) {
    this._set("size", t29), this._update();
  }
  set viewpoint(t29) {
    if (t29) {
      const i22 = this._viewpoint2D, e25 = t29.targetGeometry;
      i22.center[0] = e25.x, i22.center[1] = e25.y, i22.rotation = t29.rotation, i22.scale = t29.scale, i22.spatialReference = e25.spatialReference;
    }
    this._update();
  }
  get visibleArea() {
    const [t29, i22] = this.size;
    return [this.toMap([0, 0], 0, 0), this.toMap([0, 0], 0, i22), this.toMap([0, 0], t29, i22), this.toMap([0, 0], t29, 0)];
  }
  copy(t29) {
    const i22 = this.size, e25 = this.viewpoint;
    return e25 && i22 ? (this.viewpoint = Z(e25, t29.viewpoint), this._set("size", r8(i22, t29.size))) : (this.viewpoint = t29.viewpoint.clone(), this._set("size", [t29.size[0], t29.size[1]])), this._set("pixelRatio", t29.pixelRatio), this;
  }
  clone() {
    return new G2({ size: this.size, viewpoint: this.viewpoint.clone(), pixelRatio: this.pixelRatio });
  }
  toMap(t29, i22, e25) {
    return t14(i22) ? S2(t29, i22, this.inverseTransform) : (O[0] = i22, O[1] = e25, S2(t29, O, this.inverseTransform));
  }
  toScreen(t29, i22, e25) {
    return t14(i22) ? S2(t29, i22, this.transform) : (O[0] = i22, O[1] = e25, S2(t29, O, this.transform));
  }
  toScreenNoRotation(t29, i22, e25) {
    return t14(i22) ? S2(t29, i22, this.transformNoRotation) : (O[0] = i22, O[1] = e25, S2(t29, O, this.transformNoRotation));
  }
  wrapMapCoordinate(t29, i22) {
    r8(t29, i22);
    const [e25] = i22, [s28] = this.center, { extent: o32, spatialReference: r30 } = this;
    let { xmin: a22, xmax: n33 } = o32;
    if (r30.isWrappable) {
      const t30 = mt(r30) / 2;
      a22 = Math.max(a22, s28 - t30), n33 = Math.min(n33, s28 + t30);
    }
    return (e25 < a22 || e25 > n33) && (t29[0] = P2(e25, s28, r30)), t29;
  }
  getScreenTransform(t29, i22) {
    const { center: e25 } = this._viewpoint2D, s28 = this._get("pixelRatio") || 1, o32 = this._get("size");
    return ut(t29, e25, o32, i22, 0, s28), t29;
  }
  _update() {
    const { center: t29, spatialReference: e25, scale: s28, rotation: o32 } = this._viewpoint2D, h20 = this._get("pixelRatio") || 1, c26 = this._get("size"), u17 = new m7({ targetGeometry: new j(t29[0], t29[1], e25), scale: s28, rotation: o32 });
    if (this._set("viewpoint", u17), !c26 || !e25 || !s28) return;
    this.resolution = ot(u17), this.rotation = o32, this.scale = s28, this.spatialReference = e25, r8(this.center, t29);
    const j5 = 0 !== c26[0] ? 2 / c26[0] : 0, g13 = 0 !== c26[1] ? -2 / c26[1] : 0;
    r9(this.displayMat3, j5, 0, 0, 0, g13, 0, -1, 1, 1);
    const R2 = o9(this.viewMat3), _11 = t6(c26[0] / 2, c26[1] / 2), M8 = t6(-c26[0] / 2, -c26[1] / 2), b8 = u5(o32);
    M4(R2, R2, _11), h5(R2, R2, b8), M4(R2, R2, M8), i4(this.displayViewMat3, this.displayMat3, R2);
    const z5 = f3(this.viewMat2d, _11);
    return s11(z5, z5, b8), i5(z5, z5, M8), _4(this.extent, u17, c26), lt(this.transform, u17, c26, h20), u6(this.inverseTransform, this.transform), ft(this.transformNoRotation, u17, c26, h20), this.worldScreenWidth = yt(this.spatialReference, this.resolution), this._set("id", this.id + 1), this.notifyChange("visibleArea"), this;
  }
};
r([m2({ readOnly: true })], W3.prototype, "id", void 0), r([m2({ value: 1, json: { write: true } })], W3.prototype, "pixelRatio", null), r([m2({ json: { write: true } })], W3.prototype, "size", null), r([m2()], W3.prototype, "spatialReference", void 0), r([m2({ type: m7, json: { write: true } })], W3.prototype, "viewpoint", null), r([m2({ readOnly: true })], W3.prototype, "visibleArea", null), W3 = G2 = r([a("esri.views.2d.ViewState")], W3);
var L4 = W3;

// node_modules/@arcgis/core/views/2d/PaddedViewState.js
var l12;
var m16;
var g10 = l12 = class extends b2 {
  constructor() {
    super(...arguments), this.left = 0, this.top = 0, this.right = 0, this.bottom = 0;
  }
  clone() {
    return new l12({ left: this.left, top: this.top, right: this.right, bottom: this.bottom });
  }
};
r([m2()], g10.prototype, "left", void 0), r([m2()], g10.prototype, "top", void 0), r([m2()], g10.prototype, "right", void 0), r([m2()], g10.prototype, "bottom", void 0), g10 = l12 = r([a("esri.views.2d.PaddedViewState.Padding")], g10);
var w7 = m16 = class extends L4 {
  constructor(...t29) {
    super(...t29), this.paddedViewState = new L4(), this._updateContent = (() => {
      const t30 = n9();
      return () => {
        const e25 = this._get("size"), i22 = this._get("padding");
        if (!e25 || !i22) return;
        const o32 = this.paddedViewState;
        o8(t30, i22.left + i22.right, i22.top + i22.bottom), e6(t30, e25, t30), r8(o32.size, t30);
        const s28 = o32.viewpoint;
        s28 && (this.viewpoint = s28);
      };
    })(), this.addHandles(d3(() => [this.size, this.padding], () => this._updateContent(), C)), this.padding = new g10(), this.size = [0, 0];
  }
  set padding(t29) {
    this._set("padding", t29 || new g10());
  }
  set viewpoint(t29) {
    if (t29) {
      this.paddedViewState.viewpoint = t29;
      let e25 = t29;
      const i22 = this._get("padding");
      i22 && (e25 = gt(t29.clone(), t29, this._get("size"), i22));
      const { targetGeometry: o32, rotation: s28, scale: r30 } = e25, { x: p27, y: d21, spatialReference: a22 } = o32, n33 = this._viewpoint2D;
      n33.center[0] = p27, n33.center[1] = d21, n33.rotation = s28, n33.scale = r30, n33.spatialReference = a22, this._update();
    }
  }
  clone() {
    return new m16({ padding: this.padding.clone(), size: this.size.slice(), viewpoint: this.paddedViewState.viewpoint.clone(), pixelRatio: this.pixelRatio });
  }
};
r([m2()], w7.prototype, "paddedViewState", void 0), r([m2({ type: g10 })], w7.prototype, "padding", null), r([m2()], w7.prototype, "viewpoint", null), w7 = m16 = r([a("esri.views.2d.PaddedViewState")], w7);
var f10 = w7;

// node_modules/@arcgis/core/views/2d/pointToPoint/Camera.js
var a8 = class {
  constructor(e25) {
    this._view = e25, this.viewpoint = new m7({ targetGeometry: new j(), scale: 0, rotation: 0 });
  }
  get view() {
    return this._view;
  }
  get size() {
    const [t29, e25] = this._view.size;
    return Math.sqrt(t29 * t29 + e25 * e25);
  }
  get scale() {
    return this.viewpoint.scale;
  }
  get rotation() {
    return this.viewpoint.rotation;
  }
  get center() {
    return this.viewpoint.targetGeometry;
  }
  get scaleToResolutionFactor() {
    return at(this.center.spatialReference);
  }
  pixelsPerPanAtZoom(t29) {
    return 1 / (t29 * this.scaleToResolutionFactor);
  }
  zoomAtPixelsPerPan(t29) {
    return 1 / (t29 * this.scaleToResolutionFactor);
  }
  pixelsPerRotate() {
    return this.size / 2;
  }
  compareTo(t29, o32) {
    o32.pan = e4(this.center, t29.center);
    let r30 = Math.abs(t29.rotation - this.rotation);
    r30 = r30 >= 180 ? 360 - r30 : r30, o32.rotate = s7(r30), o32.sourceZoom = this.scale, o32.targetZoom = t29.scale;
  }
  interpolate(t29, e25, i22) {
    const { pan: r30, rotate: s28, zoom: n33, zoomOffset: a22 } = i22, { center: c26 } = this;
    c26.spatialReference = t29.center.spatialReference, c26.x = o7(t29.center.x, e25.center.x, r30), c26.y = o7(t29.center.y, e25.center.y, r30), this.viewpoint.scale = o7(t29.scale, e25.scale + a22, n33);
    let p27 = t29.rotation;
    const l21 = e25.rotation;
    Math.abs(l21 - p27) >= 180 && (p27 += 360 * (p27 < l21 ? 1 : -1)), this.viewpoint.rotation = o7(p27, l21, s28);
  }
  copyFrom(t29) {
    Z(this.viewpoint, t29.viewpoint), this._view = t29.view;
  }
};

// node_modules/@arcgis/core/views/animation/easing.js
var u10 = (t29) => t29 * t29;
var o18 = (t29) => 1 - u10(1 - t29);
var M7 = (t29) => 2 ** (10 * (t29 - 1));
var f11 = (t29) => 1 - M7(1 - t29);
function j3(t29) {
  const u17 = 2 * (t29 - Math.sqrt((t29 - 1) * t29)), o32 = u17 / 2 / t29;
  return (i22) => i22 < o32 ? t29 * i22 * i22 : u17 * i22 - u17 + 1;
}
function k2(t29, u17) {
  return (o32, i22) => o32 < u17 ? u17 * t29(o32 / u17, i22) : 1 - t29((1 - o32) / (1 - u17), i22) * (1 - u17);
}
var m17 = k2(j3(1), 1);
var v9 = k2(j3(1), 0);
var w8 = k2(j3(1), 0.5);
var y5 = k2(j3(2), 1);
var z2 = k2(j3(2), 0);
var A4 = k2(j3(2), 0.5);
var B4 = k2(j3(3), 1);
var C4 = k2(j3(3), 0);
var D2 = k2(j3(3), 0.5);
var E2 = k2(j3(4), 1);
var F2 = k2(j3(4), 0);
var G3 = k2(j3(4), 0.5);

// node_modules/@arcgis/core/views/animation/pointToPoint/Camera.js
var t15 = class {
  constructor() {
    this.pan = 0, this.rotate = 0, this.fov = 0, this.sourceZoom = 0, this.targetZoom = 0;
  }
};

// node_modules/@arcgis/core/views/animation/pointToPoint/Settings.js
var o19 = { desiredScreenFlow: 2, minDuration: n2(500), maxDuration: n2(8e3) };
var r18 = { ...o19, maxDuration: n2(4e3) };

// node_modules/@arcgis/core/views/animation/pointToPoint/Definition.js
var r19 = class _r {
  constructor(t29) {
    this._createCamera = t29, this.compared = new t15(), this.segmentStart = 0, this.segmentEnd = 1, this.settings = { desiredScreenFlow: o19.desiredScreenFlow }, this.source = t29(), this.target = t29();
  }
  clone() {
    const t29 = new _r(this._createCamera);
    return t29.copyFrom(this), t29;
  }
  copyFrom(t29) {
    this.update(t29.source, t29.target, t29.settings);
  }
  update(t29, e25, r30) {
    this.source !== t29 && this.source.copyFrom(t29), this.target !== e25 && this.target.copyFrom(e25), this.source.compareTo(this.target, this.compared), this.settings.desiredScreenFlow = r30.desiredScreenFlow ?? o19.desiredScreenFlow, this.desiredPixelFlow = this.settings.desiredScreenFlow * this.target.size, this.halfWindowSize = this.target.size / 2;
  }
  halfWindowPanAtZoom(t29) {
    const e25 = this.target.pixelsPerPanAtZoom(t29);
    return this.halfWindowSize / e25;
  }
  get hasZoom() {
    return Math.abs(this.compared.sourceZoom - this.compared.targetZoom) > 1e-5;
  }
  get hasPan() {
    return this.compared.pan > e5();
  }
  get hasFov() {
    return Math.abs(this.compared.fov) > e5();
  }
  get hasRotate() {
    return this.compared.rotate > e5();
  }
};

// node_modules/@arcgis/core/views/animation/pointToPoint/InterpolateComponents.js
var t16 = class {
  constructor() {
    this.pan = 0, this.rotate = 0, this.zoom = 0, this.fov = 0, this.zoomOffset = 0;
  }
};

// node_modules/@arcgis/core/views/animation/pointToPoint/Path.js
var e13 = class {
  constructor() {
    this.segments = new Array();
  }
  get time() {
    return this.segments.reduce((e25, o32) => t3(e25 + o32.time), t3(0));
  }
  interpolateComponentsAt(t29, e25) {
    t29 = Math.min(Math.max(t29, 0), 1), t29 *= this.time;
    let o32 = 0, s28 = 0;
    const n33 = this.definition, a22 = this.segments.reduce((t30, e26) => t30 || e26.definition.hasZoom, false);
    for (let i22 = 0; i22 < this.segments.length; i22++) {
      const m26 = this.segments[i22], r30 = m26.definition;
      if (t29 <= m26.time || i22 === this.segments.length - 1) {
        if (this.segmentInterpolateComponentsAt(m26, 0 === m26.time ? 0 : t29 / m26.time, e25), n33.hasPan && !isNaN(e25.pan) && isFinite(n33.compared.pan) ? e25.pan = (o32 + r30.compared.pan * e25.pan) / n33.compared.pan : e25.pan = 1, n33.hasRotate && !isNaN(e25.rotate) && isFinite(n33.compared.rotate) ? e25.rotate = (s28 + r30.compared.rotate * e25.rotate) / n33.compared.rotate : e25.rotate = 1, a22 && !isNaN(e25.zoom) && isFinite(r30.compared.targetZoom)) {
          const { sourceZoom: t30, targetZoom: o33 } = r30.compared, s29 = e25.zoom * (o33 - t30) + t30, n34 = this.segments[0].definition.compared.sourceZoom, a23 = this.segments[this.segments.length - 1].definition.compared.targetZoom, i23 = Math.abs(o33 - n34) > Math.abs(t30 - n34) ? o33 : t30;
          e25.zoomOffset = i23 - a23, e25.zoom = (s29 - n34) / (i23 - n34);
        } else e25.zoom = 1;
        return e25;
      }
      t29 -= m26.time, o32 += r30.compared.pan, s28 += r30.compared.rotate;
    }
  }
  segmentInterpolateComponentsAt(t29, e25, o32) {
    t29.interpolateComponentsAt(e25, o32);
  }
};

// node_modules/@arcgis/core/views/animation/pointToPoint/Segment.js
var o20 = class {
  get time() {
    return this._time;
  }
  constructor(t29) {
    t29 && this.update(t29);
  }
  update(t29) {
    t29 && (this.definition ? this.definition.copyFrom(t29) : this.definition = t29.clone()), this._updatePrecomputedVariables(), this._updatePixelFlow();
  }
  _updatePrecomputedVariables() {
    const t29 = this.definition, i22 = t29.compared, o32 = i22.sourceZoom, e25 = i22.targetZoom;
    this._zoomSign = o32 > e25 ? 1 : -1, this._panPixelsAtSource = i22.pan * t29.source.pixelsPerPanAtZoom(o32);
    const n33 = (t29.source.pixelsPerRotate() + t29.target.pixelsPerRotate()) / 2;
    this._rotatePixels = i22.rotate * n33;
  }
  _updatePixelFlow() {
    const t29 = this.definition.compared.sourceZoom, o32 = this.definition.compared.targetZoom, { hasZoom: e25, hasPan: n33, hasRotate: s28 } = this.definition;
    let h20 = 0, a22 = 0;
    e25 && (n33 && (h20 = (o32 / t29 - 1) / (-1 / (this._zoomSign * this.definition.halfWindowSize) * Math.LN2 * this._panPixelsAtSource)), s28 && (a22 = this._zoomSign * (Math.log(t29 / o32) / Math.LN2) * this.definition.halfWindowSize / this._rotatePixels)), this._zoomPixelFlow = 0, this._panPixelFlow = 0, this._rotatePixelFlow = 0;
    const r30 = this.definition.desiredPixelFlow;
    if (e25 && n33 && s28) {
      const t30 = h20 + a22 + h20 * a22;
      this._zoomPixelFlow = h20 * a22 / t30 * r30, this._panPixelFlow = a22 / t30 * r30, this._rotatePixelFlow = h20 / t30 * r30;
    } else if (e25 && n33) {
      const t30 = 1 + h20;
      this._zoomPixelFlow = h20 / t30 * r30, this._panPixelFlow = 1 / t30 * r30;
    } else if (e25 && s28) {
      const t30 = 1 + a22;
      this._zoomPixelFlow = a22 / t30 * r30, this._rotatePixelFlow = 1 / t30 * r30;
    } else if (n33 && s28) {
      const t30 = this._panPixelsAtSource / this._rotatePixels, i22 = 1 + t30;
      this._panPixelFlow = t30 / i22 * r30, this._rotatePixelFlow = 1 / i22 * r30;
    } else n33 ? this._panPixelFlow = r30 : e25 ? this._zoomPixelFlow = r30 : s28 && (this._rotatePixelFlow = r30);
    if (this._time = t3(Math.max(this.rotateTime, this.zoomTime, this.panTime)), this.fovTime > this._time) {
      const t30 = this.fovTime / this._time;
      this._time = this.fovTime, this._zoomPixelFlow /= t30, this._panPixelFlow /= t30, this._rotatePixelFlow /= t30;
    }
  }
  get rotateTime() {
    return this.definition.hasRotate ? t3(this._rotatePixels / this._rotatePixelFlow) : t3(0);
  }
  get zoomTime() {
    return this.definition.hasZoom ? t3(this._zoomSign * (Math.log(this.definition.compared.sourceZoom / this.definition.compared.targetZoom) / Math.LN2) * this.definition.halfWindowSize / this._zoomPixelFlow) : t3(0);
  }
  get fovTime() {
    return this.definition.hasFov ? t3(Math.abs(this.definition.compared.fov) / e14) : t3(0);
  }
  get panTime() {
    if (!this.definition.hasPan) return t3(0);
    if (this.definition.hasZoom) {
      const t29 = -1 / (this._zoomSign * this.definition.halfWindowSize) * Math.LN2, o32 = t29 * this._panPixelsAtSource;
      return t3(Math.log(o32 * (this._zoomPixelFlow / this._panPixelFlow) + 1) / (t29 * this._zoomPixelFlow));
    }
    return t3(this._panPixelsAtSource / this._panPixelFlow);
  }
  _interpolateComponentsZoom(t29) {
    if (0 === t29 || 1 === t29) return t29;
    if (this.definition.hasZoom) {
      const i22 = this.definition.compared.sourceZoom, o32 = this.definition.compared.targetZoom;
      return (i22 * (i22 / o32) ** -t29 - i22) / (o32 - i22);
    }
    return t29;
  }
  _interpolateComponentsFov(t29) {
    if (0 === t29) return this.definition.segmentStart;
    if (1 === t29) return this.definition.segmentEnd;
    if (this.definition.hasFov) {
      const { segmentStart: i22, segmentEnd: o32 } = this.definition;
      return i22 + t29 * (o32 - i22);
    }
    return this.definition.segmentStart;
  }
  _interpolateComponentsPan(t29) {
    if (0 === t29 || 1 === t29) return t29;
    if (this.definition.hasPan && this.definition.hasZoom) {
      const i22 = -1 / (this._zoomSign * this.definition.halfWindowSize) * this._zoomPixelFlow;
      return 1 / this._panPixelsAtSource * (this._panPixelFlow * (2 ** (i22 * t29 * this._time) - 1)) / (i22 * Math.LN2);
    }
    return t29;
  }
  _interpolateComponentsRotate(t29) {
    return t29;
  }
  interpolateComponentsAt(t29, i22) {
    t29 = Math.min(Math.max(t29, 0), 1), i22.zoom = this._interpolateComponentsZoom(t29), i22.pan = this._interpolateComponentsPan(t29), i22.rotate = this._interpolateComponentsRotate(t29), i22.zoomOffset = 0, i22.fov = this._interpolateComponentsFov(t29);
  }
};
var e14 = s7(45);

// node_modules/@arcgis/core/views/animation/pointToPoint/apex/functions.js
function o21(o32, e25, a22) {
  const n33 = e25 - o32.compared.sourceZoom, t29 = o32.halfWindowPanAtZoom(n33);
  return -o32.halfWindowSize * (a22.ascensionFactor * Math.LN2 * o32.compared.pan + t29) * Math.log(o32.compared.sourceZoom / e25) / (o32.desiredPixelFlow * Math.LN2 * t29);
}
function e15(o32, e25, a22) {
  const n33 = 1 / e25, t29 = Math.log(o32.compared.sourceZoom * n33), i22 = 1 / o32.desiredPixelFlow, r30 = 1 / Math.LN2, d21 = e25 - o32.compared.sourceZoom, c26 = 1 / d21, l21 = (a22.ascensionFactor * Math.LN2 * o32.compared.pan + o32.halfWindowPanAtZoom(d21)) / o32.halfWindowPanAtZoom(1);
  return o32.halfWindowSize * n33 * i22 * r30 * c26 * l21 - o32.halfWindowSize * t29 * i22 * r30 * c26 + o32.halfWindowSize * t29 * i22 * r30 * l21 / (d21 * d21);
}
function a9(o32, e25, a22) {
  const n33 = e25 - o32.compared.sourceZoom, t29 = 1 / n33, i22 = 1 / e25, r30 = Math.log(o32.compared.sourceZoom * i22), d21 = (a22.ascensionFactor * Math.LN2 * o32.compared.pan + o32.halfWindowPanAtZoom(n33)) / o32.halfWindowPanAtZoom(1);
  return o32.halfWindowSize * t29 * (-2 * t29 * i22 * d21 + 2 * t29 * r30 + 2 * i22 - 2 * r30 * d21 / (n33 * n33) - d21 / (e25 * e25)) / (o32.desiredPixelFlow * Math.LN2);
}
function n22(o32, e25) {
  return -o32.halfWindowSize * Math.log(o32.compared.sourceZoom / e25) / (o32.desiredPixelFlow * Math.LN2);
}
function t17(o32, e25) {
  return o32.halfWindowSize / (e25 * o32.desiredPixelFlow * Math.LN2);
}
function i15(o32, e25) {
  return -o32.halfWindowSize / (e25 * e25 * o32.desiredPixelFlow * Math.LN2);
}
function r20(o32, e25, a22) {
  return -o32.compared.pan * o32.halfWindowSize * (a22.ascensionFactor + a22.descensionFactor - 1) / (o32.desiredPixelFlow * o32.halfWindowPanAtZoom(e25));
}
function d11(o32, e25, a22) {
  return o32.compared.pan * o32.halfWindowSize * (a22.ascensionFactor + a22.descensionFactor - 1) / (o32.desiredPixelFlow * o32.halfWindowPanAtZoom(e25 * e25));
}
function c12(o32, e25, a22) {
  return -2 * o32.compared.pan * o32.halfWindowSize * (a22.ascensionFactor + a22.descensionFactor - 1) / (o32.desiredPixelFlow * o32.halfWindowPanAtZoom(e25 * e25 * e25));
}
function l13(o32, e25, a22) {
  return o32.halfWindowSize * (-o32.halfWindowPanAtZoom(e25) - a22.descensionFactor * Math.LN2 * o32.compared.pan + o32.halfWindowPanAtZoom(o32.compared.targetZoom)) * Math.log(e25 / o32.compared.targetZoom) / (o32.desiredPixelFlow * Math.LN2 * o32.halfWindowPanAtZoom(-e25 + o32.compared.targetZoom));
}
function m18(o32, e25, a22) {
  const n33 = Math.log(e25 / o32.compared.targetZoom), t29 = 1 / o32.desiredPixelFlow, i22 = 1 / Math.LN2, r30 = -e25 + o32.compared.targetZoom, d21 = 1 / r30, c26 = (-o32.halfWindowPanAtZoom(e25) - a22.descensionFactor * Math.LN2 * o32.compared.pan + o32.halfWindowPanAtZoom(o32.compared.targetZoom)) / o32.halfWindowPanAtZoom(1);
  return -o32.halfWindowSize * n33 * t29 * i22 * d21 + o32.halfWindowSize * n33 * t29 * i22 * c26 / (r30 * r30) + o32.halfWindowSize * t29 * i22 * d21 * c26 / e25;
}
function h12(o32, e25, a22) {
  const n33 = e25 - o32.compared.targetZoom, t29 = 1 / n33, i22 = 1 / e25, r30 = Math.log(e25 / o32.compared.targetZoom), d21 = (o32.halfWindowPanAtZoom(e25) + a22.descensionFactor * Math.LN2 * o32.compared.pan - o32.halfWindowPanAtZoom(o32.compared.targetZoom)) / o32.halfWindowPanAtZoom(1);
  return o32.halfWindowSize * t29 * (-2 * t29 * i22 * d21 - 2 * t29 * r30 + 2 * i22 + 2 * r30 * d21 / (n33 * n33) - d21 / (e25 * e25)) / (o32.desiredPixelFlow * Math.LN2);
}
function s17(o32, e25) {
  return o32.halfWindowSize * Math.log(e25 / o32.compared.targetZoom) / (o32.desiredPixelFlow * Math.LN2);
}
function f12(o32, e25) {
  return o32.halfWindowSize / (e25 * o32.desiredPixelFlow * Math.LN2);
}
function w9(o32, e25) {
  return -o32.halfWindowSize / (e25 * e25 * o32.desiredPixelFlow * Math.LN2);
}
function p16(o32) {
  const e25 = o32.compared.sourceZoom - o32.compared.targetZoom;
  if (0 === e25) return o32.compared.pan * o32.halfWindowSize / (o32.desiredPixelFlow * o32.halfWindowPanAtZoom(o32.compared.sourceZoom));
  const a22 = Math.LN2 * o32.compared.pan, n33 = e25, t29 = o32.halfWindowPanAtZoom(n33), i22 = o32.halfWindowSize * Math.log(o32.compared.sourceZoom / o32.compared.targetZoom) / (o32.desiredPixelFlow * Math.LN2 * t29);
  return o32.compared.sourceZoom <= o32.compared.targetZoom ? i22 * (a22 - t29) : i22 * (a22 + t29);
}

// node_modules/@arcgis/core/views/animation/pointToPoint/apex/planning.js
function f13(f17, Z2) {
  let b8 = D3(f17, Z2);
  const h20 = { ascensionFactor: null != Z2.ascensionFactor ? Z2.ascensionFactor : 0.5, descensionFactor: null != Z2.descensionFactor ? Z2.descensionFactor : 0.5 }, M8 = 0 === h20.ascensionFactor, P6 = 0 === h20.descensionFactor, g13 = M8 ? n22 : o21, k4 = M8 ? t17 : e15, N2 = M8 ? i15 : a9, j5 = P6 ? s17 : l13, w11 = P6 ? f12 : m18, z5 = P6 ? w9 : h12, A6 = (o32) => g13(f17, o32, h20) + r20(f17, o32, h20) + j5(f17, o32, h20), I5 = (o32) => k4(f17, o32, h20) + d11(f17, o32, h20) + w11(f17, o32, h20), S5 = (o32) => N2(f17, o32, h20) + c12(f17, o32, h20) + z5(f17, o32, h20);
  let q = A6(b8);
  const v13 = p16(f17);
  let y10;
  const B5 = Z2.maximumIterations || 20, C6 = null != Z2.maximumDistance ? Z2.maximumDistance : 1 / 0;
  for (y10 = 0; y10 < B5; y10++) {
    const o32 = Z2.desiredSlope ?? 1e-6;
    let e25 = I5(b8);
    Math.abs(e25) > o32 && (e25 += o32);
    const n33 = e25 / S5(b8);
    if (isNaN(n33) || b8 >= C6 && n33 < 0) {
      if (!isFinite(C6)) return null;
      b8 = C6, q = A6(b8);
      break;
    }
    if (b8 -= n33, b8 < f17.compared.sourceZoom || b8 < f17.compared.targetZoom) return null;
    const a22 = A6(b8);
    if (Math.abs(a22 - q) / q <= 5e-3) break;
    q = a22;
  }
  return q > v13 * (1 - 0.3) || b8 < f17.compared.sourceZoom || b8 < f17.compared.targetZoom ? null : b8;
}
function D3(o32, e25) {
  const n33 = Math.max(o32.compared.sourceZoom, o32.compared.targetZoom), a22 = o32.source.zoomAtPixelsPerPan(o32.desiredPixelFlow / o32.compared.pan) / 2;
  return a22 < n33 ? null != e25.maximumDistance ? n33 + (e25.maximumDistance - n33) / 2 : 1.5 * n33 : e25.maximumDistance ? Math.min(e25.maximumDistance, a22) : a22;
}

// node_modules/@arcgis/core/views/animation/pointToPoint/apex/Path.js
var s18 = class extends e13 {
  constructor(i22, n33) {
    super(), this._preallocSegments = [new o20(), new o20(), new o20()], this._ascensionSegment = null, this._descensionSegment = null, this.update(i22, n33);
  }
  update(i22, n33) {
    if (!i22) return;
    this.definition ? this.definition.copyFrom(i22) : this.definition = i22.clone();
    const e25 = (n33 == null ? void 0 : n33.apex) ? f13(i22, n33.apex) : null;
    this.segments.length = 0, this._ascensionSegment = null, this._descensionSegment = null, e25 ? this._updateWithApex(e25, n33 == null ? void 0 : n33.apex) : this._updateWithoutApex();
  }
  segmentInterpolateComponentsAt(e25, t29, o32) {
    e25.interpolateComponentsAt(t29, o32), e25 === this._ascensionSegment ? o32.zoom = o18(o32.zoom) : e25 === this._descensionSegment && (o32.zoom = u10(o32.zoom));
  }
  _updateWithApex(i22, n33) {
    const [e25, t29, o32] = this._preallocSegments, s28 = (n33 == null ? void 0 : n33.ascensionFactor) ?? 0.5, d21 = Math.min(1 - s28, null != (n33 == null ? void 0 : n33.ascensionFactor) && null != n33.descensionFactor ? n33.descensionFactor : 0.5), a22 = 1 - s28 - d21;
    e25.definition ? e25.definition.copyFrom(this.definition) : e25.definition = this.definition.clone(), e25.definition.compared.targetZoom = i22, e25.definition.compared.pan = this.definition.compared.pan * s28, e25.definition.compared.rotate = this.definition.compared.rotate * s28, e25.definition.segmentEnd = s28, e25.update(), this._ascensionSegment = e25, this.segments.push(e25), a22 > 0 && (t29.definition ? t29.definition.copyFrom(this.definition) : t29.definition = this.definition.clone(), t29.definition.copyFrom(this.definition), t29.definition.compared.sourceZoom = i22, t29.definition.compared.targetZoom = i22, t29.definition.compared.pan = this.definition.compared.pan * a22, t29.definition.compared.rotate = this.definition.compared.rotate * a22, t29.definition.segmentStart = e25.definition.segmentEnd, t29.definition.segmentEnd = e25.definition.segmentEnd + a22, t29.update(), this.segments.push(t29)), o32.definition ? o32.definition.copyFrom(this.definition) : o32.definition = this.definition.clone(), o32.definition.compared.sourceZoom = i22, o32.definition.compared.pan = this.definition.compared.pan * d21, o32.definition.compared.rotate = this.definition.compared.rotate * d21, o32.definition.segmentStart = s28 + a22, o32.update(), this._descensionSegment = o32, this.segments.push(o32);
  }
  _updateWithoutApex() {
    const [i22] = this._preallocSegments;
    i22.update(this.definition), this.segments.push(i22);
  }
};

// node_modules/@arcgis/core/views/animation/pointToPoint/Animation.js
var h13 = new t16();
var p17 = class {
  get time() {
    return this._time;
  }
  get isLinear() {
    return 1 === this.path.segments.length;
  }
  constructor(i22) {
    this._time = n2(0), this._easing = w8, this.definition = new r19(i22), this.path = new s18();
  }
  update(t29, a22, o32) {
    this.definition.update(t29, a22, o32), this.path.update(this.definition, o32), this._time = this._applyTimeSettings(r3(isFinite(this.path.time) ? this.path.time : t3(0)), o32), this._easing = o32.easing ?? (this._time >= 1e3 ? w8 : f11);
  }
  cameraAt(t29, i22) {
    t29 = Math.min(Math.max(0, t29), 1), t29 = this._normalizedEasing(t29);
    const e25 = this.path.interpolateComponentsAt(t29, h13);
    i22.interpolate(this.definition.source, this.definition.target, e25);
  }
  _normalizedEasing(t29) {
    const i22 = this._easing(0, this._time), e25 = this._easing(1, this._time);
    return (this._easing(t29, this._time) - i22) / (e25 - i22);
  }
  _applyTimeSettings(i22, e25) {
    const n33 = null != e25.speedFactor ? e25.speedFactor : 1, s28 = e25.minDuration ?? o19.minDuration / n33, a22 = e25.maxDuration ?? o19.maxDuration / n33;
    return i22 = null != e25.duration ? e25.duration : n2(Math.min(Math.max(i22 / n33, s28), a22));
  }
};

// node_modules/@arcgis/core/views/2d/AnimationManager.js
var v10 = 2e3;
var j4 = 64;
var y6 = class {
  constructor(t29) {
    this._view = t29, this._animation = new p17(() => new a8(this._view)), this._current = new a8(this._view);
  }
  get _source() {
    return this._animation.definition.source;
  }
  get _target() {
    return this._animation.definition.target;
  }
  get duration() {
    return this._animation.time;
  }
  get animation() {
    return this._animation;
  }
  update(t29, i22, e25 = {}) {
    Z(this._current.viewpoint, t29), Z(this._source.viewpoint, t29), Z(this._target.viewpoint, i22), this._animation.update(this._source, this._target, e25);
  }
  applyRatio(t29, i22) {
    this._animation.cameraAt(i22, this._current), Z(t29, this._current.viewpoint);
  }
};
var T2 = class extends b2 {
  constructor(t29) {
    super(t29), this._animation = null, this._destinationViewState = new f10(), this.updateFunction = null, this.easing = t7.ease, this.viewpoint = new m7({ targetGeometry: new j(), scale: 0, rotation: 0 }), this._updateTask = A2({ postRender: this._postRender.bind(this) }), this._updateTask.pause(), this._transition = new y6(t29.view);
  }
  destroy() {
    this._updateTask = l(this._updateTask);
  }
  get animation() {
    return this._animation;
  }
  set animation(t29) {
    this._animation = t29, this.view.animation = t29;
  }
  animate(t29, i22, e25) {
    this.stop();
    const n33 = this.viewpoint;
    Z(n33, i22);
    const o32 = ("string" == typeof (e25 == null ? void 0 : e25.easing) ? r10(e25.easing) : e25 == null ? void 0 : e25.easing) || this.easing, s28 = t29.target;
    this._transition.update(this.viewpoint, s28, { apex: { maximumDistance: Math.min(Math.min(i22.scale, s28.scale) * j4, this.view.constraints.effectiveMinScale), desiredSlope: 5e-8 }, duration: e25 == null ? void 0 : e25.duration, maxDuration: "auto" === (e25 == null ? void 0 : e25.animationMode) ? n2(1 / 0) : (e25 == null ? void 0 : e25.maxDuration) ?? r18.maxDuration, speedFactor: e25 == null ? void 0 : e25.speedFactor, easing: "function" == typeof o32 ? (t30) => o32(t30) : void 0 }), "auto" === (e25 == null ? void 0 : e25.animationMode) && (this._destinationViewState.copy(this.view.state), this._destinationViewState.viewpoint = s28, x(this._transition.animation, e25, this.view.state, this._destinationViewState) || this._transition.update(this.viewpoint, s28, { duration: n2(0) }));
    const r30 = () => {
      this.animation === t29 && this._updateTask && ("finished" === t29.state && (this._transition.applyRatio(this.viewpoint, 1), this.view.state && (this.view.state.viewpoint = this.viewpoint.clone())), this.animation = null, this.updateFunction = null);
    };
    return t29.when(r30, r30), this._startTime = performance.now(), this._updateTask.resume(), this.animation = t29, t29;
  }
  animateContinuous(t29, i22) {
    this.stop(), this.updateFunction = i22, this.viewpoint = t29;
    const e25 = new a7({ target: t29.clone() }), n33 = () => {
      this.animation === e25 && this._updateTask && (this.animation = null, this.updateFunction = null);
    };
    return e25.when(n33, n33), this._startTime = performance.now(), this._updateTask.resume(), this.animation = e25, e25;
  }
  stop() {
    this.animation && (this.animation.stop(), this.animation = null, this.updateFunction = null);
  }
  _postRender(t29) {
    var _a, _b;
    const i22 = this.animation;
    if (i22 && i22.state !== a7.State.STOPPED) {
      if (this.updateFunction) this.updateFunction(this.viewpoint, t29.deltaTime), (_a = this.animation) == null ? void 0 : _a.update(this.viewpoint);
      else {
        const t30 = performance.now() - this._startTime, i23 = this._transition.duration, e25 = i23 > 0 ? t30 / i23 : 1, n33 = e25 >= 1;
        this._transition.applyRatio(this.viewpoint, e25), n33 && ((_b = this.animation) == null ? void 0 : _b.finish());
      }
      this.view.state && (this.view.state.viewpoint = this.viewpoint.clone());
    } else this._updateTask.pause();
  }
};
function x(t29, i22, e25, n33) {
  if (null != (i22 == null ? void 0 : i22.duration)) return true;
  const { time: o32, isLinear: a22 } = t29, r30 = (i22 == null ? void 0 : i22.speedFactor) || 1, h20 = (i22 == null ? void 0 : i22.maxDuration) ?? r18.maxDuration / r30;
  if (has("esri-goto-debug") && (console.log("speed factor:", r30), console.log("adjusted duration:		", o32), console.log("adjusted max duration:	", h20), console.log("is linear:", a22)), o32 > h20) return has("esri-goto-debug") && console.warn(`failed "auto" heuristic: animations must be shorter than ${h20 / 1e3}s`), false;
  if (a22) {
    const t30 = 1.5, i23 = n9(), a23 = c5(...n33.toScreen(i23, ...e25.center)), p27 = c5(...e25.toScreen(i23, ...n33.center)), u17 = null != p27 && p27.x > -(t30 - 0.5) * e25.size[0] && p27.x < (t30 + 0.5) * e25.size[0] && p27.y > -(t30 - 0.5) * e25.size[1] && p27.y < (t30 + 0.5) * e25.size[1], c26 = null != a23 && a23.x > -(t30 - 0.5) * n33.size[0] && a23.x < (t30 + 0.5) * n33.size[0] && a23.y > -(t30 - 0.5) * n33.size[1] && a23.y < (t30 + 0.5) * n33.size[1];
    if (has("esri-goto-debug") && (console.log(`dest is within ${t30} screens at start view:`, u17), console.log(`start is within ${t30} screens at dest view:`, c26)), o32 > v10 / r30 && !u17 && !c26) return has("esri-goto-debug") && console.warn(`failed "auto" heuristic: linear animations must be...
  - shorter than ${v10 / 1e3 / r30}s, or
  - shorter than ${h20 / 1e3}s and the destination is close enough to the starting screen, or
  - shorter than ${h20 / 1e3}s and the start point is close enough to the destination screen`), false;
  }
  return true;
}
r([m2()], T2.prototype, "easing", void 0), r([m2()], T2.prototype, "view", void 0), r([m2()], T2.prototype, "viewpoint", void 0), T2 = r([a("esri.views.2d.AnimationManager")], T2);
var S4 = T2;

// node_modules/@arcgis/core/views/2d/FrameTask.js
var d12 = class {
  constructor(e25) {
    this.view = e25, this._stationaryHandle = null, this._frameTaskHandle = null, this._updateParameters = null, this._updateRequested = false, this._scheduler = I2(), this.stationary = true, this.prepare = () => {
      var _a;
      this._updateParameters && (this._updateParameters.state = this.view.state, this._updateParameters.stationary = this.view.stationary, this._updateParameters.pixelRatio = window.devicePixelRatio, this._updateParameters.renderingOptions = this.view.renderingOptions, this._updateParameters.targetState.copy(this.view.state), null == ((_a = this.view.animation) == null ? void 0 : _a.target) || S(this.view.animation.target) || (this._updateParameters.targetState.viewpoint = this.view.animation.target));
    }, this.update = (t29) => {
      var _a;
      if (this._updateRequested = false, (_a = this.view) == null ? void 0 : _a.destroyed) return;
      const { allLayerViews: e26, graphicsView: a22, labelManager: s28, state: { id: r30 } } = this.view;
      e26.forEach(this._updateLayerView, this), null != s28 && (s28.lastUpdateId !== r30 && (s28.viewChange(), s28.lastUpdateId = r30), s28.updateRequested && s28.processUpdate(this._updateParameters)), null != a22 && (a22.lastUpdateId !== r30 && (a22.viewChange(), a22.lastUpdateId = r30), a22.updateRequested && a22.processUpdate(this._updateParameters)), this.view.graphicsTileStore.setViewState(this._updateParameters.state), this.view.animation ? this._scheduler.state = I.ANIMATING : this.view.interacting ? this._scheduler.state = I.INTERACTING : this._scheduler.state = I.IDLE, this._scheduler.updateBudget(t29) && this._scheduler.frame();
    };
  }
  destroy() {
    this.stop(), this._scheduler.destroy();
  }
  get scheduler() {
    return this._scheduler;
  }
  start() {
    if (this._frameTaskHandle) return;
    const t29 = this.view;
    this.stationary = t29.stationary, this._updateParameters = { state: t29.state, targetState: new f10(), pixelRatio: window.devicePixelRatio, stationary: this.stationary, renderingOptions: t29.renderingOptions }, this._stationaryHandle = d3(() => t29.stationary, (t30) => {
      this.stationary = t30, this.requestFrame();
    }), this._frameTaskHandle = A2(this), this.requestUpdate();
  }
  stop() {
    var _a;
    this._frameTaskHandle && (this._updateRequested = false, (_a = this._stationaryHandle) == null ? void 0 : _a.remove(), this._frameTaskHandle.remove(), this._updateParameters = this._stationaryHandle = this._frameTaskHandle = null, this.stationary = true);
  }
  requestUpdate() {
    this._updateRequested || (this._updateRequested = true, this.requestFrame());
  }
  requestFrame() {
    this._frameTaskHandle && this._frameTaskHandle.resume();
  }
  _updateLayerView(t29) {
    var _a;
    if (!t29.attached) return void this.requestUpdate();
    const e25 = this.view.state, a22 = t29.lastUpdateId;
    null != a22 && (this.stationary || t29.moving) || (t29.moving = true), a22 !== e25.id && t29.viewChange(), this.stationary && t29.moving && (t29.moving = false, t29.moveEnd()), t29.lastUpdateId = e25.id, t29.updateRequested && t29.processUpdate(this._updateParameters), "layerViews" in t29 && ((_a = t29.layerViews) == null ? void 0 : _a.forEach(this._updateLayerView, this));
  }
};

// node_modules/@arcgis/core/views/2d/GoToManager.js
var h14 = class extends b2 {
  constructor(t29) {
    super(t29), this._gotoTask = null;
  }
  destroy() {
    this._gotoTask = null;
  }
  async goTo(t29, e25) {
    if (!t29) return void n.getLogger(this).error("#goTo()", "target cannot be null or undefined");
    const i22 = new a7();
    this.view.animation = i22, await w(() => this.view.ready, e25);
    const s28 = { ...e25, animate: (e25 == null ? void 0 : e25.animate) ?? !o10(), animationMode: (e25 == null ? void 0 : e25.animationMode) ?? "auto" }, { extent: a22, spatialReference: c26, size: m26, viewpoint: h20, constraints: g13, padding: w11, allLayerViews: d21 } = this.view, u17 = Y(t29, { extent: a22, spatialReference: c26, size: m26, viewpoint: h20, constraints: g13, padding: w11, allLayerViews: d21, pickClosestTarget: (e25 == null ? void 0 : e25.pickClosestTarget) ?? true });
    return i22 == null ? void 0 : i22.update(u17), this._gotoTask = {}, s28.animate ? this._gotoAnimated(u17, s28) : this._gotoImmediate(u17, s28);
  }
  _gotoImmediate(t29, o32) {
    const e25 = this._gotoTask, r30 = this.view.animation, a22 = t29.then((t30) => {
      if (s2(o32), e25 !== this._gotoTask) throw new s("view:goto-interrupted", "Goto was interrupted");
      this.view.viewpoint = r30.target = t30, r30.finish();
    });
    return this._cancellableGoTo(e25, r30, a22, o32);
  }
  _gotoAnimated(t29, o32) {
    const e25 = this._gotoTask, r30 = this.view.animation;
    if (!r30) return Promise.resolve();
    const a22 = t29.then((t30) => {
      if (s2(o32), e25 !== this._gotoTask) throw new s("view:goto-interrupted", "Goto was interrupted");
      return r30.update(t30), this.view.animationManager.animate(r30, this.view.viewpoint, o32), r30.when().then(() => {
      }, () => {
      });
    });
    return this._cancellableGoTo(e25, r30, a22, o32);
  }
  _cancellableGoTo(t29, o32, e25, i22) {
    const r30 = () => t29 === this._gotoTask;
    return h2(e25, i22).finally(() => {
      r30() && (o32.done || o32.stop());
    });
  }
};
r([m2({ constructOnly: true })], h14.prototype, "view", void 0), h14 = r([a("esri.views.2d.GoToManager")], h14);

// node_modules/@arcgis/core/views/2d/layerViewModuleImportUtils.js
function r21() {
  return Promise.all([import("./webglDeps-2453V42M.js"), import("./mapViewDeps-MMMJKFTO.js")]);
}
var a10 = () => r21().then(() => import("./TileLayerView2D-KCJF3HRG.js"));
var t18 = () => r21().then(() => import("./FeatureLayerView2D-XWUOXAQS.js"));
var i16 = { "base-dynamic": () => r21().then(() => import("./BaseDynamicLayerView2D-KAMEI5PX.js")), "base-tile": a10, "bing-maps": a10, catalog: () => r21().then(() => import("./CatalogLayerView2D-KLXY4ZBE.js")), "catalog-dynamic-group": () => r21().then(() => import("./CatalogDynamicGroupLayerView2D-E5U4EAQE.js")), "catalog-footprint": () => r21().then(() => import("./CatalogFootprintLayerView2D-7UH7F3TJ.js")), csv: t18, "geo-rss": () => r21().then(() => import("./GeoRSSLayerView2D-RODSMIK3.js")), feature: t18, geojson: t18, parquet: t18, graphics: () => r21().then(() => import("./GraphicsLayerView2D-DZG4IB2K.js")), group: () => r21().then(() => import("./GroupLayerView2D-32G3EX4X.js")), imagery: () => r21().then(() => import("./ImageryLayerView2D-7OQUKTG5.js")), "imagery-tile": () => r21().then(() => import("./ImageryTileLayerView2D-X7GQJBYP.js")), kml: () => r21().then(() => import("./KMLLayerView2D-QGMKZDM3.js")), "knowledge-graph": () => r21().then(() => import("./KnowledgeGraphLayerView2D-E4FSDVWU.js")), "link-chart": () => r21().then(() => import("./KnowledgeGraphLayerView2D-E4FSDVWU.js")), "knowledge-graph-sublayer": t18, "map-image": () => r21().then(() => import("./MapImageLayerView2D-RQVAQXHW.js")), "map-notes": () => r21().then(() => import("./MapNotesLayerView2D-L2FEMDQ3.js")), media: () => r21().then(() => import("./MediaLayerView2D-HUNHTYJ2.js")), "ogc-feature": () => r21().then(() => import("./OGCFeatureLayerView2D-OH5DPW7H.js")), "open-street-map": a10, "oriented-imagery": t18, route: () => r21().then(() => import("./RouteLayerView2D-IWNMBZI2.js")), stream: () => r21().then(() => import("./StreamLayerView2D-PUPOYXIA.js")), "subtype-group": () => r21().then(() => import("./SubtypeGroupLayerView2D-OZV633K2.js")), tile: a10, "vector-tile": () => r21().then(() => import("./VectorTileLayerView2D-SI7VQDS6.js")), video: () => r21().then(() => import("./VideoLayerView2D-OGP5E2HE.js")), wcs: () => r21().then(() => import("./ImageryTileLayerView2D-X7GQJBYP.js")), "web-tile": a10, wfs: t18, wms: () => r21().then(() => import("./WMSLayerView2D-VOK6E34H.js")), wmts: () => r21().then(() => import("./WMTSLayerView2D-766D52RZ.js")), "line-of-sight": null, "base-elevation": null, "building-scene": null, dimension: null, elevation: null, focusArea: null, "integrated-mesh": null, "integrated-mesh-3dtiles": null, "point-cloud": null, viewshed: null, voxel: null, scene: null, unknown: null, unsupported: null };
function s19(r30) {
  const a22 = r30.declaredClass ? r30.declaredClass.slice(r30.declaredClass.lastIndexOf(".") + 1) : "Unknown", t29 = a22.replaceAll(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  return new s(`${t29}:view-not-supported`, `${a22} is not supported in 2D`);
}
var l14 = { hasLayerViewModule: (e25) => null != i16[e25.type], importLayerView: (e25) => {
  const r30 = i16[e25.type];
  if (null == r30) throw s19(e25);
  return r30(e25);
} };

// node_modules/@arcgis/core/geometry/support/near.js
function n23(n33, m26) {
  const { spatialReference: r30 } = m26, i22 = [m26.x, m26.y];
  let s28 = Number.POSITIVE_INFINITY, x2 = 0, a22 = 0;
  const c26 = [0, 0], f17 = "extent" === n33.type ? [[[n33.xmin, n33.ymin], [n33.xmin, n33.ymax], [n33.xmax, n33.ymax], [n33.xmax, n33.ymin], [n33.xmin, n33.ymin]]] : n33.rings;
  for (const o32 of f17) for (let n34 = 0; n34 < o32.length - 1; n34++) {
    s6(c26, i22, o32, n34);
    const m27 = m5(i22, c26);
    m27 < s28 && (s28 = m27, x2 = c26[0], a22 = c26[1]);
  }
  return { coordinate: new j({ x: x2, y: a22, spatialReference: r30 }), distance: s28 };
}

// node_modules/@arcgis/core/views/2d/constraints/GeometryConstraint.js
var l15;
var p18 = l15 = class extends i2(b2) {
  constructor(e25) {
    super(e25), this.geometry = null, this.spatialReference = null;
  }
  get normalizedGeometry() {
    if (null == this.geometry || !this.spatialReference) return null;
    if (!this.spatialReference.equals(this.geometry.spatialReference)) try {
      return K(this.geometry, this.spatialReference);
    } catch (e25) {
      return n.getLogger(this).error("#constraints.geometry", "could not project the geometry to the view's spatial reference", { geometry: this.geometry, spatialReference: this.spatialReference, error: e25 }), null;
    }
    return this.geometry;
  }
  constrain(e25, r30) {
    if (null == this.normalizedGeometry) return e25;
    const t29 = e25.targetGeometry;
    if ("extent" === this.normalizedGeometry.type ? t5(this.normalizedGeometry, t29) : f2(this.normalizedGeometry, t29)) return e25;
    const { coordinate: o32 } = n23(this.normalizedGeometry, t29);
    return o32 ? (e25.targetGeometry = o32, e25) : e25;
  }
  clone() {
    var _a, _b;
    return new l15({ geometry: (_a = this.geometry) == null ? void 0 : _a.clone(), spatialReference: (_b = this.spatialReference) == null ? void 0 : _b.clone() });
  }
};
r([m2({ constructOnly: true })], p18.prototype, "geometry", void 0), r([m2({ readOnly: true })], p18.prototype, "normalizedGeometry", null), r([m2({ constructOnly: true })], p18.prototype, "spatialReference", void 0), p18 = l15 = r([a("esri.views.2d.constraints.GeometryConstraint")], p18);

// node_modules/@arcgis/core/views/2d/constraints/RotationConstraint.js
var a11;
var n24 = a11 = class extends i2(b2) {
  constructor() {
    super(...arguments), this.enabled = true, this.rotationEnabled = true;
  }
  constrain(o32, t29) {
    return this.enabled && t29 ? (this.rotationEnabled || (o32.rotation = t29.rotation), o32) : o32;
  }
  clone() {
    return new a11({ enabled: this.enabled, rotationEnabled: this.rotationEnabled });
  }
};
r([m2()], n24.prototype, "enabled", void 0), r([m2()], n24.prototype, "rotationEnabled", void 0), n24 = a11 = r([a("esri.views.2d.constraints.RotationConstraint")], n24);
var i17 = n24;

// node_modules/@arcgis/core/views/2d/constraints/ZoomConstraint.js
var a12;
var c13 = a12 = class extends i2(b2) {
  constructor(e25) {
    super(e25), this._lodByScale = {}, this._scales = [], this.effectiveLODs = null, this.effectiveMinZoom = -1, this.effectiveMaxZoom = -1, this.effectiveMinScale = 0, this.effectiveMaxScale = 0, this.lods = null, this.minZoom = -1, this.maxZoom = -1, this.minScale = 0, this.maxScale = 0, this.snapToZoom = true;
  }
  initialize() {
    let e25, { lods: t29, minScale: o32, maxScale: s28, minZoom: i22, maxZoom: a22 } = this, c26 = -1, l21 = -1, r30 = false, n33 = false;
    if (0 !== o32 && 0 !== s28 && o32 < s28 && ([o32, s28] = [s28, o32]), !(t29 == null ? void 0 : t29.length)) return this._set("effectiveMinScale", o32), void this._set("effectiveMaxScale", s28);
    t29 = t29.map((e26) => e26.clone()), t29.sort((e26, t30) => t30.scale - e26.scale), t29.forEach((e26, t30) => e26.level = t30);
    for (const f17 of t29) !r30 && o32 > 0 && o32 >= f17.scale && (c26 = f17.level, r30 = true), !n33 && s28 > 0 && s28 >= f17.scale && (l21 = e25 ? e25.level : -1, n33 = true), e25 = f17;
    -1 === i22 && (i22 = 0 === o32 ? 0 : c26), -1 === a22 && (a22 = 0 === s28 ? t29.length - 1 : l21), i22 = Math.max(i22, 0), i22 = Math.min(i22, t29.length - 1), a22 = Math.max(a22, 0), a22 = Math.min(a22, t29.length - 1), i22 > a22 && ([i22, a22] = [a22, i22]), o32 = t29[i22].scale, s28 = t29[a22].scale, t29.splice(0, i22), t29.splice(a22 - i22 + 1, t29.length), t29.forEach((e26, t30) => {
      this._lodByScale[e26.scale] = e26, this._scales[t30] = e26.scale;
    }), this._set("effectiveLODs", t29), this._set("effectiveMinZoom", i22), this._set("effectiveMaxZoom", a22), this._set("effectiveMinScale", o32), this._set("effectiveMaxScale", s28);
  }
  constrain(e25, t29) {
    if (t29 && e25.scale === t29.scale) return e25;
    const o32 = this.effectiveMinScale, s28 = this.effectiveMaxScale, i22 = e25.targetGeometry, a22 = t29 && t29.targetGeometry, c26 = 0 !== s28 && e25.scale < s28, l21 = 0 !== o32 && e25.scale > o32;
    if (c26 || l21) {
      const c27 = l21 ? o32 : s28;
      if (t29 && a22) {
        const o33 = (c27 - t29.scale) / (e25.scale - t29.scale);
        i22.x = a22.x + (i22.x - a22.x) * o33, i22.y = a22.y + (i22.y - a22.y) * o33;
      }
      e25.scale = c27;
    }
    return this.snapToZoom && this.effectiveLODs && (e25.scale = this._getClosestScale(e25.scale)), e25;
  }
  fit(e25) {
    if (!this.effectiveLODs || !this.snapToZoom) return this.constrain(e25, null);
    const t29 = this.scaleToZoom(e25.scale), o32 = Math.abs(t29 - Math.floor(t29));
    return e25.scale = this.zoomToScale(o32 > 0.99 ? Math.round(t29) : Math.floor(t29)), e25;
  }
  zoomToScale(e25) {
    if (!this.effectiveLODs) return 0;
    e25 -= this.effectiveMinZoom, e25 = Math.max(0, e25);
    const t29 = this._scales;
    if (e25 <= 0) return t29[0];
    if (e25 >= t29.length) return t29[t29.length - 1];
    const o32 = Math.floor(e25), s28 = Math.ceil(e25);
    return t29[o32] + (e25 - o32) * (t29[s28] - t29[o32]);
  }
  scaleToZoom(e25) {
    if (!this.effectiveLODs) return -1;
    const t29 = this._scales;
    let o32, s28;
    if (e25 >= t29[0]) return this.effectiveMinZoom;
    if (e25 <= t29[t29.length - 1]) return this.effectiveMaxZoom;
    for (let i22 = 0; i22 < t29.length - 1; i22++) {
      if (o32 = t29[i22], s28 = t29[i22 + 1], s28 === e25) {
        return i22 + this.effectiveMinZoom + 1;
      }
      if (o32 > e25 && s28 < e25) {
        return i22 + this.effectiveMinZoom + 1 - (e25 - s28) / (o32 - s28);
      }
    }
    return -1;
  }
  snapToClosestScale(e25) {
    if (!this.effectiveLODs) return e25;
    const t29 = this.scaleToZoom(e25);
    return this.zoomToScale(Math.round(t29));
  }
  snapToNextScale(e25, t29 = 0.5) {
    if (!this.effectiveLODs) return e25 * t29;
    const o32 = Math.round(this.scaleToZoom(e25));
    return this.zoomToScale(o32 + 1);
  }
  snapToPreviousScale(e25, t29 = 2) {
    if (!this.effectiveLODs) return e25 * t29;
    const o32 = Math.round(this.scaleToZoom(e25));
    return this.zoomToScale(o32 - 1);
  }
  clone() {
    return new a12({ lods: this.lods, minZoom: this.minZoom, maxZoom: this.maxZoom, minScale: this.minScale, maxScale: this.maxScale });
  }
  _getClosestScale(e25) {
    return this._lodByScale[e25] || (e25 = this._scales.reduce((t29, o32) => Math.abs(o32 - e25) <= Math.abs(t29 - e25) ? o32 : t29, this._scales[0])), this._lodByScale[e25].scale;
  }
};
r([m2({ readOnly: true })], c13.prototype, "effectiveLODs", void 0), r([m2({ readOnly: true })], c13.prototype, "effectiveMinZoom", void 0), r([m2({ readOnly: true })], c13.prototype, "effectiveMaxZoom", void 0), r([m2({ readOnly: true })], c13.prototype, "effectiveMinScale", void 0), r([m2({ readOnly: true })], c13.prototype, "effectiveMaxScale", void 0), r([m2()], c13.prototype, "lods", void 0), r([m2()], c13.prototype, "minZoom", void 0), r([m2()], c13.prototype, "maxZoom", void 0), r([m2()], c13.prototype, "minScale", void 0), r([m2()], c13.prototype, "maxScale", void 0), r([m2()], c13.prototype, "snapToZoom", void 0), c13 = a12 = r([a("esri.views.2d.constraints.ZoomConstraint")], c13);
var l16 = c13;

// node_modules/@arcgis/core/views/2d/MapViewConstraints.js
var p19 = { base: null, key: "type", typeMap: { extent: w3, polygon: v4 } };
var y7 = class extends b2 {
  constructor(o32) {
    super(o32), this.lods = null, this.minScale = 0, this.maxScale = 0, this.minZoom = -1, this.maxZoom = -1, this.rotationEnabled = true, this.snapToZoom = true, this.customConstraints = new V();
  }
  destroy() {
    this.view = null;
  }
  get effectiveLODs() {
    return this._zoom.effectiveLODs;
  }
  get effectiveMinScale() {
    return this._zoom.effectiveMinScale;
  }
  get effectiveMaxScale() {
    return this._zoom.effectiveMaxScale;
  }
  get effectiveMinZoom() {
    return this._zoom.effectiveMinZoom;
  }
  get effectiveMaxZoom() {
    return this._zoom.effectiveMaxZoom;
  }
  set geometry(o32) {
    o32 ? this._set("geometry", o32) : this._set("geometry", null);
  }
  get version() {
    var _a, _b, _c;
    return `${(_a = this._zoom) == null ? void 0 : _a.uid}/${(_b = this._rotation) == null ? void 0 : _b.uid}/${(_c = this._geometry) == null ? void 0 : _c.uid}`;
  }
  get _geometry() {
    var _a, _b;
    const o32 = this._get("_geometry");
    return o32 && this.geometry === o32.geometry && ((_a = this.view) == null ? void 0 : _a.constraintsInfo.spatialReference) === o32.spatialReference ? o32 : new p18({ geometry: this.geometry, spatialReference: (_b = this.view) == null ? void 0 : _b.constraintsInfo.spatialReference });
  }
  get _rotation() {
    return new i17({ rotationEnabled: this.rotationEnabled });
  }
  get _zoom() {
    var _a;
    const o32 = this._get("_zoom"), t29 = this.lods || ((_a = this.view) == null ? void 0 : _a.constraintsInfo.lods), e25 = this.minZoom, r30 = this.maxZoom, s28 = this.minScale, i22 = this.maxScale, n33 = this.snapToZoom;
    return o32 && o32.lods === t29 && o32.minZoom === e25 && o32.maxZoom === r30 && o32.minScale === s28 && o32.maxScale === i22 && o32.snapToZoom === n33 ? o32 : new l16({ lods: t29, minZoom: e25, maxZoom: r30, minScale: s28, maxScale: i22, snapToZoom: n33 });
  }
  canZoomInTo(o32) {
    const t29 = this.effectiveMaxScale;
    return 0 === t29 || o32 >= t29;
  }
  canZoomOutTo(o32) {
    const t29 = this.effectiveMinScale;
    return 0 === t29 || o32 <= t29;
  }
  constrain(o32, t29) {
    return this._zoom.constrain(o32, t29), this._rotation.constrain(o32, t29), this._geometry.constrain(o32, t29), this.customConstraints.forEach((e25) => e25.constrain(o32, t29)), o32;
  }
  constrainByGeometry(o32) {
    return this._geometry.constrain(o32), this.customConstraints.forEach((t29) => {
      var _a;
      return (_a = t29.applyPanConstraint) == null ? void 0 : _a.call(t29, o32);
    }), o32;
  }
  fit(o32) {
    return this._zoom.fit(o32);
  }
  zoomToScale(o32) {
    return this._zoom.zoomToScale(o32);
  }
  scaleToZoom(o32) {
    return this._zoom.scaleToZoom(o32);
  }
  snapScale(o32) {
    return this._zoom.snapToClosestScale(o32);
  }
  snapToNextScale(o32) {
    return this._zoom.snapToNextScale(o32);
  }
  snapToPreviousScale(o32) {
    return this._zoom.snapToPreviousScale(o32);
  }
};
r([m2({ readOnly: true })], y7.prototype, "effectiveLODs", null), r([m2({ readOnly: true })], y7.prototype, "effectiveMinScale", null), r([m2({ readOnly: true })], y7.prototype, "effectiveMaxScale", null), r([m2({ readOnly: true })], y7.prototype, "effectiveMinZoom", null), r([m2({ readOnly: true })], y7.prototype, "effectiveMaxZoom", null), r([m2({ types: p19, value: null })], y7.prototype, "geometry", null), r([m2({ type: [p2] })], y7.prototype, "lods", void 0), r([m2()], y7.prototype, "minScale", void 0), r([m2()], y7.prototype, "maxScale", void 0), r([m2()], y7.prototype, "minZoom", void 0), r([m2()], y7.prototype, "maxZoom", void 0), r([m2()], y7.prototype, "rotationEnabled", void 0), r([m2()], y7.prototype, "snapToZoom", void 0), r([m2({ type: V })], y7.prototype, "customConstraints", void 0), r([m2()], y7.prototype, "view", void 0), r([m2({ readOnly: true })], y7.prototype, "version", null), r([m2({ type: p18, readOnly: true })], y7.prototype, "_geometry", null), r([m2({ type: i17 })], y7.prototype, "_rotation", null), r([m2({ readOnly: true, type: l16 })], y7.prototype, "_zoom", null), y7 = r([a("esri.views.2d.MapViewConstraints")], y7);
var f14 = y7;

// node_modules/@arcgis/core/views/2d/ViewStateManager.js
var z3 = class extends b2 {
  constructor(t29) {
    super(t29), this.constraints = null, this.ready = false, this.resizeAlign = "center", this.addHandles([d3(() => {
      var _a;
      return (_a = this.constraints) == null ? void 0 : _a.version;
    }, (t30) => {
      this.constraints && t30 && this.ready && (this.state.viewpoint = this.constraints.fit(this.state.paddedViewState.viewpoint));
    }, C)]);
  }
  get center() {
    if (!this.ready) return this._get("center");
    const { center: t29, spatialReference: e25 } = this.state.paddedViewState;
    return this.state.commitProperty("id"), new j({ x: t29[0], y: t29[1], spatialReference: e25 });
  }
  set center(t29) {
    if (null == t29) return;
    if (!this.ready) return void this._set("center", t29);
    let e25;
    try {
      e25 = this._project(t29, this.state.spatialReference);
    } catch (o32) {
      return void n.getLogger(this).error(new s("mapview:invalid-center", "could not project the value in the view's spatial reference", { input: t29, error: o32 }));
    }
    const i22 = this.viewpoint;
    xt(i22, i22, e25), this.viewpoint = i22;
  }
  get extent() {
    return this.ready ? (this.state.commitProperty("id"), this.state.paddedViewState.extent.clone()) : this._get("extent");
  }
  set extent(t29) {
    if (null == t29) return;
    if (!t29.width || !t29.height) return void n.getLogger(this).error(new s("mapview:invalid-extent", "invalid extent size"));
    if (!this.ready) return this._set("extent", t29), this._set("center", void 0), this._set("viewpoint", void 0), this._set("scale", void 0), void this._set("zoom", void 0);
    let e25;
    try {
      e25 = this._project(t29, this.state.spatialReference);
    } catch (o32) {
      return void n.getLogger(this).error(new s("mapview:invalid-extent", "could not project the value in the view's spatial reference", { error: o32 }));
    }
    const i22 = this.viewpoint;
    tt(i22, i22, e25, this.state.size, { constraints: this.constraints }), this.viewpoint = i22;
  }
  get padding() {
    return this.ready ? this.state.padding : this._get("padding");
  }
  set padding(t29) {
    this.ready ? (this.state.padding = t29, this._set("padding", this.state.padding)) : this._set("padding", t29);
  }
  get resolution() {
    return this.ready ? (this.state.commitProperty("id"), this.state.resolution) : 0;
  }
  get rotation() {
    return this.ready ? (this.state.commitProperty("id"), this.state.rotation) : this._get("rotation");
  }
  set rotation(t29) {
    if (isNaN(t29)) return;
    if (!this.ready) return void this._set("rotation", t29);
    const e25 = this.viewpoint;
    wt(e25, e25, t29), this.viewpoint = e25;
  }
  get scale() {
    return this.ready ? (this.state.commitProperty("id"), this.state.scale) : this._get("scale");
  }
  set scale(t29) {
    if (!t29 || isNaN(t29)) return;
    if (!this.ready) {
      this._set("scale", t29), this._set("zoom", void 0);
      const e26 = this._get("extent");
      return void (e26 && (this._set("extent", void 0), this._set("center", e26.center)));
    }
    const e25 = this.viewpoint;
    jt(e25, e25, t29), this.viewpoint = e25;
  }
  get viewpoint() {
    if (!this.ready) return this._get("viewpoint");
    return this.state.paddedViewState.viewpoint.clone();
  }
  set viewpoint(t29) {
    var _a;
    if (null == t29) return;
    if (!this.ready) return this._set("viewpoint", t29), this._set("extent", void 0), this._set("center", void 0), this._set("zoom", void 0), void this._set("scale", void 0);
    let i22, o32;
    try {
      i22 = this._project(t29, this.state.spatialReference), !t29.scale || isNaN(t29.scale) ? o32 = new s("mapview:invalid-viewpoint", `invalid scale value of ${t29.scale}`) : null == t29.targetGeometry && (o32 = new s("mapview:invalid-viewpoint", "geometry not defined"));
    } catch (a22) {
      o32 = new s("mapview:invalid-viewpoint", "could not project the value in the view's spatial reference", { error: a22 });
    }
    if (o32) return void n.getLogger(this).error(o32);
    this._scaleBeforeChangingSpatialReference = null;
    const n33 = new m7({ targetGeometry: new j(), scale: 0, rotation: 0 });
    Z(n33, i22), (_a = this.constraints) == null ? void 0 : _a.constrain(n33, this.state.paddedViewState.viewpoint), this.state.viewpoint = n33, this._set("viewpoint", n33);
  }
  get visibleArea() {
    return this.ready ? this.state.visibleArea : null;
  }
  get zoom() {
    var _a;
    return this.ready ? ((_a = this.constraints) == null ? void 0 : _a.scaleToZoom(this.scale)) ?? -1 : this._get("zoom");
  }
  set zoom(t29) {
    var _a, _b;
    if (!(t29 >= 0)) return;
    if (!this.ready) {
      this._set("zoom", t29), this._set("scale", void 0);
      const e26 = this._get("extent");
      return void (e26 && (this._set("extent", void 0), this._set("center", e26.center)));
    }
    const e25 = ((_a = this.constraints) == null ? void 0 : _a.zoomToScale(t29)) ?? 0;
    if (!e25) return void this._set("zoom", -1);
    const i22 = this.viewpoint;
    jt(i22, i22, e25), this.viewpoint = i22, this._set("zoom", ((_b = this.constraints) == null ? void 0 : _b.scaleToZoom(this.scale)) ?? -1);
  }
  getUserStartupOptions(t29) {
    if (!t29[0] && !t29[1]) return { center: void 0, rotation: void 0, scale: void 0 };
    const { padding: e25, constraints: i22 } = this, s28 = this._get("center"), r30 = this._get("extent"), o32 = this._get("scale"), n33 = this._get("rotation"), a22 = this._get("viewpoint"), c26 = this._get("zoom"), p27 = null != c26 && null != i22 && i22.zoomToScale(c26) || void 0;
    let h20, l21, d21;
    const v13 = a22 == null ? void 0 : a22.rotation, m26 = a22 == null ? void 0 : a22.targetGeometry;
    "extent" === (m26 == null ? void 0 : m26.type) ? h20 = m26 : "point" === (m26 == null ? void 0 : m26.type) && (l21 = m26, d21 = a22 == null ? void 0 : a22.scale);
    const u17 = r30 ?? h20;
    return { center: s28 ?? l21 ?? (u17 == null ? void 0 : u17.center), rotation: n33 ?? v13, scale: (o32 ?? p27 ?? d21 ?? (u17 && H(u17, [t29[0] - e25.left - e25.right, t29[1] - e25.top - e25.bottom]))) || void 0 };
  }
  startup(t29, e25, i22, s28) {
    var _a;
    const o32 = t29.targetGeometry;
    try {
      this._project(t29, i22);
    } catch (n33) {
      n.getLogger(this).warn(new s3("mapview:startup-projection-error", "projection of initial viewpoint to the view's spatial reference, defaulting to the initial viewpoint.", { center: o32.toJSON(), spatialReference: i22, error: n33 })), t29.targetGeometry = s28 || new j({ x: 0, y: 0, spatialReference: i22 });
    }
    (_a = this.constraints) == null ? void 0 : _a.fit(t29), this._set("state", new f10({ padding: this.padding, size: e25, viewpoint: t29 })), this._set("ready", true);
  }
  teardown() {
    this._set("ready", false);
    const { center: [t29, e25], spatialReference: i22, rotation: s28, scale: r30 } = this.state.paddedViewState, o32 = new j({ x: t29, y: e25, spatialReference: i22 });
    this._set("viewpoint", null), this._set("extent", null), this._set("center", o32), this._set("zoom", -1), this._set("rotation", s28), this._set("scale", r30), this._set("state", null);
  }
  changeSpatialReference(t29) {
    var _a;
    const i22 = this.state.paddedViewState.clone();
    if (null == this._scaleBeforeChangingSpatialReference) this._scaleBeforeChangingSpatialReference = i22.scale;
    else {
      const t30 = i22.viewpoint.clone();
      t30.scale = this._scaleBeforeChangingSpatialReference, i22.viewpoint = t30;
    }
    const s28 = i22.clone(), [o32, n33] = i22.center;
    let a22 = null;
    try {
      a22 = this._project(new j({ x: o32, y: n33, spatialReference: i22.spatialReference }), t29);
    } catch (h20) {
      r6() || n.getLogger(this).warn(new s3("mapview:spatial-reference-change", "could not project the view's center to the new spatial reference", { center: a22 == null ? void 0 : a22.toJSON(), spatialReference: t29, error: h20 }));
    }
    a22 || (a22 = new j({ x: 0, y: 0, spatialReference: t29 }));
    const p27 = xt(new m7({ targetGeometry: new j(), scale: 0, rotation: 0 }), i22.viewpoint, a22);
    s28.viewpoint = p27;
    try {
      const e25 = 20, r30 = [i22.size[0] / 2, i22.size[1] / 2], o33 = [r30[0] + e25, r30[1]], n34 = i22.toMap([0, 0], o33), { x: a23, y: c26 } = this._project(new j({ x: n34[0], y: n34[1], spatialReference: i22.spatialReference }), t29);
      n34[0] = a23, n34[1] = c26, s28.toScreen(n34, n34);
      const h20 = pt(r30, n34, o33), l21 = Math.hypot(n34[0] - r30[0], n34[1] - r30[1]) / e25;
      !Number.isFinite(l21) || Math.abs(l21) > 4 ? (p27.rotation = 0, p27.targetGeometry = new j({ x: 0, y: 0, spatialReference: t29 })) : (p27.scale *= l21, p27.scale > has("mapview-srswitch-adjust-rotation-scale-threshold") ? p27.rotation = 0 : p27.rotation += Number.isFinite(h20) ? h20 : 0);
    } catch {
    }
    (_a = this._get("constraints")) == null ? void 0 : _a.constrain(p27, void 0), this._get("state").viewpoint = p27;
  }
  resize(t29, e25) {
    var _a;
    if (!this.ready) return;
    const i22 = this.state;
    let s28 = this.state.paddedViewState.viewpoint;
    const r30 = this.state.paddedViewState.size.slice();
    i22.size = [t29, e25], ht(s28, s28, r30, this.state.paddedViewState.size, this.resizeAlign), s28 = ((_a = this.constraints) == null ? void 0 : _a.constrain(s28, void 0)) ?? s28, this.state.viewpoint = s28;
  }
  toMap(t29) {
    if (!this.ready) return null;
    const e25 = [0, 0], [i22, s28] = this.state.toMap(e25, [t29.x, t29.y]), r30 = this.state.spatialReference;
    return new j({ x: i22, y: s28, spatialReference: r30 });
  }
  toScreen(t29, e25) {
    if (!this.ready) return null;
    const i22 = this._project(t29, this.state.spatialReference), s28 = [i22.x, i22.y];
    return false === (e25 == null ? void 0 : e25.pickClosestTarget) || this.state.paddedViewState.wrapMapCoordinate(s28, s28), this.state.toScreen(s28, s28), c5(s28[0], s28[1]);
  }
  _project(t29, e25) {
    var _a;
    const i22 = (t29 == null ? void 0 : t29.targetGeometry) || t29;
    if (!e25) return t29;
    if (!i22) return null;
    if (e25.imageCoordinateSystem || ((_a = i22.spatialReference) == null ? void 0 : _a.imageCoordinateSystem)) return t29;
    if (s5(e25, i22.spatialReference)) return t29;
    const r30 = K(i22, e25);
    if (!r30) throw new s("mapview:projection-not-possible", "projecting input geometry to target spatial reference returned a null value", { geometry: i22, spatialReference: e25 });
    return V3(t29) ? (t29.targetGeometry = r30, t29) : r30;
  }
};
function V3(t29) {
  return "esri.Viewpoint" === (t29 == null ? void 0 : t29.declaredClass);
}
r([m2({ type: j })], z3.prototype, "center", null), r([m2()], z3.prototype, "constraints", void 0), r([m2({ type: w3 })], z3.prototype, "extent", null), r([m2({ value: { top: 0, right: 0, bottom: 0, left: 0 }, cast: (t29) => ({ top: 0, right: 0, bottom: 0, left: 0, ...t29 }) })], z3.prototype, "padding", null), r([m2()], z3.prototype, "ready", void 0), r([m2()], z3.prototype, "resizeAlign", void 0), r([m2({ readOnly: true })], z3.prototype, "resolution", null), r([m2({ type: Number })], z3.prototype, "rotation", null), r([m2({ type: Number })], z3.prototype, "scale", null), r([m2({ readOnly: true })], z3.prototype, "state", void 0), r([m2({ type: m7 })], z3.prototype, "viewpoint", null), r([m2({ readOnly: true })], z3.prototype, "visibleArea", null), r([m2()], z3.prototype, "zoom", null), z3 = r([a("esri.views.2d.ViewStateManager")], z3);

// node_modules/@arcgis/core/views/input/handlers/support.js
function t19(t29, r30) {
  switch (r30) {
    case "primary":
      return "touch" === t29.pointerType || 0 === t29.button;
    case "secondary":
      return "touch" !== t29.pointerType && 2 === t29.button;
    case "tertiary":
      return "touch" !== t29.pointerType && 1 === t29.button;
  }
}

// node_modules/@arcgis/core/views/2d/input/handlers/DoubleClickZoom.js
var a13 = class extends t9 {
  constructor(t29, i22) {
    super(true), this._view = t29, this.registerIncoming("double-click", i22, (t30) => this._handleDoubleClick(t30, i22));
  }
  _handleDoubleClick(t29, a22) {
    t19(t29.data, "primary") && (t29.stopPropagation(), a22 ? this._view.mapViewNavigation.zoomOut([t29.data.x, t29.data.y]) : this._view.mapViewNavigation.zoomIn([t29.data.x, t29.data.y]));
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/DoubleTapDragZoom.js
var e16 = class extends t9 {
  constructor(t29, e25, a22) {
    super(true), this.view = t29, this.pointerType = e25, this.registerIncoming("double-tap-drag", a22, (t30) => this._handleDoubleTapDrag(t30));
  }
  _handleDoubleTapDrag(t29) {
    const { data: e25 } = t29, { pointerType: a22 } = e25;
    if (a22 !== this.pointerType) return;
    t29.stopPropagation();
    const { action: s28, delta: i22 } = e25, { view: r30 } = this, { mapViewNavigation: n33 } = r30;
    switch (s28) {
      case "begin": {
        const { scale: t30 } = r30;
        this._startScale = t30, this._currentScale = t30, this._previousDelta = i22, n33.begin();
        break;
      }
      case "update": {
        if (this._previousDelta.y === i22.y) return;
        this._previousDelta = i22;
        const t30 = 1.015 ** i22.y, e26 = this._startScale * t30, a23 = e26 / this._currentScale;
        n33.setViewpointImmediate(a23), this._currentScale = e26;
        break;
      }
      case "end": {
        const { constraints: t30 } = r30, { effectiveLODs: e26, snapToZoom: a23 } = t30;
        if (!a23 || !e26) return void n33.end();
        const s29 = t30.snapScale(this._currentScale), o32 = (i22.y > 0 ? Math.max(s29, t30.snapToPreviousScale(this._startScale)) : Math.min(s29, t30.snapToNextScale(this._startScale))) / this._currentScale;
        n33.zoom(o32).then(() => {
          n33.end();
        });
        break;
      }
    }
  }
};

// node_modules/@arcgis/core/views/input/DragEventSeparator.js
var t20 = class {
  constructor(t29) {
    this._callbacks = t29, this._currentCount = 0, this._callbacks.condition || (this._callbacks.condition = () => true);
  }
  handle(t29) {
    const s28 = t29.data, i22 = s28.pointers.size;
    switch (s28.action) {
      case "start":
        this._currentCount = i22, this._emitStart(t29);
        break;
      case "added":
        this._emitEnd(this._previousEvent), this._currentCount = i22, this._emitStart(t29);
        break;
      case "update":
        this._emitUpdate(t29);
        break;
      case "removed":
        this._startEvent && this._emitEnd(this._previousEvent), this._currentCount = i22, this._emitStart(t29);
        break;
      case "end":
        this._emitEnd(t29), this._currentCount = 0;
    }
    this._previousEvent = t29;
  }
  _emitStart(t29) {
    var _a, _b;
    this._startEvent = t29, ((_b = (_a = this._callbacks).condition) == null ? void 0 : _b.call(_a, this._currentCount, t29)) && this._callbacks.start(this._currentCount, t29, this._startEvent);
  }
  _emitUpdate(t29) {
    var _a, _b;
    ((_b = (_a = this._callbacks).condition) == null ? void 0 : _b.call(_a, this._currentCount, t29)) && this._callbacks.update(this._currentCount, t29, this._startEvent);
  }
  _emitEnd(t29) {
    var _a, _b;
    ((_b = (_a = this._callbacks).condition) == null ? void 0 : _b.call(_a, this._currentCount, t29)) && this._callbacks.end(this._currentCount, t29, this._startEvent), this._startEvent = null;
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/DragPan.js
var n25 = class extends t9 {
  constructor(t29, i22, a22) {
    super(true), this.view = t29, this.pointerAction = i22, this.registerIncoming("drag", a22, (t30) => this._handleDrag(t30)), this.registerIncoming("pointer-down", () => this.stopMomentumNavigation());
  }
  onInstall(i22) {
    super.onInstall(i22), this._dragEventSeparator = new t20({ start: (t29, i23) => {
      this.view.mapViewNavigation.pan.begin(this.view, i23.data), i23.stopPropagation();
    }, update: (t29, i23) => {
      this.view.mapViewNavigation.pan.update(this.view, i23.data), i23.stopPropagation();
    }, end: (t29, i23) => {
      this.view.mapViewNavigation.pan.end(this.view, i23.data), i23.stopPropagation();
    }, condition: (t29, i23) => 1 === t29 && t19(i23.data, this.pointerAction) });
  }
  _handleDrag(t29) {
    const i22 = this.view.mapViewNavigation;
    i22.pinch.zoomMomentum || i22.pinch.rotateMomentum ? this.stopMomentumNavigation() : this._dragEventSeparator.handle(t29);
  }
  stopMomentumNavigation() {
    this.view.mapViewNavigation.pan.stopMomentumNavigation();
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/DragRotate.js
var o22 = class extends t9 {
  constructor(a22, o32, r30) {
    super(true), this._view = a22, this.pointerAction = o32;
    const e25 = this._view.mapViewNavigation;
    this._dragEventSeparator = new t20({ start: (t29, a23) => {
      e25.rotate.begin(this._view, a23.data), a23.stopPropagation();
    }, update: (t29, a23) => {
      e25.rotate.update(this._view, a23.data), a23.stopPropagation();
    }, end: (t29, a23) => {
      e25.rotate.end(), a23.stopPropagation();
    }, condition: (t29, a23) => 1 === t29 && t19(a23.data, this.pointerAction) }), this.registerIncoming("drag", r30, (t29) => this._dragEventSeparator.handle(t29));
  }
};

// node_modules/@arcgis/core/views/navigation/gamepadAndKeyboardUtils.js
function n26(t29) {
  let n33 = t29 * t29;
  return t29 < 0 && (n33 *= -1), n33;
}
function a14(t29) {
  return t29.translation[0] = 0, t29.translation[1] = 0, t29.translation[2] = 0, t29.heading = 0, t29.tilt = 0, t29;
}
function i18(a22, i22, o32) {
  const s28 = o32, e25 = a22.state, r30 = a22.device, l21 = "forward-down" === i22.tiltDirection ? 1 : -1, c26 = 1;
  return "standard" === r30.deviceType ? (s28.translation[0] = n26(e25.axes[0]), s28.translation[1] = n26(e25.axes[1]), s28.translation[2] = n26(e25.buttons[7]) - n26(e25.buttons[6]), s28.heading = n26(e25.axes[2]), s28.tilt = n26(e25.axes[3])) : "spacemouse" === r30.deviceType && (s28.translation[0] = 1.2 * n26(e25.axes[0]), s28.translation[1] = 1.2 * n26(e25.axes[1]), s28.translation[2] = 2 * -n26(e25.axes[2]), s28.heading = 1.2 * n26(e25.axes[5]), s28.tilt = 1.2 * n26(e25.axes[3])), s28.tilt *= l21, g4(s28.translation, s28.translation, c26), s28;
}
function s20(t29) {
  return 0 === t29.translation[0] && 0 === t29.translation[1] && 0 === t29.translation[2] && 0 === t29.heading && 0 === t29.tilt && 0 === t29.zoom;
}

// node_modules/@arcgis/core/views/2d/input/handlers/GamepadNavigation.js
var d13 = class extends t9 {
  constructor(i22) {
    super(true), this._view = i22, this._frameTask = null, this._watchHandles = new r2(), this._currentDevice = null, this._transformation = { translation: [0, 0, 0], heading: 0, tilt: 0, zoom: 0 }, this._handle = this.registerIncoming("gamepad", (t29) => this._handleGamePadEvent(t29)), this._handle.pause();
  }
  onInstall(t29) {
    super.onInstall(t29), this._watchHandles.add([d3(() => {
      var _a;
      return (_a = this._view.navigation.gamepad) == null ? void 0 : _a.enabled;
    }, (t30) => {
      t30 ? (this._handle.resume(), this._frameTask || (this._frameTask = A2({ update: (t31) => this._frameUpdate(t31.deltaTime) }))) : (this._handle.pause(), this._frameTask && (this._frameTask.remove(), this._frameTask = null));
    }, P)]);
  }
  onUninstall() {
    this._watchHandles.removeAll(), this._frameTask && (this._frameTask.remove(), this._frameTask = null), super.onUninstall();
  }
  _handleGamePadEvent(t29) {
    const i22 = this._view.navigation.gamepad.device;
    i22 && t29.data.device !== i22 || this._currentDevice && this._currentDevice !== t29.data.device || ("end" === t29.data.action ? (this._currentDevice = null, a14(this._transformation)) : (this._currentDevice = t29.data.device, i18(t29.data, this._view.navigation.gamepad, this._transformation)));
  }
  _frameUpdate(t29) {
    const i22 = this._transformation;
    if (s20(i22)) return;
    const e25 = this._view.viewpoint.clone(), a22 = this._view.navigation.gamepad.velocityFactor, r30 = _8 * a22 * t29;
    kt(e25, e25, [i22.translation[0] * r30, -i22.translation[1] * r30]);
    const o32 = 1 + i22.translation[2] * c14 * t29, h20 = this._view.constraints.rotationEnabled ? -i22.heading * m19 * t29 : 0, d21 = this._view.size, v13 = [d21[0] / 2, d21[1]];
    Gt(e25, e25, o32, h20, v13, d21);
    const p27 = this._view.constraints.constrain(e25, this._view.viewpoint);
    this._view.viewpoint = p27;
  }
};
var m19 = 0.06;
var _8 = 0.7;
var c14 = 6e-4;

// node_modules/@arcgis/core/views/input/VisibilityChange.js
function i19(i22) {
  const t29 = () => i22("visible" === document.visibilityState);
  return document.addEventListener("visibilitychange", t29), e2(() => document.removeEventListener("visibilitychange", t29));
}

// node_modules/@arcgis/core/views/2d/input/handlers/KeyPan.js
var e17 = class extends t9 {
  constructor(i22, e25, s28) {
    super(true), this.view = i22, this.keys = e25, this._isSticky = false, this._pressedKeys = /* @__PURE__ */ new Set(), this._timeout = void 0, this._currentDirection = void 0, this._stickyKeyDuration = 200, this._handleKey = (i23) => {
      const t29 = this._keyMap[i23.data.key];
      if (i23.modifiers.has("Meta") || i23.modifiers.has("Control")) return void this._stopMovement();
      if (null == t29) return;
      i23.stopPropagation(), i23.preventDefault();
      const e26 = "key-down" === i23.type;
      if (this._pressedKeys[e26 ? "add" : "delete"](t29), e26) {
        if (this._direction === t29) return;
        this._direction = t29, this._isSticky = false, this._setTimeout(() => {
          this._isSticky && this._handlePopKey();
        });
      } else {
        const i24 = void 0 === this._timeout, t30 = this._pressedKeys.size > 0;
        i24 || t30 ? this._handlePopKey() : this._isSticky = true;
      }
    }, this._handlePopKey = () => {
      this._direction = Array.from(this._pressedKeys).pop(), null == this._direction && this._stopMovement();
    }, this._stopMovement = () => {
      this._isSticky = false, this._direction = void 0, this._pressedKeys.clear(), this._setTimeout(void 0);
    }, this._keyMap = { [e25.left]: "left", [e25.right]: "right", [e25.up]: "up", [e25.down]: "down" }, this.registerIncoming("key-down", s28, this._handleKey), this.registerIncoming("key-up", s28, this._handleKey), this.registerIncoming("blur", s28, this._stopMovement), this._visibilityHandle = i19((i23) => i23 ? null : this._stopMovement());
  }
  onUninstall() {
    var _a;
    this._stopMovement(), (_a = this._visibilityHandle) == null ? void 0 : _a.remove();
  }
  get _direction() {
    return this._currentDirection;
  }
  set _direction(i22) {
    const t29 = null != this._currentDirection;
    if (null != i22) {
      if (t29 || this.view.mapViewNavigation.begin(), this._currentDirection !== i22) switch (i22) {
        case "left":
          this.view.mapViewNavigation.continuousPanLeft();
          break;
        case "right":
          this.view.mapViewNavigation.continuousPanRight();
          break;
        case "up":
          this.view.mapViewNavigation.continuousPanUp();
          break;
        case "down":
          this.view.mapViewNavigation.continuousPanDown();
      }
    } else t29 && this.view.mapViewNavigation.stop();
    this._currentDirection = i22;
  }
  _setTimeout(i22) {
    clearTimeout(this._timeout), this._timeout = void 0 === i22 ? void 0 : setTimeout(() => {
      this._timeout = void 0, i22();
    }, this._stickyKeyDuration);
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/KeyRotate.js
var t21 = class extends t9 {
  constructor(e25, t29, s28) {
    super(true), this.view = e25, this.keys = t29, this._pressed = false, this._keyToDirection = { [t29.clockwiseOption1]: "clockwise", [t29.clockwiseOption2]: "clockwise", [t29.counterClockwiseOption1]: "counterClockwise", [t29.counterClockwiseOption2]: "counterClockwise", [t29.resetOption1]: "reset", [t29.resetOption2]: "reset" }, this.registerIncoming("key-down", s28, (e26) => this._handleKeyDown(e26)), this.registerIncoming("key-up", s28, (e26) => this._handleKeyUp(e26)), this.registerIncoming("blur", s28, () => this._handleStop()), this._visibilityHandle = i19((e26) => e26 ? null : this._handleStop());
  }
  onUninstall() {
    var _a;
    (_a = this._visibilityHandle) == null ? void 0 : _a.remove(), this._handleStop();
  }
  _handleKeyDown(e25) {
    e25.data.repeat || this._handleKey(e25, true);
  }
  _handleKeyUp(e25) {
    this._handleKey(e25, false);
  }
  _handleStop() {
    this._pressed && (this._pressed = false, this.view.mapViewNavigation.stop());
  }
  _handleKey(e25, i22) {
    const t29 = e25.modifiers;
    if (t29.size > 0 && !t29.has("Shift") || !this.view.constraints.rotationEnabled) return;
    const s28 = this._keyToDirection[e25.data.key];
    if (this._pressed = null != s28, this._pressed) {
      if (e25.preventDefault(), i22) switch (this.view.mapViewNavigation.begin(), s28) {
        case "clockwise":
          this.view.mapViewNavigation.continuousRotateClockwise();
          break;
        case "counterClockwise":
          this.view.mapViewNavigation.continuousRotateCounterclockwise();
          break;
        case "reset":
          this.view.mapViewNavigation.resetRotation();
      }
      else this._pressed = false, this.view.mapViewNavigation.stop();
      e25.stopPropagation();
    }
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/KeyZoom.js
var t22;
!function(o32) {
  o32[o32.IN = 0] = "IN", o32[o32.OUT = 1] = "OUT";
}(t22 || (t22 = {}));
var e18 = class extends t9 {
  constructor(o32, e25, i22) {
    super(true), this.view = o32, this.keys = e25, this._keysToZoomAction = {}, this.registerIncoming("key-down", i22, (o33) => this._handleKeyDown(o33)), e25.zoomIn.forEach((o33) => this._keysToZoomAction[o33] = t22.IN), e25.zoomOut.forEach((o33) => this._keysToZoomAction[o33] = t22.OUT);
  }
  _handleKeyDown(o32) {
    this._handleKey(o32);
  }
  _handleKey(o32) {
    const e25 = o32.modifiers;
    if (e25.size > 0 && !e25.has("Shift")) return;
    const { key: i22 } = o32.data;
    if (!(i22 in this._keysToZoomAction)) return;
    const n33 = this._keysToZoomAction[i22], { mapViewNavigation: s28 } = this.view;
    let r30 = null;
    switch (n33) {
      case t22.IN:
        r30 = s28.zoomIn();
        break;
      case t22.OUT:
        r30 = s28.zoomOut();
        break;
      default:
        return;
    }
    s28.begin(), r30.then(() => s28.end()), o32.stopPropagation();
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/MouseWheelZoom.js
var t23 = 0.6;
var o23 = class extends t9 {
  constructor(e25, t29) {
    super(true), this._view = e25, this._canZoom = true, this.registerIncoming("mouse-wheel", t29, (e26) => this._handleMouseWheel(e26));
  }
  _handleMouseWheel(e25) {
    if (!this._view.navigation.mouseWheelZoomEnabled) return;
    if (e25.preventDefault(), e25.stopPropagation(), !this._canZoom) return;
    const o32 = this._view.mapViewNavigation, { x: n33, y: i22, deltaY: s28 } = e25.data, a22 = 1 / t23 ** (1 / 60 * s28), h20 = o32.zoom(a22, [n33, i22]);
    h20 && (this._canZoom = false, h20.catch(() => {
    }).then(() => {
      this._canZoom = true, o32.end();
    }));
  }
};

// node_modules/@arcgis/core/views/2d/input/handlers/PinchAction.js
var a15 = class extends t9 {
  constructor(i22) {
    super(true), this.view = i22, this.registerIncoming("drag", (t29) => this._handleDrag(t29)), this.registerIncoming("pointer-down", () => this._stopMomentumNavigation());
    const a22 = this.view.mapViewNavigation;
    this._dragEventSeparator = new t20({ start: (t29, i23) => {
      a22.pinch.begin(this.view, i23.data), i23.stopPropagation();
    }, update: (t29, i23) => {
      a22.pinch.update(this.view, i23.data), i23.stopPropagation();
    }, end: (t29, i23) => {
      a22.pinch.end(this.view), i23.stopPropagation();
    }, condition: (t29) => t29 >= 2 });
  }
  _handleDrag(t29) {
    this._dragEventSeparator.handle(t29);
  }
  _stopMomentumNavigation() {
    this.view.mapViewNavigation.pinch.stopMomentumNavigation();
  }
};

// node_modules/@arcgis/core/views/input/gamepad/GamepadState.js
function t24(t29) {
  const n33 = t29.native;
  return n33 ? { buttons: n33.buttons.map((t30) => t30.pressed ? t30.value || 1 : 0), axes: n33.axes.map((n34) => s21(n34, t29.axisThreshold)) } : { buttons: [], axes: [] };
}
function n27(t29, n33) {
  if (t29.axes.length !== n33.axes.length) return false;
  if (t29.buttons.length !== n33.buttons.length) return false;
  for (let e25 = 0; e25 < t29.axes.length; e25++) if (t29.axes[e25] !== n33.axes[e25]) return false;
  for (let e25 = 0; e25 < t29.buttons.length; e25++) if (t29.buttons[e25] !== n33.buttons[e25]) return false;
  return true;
}
function e19(t29) {
  for (let n33 = 0; n33 < t29.axes.length; n33++) if (0 !== t29.axes[n33]) return false;
  for (let n33 = 0; n33 < t29.buttons.length; n33++) if (0 !== t29.buttons[n33]) return false;
  return true;
}
function s21(t29, n33) {
  const e25 = Math.abs(t29);
  return e25 < n33 ? 0 : Math.sign(t29) * (e25 - n33) / (1 - n33);
}

// node_modules/@arcgis/core/views/input/gamepad/GamepadSource.js
var a16 = class {
  constructor(e25, t29) {
    this._element = e25, this._input = t29, this._hasEventListeners = false, this._onConnectGamepad = (e26) => {
      this._connectGamepad(e26.gamepad);
    }, this._onDisconnectGamepad = (e26) => {
      const t30 = e26.gamepad, n34 = t30.index, i23 = this._inputDevices[n34];
      i23 && (this._emitGamepadEvent(t30, t24(i23), false), this._inputDevices.splice(n34, 1), this._latestUpdate.splice(n34, 1), this._input.gamepad.devices.remove(i23), this.ensurePollingState());
    }, this._frameTask = null, this._latestUpdate = new Array(), this._inputDevices = new Array(), this._callback = null;
    const n33 = "getGamepads" in window.navigator, i22 = window.isSecureContext;
    this.supported = n33 && i22, this.supported && (d14((e26) => this._connectGamepad(e26)), window.addEventListener("gamepadconnected", this._onConnectGamepad), window.addEventListener("gamepaddisconnected", this._onDisconnectGamepad), this.ensurePollingState());
  }
  destroy() {
    this.hasEventListeners = false, this.supported && (window.removeEventListener("gamepadconnected", this._onConnectGamepad), window.removeEventListener("gamepaddisconnected", this._onDisconnectGamepad));
  }
  set hasEventListeners(e25) {
    this._hasEventListeners !== e25 && (this._hasEventListeners = e25, this.ensurePollingState());
  }
  get _eventsEnabled() {
    return this.supported && this._inputDevices.length > 0 && this._hasEventListeners;
  }
  set onEvent(e25) {
    this._callback = e25;
  }
  _connectGamepad(e25) {
    const s28 = new o16(e25);
    "unknown" !== s28.deviceType && (this._inputDevices[e25.index] = s28, this._input.gamepad.devices.add(s28)), this.ensurePollingState();
  }
  ensurePollingState() {
    this._eventsEnabled ? this._startPolling() : this._stopPolling();
  }
  _startPolling() {
    null == this._frameTask && (this._frameTask = A2({ update: () => this._readGamepadState() }));
  }
  _stopPolling() {
    null != this._frameTask && (this._frameTask.remove(), this._frameTask = null, this._latestUpdate = new Array());
  }
  _readGamepadState() {
    const e25 = document.hasFocus(), t29 = this._element.contains(document.activeElement), a22 = "document" === this._input.gamepad.enabledFocusMode && !e25 || "view" === this._input.gamepad.enabledFocusMode && !t29;
    d14((e26) => {
      const t30 = this._inputDevices[e26.index];
      if (!t30) return;
      const o32 = this._latestUpdate[e26.index], d21 = t24(t30), c26 = a22 || e19(d21);
      if (o32) {
        if (o32.timestamp === e26.timestamp) return;
        if (!o32.active && c26) return;
        if (n27(o32.state, d21)) return;
      }
      this._emitGamepadEvent(e26, d21, !c26);
    });
  }
  _emitGamepadEvent(e25, t29, s28) {
    const n33 = this._latestUpdate[e25.index], i22 = n33 && n33.active;
    if (!i22 && !s28) return;
    const a22 = !i22 && s28 ? "start" : i22 && s28 ? "update" : "end";
    this._latestUpdate[e25.index] = { timestamp: e25.timestamp, state: t29, active: s28 }, this._callback && this._callback({ device: this._inputDevices[e25.index], state: t29, action: a22 });
  }
};
function o24(e25) {
  if (!e25) return false;
  if (!e25.connected) return false;
  for (let t29 = 0; t29 < e25.axes.length; t29++) if (isNaN(e25.axes[t29])) return false;
  return true;
}
function d14(e25) {
  for (const t29 of navigator.getGamepads()) o24(t29) && e25(t29);
}

// node_modules/@arcgis/core/views/input/BrowserEventSource.js
var i20 = has("edge");
var a17 = has("chrome");
var o25 = has("ff");
var s22 = has("safari");
var r22 = "esri-view-surface";
var h15 = { touchNone: `${r22}--touch-none`, touchPan: `${r22}--touch-pan` };
var l17 = class _l {
  constructor(e25, n33) {
    this._input = n33, this._active = {}, this._callback = () => {
    }, this._activePointerCaptures = /* @__PURE__ */ new Set(), this._keyDownState = /* @__PURE__ */ new Set(), this._eventId = 1, this._browserTouchPanningEnabled = false, this._element = e25, e25.getAttribute("tabindex") || e25.setAttribute("tabindex", "0"), this._eventHandlers = { "key-down": this._handleKey, "key-up": this._handleKey, "pointer-down": this._handlePointer, "pointer-move": this._handlePointerPreventDefault, "pointer-up": this._handlePointerPreventDefault, "pointer-enter": this._handlePointer, "pointer-leave": this._handlePointer, "pointer-cancel": this._handlePointer, "mouse-wheel": this._handleMouseWheel, "pointer-capture-lost": this._handlePointerCaptureLost }, this._updateTouchAction(), this._element.addEventListener("keydown", this._preventAltKeyDefault), this._gamepadSource = new a16(e25, this._input), this._gamepadSource.onEvent = (e26) => this._callback("gamepad", e26);
  }
  destroy() {
    this._callback = () => {
    }, this.activeEvents = null, this._activePointerCaptures.forEach((e25) => {
      this._releasePointerCaptureSafe(e25);
    }), this._gamepadSource = u(this._gamepadSource), this._activePointerCaptures = null, this._removeTouchAction(), this._element.removeEventListener("keydown", this._preventAltKeyDefault);
  }
  get browserTouchPanningEnabled() {
    return this._browserTouchPanningEnabled;
  }
  set browserTouchPanningEnabled(e25) {
    this._browserTouchPanningEnabled = e25, this._updateTouchAction(), this._updateTouchEventHandling();
  }
  set onEventReceived(e25) {
    this._callback = e25;
  }
  set activeEvents(e25) {
    for (const t29 in this._active) if (!e25 || !e25.has(t29)) {
      const e26 = this._active[t29];
      this._element.removeEventListener(c15[t29], e26), delete this._active[t29];
    }
    e25 && e25.forEach((e26) => {
      if (!this._active[e26] && c15[e26]) {
        const t29 = (this._eventHandlers[e26] || this._handleDefault).bind(this, e26);
        this._element.addEventListener(c15[e26], t29), this._active[e26] = t29;
      }
    }), this._gamepadSource.hasEventListeners = (e25 == null ? void 0 : e25.has("gamepad")) ?? false;
  }
  setPointerCapture(e25, t29) {
    t29 ? this._setPointerCatpureSafe(e25.pointerId) : (this._releasePointerCaptureSafe(e25.pointerId), this._activePointerCaptures.delete(e25.pointerId));
  }
  _updateTouchAction() {
    this._element.classList.remove(this._browserTouchPanningEnabled ? h15.touchNone : h15.touchPan), this._element.classList.add(this._browserTouchPanningEnabled ? h15.touchPan : h15.touchNone);
  }
  _updateTouchEventHandling() {
    this._browserTouchPanningEnabled ? this._element.addEventListener("touchmove", this._preventMultiTouchPanning) : this._element.removeEventListener("touchmove", this._preventMultiTouchPanning);
  }
  _removeTouchAction() {
    this._element.classList.remove(h15.touchNone), this._element.classList.remove(h15.touchPan), this._element.removeEventListener("touchmove", this._preventMultiTouchPanning);
  }
  _setPointerCatpureSafe(e25) {
    try {
      this._element.setPointerCapture(e25), this._activePointerCaptures.add(e25);
    } catch {
    }
  }
  _releasePointerCaptureSafe(e25) {
    try {
      if (this._element.hasPointerCapture && !this._element.hasPointerCapture(e25)) return;
      this._element.releasePointerCapture(e25);
    } catch (t29) {
    }
  }
  _updateNormalizedPointerLikeEvent(e25, t29) {
    const i22 = i7(this._element, e25);
    return _l.test.disableSubpixelCoordinates && (i22.x = Math.round(i22.x), i22.y = Math.round(i22.y)), t29.x = i22.x, t29.y = i22.y, t29;
  }
  _handleKey(e25, t29) {
    const { key: n33 } = t29;
    n33 && "key-up" === e25 && this._keyDownState.delete(n33);
    const i22 = { native: t29, key: n33, repeat: !!n33 && this._keyDownState.has(n33) };
    n33 && "key-down" === e25 && this._keyDownState.add(i22.key), this._callback(e25, i22);
  }
  _handlePointer(e25, t29) {
    const n33 = this._updateNormalizedPointerLikeEvent(t29, { native: t29, x: 0, y: 0, pointerType: t29.pointerType, button: t29.button, buttons: t29.buttons, eventId: this._eventId++ });
    this._callback(e25, n33);
  }
  _handlePointerPreventDefault(e25, t29) {
    const n33 = this._updateNormalizedPointerLikeEvent(t29, { native: t29, x: 0, y: 0, pointerType: t29.pointerType, button: t29.button, buttons: t29.buttons, eventId: this._eventId++ });
    t29.preventDefault(), this._callback(e25, n33);
  }
  _getDeltaFromTrackpadOrMouseWheel(e25) {
    return e25.shiftKey && has("mac") && 0 === e25.deltaY ? e25.deltaX : e25.deltaY;
  }
  _handleMouseWheel(e25, t29) {
    let n33 = this._getDeltaFromTrackpadOrMouseWheel(t29);
    switch (t29.deltaMode) {
      case 0:
        i20 && (n33 = n33 / document.documentElement.clientHeight * 600);
        break;
      case 1:
        n33 *= 30;
        break;
      case 2:
        n33 *= 900;
    }
    i20 ? n33 *= 0.7 : a17 || s22 ? n33 *= 0.6 : o25 && (n33 *= 1.375);
    const r30 = 100, h20 = Math.abs(n33);
    if (h20 > r30) {
      const e26 = 0.02;
      n33 = n33 / h20 * 200 / (1 + Math.exp(-e26 * (h20 - r30)));
    }
    const l21 = this._updateNormalizedPointerLikeEvent(t29, { native: t29, x: 0, y: 0, deltaY: n33 });
    this._callback(e25, l21);
  }
  _handlePointerCaptureLost(e25, t29) {
    this._activePointerCaptures.delete(t29.pointerId), this._handleDefault(e25, t29);
  }
  _handleDefault(e25, t29) {
    const n33 = { native: t29 };
    t29.preventDefault(), this._callback(e25, n33);
  }
  _preventAltKeyDefault(e25) {
    "Alt" === e25.key && e25.preventDefault();
  }
  _preventMultiTouchPanning(e25) {
    e25.touches.length > 1 && e25.preventDefault();
  }
};
l17.test = { disableSubpixelCoordinates: false };
var c15 = { "key-down": "keydown", "key-up": "keyup", "pointer-down": "pointerdown", "pointer-up": "pointerup", "pointer-move": "pointermove", "mouse-wheel": "wheel", "pointer-capture-got": "gotpointercapture", "pointer-capture-lost": "lostpointercapture", "context-menu": "contextmenu", "pointer-enter": "pointerenter", "pointer-leave": "pointerleave", "pointer-cancel": "pointercancel", focus: "focus", blur: "blur" };

// node_modules/@arcgis/core/views/input/handlers/PreventContextMenu.js
var e20 = class extends t9 {
  constructor() {
    super(true), this.registerIncoming("context-menu", (t29) => t29.data.native.preventDefault());
  }
};

// node_modules/@arcgis/core/views/input/recognizers/support.js
var t25 = { maximumClickDelay: 300, movementUntilMouseDrag: 1.5, movementUntilPenDrag: 6, movementUntilTouchDrag: 6, holdDelay: 500, maximumDoubleClickDelay: 250, maximumDoubleClickDistance: 10, maximumDoubleTouchDelay: 350, maximumDoubleTouchDistance: 35 };
function n28(e25, t29) {
  return Math.abs(t29.x - e25.x) + Math.abs(t29.y - e25.y);
}
function r23(e25, t29) {
  const n33 = t29.x - e25.x, r30 = t29.y - e25.y;
  return Math.sqrt(n33 * n33 + r30 * r30);
}
function o26(t29, n33) {
  if (n33 ? (n33.radius = 0, n33.center.x = 0, n33.center.y = 0) : n33 = { radius: 0, center: c5() }, 0 === t29.length) return n33;
  if (1 === t29.length) return n33.center.x = t29[0].x, n33.center.y = t29[0].y, n33;
  if (2 === t29.length) {
    const [e25, r31] = t29, [o33, u18] = [r31.x - e25.x, r31.y - e25.y];
    return n33.radius = Math.sqrt(o33 * o33 + u18 * u18) / 2, n33.center.x = (e25.x + r31.x) / 2, n33.center.y = (e25.y + r31.y) / 2, n33;
  }
  let r30 = 0, o32 = 0;
  for (let e25 = 0; e25 < t29.length; e25++) r30 += t29[e25].x, o32 += t29[e25].y;
  r30 /= t29.length, o32 /= t29.length;
  const u17 = t29.map((e25) => e25.x - r30), c26 = t29.map((e25) => e25.y - o32);
  let i22 = 0, a22 = 0, l21 = 0, m26 = 0, s28 = 0, x2 = 0, y10 = 0;
  for (let e25 = 0; e25 < u17.length; e25++) {
    const t30 = u17[e25], n34 = c26[e25], r31 = t30 * t30, o33 = n34 * n34;
    i22 += r31, a22 += o33, l21 += t30 * n34, m26 += r31 * t30, s28 += o33 * n34, x2 += t30 * o33, y10 += n34 * r31;
  }
  const h20 = 0.5 * (m26 + x2), D4 = 0.5 * (s28 + y10), g13 = i22 * a22 - l21 * l21, f17 = (h20 * a22 - D4 * l21) / g13, b8 = (i22 * D4 - l21 * h20) / g13, p27 = c5(f17 + r30, b8 + o32);
  return { radius: Math.sqrt(f17 * f17 + b8 * b8 + (i22 + a22) / t29.length), center: p27 };
}
function u11(e25) {
  const { native: t29 } = e25, { pointerId: n33, button: r30, pointerType: o32 } = t29;
  return "mouse" === o32 ? `${n33}:${r30}` : `${o32}`;
}

// node_modules/@arcgis/core/views/input/recognizers/DoubleTapDrag.js
var u12 = class extends t9 {
  constructor(e25 = t25.maximumDoubleClickDelay, a22 = t25.maximumDoubleClickDistance, n33 = t25.maximumDoubleTouchDelay, s28 = t25.maximumDoubleTouchDistance, u17 = o3) {
    super(false), this._maximumDoubleClickDelay = e25, this._maximumDoubleClickDistance = a22, this._maximumDoubleTouchDelay = n33, this._maximumDoubleTouchDistance = s28, this._clock = u17, this._doubleTapDragReady = false, this._doubleTapDragActive = false, this._dragStartCenter = c5(0, 0), this._pointerState = /* @__PURE__ */ new Map(), this._doubleTapDrag = this.registerOutgoing("double-tap-drag"), this._dragEventSeparator = new t20({ start: (t29, e26) => this._dragStart(t29, e26), update: (t29, e26) => this._dragUpdate(e26), end: (t29, e26) => this._dragEnd(e26) }), this.registerIncoming("drag", (t29) => this._dragEventSeparator.handle(t29)), this.registerIncoming("pointer-down", (t29) => this._handlePointerDown(t29)), this.registerIncoming("pointer-up", () => this._handlePointerUp());
  }
  onUninstall() {
    this._pointerState.forEach((t29) => {
      t29.doubleTapTimeout = l(t29.doubleTapTimeout);
    });
  }
  get hasPendingInputs() {
    for (const t29 of this._pointerState.values()) if (null != t29.doubleTapTimeout) return true;
    return false;
  }
  _clearPointerDown(t29) {
    const i22 = this._pointerState.get(t29);
    i22 && (i22.doubleTapTimeout = l(i22.doubleTapTimeout), this._pointerState.delete(t29), this.refreshHasPendingInputs());
  }
  _dragStart(t29, e25) {
    if (!this._doubleTapDragReady || 1 !== t29) return;
    this._doubleTapDragReady = false, this._doubleTapDragActive = true;
    const { data: o32, modifiers: a22 } = e25, { center: r30 } = o32;
    this._dragStartCenter = r30;
    const n33 = d15("begin", c5(0, 0), o32);
    this._doubleTapDrag.emit(n33, void 0, a22), e25.stopPropagation();
  }
  _dragUpdate(t29) {
    if (!this._doubleTapDragActive) return;
    const { data: e25, modifiers: o32 } = t29, { center: a22 } = e25, r30 = d15("update", c5(a22.x - this._dragStartCenter.x, a22.y - this._dragStartCenter.y), e25);
    this._doubleTapDrag.emit(r30, void 0, o32), t29.stopPropagation();
  }
  _dragEnd(t29) {
    if (!this._doubleTapDragActive) return;
    const { data: e25, modifiers: o32 } = t29, { center: a22 } = e25, r30 = d15("end", c5(a22.x - this._dragStartCenter.x, a22.y - this._dragStartCenter.y), e25);
    this._doubleTapDrag.emit(r30, void 0, o32), this._doubleTapDragActive = false, t29.stopPropagation();
  }
  _handlePointerDown(t29) {
    const { data: e25 } = t29, i22 = u11(e25), o32 = this._pointerState.get(i22), { pointerType: a22 } = e25.native;
    if (o32) {
      const r30 = "touch" === a22 ? this._maximumDoubleTouchDistance : this._maximumDoubleClickDistance;
      this._clearPointerDown(i22), n28(o32.event.data, e25) > r30 ? this._storePointerDown(t29) : this._doubleTapDragReady = true;
    } else this._storePointerDown(t29);
  }
  _handlePointerUp() {
    this._doubleTapDragReady = false;
  }
  _storePointerDown(t29) {
    const { data: e25 } = t29, { pointerType: i22 } = e25.native, o32 = u11(e25), a22 = "touch" === i22 ? this._maximumDoubleTouchDelay : this._maximumDoubleClickDelay, r30 = this._clock.setTimeout(() => this._clearPointerDown(o32), a22);
    this._pointerState.set(o32, { event: t29, doubleTapTimeout: r30 }), this.refreshHasPendingInputs();
  }
};
function d15(t29, e25, i22) {
  const { button: o32, buttons: a22, pointer: r30, pointers: n33, pointerType: s28, timestamp: u17 } = i22;
  return { action: t29, delta: e25, button: o32, buttons: a22, pointer: r30, pointers: n33, pointerType: s28, timestamp: u17 };
}

// node_modules/@arcgis/core/views/input/recognizers/Drag.js
var s23 = class extends t9 {
  constructor(t29) {
    super(false), this._navigationTouch = t29, this._startStateModifiers = /* @__PURE__ */ new Set(), this._activePointerMap = /* @__PURE__ */ new Map(), this._isDragging = false, this._isCurrentDragSuppressed = false, this._drag = this.registerOutgoing("drag"), this.registerIncoming("pointer-drag", this._handlePointerDrag.bind(this)), this.registerIncoming("pointer-up", this._handlePointerUpAndPointerLost.bind(this)), this.registerIncoming("pointer-capture-lost", this._handlePointerUpAndPointerLost.bind(this)), this.registerIncoming("pointer-cancel", this._handlePointerUpAndPointerLost.bind(this));
  }
  _createPayload(t29, e25, i22, n33) {
    return { action: t29, pointerType: this._pointerType, button: this._mouseButton, buttons: e25.buttons, timestamp: n33, pointers: o27(this._activePointerMap), pointer: e25, angle: i22.angle, radius: i22.radius, center: i22.center };
  }
  _addPointer(t29) {
    const e25 = t29.native.pointerId, i22 = a18(this._activePointerMap).angle, n33 = { event: t29, initialAngle: 0, lastAngle: 0 };
    this._activePointerMap.set(e25, n33);
    const s28 = h16(n33, r24(this._activePointerMap));
    n33.initialAngle = s28, n33.lastAngle = s28, this._updatePointerAngles(i22);
  }
  _updatePointer(t29) {
    if (t29 && null == t29.x && null == t29.y) return;
    const e25 = t29.native.pointerId, i22 = this._activePointerMap.get(e25);
    i22 ? i22.event = t29 : this._addPointer(t29);
  }
  _removePointer(t29) {
    const e25 = a18(this._activePointerMap).angle;
    this._activePointerMap.delete(t29), this._updatePointerAngles(e25);
  }
  _updatePointerAngles(t29) {
    const e25 = a18(this._activePointerMap);
    this._activePointerMap.forEach((i22) => {
      i22.initialAngle = h16(i22, e25) - t29, i22.lastAngle = h16(i22, e25) - t29;
    });
  }
  _emitEvent(t29, e25, i22) {
    const n33 = a18(this._activePointerMap);
    this._drag.emit(this._createPayload(t29, e25, n33, i22), void 0, this._startStateModifiers);
  }
  _handlePointerUpAndPointerLost(t29) {
    const i22 = t29.data.native.pointerId, n33 = n2(t29.timestamp);
    this._activePointerMap.get(i22) && (1 === this._activePointerMap.size ? (this._updatePointer(t29.data), !this._isCurrentDragSuppressed && this._emitEvent("end", t29.data, n33), this._isDragging = false, this._isCurrentDragSuppressed = false, this._removePointer(i22)) : (this._removePointer(i22), this._emitEvent("removed", t29.data, n2(t29.timestamp))));
  }
  _handlePointerDrag(t29) {
    const i22 = t29.data, n33 = i22.currentEvent, s28 = n2(t29.timestamp);
    switch (i22.action) {
      case "start":
      case "update":
        this._isDragging ? this._activePointerMap.has(n33.native.pointerId) ? (this._updatePointer(n33), !this._isCurrentDragSuppressed && this._emitEvent("update", n33, s28)) : (this._addPointer(n33), this._emitEvent("added", n33, s28), this._isCurrentDragSuppressed = this._isSuppressed) : (this._updatePointer(n33), this._pointerType = t29.data.startEvent.pointerType, this._mouseButton = t29.data.startEvent.button, this._startStateModifiers = t29.modifiers, this._isDragging = true, this._isCurrentDragSuppressed = this._isSuppressed, !this._isCurrentDragSuppressed && this._emitEvent("start", n33, s28));
    }
  }
  get _isSuppressed() {
    return !!this._navigationTouch && !this._navigationTouch.browserTouchPanEnabled && "touch" === this._pointerType && 1 === this._activePointerMap.size;
  }
};
function r24(e25) {
  const i22 = [];
  return e25.forEach((e26) => {
    i22.push(c5(e26.event.x, e26.event.y));
  }), o26(i22);
}
function a18(t29) {
  const e25 = r24(t29);
  let i22 = 0;
  return t29.forEach((t30) => {
    let n33 = h16(t30, e25), s28 = n33 - t30.lastAngle;
    for (; s28 > Math.PI; ) s28 -= 2 * Math.PI;
    for (; s28 < -Math.PI; ) s28 += 2 * Math.PI;
    n33 = t30.lastAngle + s28, t30.lastAngle = n33;
    const r30 = n33 - t30.initialAngle;
    i22 += r30;
  }), i22 /= t29.size || 1, { angle: i22, radius: e25.radius, center: e25.center };
}
function o27(t29) {
  const e25 = /* @__PURE__ */ new Map();
  return t29.forEach((t30, i22) => e25.set(i22, t30.event)), e25;
}
function h16(t29, e25) {
  const i22 = t29.event, n33 = i22.x - e25.center.x, s28 = i22.y - e25.center.y;
  return Math.atan2(s28, n33);
}
var p20;
!function(t29) {
  t29[t29.Left = 0] = "Left", t29[t29.Middle = 1] = "Middle", t29[t29.Right = 2] = "Right", t29[t29.Back = 3] = "Back", t29[t29.Forward = 4] = "Forward", t29[t29.Undefined = -1] = "Undefined";
}(p20 || (p20 = {}));

// node_modules/@arcgis/core/views/input/recognizers/ImmediateDoubleClick.js
var m20 = class extends t9 {
  constructor(e25 = t25.maximumDoubleClickDelay, o32 = t25.maximumDoubleClickDistance, a22 = t25.maximumDoubleTouchDelay, m26 = t25.maximumDoubleTouchDistance, n33 = o3) {
    super(false), this._maximumDoubleClickDelay = e25, this._maximumDoubleClickDistance = o32, this._maximumDoubleTouchDelay = a22, this._maximumDoubleTouchDistance = m26, this._clock = n33, this._pointerState = /* @__PURE__ */ new Map(), this._immediateDoubleClick = this.registerOutgoing("immediate-double-click"), this.registerIncoming("pointer-down", this._handlePointerDown.bind(this)), this.registerIncoming("pointer-up", this._handlePointerUp.bind(this));
  }
  onUninstall() {
    this._pointerState.forEach((t29) => {
      t29.immediateDoubleClick && t29.immediateDoubleClick.timeoutHandle.remove();
    }), super.onUninstall();
  }
  _handlePointerDown(t29) {
    const e25 = t29.data, i22 = u11(e25);
    if (!this._pointerState.has(i22)) {
      const t30 = { downButton: e25.native.button, x: e25.x, y: e25.y, immediateDoubleClick: null };
      this._pointerState.set(i22, t30), this.startCapturingPointer(e25.native);
    }
  }
  _handlePointerUp(t29) {
    const e25 = t29.data, i22 = u11(e25), m26 = this._pointerState.get(i22);
    if (m26 && m26.downButton === e25.native.button) {
      const i23 = m26.immediateDoubleClick, o32 = "touch" === t29.data.native.pointerType ? this._maximumDoubleTouchDistance : this._maximumDoubleClickDistance;
      i23 ? (i23.timeoutHandle.remove(), n28(i23, t29.data) > o32 ? this._startImmediateDoubleClick(t29, m26) : (this._immediateDoubleClick.emit(t29.data, void 0, i23.modifiers), this._removeState(e25))) : n28(m26, t29.data) > o32 ? this._removeState(e25) : this._startImmediateDoubleClick(t29, m26);
    }
  }
  _startImmediateDoubleClick(t29, e25) {
    const i22 = "touch" === t29.data.native.pointerType ? this._maximumDoubleTouchDelay : this._maximumDoubleClickDelay;
    e25.immediateDoubleClick = { x: t29.data.x, y: t29.data.y, modifiers: t29.modifiers, timeoutHandle: this._clock.setTimeout(() => this._removeState(t29.data), i22) };
  }
  _removeState(t29) {
    const e25 = u11(t29);
    this._pointerState.delete(e25), this.stopCapturingPointer(t29.native), this.refreshHasPendingInputs();
  }
};

// node_modules/@arcgis/core/views/input/recognizers/PointerClickHoldAndDrag.js
var r25 = class extends t9 {
  constructor(e25 = t25.maximumClickDelay, i22 = t25.movementUntilMouseDrag, o32 = t25.movementUntilPenDrag, r30 = t25.movementUntilTouchDrag, s28 = t25.holdDelay, a22 = o3) {
    super(false), this._maximumClickDelay = e25, this._movementUntilMouseDrag = i22, this._movementUntilPenDrag = o32, this._movementUntilTouchDrag = r30, this._holdDelay = s28, this._clock = a22, this._pointerState = /* @__PURE__ */ new Map(), this._pointerDrag = this.registerOutgoing("pointer-drag"), this._immediateClick = this.registerOutgoing("immediate-click"), this._pointerHold = this.registerOutgoing("hold"), this.registerIncoming("pointer-down", (t29) => this._handlePointerDown(t29)), this.registerIncoming("pointer-up", (t29) => this._handlePointerLoss(t29, "pointer-up")), this.registerIncoming("pointer-capture-lost", (t29) => this._handlePointerLoss(t29, "pointer-capture-lost")), this.registerIncoming("pointer-cancel", (t29) => this._handlePointerLoss(t29, "pointer-cancel")), this._moveHandle = this.registerIncoming("pointer-move", (t29) => this._handlePointerMove(t29)), this._moveHandle.pause();
  }
  onUninstall() {
    this._pointerState.forEach((t29) => {
      t29.holdTimeout = l(t29.holdTimeout);
    }), super.onUninstall();
  }
  _handlePointerDown(t29) {
    const e25 = t29.data, i22 = e25.native.pointerId;
    let n33 = null;
    0 === this._pointerState.size && (n33 = this._clock.setTimeout(() => {
      const e26 = this._pointerState.get(i22);
      if (e26) {
        if (!e26.isDragging) {
          const i23 = e26.previousEvent;
          this._pointerHold.emit(i23, void 0, t29.modifiers), e26.holdEmitted = true;
        }
        e26.holdTimeout = null;
      }
    }, this._holdDelay));
    const o32 = { startEvent: e25, previousEvent: e25, startTimestamp: t29.timestamp, isDragging: false, downButton: e25.native.button, holdTimeout: n33, modifiers: /* @__PURE__ */ new Set() };
    this._pointerState.set(i22, o32), this.startCapturingPointer(e25.native), this._moveHandle.resume(), this._pointerState.size > 1 && this._startDragging(t29);
  }
  _handlePointerMove(t29) {
    const e25 = t29.data, i22 = e25.native.pointerId, n33 = this._pointerState.get(i22);
    if (n33) {
      if (n33.isDragging) this._pointerDrag.emit(s24("update", n33, e25), void 0, n33.modifiers);
      else {
        r23(e25, n33.startEvent) > this._getDragThreshold(e25.native.pointerType) && this._startDragging(t29);
      }
      n33.previousEvent = e25;
    }
  }
  _getDragThreshold(t29) {
    switch (t29) {
      case "touch":
        return this._movementUntilTouchDrag;
      case "pen":
        return this._movementUntilPenDrag;
      default:
        return this._movementUntilMouseDrag;
    }
  }
  _startDragging(t29) {
    const e25 = t29.data, i22 = e25.native.pointerId;
    this._pointerState.forEach((n33) => {
      null != n33.holdTimeout && (n33.holdTimeout.remove(), n33.holdTimeout = null), n33.isDragging || (n33.modifiers = t29.modifiers, n33.isDragging = true, i22 === n33.startEvent.native.pointerId ? this._pointerDrag.emit(s24("start", n33, e25)) : this._pointerDrag.emit(s24("start", n33, n33.previousEvent), t29.timestamp));
    });
  }
  _handlePointerLoss(t29, e25) {
    const i22 = t29.data, n33 = i22.native.pointerId, o32 = this._pointerState.get(n33);
    if (o32) {
      if (null != o32.holdTimeout && (o32.holdTimeout.remove(), o32.holdTimeout = null), o32.isDragging) this._pointerDrag.emit(s24("end", o32, "pointer-up" === e25 ? i22 : o32.previousEvent), void 0, o32.modifiers);
      else if ("pointer-up" === e25 && o32.downButton === i22.native.button) {
        t29.timestamp - o32.startTimestamp <= this._maximumClickDelay && !o32.holdEmitted && this._immediateClick.emit(i22);
      }
      this._pointerState.delete(n33), this.stopCapturingPointer(i22.native), 0 === this._pointerState.size && this._moveHandle.pause();
    }
  }
};
function s24(t29, e25, i22) {
  return { action: t29, startEvent: e25.startEvent, previousEvent: e25.previousEvent, currentEvent: i22 };
}

// node_modules/@arcgis/core/views/input/recognizers/SingleAndDoubleClick.js
var l18 = class extends t9 {
  constructor(t29 = t25.maximumDoubleClickDelay, i22 = t25.maximumDoubleClickDistance, n33 = t25.maximumDoubleTouchDelay, s28 = t25.maximumDoubleTouchDistance, l21 = o3) {
    super(false), this._maximumDoubleClickDelay = t29, this._maximumDoubleClickDistance = i22, this._maximumDoubleTouchDelay = n33, this._maximumDoubleTouchDistance = s28, this._clock = l21, this._pointerState = /* @__PURE__ */ new Map(), this._click = this.registerOutgoing("click"), this._doubleClick = this.registerOutgoing("double-click"), this.registerIncoming("immediate-click", (e25) => this._handleImmediateClick(e25)), this.registerIncoming("pointer-down", (e25) => this._handlePointerDown(e25));
  }
  onUninstall() {
    this._pointerState.forEach((e25) => e25.doubleClickTimer = l(e25.doubleClickTimer));
  }
  get hasPendingInputs() {
    for (const e25 of this._pointerState.values()) if (null != e25.doubleClickTimer) return true;
    return false;
  }
  _clearDoubleClickTimer(e25, i22) {
    const o32 = this._pointerState.get(e25);
    o32 && (o32.doubleClickTimer = l(o32.doubleClickTimer), i22 && this._click.emit(o32.event.data, void 0, o32.event.modifiers), this._pointerState.delete(e25), this.refreshHasPendingInputs());
  }
  _doubleClickTimeoutExceeded(e25) {
    const t29 = this._pointerState.get(e25);
    1 === t29.pointerDownCount && this._click.emit(t29.event.data, void 0, t29.event.modifiers), t29.doubleClickTimer = null, this._pointerState.delete(e25), this.refreshHasPendingInputs();
  }
  _handleImmediateClick(e25) {
    const t29 = e25.data, { pointerType: i22 } = t29.native, o32 = r26(t29);
    if (!this._pointerState.has(o32)) return void this._startClick(e25);
    const s28 = this._pointerState.get(o32), { data: l21, modifiers: c26 } = s28.event, a22 = "touch" === i22 ? this._maximumDoubleTouchDistance : this._maximumDoubleClickDistance;
    n28(l21, t29) > a22 ? (this._clearDoubleClickTimer(o32, true), this._startClick(e25)) : (this._clearDoubleClickTimer(o32, false), 2 === s28.pointerDownCount && this._doubleClick.emit(l21, void 0, c26));
  }
  _handlePointerDown(e25) {
    const t29 = u11(e25.data), i22 = this._pointerState.get(t29);
    i22 && (i22.pointerDownCount += 1);
  }
  _startClick(e25) {
    const { data: t29 } = e25, { native: { pointerType: i22 } } = t29, o32 = u11(t29), n33 = "touch" === i22 ? this._maximumDoubleTouchDelay : this._maximumDoubleClickDelay, l21 = this._clock.setTimeout(() => this._doubleClickTimeoutExceeded(o32), n33), r30 = 1;
    this._pointerState.set(o32, { event: e25, doubleClickTimer: l21, pointerDownCount: r30 }), this.refreshHasPendingInputs();
  }
};
function r26(e25) {
  const { pointerId: t29, pointerType: i22, button: o32 } = e25.native;
  return "mouse" === i22 ? `${t29}:${o32}` : `${i22}`;
}

// node_modules/@arcgis/core/views/2d/input/MapViewInputManager.js
var T3 = { counter: "Control", pan: { left: "ArrowLeft", right: "ArrowRight", up: "ArrowUp", down: "ArrowDown" }, zoom: { zoomIn: ["=", "+"], zoomOut: ["-", "_"] }, rotate: { clockwiseOption1: "a", clockwiseOption2: "A", counterClockwiseOption1: "d", counterClockwiseOption2: "D", resetOption1: "n", resetOption2: "N" } };
var z4 = class extends b2 {
  initialize() {
    const e25 = () => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.ready;
    };
    this.addHandles([p(() => !e25(), () => this._disconnect()), p(e25, () => this._connect())]);
  }
  destroy() {
    this._disconnect();
  }
  get latestPointerType() {
    var _a;
    return (_a = this._inputManager) == null ? void 0 : _a.latestPointerType;
  }
  get latestPointerLocation() {
    var _a;
    return (_a = this._inputManager) == null ? void 0 : _a.latestPointerLocation;
  }
  get multiTouchActive() {
    var _a;
    return ((_a = this._inputManager) == null ? void 0 : _a.multiTouchActive) ?? false;
  }
  isModifierKeyDown(e25) {
    var _a;
    return ((_a = this._inputManager) == null ? void 0 : _a.isModifierKeyDown(e25)) ?? false;
  }
  _disconnect() {
    this.view.viewEvents.disconnect(), this._inputManager = u(this._inputManager);
  }
  _connect() {
    const e25 = this.view.surface, t29 = new l17(e25, this.view.input), o32 = [new m20(), new r25(), new l18(), new s23(this.view.navigation), new u12()], i22 = new d7({ eventSource: t29, recognizers: o32 });
    i22.installHandlers("prevent-context-menu", [new e20()], _3.INTERNAL), i22.installHandlers("navigation", [new a15(this.view), new d13(this.view), new o23(this.view), new a13(this.view), new a13(this.view, [T3.counter]), new n25(this.view, "primary"), new e17(this.view, T3.pan), new e18(this.view, T3.zoom), new t21(this.view, T3.rotate), new o22(this.view, "secondary"), new e16(this.view, "touch")], _3.INTERNAL), this.view.viewEvents.connect(i22), this._source = t29, this._inputManager = i22, d3(() => {
      var _a, _b;
      return (_b = (_a = this.view) == null ? void 0 : _a.navigation) == null ? void 0 : _b.browserTouchPanEnabled;
    }, (e26) => {
      this._source && (this._source.browserTouchPanningEnabled = !e26);
    }, P);
  }
  get test() {
  }
};
r([m2()], z4.prototype, "view", void 0), r([m2()], z4.prototype, "latestPointerType", null), r([m2()], z4.prototype, "latestPointerLocation", null), r([m2()], z4.prototype, "multiTouchActive", null), z4 = r([a("esri.views.2d.input.MapViewInputManager")], z4);
var k3 = z4;

// node_modules/@arcgis/core/views/2d/layers/features/support/TileStore.js
var d16 = { added: [], removed: [] };
var a19 = /* @__PURE__ */ new Set();
var c16 = new e7(0, 0, 0, 0);
function m21(e25, t29) {
  const s28 = d4(t29);
  if (!s28) return null;
  const [i22, r30] = s28.valid;
  return e25[2] > r30 ? [u4([e25[0], e25[1], r30, e25[3]]), u4([i22, e25[1], i22 + e25[2] - r30, e25[3]])] : e25[0] < i22 ? [u4([i22, e25[1], e25[2], e25[3]]), u4([r30 - (i22 - e25[0]), e25[1], r30, e25[3]])] : null;
}
var u13 = class extends o5 {
  constructor(e25) {
    super(), this._tiles = /* @__PURE__ */ new Map(), this._index = i6(9, has("esri-csp-restrictions") ? (e26) => ({ minX: e26.bounds[0], minY: e26.bounds[1], maxX: e26.bounds[2], maxY: e26.bounds[3] }) : [".bounds[0]", ".bounds[1]", ".bounds[2]", ".bounds[3]"]), this.tiles = [], this.tileScheme = e25;
  }
  destroy() {
    this.clear();
  }
  clear() {
    this.tiles.length = 0, this._tiles.clear(), this._index.clear();
  }
  has(e25) {
    return this._tiles.has(e25);
  }
  get(e25) {
    return this._tiles.get(e25);
  }
  getIntersectingTiles(e25) {
    if (!e25 || 0 === M3(e25) || 0 === s8(e25)) return [];
    const t29 = m21(e25, this.tileScheme.spatialReference);
    return null != t29 ? [.../* @__PURE__ */ new Set([...this.boundsIntersections(t29[0]), ...this.boundsIntersections(t29[1])])] : this.boundsIntersections(e25);
  }
  boundsIntersections(e25) {
    return this._index.search({ minX: e25[0], minY: e25[1], maxX: e25[2], maxY: e25[3] });
  }
  updateTiles(e25) {
    const t29 = { added: [], removed: [] };
    for (const s28 of e25.added) if (!this.has(s28)) {
      const e26 = new n11(this.tileScheme, s28);
      this._tiles.set(s28, e26), this._index.insert(e26), t29.added.push(e26);
    }
    for (const s28 of e25.removed) if (this.has(s28)) {
      const e26 = this.get(s28);
      this._tiles.delete(s28), this._index.remove(e26), t29.removed.push(e26);
    }
    this.tiles.length = 0, this._tiles.forEach((e26) => this.tiles.push(e26)), (t29.added.length || t29.removed.length) && this.emit("update", t29);
  }
  setViewState(e25) {
    const t29 = this.tileScheme.getTileCoverage(e25, 0);
    if (!t29) return;
    const { spans: s28, lodInfo: i22 } = t29, { level: o32 } = i22;
    if (s28.length > 0) for (const { row: n33, colFrom: l21, colTo: h20 } of s28) for (let e26 = l21; e26 <= h20; e26++) {
      const t30 = c16.set(o32, n33, i22.normalizeCol(e26), i22.getWorldForColumn(e26)).id;
      if (a19.add(t30), !this.has(t30)) {
        const e27 = new n11(this.tileScheme, t30);
        this._tiles.set(t30, e27), this._index.insert(e27), this.tiles.push(e27), d16.added.push(e27);
      }
    }
    for (let n33 = this.tiles.length - 1; n33 >= 0; n33--) {
      const e26 = this.tiles[n33];
      a19.has(e26.id) || (this._tiles.delete(e26.id), this.tiles.splice(n33, 1), this._index.remove(e26), d16.removed.push(e26));
    }
    (d16.added.length || d16.removed.length) && this.emit("update", d16), s9.pool.release(t29), a19.clear(), d16.added.length = 0, d16.removed.length = 0;
  }
};

// node_modules/@arcgis/core/views/2d/support/hitTestUtils.js
async function s25(e25, i22, s28) {
  const f17 = o12(i22) ? r12(e25, i22) : i22;
  if (!e25.ready || isNaN(f17.x) || isNaN(f17.y)) return { screenPoint: f17, results: [] };
  let d21 = /* @__PURE__ */ new Set();
  const y10 = /* @__PURE__ */ new Set();
  let u17 = false, h20 = null, g13 = null;
  (s28 == null ? void 0 : s28.include) ? o28(s28.include, n29(e25, (e26) => {
    d21.add(e26), p21(e26, (e27) => y10.add(e27));
  }, (e26, r30) => {
    y10.add(e26), d21.add(r30);
  }, (e26) => {
    h20 || (h20 = /* @__PURE__ */ new Set()), h20.add(e26);
  }, (e26) => d21.add(e26), () => u17 = true)) : (u17 = true, d21 = new Set(e25.allLayerViews), d21.forEach((e26) => {
    p21(e26, (e27) => y10.add(e27));
  })), (s28 == null ? void 0 : s28.exclude) && o28(s28.exclude, n29(e25, (e26) => {
    d21.delete(e26), p21(e26, (e27) => y10.delete(e27));
  }, (e26) => y10.delete(e26), (e26) => {
    g13 || (g13 = /* @__PURE__ */ new Set()), g13.add(e26);
  }));
  const m26 = e25.toMap(f17), w11 = e25.allLayerViews.filter((r30) => !r30.suspended && d21.has(r30) && r30.clips.every((r31) => m9(e25, r31, f17, m26))).reverse();
  let V4 = [...u17 ? e25.graphicsView.hitTest(m26).map((e26) => ({ type: "graphic", graphic: e26, layer: null, mapPoint: m26 })) : [], ...await Promise.all(w11.map((e26) => e26.hitTest(m26, f17)).toArray())].filter(F).flat().filter(F);
  return V4 = V4.filter((e26) => {
    var _a;
    return "graphic" !== e26.type || "subtype-group" !== ((_a = e26.layer) == null ? void 0 : _a.type) || y10.has(e26.graphic.layer);
  }), h20 && (V4 = V4.filter((e26) => !("graphic" in e26) || !e26.graphic || (h20 == null ? void 0 : h20.has(c17(e26.graphic))))), g13 && (V4 = V4.filter((e26) => !("graphic" in e26) || !e26.graphic || !(g13 == null ? void 0 : g13.has(c17(e26.graphic))))), { screenPoint: f17, results: V4 };
}
function n29(r30, i22, t29, a22, l21, s28) {
  return (n33) => {
    if (n33 instanceof d6) {
      if (n33.layer === r30) s28 == null ? void 0 : s28();
      else {
        const e25 = r30.allLayerViews.find((e26) => e26.layer === n33.layer);
        e25 && (l21 == null ? void 0 : l21(e25));
      }
      a22(c17(n33));
    } else if ("layer" in n33 && "element" in n33) ;
    else if ("subtype-sublayer" === n33.type) {
      const e25 = r30.allLayerViews.find((e26) => e26.layer === n33.parent);
      e25 && t29(n33, e25);
    } else {
      const e25 = r30.allLayerViews.find((e26) => e26.layer === n33);
      e25 && i22(e25);
    }
  };
}
function o28(e25, r30) {
  if (e25) if (t(e25)) for (const t29 of e25) if (t(t29)) for (const e26 of t29) r30(e26);
  else r30(t29);
  else r30(e25);
}
function c17(e25) {
  var _a, _b;
  const r30 = e25.getObjectId();
  return r30 ? `${((_a = e25.layer) == null ? void 0 : _a.uid) ?? ((_b = e25.sourceLayer) == null ? void 0 : _b.uid) ?? "MapView"}/${r30}` : `"MapView/${e25.uid}`;
}
function p21({ layer: e25 }, r30) {
  "subtype-group" === (e25 == null ? void 0 : e25.type) && e25.sublayers.forEach((e26) => {
    r30(e26);
  });
}

// node_modules/@arcgis/core/views/2d/support/screenshotUtils.js
var e21 = { flipY: true, premultipliedAlpha: true };
async function o29(h20, n33) {
  const o32 = await a20(h20, n33), { format: r30, quality: l21 } = c7(n33 == null ? void 0 : n33.format, n33 == null ? void 0 : n33.quality);
  return a2(o32, { format: r30, quality: l21 }, e21);
}
async function r27(t29, i22) {
  const n33 = await a20(t29, i22);
  return r13(n33, e21);
}
function a20(t29, i22) {
  const h20 = d17(i22 || {}, u14(t29.stage, t29.size), t29.size, t29.padding), n33 = l19(i22, t29.allLayerViews);
  return t29.stage.takeScreenshot(h20, n33, t29.backgroundColor, i22 == null ? void 0 : i22.rotation);
}
function l19(t29 = {}, i22) {
  if (!t29.layers) return;
  const h20 = [];
  return t29.layers.forEach((t30) => {
    const n33 = i22.find((i23) => i23.layer.id === t30.id);
    (n33 == null ? void 0 : n33.container) && h20.push(n33.container);
  }), h20;
}
function u14(t29, i22) {
  return Math.min(4, s12(i22, Math.min(4096, t29.context.parameters.maxTextureSize)));
}
function d17(t29, i22, h20, n33) {
  t29.ignorePadding && (n33 = { left: 0, right: 0, top: 0, bottom: 0 });
  let e25 = null;
  null != t29.width && null != t29.height ? e25 = [t29.width, t29.height] : null == t29.width && null != t29.height ? e25 = [t29.height, t29.height] : null != t29.width && null == t29.height ? e25 = [t29.width, t29.width] : null == t29.width && null == t29.height && (e25 = null);
  const o32 = h20[0] - (n33.left + n33.right), r30 = h20[1] - (n33.top + n33.bottom);
  let a22, l21, u17 = t29.area || { x: 0, y: 0, width: o32, height: r30 };
  if (e25) {
    const t30 = o32 / r30, i23 = e25[0] / e25[1];
    if (i23 > t30) {
      const t31 = u17.width / i23;
      u17 = { x: u17.x, y: Math.round(u17.y + (u17.height - t31) / 2), width: u17.width, height: Math.round(t31) };
    } else {
      const t31 = u17.height * i23;
      u17 = { x: Math.round(u17.x + (u17.width - t31) / 2), y: u17.y, width: Math.round(t31), height: u17.height };
    }
  } else e25 = [u17.width, u17.height];
  return e25[0] > u17.width ? (a22 = Math.min(e25[0] / u17.width, i22), l21 = e25[0] / u17.width / a22) : (a22 = 1, l21 = e25[0] / u17.width), { cropArea: { x: Math.round((u17.x + n33.left) * a22), y: Math.round((u17.y + n33.top) * a22), width: Math.round(u17.width * a22), height: Math.round(u17.height * a22) }, outputScale: l21, resolutionScale: a22 };
}

// node_modules/@arcgis/core/views/2d/support/StationaryManager.js
var e22 = 160;
var i21 = class extends b2 {
  constructor() {
    super(...arguments), this._timer = void 0;
  }
  get stationary() {
    return !this._timer;
  }
  flip() {
    this._timestamp = performance.now(), null == this._timer && (this._timer = setInterval(() => {
      performance.now() - this._timestamp >= e22 && this.clear();
    }, e22));
  }
  clear() {
    this._timer && (clearInterval(this._timer), this._timer = void 0);
  }
};
r([m2()], i21.prototype, "_timer", void 0), r([m2()], i21.prototype, "stationary", null), i21 = r([a("esri.views.2d.support.StationaryManager")], i21);

// node_modules/@arcgis/core/views/support/WebGLRequirements.js
function t26(t29) {
  const o32 = t8();
  return o32.available ? "3d" === t29 && o32.majorPerformanceCaveat ? new s("webgl:major-performance-caveat-detected", "Your WebGL implementation doesn't seem to support hardware accelerated rendering. Check your browser settings or if your GPU is in a blocklist.") : o32.supportsHighPrecisionFragment ? o32.supportsVertexShaderSamplers ? null : new s("webgl:vertex-shader-samplers-required", "WebGL support for vertex shader samplers is required but not supported.") : new s("webgl:high-precision-fragment-required", "WebGL support for high precision fragment shaders is required but not supported.") : new s("webgl:required", "WebGL2 is required but not supported.", new Error().stack);
}

// node_modules/@arcgis/core/views/ui/Component.js
function n30(t29) {
  return t29 && "nodeType" in t29;
}
function d18(t29) {
  return t29 && "function" == typeof t29.render;
}
var c18 = { component: "esri-component" };
var p22 = class extends b2 {
  constructor() {
    super(...arguments), this.widget = null;
  }
  destroy() {
    var _a;
    this.node = null, (_a = this.widget) == null ? void 0 : _a.destroy();
  }
  get id() {
    var _a, _b;
    return this._get("id") ?? ((_a = this.widget) == null ? void 0 : _a.id) ?? ((_b = this.node) == null ? void 0 : _b.id);
  }
  set id(t29) {
    this._set("id", t29);
  }
  set node(t29) {
    const o32 = this._get("node");
    t29 !== o32 && (t29 && t29.classList.add(c18.component), o32 && o32.classList.remove(c18.component), this._set("node", t29));
  }
  castNode(t29) {
    var _a;
    return (_a = this.widget) == null ? void 0 : _a.destroy(), t29 ? "string" == typeof t29 || n30(t29) ? (this._set("widget", null), n4(t29)) : (d18(t29) && !t29.domNode && (t29.domNode = document.createElement("div")), this._set("widget", t29), t29.domNode) : (this._set("widget", null), null);
  }
};
r([m2()], p22.prototype, "id", null), r([m2()], p22.prototype, "node", null), r([s4("node")], p22.prototype, "castNode", null), r([m2({ readOnly: true })], p22.prototype, "widget", void 0), p22 = r([a("esri.views.ui.Component")], p22);
var m22 = p22;

// node_modules/@arcgis/core/views/ui/UI.js
var f15 = { left: 0, top: 0, bottom: 0, right: 0 };
var _9 = { bottom: 30, top: 15, right: 15, left: 15 };
var g11 = "esri-ui";
var y8 = { ui: g11, corner: `${g11}-corner`, innerContainer: `${g11}-inner-container`, manualContainer: `${g11}-manual-container`, cornerContainer: `${g11}-corner-container`, topLeft: `${g11}-top-left`, topRight: `${g11}-top-right`, bottomLeft: `${g11}-bottom-left`, bottomRight: `${g11}-bottom-right` };
function C5(t29) {
  return t29 && !t29._started && "function" == typeof t29.postMixInProperties && "function" == typeof t29.buildRendering && "function" == typeof t29.postCreate && "function" == typeof t29.startup;
}
function v11(t29) {
  return 0 === t29 ? "0" : `${t29}px`;
}
function b6(t29) {
  const o32 = "object" == typeof t29 && null !== t29 && Object.getPrototypeOf(t29);
  return (null === o32 || o32 === Object.prototype) && ("component" in t29 || "index" in t29 || "position" in t29) ? t29 : null;
}
function w10(t29, { top: o32, bottom: e25, left: n33, right: i22 }) {
  t29.style.top = o32, t29.style.bottom = e25, t29.style.left = n33, t29.style.right = i22;
}
var P5 = class extends o5.EventedAccessor {
  constructor(t29) {
    super(t29), this._cornerNameToContainerLookup = {}, this._positionNameToContainerLookup = {}, this._components = new Array(), this._componentMap = /* @__PURE__ */ new Map(), this._removeWidgetHandleKey = Symbol("componentOnRemoveSymbol"), this._locale = c3(), this.view = null, this._applyViewPadding = () => {
      const t30 = this.container;
      t30 && w10(t30, this._toPixelPosition(this._getViewPadding()));
    }, this._applyUIPadding = () => {
      const t30 = this._innerContainer;
      t30 && w10(t30, this._toPixelPosition(this.padding));
    }, this._initContainers();
  }
  initialize() {
    this.addHandles([d3(() => {
      var _a;
      return [(_a = this.view) == null ? void 0 : _a.padding, this.container];
    }, this._applyViewPadding, P), d3(() => this.padding, this._applyUIPadding, P), d3(() => [this.container, this._locale], ([t29, o32]) => {
      t29 && t29.setAttribute("lang", o32);
    }, P), g2((t29) => {
      this._locale = t29;
    })]);
  }
  destroy() {
    this.container = null;
    for (const t29 of this._components) t29.destroy();
    this._components.length = 0, this._componentMap.clear();
  }
  set container(t29) {
    const o32 = this._get("container");
    t29 !== o32 && (t29 && (t29.classList.add(y8.ui), n7(t29), this._attachContainers(t29)), o32 && (o32.classList.remove(y8.ui), w10(o32, { top: "", bottom: "", left: "", right: "" }), o32.textContent = ""), this._set("container", t29));
  }
  get height() {
    var _a;
    const t29 = ((_a = this.view) == null ? void 0 : _a.height) ?? 0;
    if (0 === t29) return t29;
    const o32 = this._getViewPadding(), { top: e25, bottom: n33 } = o32;
    return Math.max(t29 - e25 - n33, 0);
  }
  get padding() {
    return this._get("padding");
  }
  set padding(t29) {
    this._overrideIfSome("padding", t29);
  }
  castPadding(t29) {
    return "number" == typeof t29 ? { bottom: t29, top: t29, right: t29, left: t29 } : { ..._9, ...t29 };
  }
  get width() {
    var _a;
    const t29 = ((_a = this.view) == null ? void 0 : _a.width) ?? 0;
    if (0 === t29) return t29;
    const o32 = this._getViewPadding(), { left: e25, right: n33 } = o32;
    return Math.max(t29 - e25 - n33, 0);
  }
  add(t29, o32) {
    let e25, n33, i22;
    if (Array.isArray(t29)) return void t29.forEach((t30) => this.add(t30, o32));
    const r30 = b6(t29);
    r30 && ({ index: e25, position: o32, component: t29, key: n33 } = r30), o32 && "object" == typeof o32 && ({ index: e25, key: n33, position: o32, internal: i22 } = o32), !t29 || o32 && !this._isValidPosition(o32) || this._add(t29, o32, e25, n33, i22);
  }
  remove(t29, o32) {
    var _a, _b;
    if (!t29) return;
    if (Array.isArray(t29)) return t29.map((t30) => this.remove(t30, o32));
    const e25 = this._find(t29);
    if (e25) {
      if (this._componentMap.has(e25) && ((_a = this._componentMap.get(e25)) == null ? void 0 : _a.key) !== o32) return;
      const t30 = this._components.indexOf(e25), n33 = e25.node.parentNode;
      return n33 == null ? void 0 : n33.removeChild(e25.node), this._componentMap.delete(e25), (_b = e25.widget) == null ? void 0 : _b.removeHandlesReference(this._removeWidgetHandleKey), this._components.splice(t30, 1)[0];
    }
  }
  empty(t29, o32 = { removeInternal: false }) {
    if (Array.isArray(t29)) {
      for (const e26 of t29) this.empty(e26, o32);
      return;
    }
    const e25 = this._positionNameToContainerLookup[t29 ?? "manual"], n33 = Array.prototype.slice.call(e25.children).map((t30) => this._findByNode(t30)).filter((t30) => {
      var _a;
      if (null == t30) return false;
      return !(((_a = this._componentMap.get(t30)) == null ? void 0 : _a.internal) ?? false) || o32.removeInternal;
    });
    for (const i22 of n33) this.remove(i22);
  }
  move(t29, o32) {
    if (Array.isArray(t29) && t29.forEach((t30) => this.move(t30, o32)), !t29) return;
    let e25;
    const n33 = b6(t29) || b6(o32);
    if (n33 && (e25 = n33.index, o32 = n33.position, t29 = n33.component || t29), o32 && !this._isValidPosition(o32)) return;
    const i22 = this.remove(t29);
    i22 && this.add(i22, { position: o32, index: e25 });
  }
  find(t29) {
    if (!t29) return null;
    const o32 = this._findById(t29);
    return o32 && (o32.widget || o32.node);
  }
  getComponents(t29, o32 = { includeInternal: false }) {
    return t29 ? Array.isArray(t29) ? t29.flatMap((t30) => this._getComponentsAtPosition(t30, o32)) : this._getComponentsAtPosition(t29, o32) : this._components.filter((t30) => {
      var _a;
      return o32.includeInternal || !((_a = this._componentMap.get(t30)) == null ? void 0 : _a.internal);
    }).map(({ widget: t30, node: o33 }) => t30 ?? o33);
  }
  getPosition(t29) {
    for (const o32 in this._positionNameToContainerLookup) {
      if (this._positionNameToContainerLookup[o32].contains(t29)) return o32;
    }
    return null;
  }
  _add(t29, e25, n33, r30, s28) {
    t29 instanceof m22 || (t29 = new m22({ node: t29 }));
    const { widget: a22 } = t29;
    null != a22 && a22 instanceof b2 && a22.addHandles(e2(() => {
      queueMicrotask(() => this.remove(t29));
    }), this._removeWidgetHandleKey), this._place({ component: t29, position: e25, index: n33 }), this._components.push(t29), this._componentMap.set(t29, { key: r30, internal: s28 });
  }
  _find(t29) {
    return t29 ? t29 instanceof m22 ? this._findByComponent(t29) : "string" == typeof t29 ? this._findById(t29) : this._findByNode(t29.domNode || t29) : null;
  }
  _getViewPadding() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.padding) ?? f15;
  }
  _attachContainers(t29) {
    t29.appendChild(this._innerContainer), t29.appendChild(this._manualContainer);
  }
  _initContainers() {
    const t29 = document.createElement("div");
    t29.classList.add(y8.innerContainer, y8.cornerContainer);
    const o32 = document.createElement("div");
    o32.classList.add(y8.innerContainer, y8.manualContainer);
    const e25 = document.createElement("div");
    e25.classList.add(y8.topLeft, y8.corner), t29.appendChild(e25);
    const n33 = document.createElement("div");
    n33.classList.add(y8.topRight, y8.corner), t29.appendChild(n33);
    const i22 = document.createElement("div");
    i22.classList.add(y8.bottomLeft, y8.corner), t29.appendChild(i22);
    const r30 = document.createElement("div");
    r30.classList.add(y8.bottomRight, y8.corner), t29.appendChild(r30), this._innerContainer = t29, this._manualContainer = o32;
    const s28 = u3();
    this._cornerNameToContainerLookup = { "top-left": e25, "top-right": n33, "bottom-left": i22, "bottom-right": r30, "top-leading": s28 ? n33 : e25, "top-trailing": s28 ? e25 : n33, "bottom-leading": s28 ? r30 : i22, "bottom-trailing": s28 ? i22 : r30 }, this._positionNameToContainerLookup = { manual: o32, ...this._cornerNameToContainerLookup };
  }
  _isValidPosition(t29) {
    return !!this._positionNameToContainerLookup[t29];
  }
  _place(t29) {
    var _a, _b;
    const o32 = t29.position ?? "manual", { component: e25, index: n33 } = t29, i22 = this._positionNameToContainerLookup[o32], r30 = null != n33 && n33 > -1;
    if (C5(e25.widget) && e25.widget.startup(), !r30) return void i22.appendChild(e25.node);
    const s28 = Array.from(i22.children);
    if (0 === n33) {
      const { firstChild: t30 } = i22;
      return void (t30 ? (_a = t30.parentNode) == null ? void 0 : _a.insertBefore(e25.node, t30) : i22.appendChild(e25.node));
    }
    if (n33 >= s28.length) return void i22.appendChild(e25.node);
    const a22 = s28[n33];
    (_b = a22.parentNode) == null ? void 0 : _b.insertBefore(e25.node, a22);
  }
  _toPixelPosition(t29) {
    return { top: v11(t29.top), left: v11(t29.left), right: v11(t29.right), bottom: v11(t29.bottom) };
  }
  _findByComponent(t29) {
    return this._components.find((o32) => o32 === t29) ?? null;
  }
  _findById(t29) {
    return this._components.find(({ id: o32 }) => o32 === t29) ?? null;
  }
  _findByNode(t29) {
    return this._components.find(({ node: o32 }) => o32 === t29) ?? null;
  }
  _getComponentsAtPosition(t29, o32) {
    const n33 = this._positionNameToContainerLookup[t29];
    return Array.prototype.slice.call(n33.children).map((t30) => this._findByNode(t30)).filter(F).filter((t30) => {
      var _a;
      return o32.includeInternal || !((_a = this._componentMap.get(t30)) == null ? void 0 : _a.internal);
    }).map(({ widget: t30, node: o33 }) => t30 ?? o33);
  }
};
r([m2()], P5.prototype, "_locale", void 0), r([m2()], P5.prototype, "container", null), r([m2()], P5.prototype, "height", null), r([m2({ value: _9 })], P5.prototype, "padding", null), r([s4("padding")], P5.prototype, "castPadding", null), r([m2()], P5.prototype, "view", void 0), r([m2()], P5.prototype, "width", null), P5 = r([a("esri.views.ui.UI")], P5);
var L5 = P5;

// node_modules/@arcgis/core/views/3d/layers/Lyr3DWasm.js
var n31 = /* @__PURE__ */ new Map();
function l20(e25) {
  return n31.get(e25);
}

// node_modules/@arcgis/core/widgets/Attribution/AttributionViewModel.js
function f16(t29, e25) {
  return t29 && "copyright" in t29 && (!e25 || "function" == typeof t29.originOf && "user" === t29.originOf("copyright"));
}
function y9(t29, e25) {
  return t29.length !== e25.length || t29.some((t30, i22) => t30.text !== e25[i22].text);
}
function b7(t29, e25, i22) {
  if (!i22 || !e25) return;
  t29.find((t30) => t30.layerView === e25 && t30.text === i22) || t29.push({ text: i22, layerView: e25 });
}
function g12(t29) {
  return "bing-maps" === t29.type;
}
var A5 = [];
var _10 = class extends b2 {
  constructor(t29) {
    super(t29), this._clear = () => {
      this._fetchedAttributionData.clear(), this._pendingAttributions.clear(), this.removeHandles("suspension"), this.notifyChange("state");
    }, this._pendingAttributions = /* @__PURE__ */ new Set(), this._fetchedAttributionData = /* @__PURE__ */ new Map(), this.items = new V(), this.view = null, this._allLayerViewsChange = (t30) => {
      var _a;
      this.removeHandles("suspension"), this.removeHandles("visible-geometry-changed");
      const e25 = (_a = this.view) == null ? void 0 : _a.allLayerViews;
      e25 && (this.addHandles(e25.map((t31) => d3(() => {
        var _a2;
        return [t31.suspended, (_a2 = t31.layer) == null ? void 0 : _a2.attributionVisible];
      }, () => this._updateAttributionItems())).toArray(), "suspension"), e25.forEach((t31) => {
        "esri.views.3d.layers.Tiles3DLayerView3D" === t31.declaredClass && this.addHandles(t31.on("visible-geometry-changed", () => this._updateAttributionItems()), "visible-geometry-changed");
      })), (t30 == null ? void 0 : t30.removed) && t30.removed.forEach((t31) => {
        this._pendingAttributions.delete(t31), this._fetchedAttributionData.delete(t31);
      }), this._updateAttributionItems();
    }, this.addHandles([v2(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.allLayerViews;
    }, "change", (t30) => this._allLayerViewsChange(t30), { onListenerAdd: () => this._allLayerViewsChange(), onListenerRemove: this._clear }), p(() => {
      var _a;
      return true === ((_a = this.view) == null ? void 0 : _a.stationary);
    }, () => this._updateAttributionItems())]);
  }
  destroy() {
    this.view = null, this._fetchedAttributionData.clear(), this._pendingAttributions.clear(), this.items.removeAll();
  }
  get state() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.ready) ? this._pendingAttributions.size > 0 ? "loading" : "ready" : "disabled";
  }
  _updateAttributionItems() {
    const t29 = this.view, e25 = t29 == null ? void 0 : t29.allLayerViews;
    if (A5.length = 0, !t29 || !e25) return void this._clear();
    e25.forEach((e26) => {
      var _a, _b;
      if (e26.suspended || !((_a = e26.layer) == null ? void 0 : _a.attributionVisible)) return;
      const i23 = e26.layer;
      if (f16(i23, "user")) return void b7(A5, e26, i23.copyright);
      if (i23.hasAttributionData) {
        if (this._fetchedAttributionData.has(e26)) {
          const r31 = this._fetchedAttributionData.get(e26);
          return void (r31 ? b7(A5, e26, this._getDynamicAttribution(r31, t29, i23)) : f16(i23) && b7(A5, e26, i23.copyright));
        }
        return void this._fetchAttributionData(e26);
      }
      const r30 = "portalItem" in i23 ? (_b = i23.portalItem) == null ? void 0 : _b.accessInformation : void 0;
      b7(A5, e26, r30 || i23.copyright);
    });
    const i22 = e25.find((t30) => {
      var _a;
      return "integrated-mesh-3dtiles" === ((_a = t30.layer) == null ? void 0 : _a.type);
    });
    if (this.view && i22) {
      const t30 = l20(this.view);
      if (t30) {
        const e26 = t30.getAttributionText();
        for (let t31 = 0; t31 < e26.length; ++t31) b7(A5, i22, e26[t31]);
      }
    }
    y9(this.items, A5) && (this.items.removeAll(), this.items.addMany(A5)), A5.length = 0, this.notifyChange("state");
  }
  async _fetchAttributionData(t29) {
    if (this._pendingAttributions.has(t29)) return;
    this._pendingAttributions.add(t29);
    const e25 = await _(t29.layer.fetchAttributionData());
    if (this._pendingAttributions.has(t29)) {
      const i22 = e25.ok ? this._createContributionIndex(e25.value, g12(t29.layer)) : null;
      this._pendingAttributions.delete(t29), this._fetchedAttributionData.set(t29, i22);
    }
    this._updateAttributionItems();
  }
  _createContributionIndex(t29, e25) {
    const i22 = t29.contributors, r30 = {};
    if (!i22) return r30;
    for (let s28 = 0; s28 < i22.length; s28++) {
      const t30 = i22[s28], o32 = t30.coverageAreas;
      if (!o32) return;
      for (const i23 of o32) {
        const o33 = i23.bbox, n33 = i23.zoomMin - (e25 && i23.zoomMin ? 1 : 0), a22 = i23.zoomMax - (e25 && i23.zoomMax ? 1 : 0), c26 = new w3({ xmin: o33[1], ymin: o33[0], xmax: o33[3], ymax: o33[2], spatialReference: g3.WGS84 }), u17 = { extent: R(c26), attribution: t30.attribution || "", score: null != i23.score ? i23.score : 100, id: s28 };
        for (let t31 = n33; t31 <= a22; t31++) r30[t31] ?? (r30[t31] = []), r30[t31].push(u17);
      }
    }
    return r30.maxKey = Math.max.apply(null, Object.keys(r30)), r30;
  }
  _getDynamicAttribution(t29, e25, i22) {
    var _a;
    const { extent: r30, scale: s28 } = e25;
    let o32 = ((_a = i22.tileInfo) == null ? void 0 : _a.scaleToZoom(s28)) ?? 0;
    if (o32 = Math.min(t29.maxKey ?? 0, Math.round(o32)), !r30 || null == o32 || o32 <= -1) return "";
    const n33 = t29[o32], a22 = M(r30.center.clone().normalize(), g3.WebMercator), c26 = /* @__PURE__ */ new Set();
    return n33 ? n33.filter((t30) => {
      const e26 = t30.id, i23 = !c26.has(e26) && a22 && t30.extent && t5(t30.extent, a22);
      return i23 && c26.add(e26), i23;
    }).sort((t30, e26) => e26.score - t30.score || t30.objectId - e26.objectId).map((t30) => t30.attribution).join(", ") : "";
  }
};
r([m2({ readOnly: true, type: V })], _10.prototype, "items", void 0), r([m2({ readOnly: true })], _10.prototype, "state", null), r([m2()], _10.prototype, "view", void 0), _10 = r([a("esri.widgets.Attribution.AttributionViewModel")], _10);
var v12 = _10;

// node_modules/@arcgis/core/widgets/Attribution.js
var c19 = "esri-attribution";
var a21 = { base: c19, poweredBy: `${c19}__powered-by`, sources: `${c19}__sources`, open: `${c19}--open`, sourcesOpen: `${c19}__sources--open`, link: `${c19}__link` };
var h17 = class extends B {
  constructor(e25, t29) {
    super(e25, t29), this._isOpen = false, this._attributionTextOverflowed = false, this._prevSourceNodeHeight = 0, this._resizeObserver = new ResizeObserver((e26) => e26.forEach(({ target: e27 }) => this._checkSourceTextOverflow(e27))), this.itemDelimiter = " | ", this.messages = null, this.viewModel = new v12();
  }
  initialize() {
    this.addHandles(v2(() => {
      var _a;
      return (_a = this.viewModel) == null ? void 0 : _a.items;
    }, "change", () => this.scheduleRender()));
  }
  destroy() {
    var _a;
    (_a = this._resizeObserver) == null ? void 0 : _a.disconnect();
  }
  get _isInteractive() {
    return this._isOpen || this._attributionTextOverflowed;
  }
  get attributionText() {
    return this.viewModel.items.reduce((e25, t29) => (e25.includes(t29.text) || e25.push(t29.text), e25), []).join(this.itemDelimiter);
  }
  get icon() {
    return "description";
  }
  set icon(e25) {
    this._overrideIfSome("icon", e25);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e25) {
    this._overrideIfSome("label", e25);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e25) {
    this.viewModel.view = e25;
  }
  render() {
    const e25 = { [a21.open]: this._isOpen };
    return n6("div", { bind: this, class: this.classes(a21.base, e8.widget, e25), dir: "ltr", onclick: this._toggleState, onkeydown: this._toggleState }, this._renderSourcesNode(), this._renderPoweredBy());
  }
  _renderPoweredBy() {
    return n6("div", { class: a21.poweredBy }, "Powered by", " ", n6("a", { class: a21.link, href: "https://www.esri.com/", rel: "noreferrer", target: "_blank" }, "Esri"));
  }
  _renderSourcesNode() {
    const e25 = this._isOpen, t29 = this._isInteractive, i22 = t29 ? 0 : void 0, { attributionText: r30 } = this, s28 = { [a21.sourcesOpen]: e25, [e8.interactive]: t29 };
    return n6("div", { afterCreate: this._afterSourcesNodeCreate, bind: this, class: this.classes(a21.sources, s28), innerHTML: r30, tabIndex: i22 });
  }
  _afterSourcesNodeCreate(e25) {
    this._prevSourceNodeHeight = e25.clientWidth, this._resizeObserver.observe(e25);
  }
  _checkSourceTextOverflow(e25) {
    let t29 = false;
    const { clientHeight: i22, clientWidth: r30, scrollWidth: s28 } = e25, o32 = s28 > r30, n33 = this._attributionTextOverflowed !== o32;
    if (this._attributionTextOverflowed = o32, n33 && (t29 = true), this._isOpen) {
      const e26 = i22 < this._prevSourceNodeHeight;
      this._prevSourceNodeHeight = i22, e26 && (this._isOpen = false, t29 = true);
    }
    t29 && this.scheduleRender();
  }
  _toggleState() {
    this._isInteractive && (this._isOpen = !this._isOpen);
  }
};
r([m2()], h17.prototype, "_isOpen", void 0), r([m2()], h17.prototype, "_isInteractive", null), r([m2()], h17.prototype, "_attributionTextOverflowed", void 0), r([m2()], h17.prototype, "_prevSourceNodeHeight", void 0), r([m2({ readOnly: true, dependsOn: ["viewModel.items.length", "itemDelimiter"] })], h17.prototype, "attributionText", null), r([m2()], h17.prototype, "icon", null), r([m2()], h17.prototype, "itemDelimiter", void 0), r([m2()], h17.prototype, "label", null), r([m2(), e3("esri/widgets/Attribution/t9n/Attribution")], h17.prototype, "messages", void 0), r([m2()], h17.prototype, "view", null), r([m2({ type: v12 })], h17.prototype, "viewModel", void 0), r([t10()], h17.prototype, "_toggleState", null), h17 = r([a("esri.widgets.Attribution")], h17);
var u15 = h17;

// node_modules/@arcgis/core/widgets/Compass/utils.js
function e23(e25) {
  var _a, _b;
  return ((_a = e25 == null ? void 0 : e25.spatialReference) == null ? void 0 : _a.isWebMercator) || ((_b = e25 == null ? void 0 : e25.spatialReference) == null ? void 0 : _b.isGeographic) || false;
}

// node_modules/@arcgis/core/widgets/Compass/CompassViewModel.js
var p23 = class extends t11(b2) {
  constructor(t29) {
    super(t29), this.orientation = { x: 0, y: 0, z: 0 }, this.view = null, this._updateForCamera = this._updateForCamera.bind(this), this._updateForRotation = this._updateForRotation.bind(this), this._updateRotationWatcher = this._updateRotationWatcher.bind(this);
  }
  initialize() {
    this.addHandles(d3(() => this.view, this._updateRotationWatcher, P));
  }
  destroy() {
    this.view = null;
  }
  get canShowNorth() {
    return e23(this.view);
  }
  get state() {
    var _a;
    return !((_a = this.view) == null ? void 0 : _a.ready) || "2d" === this.view.type && !this.view.constraints.rotationEnabled ? "disabled" : this.canShowNorth ? "compass" : "rotation";
  }
  reset() {
    var _a, _b;
    ((_a = this.view) == null ? void 0 : _a.ready) && ("2d" === ((_b = this.view) == null ? void 0 : _b.type) ? this.callGoTo({ target: { rotation: 0 }, options: { animationMode: "always", duration: r14() } }) : this.callGoTo({ target: { heading: 0 } }));
  }
  _updateForRotation(t29) {
    null != t29 && this._set("orientation", { z: t29 });
  }
  _updateForCamera(t29) {
    if (!t29) return;
    const o32 = -t29.heading;
    this._set("orientation", { x: 0, y: 0, z: o32 });
  }
  _updateRotationWatcher(t29) {
    this.removeAllHandles(), t29 && this.addHandles("2d" === t29.type ? d3(() => t29 == null ? void 0 : t29.rotation, this._updateForRotation, P) : d3(() => t29 == null ? void 0 : t29.camera, this._updateForCamera, P));
  }
};
r([m2({ readOnly: true })], p23.prototype, "canShowNorth", null), r([m2({ readOnly: true })], p23.prototype, "orientation", void 0), r([m2({ readOnly: true })], p23.prototype, "state", null), r([m2()], p23.prototype, "view", void 0), p23 = r([a("esri.widgets.Compass.CompassViewModel")], p23);
var h18 = p23;

// node_modules/@arcgis/core/widgets/Compass/css.js
var n32 = "esri-compass";
var o30 = { base: n32, iconContainer: `${n32}__icon-container` };

// node_modules/@arcgis/core/widgets/Compass.js
var c20 = class extends B {
  constructor(e25, t29) {
    super(e25, t29), this.messages = null, this.viewModel = new h18(), this._reset = () => {
      this.viewModel.reset();
    }, this._toRotationTransform = (e26) => ({ transform: `rotateZ(${e26.z}deg)` });
  }
  loadDependencies() {
    return r5({ button: () => import("./calcite-button-CIWFCC6E.js"), icon: () => import("./calcite-icon-7LCZHQE3.js") });
  }
  get goToOverride() {
    return this.viewModel.goToOverride;
  }
  set goToOverride(e25) {
    this.viewModel.goToOverride = e25;
  }
  get icon() {
    return "rotation" === this.viewModel.state ? "arrow-up" : "compass-needle";
  }
  set icon(e25) {
    this._overrideIfSome("icon", e25);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(e25) {
    this._overrideIfSome("label", e25);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(e25) {
    this.viewModel.view = e25;
  }
  reset() {
    return this.viewModel.reset();
  }
  render() {
    const { orientation: e25, state: t29 } = this.viewModel, { messages: s28 } = this;
    return n6("div", { class: this.classes(o30.base, e8.widget) }, n6("calcite-button", { class: e8.widgetButton, disabled: "disabled" === t29, kind: "neutral", label: s28.reset, onclick: this._reset, round: true, scale: "s", title: s28.reset }, n6("div", { "aria-hidden": "true", class: o30.iconContainer, title: s28.reset }, n6("calcite-icon", { icon: this.icon, styles: this._toRotationTransform(e25) }))));
  }
};
r([m2()], c20.prototype, "goToOverride", null), r([m2()], c20.prototype, "icon", null), r([m2()], c20.prototype, "label", null), r([m2(), e3("esri/widgets/Compass/t9n/Compass")], c20.prototype, "messages", void 0), r([m2()], c20.prototype, "view", null), r([m2({ type: h18 })], c20.prototype, "viewModel", void 0), c20 = r([a("esri.widgets.Compass")], c20);
var d19 = c20;

// node_modules/@arcgis/core/widgets/NavigationToggle/css.js
var o31 = "esri-navigation-toggle";
var t27 = { base: o31, isLayoutHorizontal: `${o31}--horizontal` };

// node_modules/@arcgis/core/widgets/NavigationToggle/NavigationToggleViewModel.js
var s26 = class extends b2 {
  constructor(t29) {
    super(t29), this._navigationMode = "pan", this.view = null;
  }
  initialize() {
    this.addHandles(p(() => {
      var _a;
      return (_a = this.view) == null ? void 0 : _a.inputManager;
    }, () => this._setNavigationMode()));
  }
  destroy() {
    this.view = null;
  }
  get state() {
    var _a, _b;
    return ((_a = this.view) == null ? void 0 : _a.ready) && "3d" === ((_b = this.view) == null ? void 0 : _b.type) ? "ready" : "disabled";
  }
  get navigationMode() {
    return this._navigationMode;
  }
  set navigationMode(t29) {
    this._navigationMode = t29, this._setNavigationMode();
  }
  toggle() {
    "disabled" !== this.state && (this.navigationMode = "pan" !== this.navigationMode ? "pan" : "rotate");
  }
  _setNavigationMode() {
    var _a;
    const t29 = (_a = this.view) == null ? void 0 : _a.inputManager;
    t29 && (t29.primaryDragAction = "pan" === this._navigationMode ? "pan" : "rotate");
  }
};
r([m2({ readOnly: true })], s26.prototype, "state", null), r([m2()], s26.prototype, "_navigationMode", void 0), r([m2()], s26.prototype, "view", void 0), s26 = r([a("esri.widgets.NavigationToggle.NavigationToggleViewModel")], s26);
var r28 = s26;

// node_modules/@arcgis/core/widgets/NavigationToggle.js
var c21 = class extends B {
  constructor(t29, e25) {
    super(t29, e25), this.messages = null, this.viewModel = new r28(), this.toggle = () => this.viewModel.toggle(), this._panButton = null, this._rotateButton = null, this._toggle = () => {
      var _a;
      const t30 = "pan" === ((_a = this.viewModel) == null ? void 0 : _a.navigationMode) ? this._rotateButton : this._panButton;
      w2(t30), this.toggle();
    };
  }
  loadDependencies() {
    return r5({ button: () => import("./calcite-button-CIWFCC6E.js") });
  }
  get icon() {
    return "move";
  }
  set icon(t29) {
    this._overrideIfSome("icon", t29);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(t29) {
    this._overrideIfSome("label", t29);
  }
  set layout(t29) {
    "horizontal" !== t29 && (t29 = "vertical"), this._set("layout", t29);
  }
  get view() {
    return this.viewModel.view;
  }
  set view(t29) {
    this.viewModel.view = t29;
  }
  render() {
    var _a, _b;
    const t29 = "disabled" === ((_a = this.viewModel) == null ? void 0 : _a.state), e25 = "pan" === ((_b = this.viewModel) == null ? void 0 : _b.navigationMode), o32 = this.messages.toggle;
    return n6("div", { class: this.classes(t27.base, e8.widget, { [t27.isLayoutHorizontal]: "horizontal" === this.layout }) }, n6("calcite-button", { afterCreate: (t30) => {
      this._panButton = t30;
    }, appearance: e25 ? "outline-fill" : "solid", class: e8.widgetButton, disabled: t29, iconStart: "move", kind: "neutral", label: o32, onclick: this._toggle, tabIndex: e25 ? void 0 : -1, title: o32 }), n6("calcite-button", { afterCreate: (t30) => {
      this._rotateButton = t30;
    }, appearance: e25 ? "solid" : "outline-fill", class: e8.widgetButton, disabled: t29, iconStart: "rotate", kind: "neutral", label: o32, onclick: this._toggle, tabIndex: e25 ? -1 : void 0, title: o32 }));
  }
};
r([m2()], c21.prototype, "icon", null), r([m2()], c21.prototype, "label", null), r([m2({ value: "vertical" })], c21.prototype, "layout", null), r([m2(), e3("esri/widgets/NavigationToggle/t9n/NavigationToggle")], c21.prototype, "messages", void 0), r([m2()], c21.prototype, "view", null), r([m2({ type: r28 })], c21.prototype, "viewModel", void 0), c21 = r([a("esri.widgets.NavigationToggle")], c21);
var d20 = c21;

// node_modules/@arcgis/core/widgets/Zoom/ZoomConditions2D.js
var r29 = class extends b2 {
  get canZoomIn() {
    var _a, _b, _c;
    const o32 = (_a = this.view) == null ? void 0 : _a.ready;
    if (!o32) return false;
    const t29 = (_c = (_b = this.view) == null ? void 0 : _b.constraints) == null ? void 0 : _c.effectiveMaxScale;
    return 0 === t29 || this._scale > t29;
  }
  get canZoomOut() {
    var _a;
    const { view: o32 } = this, t29 = o32 == null ? void 0 : o32.ready;
    if (!t29) return false;
    const e25 = (_a = o32.constraints) == null ? void 0 : _a.effectiveMinScale;
    return 0 === e25 || this._scale < e25;
  }
  get _scale() {
    var _a, _b, _c;
    const o32 = (_b = (_a = this.view) == null ? void 0 : _a.animation) == null ? void 0 : _b.target;
    return (o32 && "then" in o32 ? void 0 : o32 == null ? void 0 : o32.scale) ?? ((_c = this.view) == null ? void 0 : _c.scale) ?? 0;
  }
};
r([m2({ readOnly: true })], r29.prototype, "canZoomIn", null), r([m2({ readOnly: true })], r29.prototype, "canZoomOut", null), r([m2()], r29.prototype, "view", void 0), r([m2()], r29.prototype, "_scale", null), r29 = r([a("esri.widgets.Zoom.ZoomConditions2D")], r29);
var c22 = r29;

// node_modules/@arcgis/core/widgets/Zoom/ZoomConditions3D.js
var s27 = class extends b2 {
  get canZoomIn() {
    return !!this.view.ready;
  }
  get canZoomOut() {
    return !!this.view.ready;
  }
};
r([m2({ readOnly: true })], s27.prototype, "canZoomIn", null), r([m2({ readOnly: true })], s27.prototype, "canZoomOut", null), r([m2()], s27.prototype, "view", void 0), s27 = r([a("esri.widgets.Zoom.ZoomConditions3D")], s27);
var c23 = s27;

// node_modules/@arcgis/core/widgets/Zoom/ZoomViewModel.js
var m23 = class extends b2 {
  constructor(o32) {
    super(o32);
  }
  destroy() {
    this.view = null;
  }
  get canZoomIn() {
    return null != this._zoomConditions && this._zoomConditions.canZoomIn;
  }
  get canZoomOut() {
    var _a;
    return null != this._zoomConditions && ((_a = this._zoomConditions) == null ? void 0 : _a.canZoomOut);
  }
  get state() {
    var _a;
    return ((_a = this.view) == null ? void 0 : _a.ready) ? "ready" : "disabled";
  }
  set view(o32) {
    o32 ? "2d" === o32.type ? this._zoomConditions = new c22({ view: o32 }) : "3d" === o32.type && (this._zoomConditions = new c23({ view: o32 })) : this._zoomConditions = null, this._set("view", o32);
  }
  zoomIn() {
    if (!this.canZoomIn) return;
    const o32 = this.view;
    "2d" === o32.type ? o32.mapViewNavigation.zoomIn() : d(o32.goTo({ zoomFactor: 2 }));
  }
  zoomOut() {
    if (!this.canZoomOut) return;
    const o32 = this.view;
    "2d" === o32.type ? o32.mapViewNavigation.zoomOut() : d(o32.goTo({ zoomFactor: 0.5 }));
  }
};
r([m2()], m23.prototype, "_zoomConditions", void 0), r([m2()], m23.prototype, "canZoomIn", null), r([m2()], m23.prototype, "canZoomOut", null), r([m2({ readOnly: true })], m23.prototype, "state", null), r([m2()], m23.prototype, "view", null), m23 = r([a("esri.widgets.Zoom.ZoomViewModel")], m23);
var p24 = m23;

// node_modules/@arcgis/core/widgets/Zoom.js
var m24 = { base: "esri-zoom", horizontalLayout: "esri-zoom--horizontal" };
var c24 = class extends B {
  constructor(o32, t29) {
    super(o32, t29), this.messages = null, this.viewModel = new p24(), this.zoomIn = () => this.viewModel.zoomIn(), this.zoomOut = () => this.viewModel.zoomOut();
  }
  loadDependencies() {
    return r5({ button: () => import("./calcite-button-CIWFCC6E.js") });
  }
  get icon() {
    return "magnifying-glass-plus";
  }
  set icon(o32) {
    this._overrideIfSome("icon", o32);
  }
  get label() {
    var _a;
    return ((_a = this.messages) == null ? void 0 : _a.widgetLabel) ?? "";
  }
  set label(o32) {
    this._overrideIfSome("label", o32);
  }
  set layout(o32) {
    "horizontal" !== o32 && (o32 = "vertical"), this._set("layout", o32);
  }
  set view(o32) {
    this.viewModel.view = o32;
  }
  get view() {
    return this.viewModel.view;
  }
  render() {
    const o32 = { [m24.horizontalLayout]: "horizontal" === this.layout }, { canZoomIn: t29, canZoomOut: e25 } = this.viewModel, { zoomIn: s28, zoomOut: i22 } = this.messages;
    return n6("div", { class: this.classes(m24.base, e8.widget, o32) }, n6("calcite-button", { class: e8.widgetButton, disabled: !t29, iconStart: "plus", kind: "neutral", label: s28, onclick: this.zoomIn, title: s28 }), n6("calcite-button", { class: e8.widgetButton, disabled: !e25, iconStart: "minus", kind: "neutral", label: i22, onclick: this.zoomOut, title: i22 }));
  }
};
r([m2()], c24.prototype, "icon", null), r([m2()], c24.prototype, "label", null), r([m2({ value: "vertical" })], c24.prototype, "layout", null), r([m2(), e3("esri/widgets/Zoom/t9n/Zoom")], c24.prototype, "messages", void 0), r([m2()], c24.prototype, "view", null), r([m2({ type: p24 })], c24.prototype, "viewModel", void 0), c24 = r([a("esri.widgets.Zoom")], c24);
var p25 = c24;

// node_modules/@arcgis/core/views/ui/DefaultUI.js
function m25(t29) {
  return void 0 !== (t29 == null ? void 0 : t29.view);
}
var h19 = class extends L5 {
  constructor(t29) {
    super(t29), this._defaultPositionLookup = { attribution: "manual", compass: "top-left", "navigation-toggle": "top-left", zoom: "top-left" }, this.components = [], this._updateViewAwareWidgets = (t30) => {
      this.components.forEach((o32) => {
        const e25 = this._find(o32), i22 = e25 == null ? void 0 : e25.widget;
        m25(i22) && (i22.view = t30);
      });
    }, this._componentsWatcher = (t30, o32) => {
      this._removeComponents(o32), this._addComponents(t30), this._adjustPadding(t30);
    };
  }
  initialize() {
    this.addHandles([d3(() => this.components, this._componentsWatcher, P), d3(() => this.view, this._updateViewAwareWidgets, P)]);
  }
  _add(t29, o32, e25, i22, s28) {
    let r30 = t29;
    if ("string" == typeof t29 && this._defaultPositionLookup[t29]) {
      if (this._find(t29)) return;
      r30 = this._createComponent(t29);
    }
    super._add(r30, o32, e25, i22, s28);
  }
  _removeComponents(t29) {
    t29.forEach((t30) => {
      const o32 = this._find(t30);
      o32 && (this.remove(o32), o32.destroy());
    });
  }
  _adjustPadding(t29) {
    if (!t29.includes("attribution") && !this._isOverridden("padding")) {
      const { top: t30 } = this.padding;
      this.padding = t30;
    }
  }
  _addComponents(t29) {
    this.constructed && t29.forEach((t30) => this.add(this._createComponent(t30), this._defaultPositionLookup[t30]));
  }
  _createComponent(t29) {
    const o32 = this._createWidget(t29);
    return new m22({ id: t29, node: o32 });
  }
  _createWidget(t29) {
    const o32 = this.view;
    switch (t29) {
      case "attribution":
        return new u15({ view: o32 });
      case "compass":
        return new d19({ view: o32 });
      case "navigation-toggle":
        return new d20({ view: o32 });
      case "zoom":
        return new p25({ view: o32 });
    }
  }
};
r([m2()], h19.prototype, "components", void 0), h19 = r([a("esri.views.ui.DefaultUI")], h19);
var u16 = h19;

// node_modules/@arcgis/core/views/ui/2d/DefaultUI2D.js
var e24 = class extends u16 {
  constructor(o32) {
    super(o32), this.components = ["attribution", "zoom"];
  }
};
r([m2()], e24.prototype, "components", void 0), e24 = r([a("esri.views.ui.2d.DefaultUI2D")], e24);
var c25 = e24;

// node_modules/@arcgis/core/views/View2D.js
var Q;
var X;
var Y2;
var ee;
var te;
var ie;
var re;
async function se() {
  const [, { GraphicsView2D: e25, GraphicContainer: t29, LabelManager: i22, MapViewNavigation: r30, MagnifierView2D: s28, GridView2D: a22, Stage: n33 }] = await Promise.all([import("./webglDeps-2453V42M.js"), import("./mapViewDeps-MMMJKFTO.js")]);
  X = e25, Y2 = t29, ee = i22, te = r30, ie = s28, re = a22, Q = n33;
}
var ae = class extends o13(w5(w4($))) {
  constructor(e25) {
    super(e25), this._magnifierView = null, this._gridView = null, this.stage = null, this._resolveWhenReady = [], this.rootLayerViews = new n12({ getCollections: () => {
      var _a, _b;
      return [(_a = this.basemapView) == null ? void 0 : _a.baseLayerViews, this.layerViews, (_b = this.basemapView) == null ? void 0 : _b.referenceLayerViews];
    }, getChildrenFunction: () => null }), this.featuresTilingScheme = null, this.fullOpacity = 1, this.goToManager = new h14({ view: this }), this.graphicsView = null, this.stateManager = new z3({ constraints: new f14({ view: this }) }), this.stationaryManager = new i21(), this.labelManager = null, this.mapViewNavigation = null, this.renderingOptions = { samplingMode: "dynamic", edgeLabelsVisible: true, labelsAnimationTime: 125, labelCollisionsEnabled: true }, this.supersampleScreenshotsEnabled = true, this.supportsGround = false, this.frameTask = new d12(this), this.floors = new V(), this.grid = null, this.highlights = g5(), this.inputManager = new k3({ view: this }), this.map = null, this.spatialReferenceLocked = false, this.timeline = new e11(), this.type = "2d", this.view2dType = null, this.ui = new c25(), this.test = { takeScreenshot: async (e26) => r27(this._getScreenshotView(e26), e26) }, this.padding = { top: 0, right: 0, bottom: 0, left: 0 }, this.addHandles([d3(() => this.viewpoint, () => this.stationaryManager.flip(), C), this.on("resize", (e26) => this.stateManager.resize(e26.width, e26.height))]), m6();
  }
  destroy() {
    this.layerViewManager.clear(), this._set("preconditionsReady", false), this.frameTask = u(this.frameTask), this.goToManager.destroy(), this.rootLayerViews.destroy(), this.inputManager.destroy(), this._set("inputManager", null);
  }
  get graphicsTileStore() {
    return new u13(this.featuresTilingScheme);
  }
  get constraintsInfo() {
    var _a, _b;
    const e25 = (_a = this.defaultsFromMap) == null ? void 0 : _a.tileInfo, t29 = this.spatialReference;
    return { lods: ((_b = e25 == null ? void 0 : e25.spatialReference) == null ? void 0 : _b.equals(t29)) ? e25.lods : null, spatialReference: t29 };
  }
  get state() {
    return this.stateManager.state;
  }
  get initialExtentRequired() {
    var _a;
    if (!this.stateManager) return false;
    const { scale: e25, constraints: t29, center: i22, viewpoint: r30, extent: s28 } = this;
    let a22 = this.zoom;
    return !(this.map && "initialViewProperties" in this.map && ((_a = this.map.initialViewProperties) == null ? void 0 : _a.viewpoint)) && (!s28 && ((t29 == null ? void 0 : t29.effectiveLODs) || (a22 = -1), (!i22 || 0 === e25 && -1 === a22) && (null == (r30 == null ? void 0 : r30.targetGeometry) || "extent" !== r30.targetGeometry.type && !r30.scale)));
  }
  get defaultsFromMapSettings() {
    return { required: { extent: false, heightModelInfo: false, tileInfo: true }, requiresExtentInSpatialReference: this.spatialReferenceLocked };
  }
  get scheduler() {
    return this.frameTask.scheduler;
  }
  get typeSpecificPreconditionsReady() {
    const e25 = this._getDefaultViewpoint();
    if (!e25) return false;
    const t29 = e25.targetGeometry, i22 = this.spatialReference;
    return B2(t29.spatialReference, i22);
  }
  set animation(e25) {
    const t29 = this._get("animation");
    if (e25 === t29) return;
    if (t29 && t29.stop(), e25 !== this.animationManager.animation && this.animationManager.stop(), !e25 || e25.isFulfilled()) return void this._set("animation", null);
    this._set("animation", e25);
    const i22 = () => {
      var _a;
      this.destroyed || e25 === this._get("animation") && (this._set("animation", null), (_a = this.frameTask) == null ? void 0 : _a.requestFrame());
    };
    e25.when(i22, i22);
  }
  get background() {
    return r11(this.map) ? this.map.initialViewProperties.background : null;
  }
  set background(e25) {
    this._override("background", e25);
  }
  get center() {
    var _a;
    return ((_a = this.stateManager) == null ? void 0 : _a.center) ?? null;
  }
  set center(e25) {
    this.stateManager.center = e25;
  }
  get constraints() {
    var _a;
    return (_a = this.stateManager) == null ? void 0 : _a.constraints;
  }
  set constraints(e25) {
    e25.view = this;
    const t29 = this.stateManager.constraints;
    this.stateManager.constraints = e25, t29 == null ? void 0 : t29.destroy();
  }
  get extent() {
    var _a;
    return ((_a = this.stateManager) == null ? void 0 : _a.extent) ?? null;
  }
  set extent(e25) {
    this.stateManager.extent = e25;
  }
  get highlightOptions() {
    return r15(this);
  }
  set highlightOptions(e25) {
    m10(this, e25);
  }
  get padding() {
    var _a;
    return (_a = this.stateManager) == null ? void 0 : _a.padding;
  }
  set padding(e25) {
    this.stateManager && (this.stateManager.padding = e25);
  }
  get rendering() {
    var _a;
    return ((_a = this.stage) == null ? void 0 : _a.renderRequested) ?? false;
  }
  get resizeAlign() {
    return this.stateManager.resizeAlign;
  }
  set resizeAlign(e25) {
    this.stateManager.resizeAlign = e25;
  }
  get resolution() {
    return this.stateManager.resolution ?? 0;
  }
  get rotation() {
    return this.stateManager.rotation ?? 0;
  }
  set rotation(e25) {
    const { rotationEnabled: t29 } = this.constraints;
    this.constraints.rotationEnabled = true, this.stateManager.rotation = e25, this.constraints.rotationEnabled = t29;
  }
  get scale() {
    var _a;
    return ((_a = this.stateManager) == null ? void 0 : _a.scale) ?? 0;
  }
  set scale(e25) {
    this.stateManager && (this.stateManager.scale = e25);
  }
  get stationary() {
    return !this.animation && !this.navigating && !this.resizing && this.stationaryManager.stationary;
  }
  get tileInfo() {
    var _a;
    return (_a = this.featuresTilingScheme) == null ? void 0 : _a.tileInfo;
  }
  get updating() {
    var _a, _b, _c, _d;
    const e25 = !(!this.magnifier.visible || null === this.magnifier.position || !((_a = this._magnifierView) == null ? void 0 : _a.updatingHandles.updating)), t29 = !this.destroyed && (!this.layerViewManager || !this.labelManager || !this.graphicsView || true === this.layerViewManager.updating || true === this.labelManager.updating || true === this.graphicsView.updating || this.allLayerViews.some((e26) => !e26.destroyed && !("layerViews" in e26) && true === e26.updating) || e25);
    if (has("esri-2d-log-updating")) {
      const i22 = this.allLayerViews.reduce((e26, t30) => ({ ...e26, [`${t30.layer.id}(${t30.layer.type})`]: !t30.destroyed && !("layerViews" in t30) && t30.updating }), {});
      console.log(`Updating MapView: ${t29}
-> Null LayerViewManager: ${!this.layerViewManager}
-> Null LabelManager: ${!this.labelManager}
-> Null GraphicsView: ${!this.graphicsView}
-> layerViewManager.updating: ${(_b = this.layerViewManager) == null ? void 0 : _b.updating}
-> labelManager.updating: ${(_c = this.labelManager) == null ? void 0 : _c.updating}
-> graphicsView.updating: ${(_d = this.graphicsView) == null ? void 0 : _d.updating}
-> allLayerViews: ${JSON.stringify(i22)}
-> updatingMagnifier: ${e25}
`);
    }
    return t29;
  }
  get viewpoint() {
    return this.stateManager.viewpoint ?? null;
  }
  set viewpoint(e25) {
    this.stateManager.viewpoint = e25, this.frameTask.requestFrame();
  }
  get visibleArea() {
    const e25 = this.stateManager.visibleArea;
    return e25 ? new v4({ rings: [e25.map((e26) => [e26[0], e26[1]])], spatialReference: this.spatialReference }) : e25;
  }
  get zoom() {
    return this.stateManager.zoom ?? -1;
  }
  set zoom(e25) {
    this.stateManager.zoom = e25;
  }
  get navigating() {
    var _a;
    return ((_a = this.mapViewNavigation) == null ? void 0 : _a.interacting) ?? false;
  }
  goTo(e25, t29) {
    return this.goToManager.goTo(e25, t29);
  }
  async hitTest(e25, t29) {
    return s25(this, e25, t29);
  }
  async takeScreenshot(e25) {
    return o29(this._getScreenshotView(e25), e25);
  }
  toMap(e25) {
    if (!this.ready) return null;
    const t29 = o12(e25) ? r12(this, e25) : e25;
    return this.stateManager.toMap(t29);
  }
  toScreen(e25, t29) {
    return this.stateManager.toScreen(e25, t29);
  }
  on(e25, t29, i22, r30) {
    const s28 = this.inputManager && this.viewEvents.on(e25, t29, i22, r30);
    return s28 || super.on(e25, t29);
  }
  hasEventListener(e25) {
    return super.hasEventListener(e25) || this.viewEvents.hasHandler(e25);
  }
  whenLayerView(e25) {
    return super.whenLayerView(e25);
  }
  graphicChanged(e25) {
    if (this.graphicsView) {
      this.graphicsView.graphicUpdateHandler(e25);
    }
  }
  whenReady() {
    return new Promise((e25) => {
      this.ready ? e25(this) : this._resolveWhenReady.push(e25);
    });
  }
  forceDOMReadyCycle() {
    this.forceReadyCycle();
  }
  getDefaultSpatialReference() {
    var _a;
    return this.map && "initialViewProperties" in this.map && this.map.initialViewProperties.spatialReference || ((_a = this.defaultsFromMap) == null ? void 0 : _a.spatialReference) || null;
  }
  getDefaultTimeZone() {
    return r11(this.map) ? this.map.initialViewProperties.timeZone : null;
  }
  getDefaultTimeExtent() {
    return r11(this.map) ? this.map.initialViewProperties.timeExtent : null;
  }
  hasLayerViewModule(e25) {
    return l14.hasLayerViewModule(e25);
  }
  importLayerView(e25) {
    return l14.importLayerView(e25);
  }
  pixelSizeAt() {
    return this.ready ? this.resolution : (n.getLogger(this).error("#pixelSizeAt()", "Map view cannot be used before it is ready"), null);
  }
  async popupHitTest(e25) {
    var _a;
    const t29 = this.toMap(e25), i22 = await this.hitTest(e25), r30 = this.allLayerViews.toArray().filter((i23) => i23.clips.every((i24) => m9(this, i24, e25, t29))).reverse(), s28 = new globalThis.Map(r30.map((e26) => [e26.layer.uid, e26])), a22 = [];
    let n33 = 0, o32 = 0;
    for (; n33 < i22.results.length || o32 < r30.length; ) {
      const e26 = i22.results.at(n33);
      if (e26 && "graphic" !== e26.type) {
        ++n33;
        continue;
      }
      const l21 = s28.get((_a = (e26 == null ? void 0 : e26.layer) ?? (e26 == null ? void 0 : e26.graphic.layer)) == null ? void 0 : _a.uid);
      if ((!e26 || l21) && o32 < r30.length && r30.at(o32) !== l21) {
        const e27 = r30.at(o32);
        "fetchPopupFeaturesAtLocation" in e27 && a22.push({ mapPoint: t29, layerView: e27 }), ++o32;
      } else e26 && (a22.push({ graphic: e26.graphic, layerView: l21 }), ++n33);
    }
    return { hits: a22, location: t29 };
  }
  requestUpdate() {
    this.ready && this.frameTask.requestUpdate();
  }
  async validate() {
    let e25 = t26(this.type);
    if (has("safari") && has("safari") < 9 && (e25 = new s("mapview:browser-not-supported", "This browser is not supported by MapView (Safari < 9)", { type: "safari", requiredVersion: 9, detectedVersion: has("safari") })), null != e25) throw n.getLogger(this).warn("#validate()", e25.message), e25;
  }
  loadAsyncDependencies() {
    return se();
  }
  _getDefaultViewpoint() {
    var _a;
    const { constraints: e25, initialExtent: i22, map: r30, padding: s28, size: a22 } = this;
    if (!e25) return null;
    const n33 = r30 && "initialViewProperties" in r30 ? r30.initialViewProperties : void 0, o32 = this.stateManager.getUserStartupOptions(this.size), l21 = n33 == null ? void 0 : n33.viewpoint, p27 = ((_a = l21 == null ? void 0 : l21.targetGeometry) == null ? void 0 : _a.extent) ?? i22, h20 = p27 == null ? void 0 : p27.center, g13 = (l21 == null ? void 0 : l21.rotation) ?? 0, d21 = (l21 == null ? void 0 : l21.scale) || p27 && H(p27, [a22[0] - s28.left - s28.right, a22[1] - s28.top - s28.bottom]), u17 = o32.center ?? h20, c26 = o32.rotation ?? g13, m26 = o32.scale ?? d21;
    return u17 && m26 ? new m7({ targetGeometry: u17, scale: m26, rotation: c26 }) : null;
  }
  _startup() {
    var _a;
    this.timeline.begin("MapView Startup");
    const e25 = this._getDefaultViewpoint();
    this.stateManager.startup(e25, this.size, this.spatialReference, (_a = this.defaultsFromMap.extent) == null ? void 0 : _a.center), this.graphics.owner = this;
    const t29 = new Q(this.surface, { canvas: this.renderCanvas, contextOptions: { disabledExtensions: this.deactivatedWebGLExtensions, debugWebGLExtensions: this.debugWebGLExtensions }, renderingOptions: this.renderingOptions, timeline: this.timeline });
    this.stage = t29, this._magnifierView = new ie(), this._magnifierView.magnifier = this.magnifier, this._gridView = new re();
    const i22 = new ee({ view: this });
    this._set("labelManager", i22);
    const r30 = new S4({ view: this });
    this._set("animationManager", r30);
    const s28 = new te({ view: this, animationManager: r30 });
    this._set("mapViewNavigation", s28), this._setupSpatialReferenceDependentProperties(), this.addHandles([this.rootLayerViews.on("change", () => this._updateStageChildren()), t29.on("webgl-error", (e26) => this.fatalError = e26.error), d3(() => this.stationary, (e26) => t29.stationary = e26, A3), d3(() => this.background, (e26) => {
      t29.backgroundColor = e26 == null ? void 0 : e26.color, this._magnifierView.backgroundColor = e26 == null ? void 0 : e26.color;
    }, A3), d3(() => this.magnifier, (e26) => this._magnifierView.magnifier = e26, A3), d3(() => this.grid, (e26) => this._gridView.grid = e26, A3), d3(() => this.renderingOptions, (e26) => t29.renderingOptions = e26, A3), d3(() => this.highlights.items.map((e26) => ({ name: e26.name, options: { fillColor: e26.options.color, haloColor: e26.options.haloColor, fillOpacity: e26.options.fillOpacity, haloOpacity: e26.options.haloOpacity, haloWidth: e26.options.haloWidth, haloBlur: e26.options.haloBlur } })), () => {
      t29.highlightGradient = a3(t29.highlightGradient, this.highlights.items);
    }, A3), d3(() => this.state.id, () => t29.state = this.state, A3)], "map-view"), this._updateStageChildren();
    const a22 = this._resolveWhenReady;
    this._resolveWhenReady = [], a22.forEach((e26) => e26(this)), this.timeline.end("MapView Startup"), this.frameTask.start(), this._set("ready", true);
  }
  _teardown() {
    this._destroySpatialReferenceDependentProperties(), this.removeHandles("map-view"), this.mapViewNavigation.destroy(), this._set("mapViewNavigation", null), this.animation = null, this.animationManager.destroy(), this._set("animationManager", null), this.layerViewManager.clear(), this.labelManager.destroy(), this._magnifierView.destroy(), this._gridView.destroy(), this.stage.destroy(), this.stage = null, this._set("graphicsView", null), this._magnifierView = null, this._gridView = null, this._set("labelManager", null), this._set("mapViewNavigation", null), this.graphics.owner = null, this.frameTask.stop(), this.stationaryManager.clear(), this._set("ready", false), this.stateManager.teardown();
  }
  _updateStageChildren() {
    this.stage.removeAllChildren(), this.rootLayerViews.forEach((e26) => {
      this.stage.addChild(e26.container);
    });
    const e25 = this.graphicsView;
    this.stage.addChild(e25.container), this.stage.addChild(this._magnifierView), this.stage.addChild(this._gridView);
  }
  _setupSpatialReferenceDependentProperties() {
    const e25 = new h7(z.create({ spatialReference: this.spatialReference, size: 512, numLODs: 36 }));
    this._set("featuresTilingScheme", e25);
    const t29 = new X({ view: this, graphics: this.graphics, requestUpdateCallback: () => this.requestUpdate(), container: new Y2(e25) });
    this._set("graphicsView", t29);
  }
  _destroySpatialReferenceDependentProperties() {
    const e25 = this.graphicsView;
    this._set("graphicsView", null), e25.destroy(), this._set("featuresTilingScheme", null);
  }
  _getScreenshotView(e25) {
    var _a;
    const { allLayerViews: t29, padding: i22, size: r30, stage: s28 } = this;
    return { allLayerViews: t29, backgroundColor: (e25 == null ? void 0 : e25.ignoreBackground) ? null : (_a = this.background) == null ? void 0 : _a.color, padding: i22, size: r30, stage: s28 };
  }
  _spatialReferenceChanged(e25) {
    if (this.ready) {
      this.frameTask.stop();
      for (const e26 of this.allLayerViews) e26.processDetach();
      this._destroySpatialReferenceDependentProperties(), this.stateManager.changeSpatialReference(e25), this.stage.state = this.state, this._setupSpatialReferenceDependentProperties();
      for (const e26 of this.allLayerViews) e26.processAttach();
      this.frameTask.requestFrame(), this.frameTask.start(), this._updateStageChildren();
    }
  }
};
ae.type = "2d", r([m2({ readOnly: true })], ae.prototype, "animationManager", void 0), r([m2({ constructOnly: true })], ae.prototype, "deactivatedWebGLExtensions", void 0), r([m2({ constructOnly: true })], ae.prototype, "debugWebGLExtensions", void 0), r([m2({ readOnly: true })], ae.prototype, "featuresTilingScheme", void 0), r([m2({ readOnly: true })], ae.prototype, "fullOpacity", void 0), r([m2()], ae.prototype, "goToManager", void 0), r([m2({ readOnly: true })], ae.prototype, "graphicsTileStore", null), r([m2()], ae.prototype, "graphicsView", void 0), r([m2()], ae.prototype, "stateManager", void 0), r([m2()], ae.prototype, "constraintsInfo", null), r([m2({ readOnly: true })], ae.prototype, "state", null), r([m2()], ae.prototype, "initialExtentRequired", null), r([m2()], ae.prototype, "labelManager", void 0), r([m2({ readOnly: true })], ae.prototype, "mapViewNavigation", void 0), r([m2({ constructOnly: true })], ae.prototype, "renderCanvas", void 0), r([m2()], ae.prototype, "renderingOptions", void 0), r([m2({ constructOnly: true })], ae.prototype, "supersampleScreenshotsEnabled", void 0), r([m2({ readOnly: true })], ae.prototype, "supportsGround", void 0), r([m2()], ae.prototype, "defaultsFromMapSettings", null), r([m2({ readOnly: true })], ae.prototype, "typeSpecificPreconditionsReady", null), r([m2()], ae.prototype, "animation", null), r([m2({ type: m8 })], ae.prototype, "background", null), r([m2()], ae.prototype, "center", null), r([m2({ type: f14 })], ae.prototype, "constraints", null), r([m2()], ae.prototype, "extent", null), r([m2()], ae.prototype, "floors", void 0), r([m2()], ae.prototype, "grid", void 0), r([m2({ type: l6 })], ae.prototype, "highlightOptions", null), r([m2({ type: V.ofType(i8) })], ae.prototype, "highlights", void 0), r([m2({ readOnly: true })], ae.prototype, "inputManager", void 0), r([m2()], ae.prototype, "map", void 0), r([m2()], ae.prototype, "padding", null), r([m2({ readOnly: true })], ae.prototype, "rendering", null), r([m2()], ae.prototype, "resizeAlign", null), r([m2({ readOnly: true })], ae.prototype, "resolution", null), r([m2()], ae.prototype, "rotation", null), r([m2()], ae.prototype, "scale", null), r([m2({ constructOnly: true })], ae.prototype, "spatialReferenceLocked", void 0), r([m2()], ae.prototype, "stationary", null), r([m2({ readOnly: true })], ae.prototype, "tileInfo", null), r([m2({ type: e11, readOnly: true })], ae.prototype, "timeline", void 0), r([m2({ readOnly: true })], ae.prototype, "type", void 0), r([m2({ readOnly: true })], ae.prototype, "updating", null), r([m2({ readOnly: true })], ae.prototype, "view2dType", void 0), r([m2()], ae.prototype, "viewpoint", null), r([m2({ readOnly: true })], ae.prototype, "visibleArea", null), r([m2()], ae.prototype, "zoom", null), r([m2({ readOnly: true })], ae.prototype, "navigating", null), r([m2(), s4((e25) => e25 instanceof u16 ? e25 : h3(c25, e25))], ae.prototype, "ui", void 0), ae = r([a("esri.views.View2D")], ae);
var ne = ae;

// node_modules/@arcgis/core/views/MapView.js
var t28 = class extends ne {
  constructor(o32) {
    super(o32), this.view2dType = "map";
  }
};
r([m2({ readOnly: true })], t28.prototype, "view2dType", void 0), t28 = r([a("esri.views.MapView")], t28);
var p26 = t28;
export {
  p26 as default
};
//# sourceMappingURL=@arcgis_core_views_MapView.js.map
