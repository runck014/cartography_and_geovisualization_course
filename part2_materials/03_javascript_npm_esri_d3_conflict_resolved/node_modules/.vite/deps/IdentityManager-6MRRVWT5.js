import {
  B,
  e,
  r as r3
} from "./chunk-M7BSX2JD.js";
import {
  n2
} from "./chunk-N7UV77NP.js";
import {
  c as c2
} from "./chunk-J7T52XOR.js";
import {
  w
} from "./chunk-KZYGXJYH.js";
import "./chunk-VEUN2EF3.js";
import "./chunk-W6D3ECTZ.js";
import {
  s as s3
} from "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-RCLWOQNR.js";
import {
  o as o2
} from "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-2M53HYNY.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import {
  U,
  i,
  n
} from "./chunk-CRH37WFF.js";
import {
  A,
  Et,
  F,
  I,
  K,
  T,
  _,
  a as a2,
  et,
  r as r2,
  v,
  x
} from "./chunk-YFGQMO6E.js";
import {
  f
} from "./chunk-HAF6QJ32.js";
import {
  m as m2
} from "./chunk-H77COA2S.js";
import {
  a4 as a
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  L,
  c2 as c,
  m,
  o2 as o
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import {
  l,
  s,
  s2,
  t
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-R4AWRGAT.js";
import "./chunk-5674S6ZB.js";
import "./chunk-V2NNZQEU.js";
import "./chunk-V6OQZUXX.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/identity/IdentityModal.js
var p = "esri-identity-modal";
var u = { base: p, info: `${p}__info`, notice: `${p}__notice` };
var d = "ArcGIS Online";
var m3 = class extends B {
  constructor(t3, e3) {
    super(t3, e3), this.container = document.createElement("div"), this.error = null, this.oAuthPrompt = false, this.open = false, this.signingIn = false, this.server = null, this.resource = null, this._usernameInputNode = null, this._passwordInputNode = null, document.body.appendChild(this.container);
  }
  loadDependencies() {
    return r3({ button: () => import("./calcite-button-CIWFCC6E.js"), dialog: () => import("./calcite-dialog-64DA2ZKV.js"), input: () => import("./calcite-input-ATVHSFHY.js"), label: () => import("./calcite-label-4GBQPF3Q.js"), notice: () => import("./calcite-notice-QIIO24YX.js") });
  }
  get title() {
    var _a;
    return (_a = this.commonMessages) == null ? void 0 : _a.auth.signIn;
  }
  render() {
    var _a;
    const { open: t3, title: e3, messages: s7, signingIn: o3, oAuthPrompt: i4, server: n3, resource: r5, error: p3 } = this, { info: m4, oAuthInfo: h2, lblItem: g, invalidUser: b2, noAuthService: f2, lblUser: v2, lblPwd: _2, lblCancel: y, lblSigning: I2, lblOk: j2 } = s7;
    return n2("div", { class: this.classes(u.base, c2()) }, n2("form", { bind: this, onsubmit: this._submit }, n2("calcite-dialog", { bind: this, heading: e3, modal: true, open: t3, outsideCloseDisabled: true, scale: "s", widthScale: "s", onCalciteDialogClose: this._cancel, onCalciteDialogOpen: this._focusUsernameInput }, n2("div", { class: u.info }, s3(i4 ? h2 : m4, { server: n3 && /\.arcgis\.com/i.test(n3) ? d : n3, resource: `(${r5 || g})` })), p3 ? n2("calcite-notice", { class: u.notice, icon: "exclamation-mark-triangle", kind: "danger", open: true }, n2("div", { slot: "message" }, ((_a = p3.details) == null ? void 0 : _a.httpStatus) ? b2 : f2)) : null, i4 ? null : [n2("calcite-label", null, v2, n2("calcite-input", { afterCreate: (t4) => this._usernameInputNode = t4, autocomplete: "off", bind: this, name: "username", required: true, spellcheck: false, type: "text", value: "" })), n2("calcite-label", null, _2, n2("calcite-input", { afterCreate: (t4) => this._passwordInputNode = t4, bind: this, name: "password", required: true, type: "password", value: "" }))], n2("calcite-button", { appearance: "outline", bind: this, onclick: this._cancel, slot: "footer-end", type: "button" }, y), n2("calcite-button", { loading: !!o3, slot: "footer-end", type: "submit" }, o3 ? I2 : j2))));
  }
  _focusUsernameInput() {
    return w(() => this._usernameInputNode);
  }
  _cancel() {
    this._set("signingIn", false), this.open = false, this._usernameInputNode && (this._usernameInputNode.value = ""), this._passwordInputNode && (this._passwordInputNode.value = ""), this.emit("cancel");
  }
  _submit(t3) {
    var _a, _b;
    t3.preventDefault(), this._set("signingIn", true);
    const e3 = this.oAuthPrompt ? {} : { username: (_a = this._usernameInputNode) == null ? void 0 : _a.value, password: (_b = this._passwordInputNode) == null ? void 0 : _b.value };
    this.emit("submit", e3);
  }
};
r([m2({ readOnly: true })], m3.prototype, "container", void 0), r([m2(), e("esri/t9n/common")], m3.prototype, "commonMessages", void 0), r([m2()], m3.prototype, "error", void 0), r([m2(), e("esri/identity/t9n/identity")], m3.prototype, "messages", void 0), r([m2()], m3.prototype, "oAuthPrompt", void 0), r([m2()], m3.prototype, "open", void 0), r([m2()], m3.prototype, "signingIn", void 0), r([m2()], m3.prototype, "server", void 0), r([m2({ readOnly: true })], m3.prototype, "title", null), r([m2()], m3.prototype, "resource", void 0), m3 = r([a("esri.identity.IdentityModal")], m3);
var h = m3;

// node_modules/@arcgis/core/identity/OAuthCredential.js
var t2 = "esriJSAPIOAuth";
var e2 = class {
  constructor(t3, e3) {
    this.oAuthInfo = null, this.storage = null, this.appId = null, this.codeVerifier = null, this.expires = null, this.refreshToken = null, this.ssl = null, this.stateUID = null, this.token = null, this.userId = null, this.oAuthInfo = t3, this.storage = e3, this._init();
  }
  isValid() {
    let t3 = false;
    if (this.oAuthInfo && this.userId && (this.refreshToken || this.token)) {
      if (null == this.expires && this.refreshToken) t3 = true;
      else if (this.expires) {
        const e3 = Date.now();
        if (this.expires > e3) {
          (this.expires - e3) / 1e3 > 60 * this.oAuthInfo.minTimeUntilExpiration && (t3 = true);
        }
      }
    }
    return t3;
  }
  save() {
    if (!this.storage) return false;
    const e3 = this._load(), s7 = this.oAuthInfo;
    if ((s7 == null ? void 0 : s7.authNamespace) && s7.portalUrl) {
      let r5 = e3[s7.authNamespace];
      r5 || (r5 = e3[s7.authNamespace] = {}), this.appId || (this.appId = s7.appId), r5[s7.portalUrl] = { appId: this.appId, codeVerifier: this.codeVerifier, expires: this.expires, refreshToken: this.refreshToken, ssl: this.ssl, stateUID: this.stateUID, token: this.token, userId: this.userId };
      try {
        this.storage.setItem(t2, JSON.stringify(e3));
      } catch (i4) {
        return console.warn(i4), false;
      }
      return true;
    }
    return false;
  }
  destroy() {
    const e3 = this._load(), s7 = this.oAuthInfo;
    if ((s7 == null ? void 0 : s7.appId) && (s7 == null ? void 0 : s7.portalUrl) && (null == this.expires || this.expires > Date.now()) && (this.refreshToken || this.token)) {
      const t3 = s7.portalUrl.replace(/^http:/i, "https:") + "/sharing/rest/oauth2/revokeToken", e4 = new FormData();
      if (e4.append("f", "json"), e4.append("auth_token", this.refreshToken || this.token), e4.append("client_id", s7.appId), e4.append("token_type_hint", this.refreshToken ? "refresh_token" : "access_token"), "function" == typeof navigator.sendBeacon) navigator.sendBeacon(t3, e4);
      else {
        const s8 = new XMLHttpRequest();
        s8.open("POST", t3), s8.send(e4);
      }
    }
    if ((s7 == null ? void 0 : s7.authNamespace) && s7.portalUrl && this.storage) {
      const r5 = e3[s7.authNamespace];
      if (r5) {
        delete r5[s7.portalUrl];
        try {
          this.storage.setItem(t2, JSON.stringify(e3));
        } catch (i4) {
          console.log(i4);
        }
      }
    }
    s7 && (s7._oAuthCred = null, this.oAuthInfo = null);
  }
  _init() {
    const t3 = this._load(), e3 = this.oAuthInfo;
    if ((e3 == null ? void 0 : e3.authNamespace) && e3.portalUrl) {
      let s7 = t3[e3.authNamespace];
      s7 && (s7 = s7[e3.portalUrl], s7 && (this.appId = s7.appId, this.codeVerifier = s7.codeVerifier, this.expires = s7.expires, this.refreshToken = s7.refreshToken, this.ssl = s7.ssl, this.stateUID = s7.stateUID, this.token = s7.token, this.userId = s7.userId));
    }
  }
  _load() {
    let e3 = {};
    if (this.storage) {
      const i4 = this.storage.getItem(t2);
      if (i4) try {
        e3 = JSON.parse(i4);
      } catch (s7) {
        console.warn(s7);
      }
    }
    return e3;
  }
};
e2.prototype.declaredClass = "esri.identity.OAuthCredential";

// node_modules/@arcgis/core/identity/OAuthInfo.js
var p2;
var s4 = p2 = class extends f {
  constructor(o3) {
    super(o3), this._oAuthCred = null, this.appId = null, this.authNamespace = "/", this.expiration = 20160, this.flowType = "auto", this.forceLogin = false, this.forceUserId = false, this.locale = null, this.minTimeUntilExpiration = 30, this.popup = false, this.popupCallbackUrl = "oauth-callback.html", this.popupWindowFeatures = "height=490,width=800,resizable,scrollbars,status", this.portalUrl = "https://www.arcgis.com", this.preserveUrlHash = false, this.userId = null;
  }
  clone() {
    return p2.fromJSON(this.toJSON());
  }
};
r([m2({ json: { write: true } })], s4.prototype, "appId", void 0), r([m2({ json: { write: true } })], s4.prototype, "authNamespace", void 0), r([m2({ json: { write: true } })], s4.prototype, "expiration", void 0), r([m2({ json: { write: true } })], s4.prototype, "flowType", void 0), r([m2({ json: { write: true } })], s4.prototype, "forceLogin", void 0), r([m2({ json: { write: true } })], s4.prototype, "forceUserId", void 0), r([m2({ json: { write: true } })], s4.prototype, "locale", void 0), r([m2({ json: { write: true } })], s4.prototype, "minTimeUntilExpiration", void 0), r([m2({ json: { write: true } })], s4.prototype, "popup", void 0), r([m2({ json: { write: true } })], s4.prototype, "popupCallbackUrl", void 0), r([m2({ json: { write: true } })], s4.prototype, "popupWindowFeatures", void 0), r([m2({ json: { write: true } })], s4.prototype, "portalUrl", void 0), r([m2({ json: { write: true } })], s4.prototype, "preserveUrlHash", void 0), r([m2({ json: { write: true } })], s4.prototype, "userId", void 0), s4 = p2 = r([a("esri.identity.OAuthInfo")], s4);
var i2 = s4;

// node_modules/@arcgis/core/identity/ServerInfo.js
var i3 = class extends f {
  constructor(o3) {
    super(o3), this.adminTokenServiceUrl = null, this.currentVersion = null, this.hasPortal = null, this.hasServer = null, this.owningSystemUrl = null, this.owningTenant = null, this.server = null, this.shortLivedTokenValidity = null, this.tokenServiceUrl = null, this.webTierAuth = null;
  }
};
r([m2({ json: { write: true } })], i3.prototype, "adminTokenServiceUrl", void 0), r([m2({ json: { write: true } })], i3.prototype, "currentVersion", void 0), r([m2({ json: { write: true } })], i3.prototype, "hasPortal", void 0), r([m2({ json: { write: true } })], i3.prototype, "hasServer", void 0), r([m2({ json: { write: true } })], i3.prototype, "owningSystemUrl", void 0), r([m2({ json: { write: true } })], i3.prototype, "owningTenant", void 0), r([m2({ json: { write: true } })], i3.prototype, "server", void 0), r([m2({ json: { write: true } })], i3.prototype, "shortLivedTokenValidity", void 0), r([m2({ json: { write: true } })], i3.prototype, "tokenServiceUrl", void 0), r([m2({ json: { write: true } })], i3.prototype, "webTierAuth", void 0), i3 = r([a("esri.identity.ServerInfo")], i3);
var s5 = i3;

// node_modules/@arcgis/core/identity/IdentityManagerBase.js
var R = {};
var C = (e3) => {
  const t3 = new x(e3.owningSystemUrl).host, r5 = new x(e3.server).host, s7 = /.+\.arcgis\.com$/i;
  return s7.test(t3) && s7.test(r5);
};
var D = (e3, t3) => !!(C(e3) && t3 && t3.some((t4) => t4.test(e3.server)));
var b = null;
var q = null;
try {
  b = window.localStorage, q = window.sessionStorage;
} catch {
}
var j = class extends o2 {
  constructor() {
    super(), this._portalConfig = globalThis.esriGeowConfig, this.serverInfos = [], this.oAuthInfos = [], this.credentials = [], this._soReqs = [], this._xoReqs = [], this._portals = [], this._defaultOAuthInfo = null, this._defaultTokenValidity = 60, this.dialog = null, this.tokenValidity = null, this.normalizeWebTierAuth = false, this._appOrigin = "null" !== window.origin ? window.origin : window.location.origin, this._appUrlObj = I(window.location.href), this._busy = null, this._rejectOnPersistedPageShow = false, this._oAuthLocationParams = null, this._gwTokenUrl = "/sharing/rest/generateToken", this._agsRest = "/rest/services", this._agsPortal = /\/sharing(\/|$)/i, this._agsAdmin = /(https?:\/\/[^/]+\/[^/]+)\/admin\/?(\/.*)?$/i, this._adminSvcs = /\/rest\/admin\/services(\/|$)/i, this._gwDomains = [{ regex: /^https?:\/\/www\.arcgis\.com/i, customBaseUrl: "maps.arcgis.com", tokenServiceUrl: "https://www.arcgis.com/sharing/rest/generateToken" }, { regex: /^https?:\/\/(?:dev|[a-z\d-]+\.mapsdev)\.arcgis\.com/i, customBaseUrl: "mapsdev.arcgis.com", tokenServiceUrl: "https://dev.arcgis.com/sharing/rest/generateToken" }, { regex: /^https?:\/\/(?:devext|[a-z\d-]+\.mapsdevext)\.arcgis\.com/i, customBaseUrl: "mapsdevext.arcgis.com", tokenServiceUrl: "https://devext.arcgis.com/sharing/rest/generateToken" }, { regex: /^https?:\/\/(?:qaext|[a-z\d-]+\.mapsqa)\.arcgis\.com/i, customBaseUrl: "mapsqa.arcgis.com", tokenServiceUrl: "https://qaext.arcgis.com/sharing/rest/generateToken" }, { regex: /^https?:\/\/[a-z\d-]+\.maps\.arcgis\.com/i, customBaseUrl: "maps.arcgis.com", tokenServiceUrl: "https://www.arcgis.com/sharing/rest/generateToken" }], this._legacyFed = [], this._regexSDirUrl = /http.+\/rest\/services\/?/gi, this._regexServerType = /(\/(FeatureServer|GPServer|GeoDataServer|GeocodeServer|GeoenrichmentServer|GeometryServer|GlobeServer|ImageServer|KnowledgeGraphServer|MapServer|MissionServer|MobileServer|NAServer|NetworkDiagramServer|OGCFeatureServer|ParcelFabricServer|RelationalCatalogServer|SceneServer|StreamServer|UtilityNetworkServer|ValidationServer|VectorTileServer|VersionManagementServer|VideoServer)).*/gi, this._gwUser = /http.+\/users\/([^/]+).*/i, this._gwItem = /http.+\/items\/([^/]+).*/i, this._gwGroup = /http.+\/groups\/([^/]+).*/i, this._rePortalTokenSvc = /\/sharing(\/rest)?\/generatetoken/i, this._createDefaultOAuthInfo = true, this._hasTestedIfAppIsOnPortal = false, this._getPlatformSelfError = null, this._getOAuthLocationParams(), window.addEventListener("pageshow", (e3) => {
      this._pageShowHandler(e3);
    });
  }
  registerServers(e3) {
    const t3 = this.serverInfos;
    t3 ? (e3 = e3.filter((e4) => !this.findServerInfo(e4.server)), this.serverInfos = t3.concat(e3)) : this.serverInfos = e3, e3.forEach((e4) => {
      e4.owningSystemUrl && this._portals.push(e4.owningSystemUrl), e4.hasPortal && this._portals.push(e4.server);
    });
  }
  registerOAuthInfos(e3) {
    const t3 = this.oAuthInfos;
    if (t3) {
      for (const r5 of e3) {
        const e4 = this.findOAuthInfo(r5.portalUrl);
        e4 && t3.splice(t3.indexOf(e4), 1);
      }
      this.oAuthInfos = t3.concat(e3);
    } else this.oAuthInfos = e3;
  }
  registerToken(e3) {
    e3 = { ...e3 };
    const t3 = this._sanitizeUrl(e3.server), r5 = this._isServerRsrc(t3);
    let s7, i4 = this.findServerInfo(t3), o3 = true;
    i4 || (i4 = new s5(), i4.server = this._getServerInstanceRoot(t3), r5 ? i4.hasServer = true : (i4.tokenServiceUrl = this._getTokenSvcUrl(t3), i4.hasPortal = true), this.registerServers([i4])), s7 = this._findCredential(t3), s7 ? (delete e3.server, Object.assign(s7, e3), o3 = false) : (s7 = new E({ userId: e3.userId, server: i4.server ?? void 0, token: e3.token, expires: e3.expires, ssl: e3.ssl, scope: r5 ? "server" : "portal" }), s7.resources = [t3], this.credentials.push(s7)), s7.emitTokenChange(false), o3 || s7.refreshServerTokens();
  }
  toJSON() {
    return l({ serverInfos: this.serverInfos.map((e3) => e3.toJSON()), oAuthInfos: this.oAuthInfos.map((e3) => e3.toJSON()), credentials: this.credentials.map((e3) => e3.toJSON()) });
  }
  initialize(e3) {
    if (!e3) return;
    "string" == typeof e3 && (e3 = JSON.parse(e3));
    const t3 = e3.serverInfos, r5 = e3.oAuthInfos, s7 = e3.credentials;
    if (t3) {
      const e4 = [];
      t3.forEach((t4) => {
        t4.server && t4.tokenServiceUrl && e4.push(t4.declaredClass ? t4 : new s5(t4));
      }), e4.length && this.registerServers(e4);
    }
    if (r5) {
      const e4 = [];
      r5.forEach((t4) => {
        t4.appId && e4.push(t4.declaredClass ? t4 : new i2(t4));
      }), e4.length && this.registerOAuthInfos(e4);
    }
    s7 && s7.forEach((e4) => {
      e4.server && e4.token && e4.expires && e4.expires > Date.now() && ((e4 = e4.declaredClass ? e4 : new E(e4)).emitTokenChange(), this.credentials.push(e4));
    });
  }
  findServerInfo(e3) {
    let t3;
    e3 = this._sanitizeUrl(e3);
    for (const r5 of this.serverInfos) if (this._hasSameServerInstance(r5.server, e3)) {
      t3 = r5;
      break;
    }
    return t3;
  }
  findOAuthInfo(e3) {
    let t3;
    e3 = this._sanitizeUrl(e3);
    for (const r5 of this.oAuthInfos) if (this._hasSameServerInstance(r5.portalUrl, e3)) {
      t3 = r5;
      break;
    }
    return t3;
  }
  findCredential(e3, t3) {
    if (!e3) return;
    let r5;
    e3 = this._sanitizeUrl(e3);
    const s7 = this._isServerRsrc(e3) ? "server" : "portal";
    if (t3) {
      for (const i4 of this.credentials) if (this._hasSameServerInstance(i4.server, e3) && t3 === i4.userId && i4.scope === s7) {
        r5 = i4;
        break;
      }
    } else for (const i4 of this.credentials) if (this._hasSameServerInstance(i4.server, e3) && -1 !== this._getIdenticalSvcIdx(e3, i4) && i4.scope === s7) {
      r5 = i4;
      break;
    }
    return r5;
  }
  getCredential(e3, t3) {
    let r5, s7, o3 = true;
    t3 && (r5 = !!t3.token, s7 = t3.error, o3 = false !== t3.prompt), t3 = { ...t3 }, e3 = this._sanitizeUrl(e3);
    const n3 = new AbortController(), a3 = L();
    if (t3.signal && m(t3.signal, () => {
      n3.abort();
    }), m(n3, () => {
      a3.reject(new s2("identity-manager:user-aborted", "ABORTED"));
    }), c(n3)) return a3.promise;
    t3.signal = n3.signal;
    const h2 = this._isAdminResource(e3), u2 = r5 ? this.findCredential(e3) : null;
    let _2;
    if (u2 && s7 && s7.details && 498 === s7.details.httpStatus) u2.destroy();
    else if (u2) return _2 = new s2("identity-manager:not-authorized", "You are currently signed in as: '" + u2.userId + "'. You do not have access to this resource: " + e3, { error: s7 }), a3.reject(_2), a3.promise;
    const f2 = this._findCredential(e3, t3);
    if (f2) return a3.resolve(f2), a3.promise;
    let g = this.findServerInfo(e3);
    if (g) !g.hasPortal && g.server && g.owningSystemUrl && this._hasSameServerInstance(g.server, g.owningSystemUrl) && (g.hasPortal = true), !g.hasServer && this._isServerRsrc(e3) && (g._restInfoPms = this._getTokenSvcUrl(e3), g.hasServer = true);
    else {
      const t4 = this._getTokenSvcUrl(e3);
      if (!t4) return _2 = new s2("identity-manager:unknown-resource", "Unknown resource - could not find token service endpoint."), a3.reject(_2), a3.promise;
      g = new s5(), g.server = this._getServerInstanceRoot(e3), "string" == typeof t4 ? (g.tokenServiceUrl = t4, g.hasPortal = true) : (g._restInfoPms = t4, g.hasServer = true), this.registerServers([g]);
    }
    return g.hasPortal && void 0 === g._selfReq && (o3 || F(g.tokenServiceUrl, this._appOrigin) || this._gwDomains.some((e4) => e4.tokenServiceUrl === g.tokenServiceUrl)) && (g._selfReq = { owningTenant: t3 == null ? void 0 : t3.owningTenant, selfDfd: this._getPortalSelf(g.tokenServiceUrl.replace(this._rePortalTokenSvc, "/sharing/rest/portals/self"), e3) }), this._enqueue(e3, g, t3, a3, h2);
  }
  getResourceName(e3) {
    return this._isRESTService(e3) ? e3.replace(this._regexSDirUrl, "").replace(this._regexServerType, "") || "" : this._gwUser.test(e3) && e3.replace(this._gwUser, "$1") || this._gwItem.test(e3) && e3.replace(this._gwItem, "$1") || this._gwGroup.test(e3) && e3.replace(this._gwGroup, "$1") || "";
  }
  generateToken(e3, t3, r5) {
    const o3 = this._rePortalTokenSvc.test(e3.tokenServiceUrl), n3 = new x(this._appOrigin), a3 = e3.shortLivedTokenValidity;
    let h2, l2, c3, d2, u2, f2, g, m4;
    t3 && (m4 = this.tokenValidity || a3 || this._defaultTokenValidity, m4 > a3 && a3 > 0 && (m4 = a3)), r5 && (h2 = r5.isAdmin, l2 = r5.serverUrl, c3 = r5.token, f2 = r5.signal, g = r5.ssl, e3.customParameters = r5.customParameters), h2 ? d2 = e3.adminTokenServiceUrl : (d2 = e3.tokenServiceUrl, u2 = new x(d2.toLowerCase()), e3.webTierAuth && (r5 == null ? void 0 : r5.serverUrl) && !g && "http" === n3.scheme && (F(n3.uri, d2, true) || "https" === u2.scheme && n3.host === u2.host && "7080" === n3.port && "7443" === u2.port) && (d2 = d2.replace(/^https:/i, "http:").replace(/:7443/i, ":7080")));
    const v2 = { query: { request: "getToken", username: t3 == null ? void 0 : t3.username, password: t3 == null ? void 0 : t3.password, serverUrl: l2, token: c3, expiration: m4, referer: h2 || o3 ? this._appOrigin : null, client: h2 ? "referer" : null, f: "json", ...e3.customParameters }, method: "post", authMode: "anonymous", useProxy: this._useProxy(e3, r5), signal: f2, ...r5 == null ? void 0 : r5.ioArgs };
    o3 || (v2.withCredentials = false);
    return U(d2, v2).then((r6) => {
      const s7 = r6.data;
      if (!(s7 == null ? void 0 : s7.token)) return new s2("identity-manager:authentication-failed", "Unable to generate token");
      const o4 = e3.server;
      return R[o4] || (R[o4] = {}), t3 && (R[o4][t3.username] = t3.password), s7.validity = m4, s7;
    });
  }
  isBusy() {
    return !!this._busy;
  }
  async checkSignInStatus(e3) {
    return (await this.checkAppAccess(e3, "")).credential;
  }
  checkAppAccess(e3, t3, r5) {
    let o3 = false;
    return this.getCredential(e3, { prompt: false }).then((n3) => {
      let a3;
      const h2 = { f: "json" };
      if ("portal" === n3.scope) if (t3 && (this._doPortalSignIn(e3) || (r5 == null ? void 0 : r5.force))) a3 = n3.server + "/sharing/rest/oauth2/validateAppAccess", h2.client_id = t3;
      else {
        if (!n3.token) return { credential: n3 };
        a3 = n3.server + "/sharing/rest";
      }
      else {
        if (!n3.token) return { credential: n3 };
        a3 = n3.server + "/rest/services";
      }
      return n3.token && (h2.token = n3.token), U(a3, { query: h2, authMode: "anonymous" }).then((e4) => {
        if (false === e4.data.valid) throw new s2("identity-manager:not-authorized", `You are currently signed in as: '${n3.userId}'.`, e4.data);
        return o3 = !!e4.data.viewOnlyUserTypeApp, { credential: n3 };
      }).catch((e4) => {
        var _a;
        if ("identity-manager:not-authorized" === e4.name) throw e4;
        const t4 = (_a = e4.details) == null ? void 0 : _a.httpStatus;
        if (498 === t4) throw n3.destroy(), new s2("identity-manager:not-authenticated", "User is not signed in.");
        if (400 === t4) throw new s2("identity-manager:invalid-request");
        return { credential: n3 };
      });
    }).then((e4) => ({ credential: e4.credential, viewOnly: o3 }));
  }
  setOAuthResponseHash(e3) {
    e3 && ("#" === e3.charAt(0) && (e3 = e3.slice(1)), this._processOAuthPopupParams(A(e3)));
  }
  setOAuthRedirectionHandler(e3) {
    this._oAuthRedirectFunc = e3;
  }
  setProtocolErrorHandler(e3) {
    this._protocolFunc = e3;
  }
  signIn(e3, t3, r5 = {}) {
    const s7 = L(), o3 = () => {
      var _a;
      h2 == null ? void 0 : h2.remove(), d2 == null ? void 0 : d2.remove(), (_a = this.dialog) == null ? void 0 : _a.destroy(), this.dialog = h2 = d2 = null;
    }, n3 = () => {
      o3(), this._oAuthDfd = null, s7.reject(new s2("identity-manager:user-aborted", "ABORTED"));
    };
    r5.signal && m(r5.signal, () => {
      n3();
    });
    const a3 = new h({ open: true, resource: this.getResourceName(e3), server: t3.server });
    this.dialog = a3, this.emit("dialog-create");
    let h2 = a3.on("cancel", n3), d2 = a3.on("submit", (e4) => {
      this.generateToken(t3, e4, { isAdmin: r5.isAdmin, signal: r5.signal }).then((i4) => {
        o3();
        const n4 = new E({ userId: e4.username, server: t3.server ?? void 0, token: i4.token, expires: null != i4.expires ? Number(i4.expires) : null, ssl: !!i4.ssl, isAdmin: r5.isAdmin, validity: i4.validity });
        s7.resolve(n4);
      }).catch((e5) => {
        a3.error = e5, a3.signingIn = false;
      });
    });
    return s7.promise;
  }
  oAuthSignIn(e3, t3, r5, s7) {
    this._oAuthDfd = L();
    const o3 = this._oAuthDfd;
    let n3;
    (s7 == null ? void 0 : s7.signal) && m(s7.signal, () => {
      const e4 = this._oAuthDfd && this._oAuthDfd.oAuthWin_;
      e4 && !e4.closed ? e4.close() : this.dialog && u2();
    }), o3.resUrl_ = e3, o3.sinfo_ = t3, o3.oinfo_ = r5;
    const a3 = r5._oAuthCred;
    if (a3.storage && ("authorization-code" === r5.flowType || "auto" === r5.flowType && t3.currentVersion >= 8.4)) {
      let e4 = crypto.getRandomValues(new Uint8Array(32));
      n3 = et(e4), a3.codeVerifier = n3, e4 = crypto.getRandomValues(new Uint8Array(32)), a3.stateUID = et(e4), a3.save() || (a3.codeVerifier = n3 = null);
    } else a3.codeVerifier = null;
    let h2, d2;
    this._getCodeChallenge(n3).then((i4) => {
      const o4 = !s7 || false !== s7.oAuthPopupConfirmation;
      if (!r5.popup || !o4) return void this._doOAuthSignIn(e3, t3, r5, i4);
      const n4 = new h({ oAuthPrompt: true, server: t3.server, open: true });
      this.dialog = n4, this.emit("dialog-create"), h2 = n4.on("cancel", u2), d2 = n4.on("submit", () => {
        p3(), this._doOAuthSignIn(e3, t3, r5, i4);
      });
    });
    const u2 = () => {
      p3(), this._oAuthDfd = null, o3.reject(new s2("identity-manager:user-aborted", "ABORTED"));
    }, p3 = () => {
      var _a;
      h2 == null ? void 0 : h2.remove(), d2 == null ? void 0 : d2.remove(), (_a = this.dialog) == null ? void 0 : _a.destroy(), this.dialog = null;
    };
    return o3.promise;
  }
  destroyCredentials() {
    if (this.credentials) {
      this.credentials.slice().forEach((e3) => {
        e3.destroy();
      });
    }
    this.emit("credentials-destroy");
  }
  enablePostMessageAuth(e3 = "https://www.arcgis.com/sharing/rest") {
    this._postMessageAuthHandle && this._postMessageAuthHandle.remove(), this._postMessageAuthHandle = o(window, "message", (t3) => {
      var _a;
      if ((t3.origin === this._appOrigin || t3.origin.endsWith(".arcgis.com")) && "arcgis:auth:requestCredential" === ((_a = t3.data) == null ? void 0 : _a.type)) {
        const r5 = t3.source;
        this.getCredential(e3).then((e4) => {
          r5.postMessage({ type: "arcgis:auth:credential", credential: { expires: e4.expires, server: e4.server, ssl: e4.ssl, token: e4.token, userId: e4.userId } }, t3.origin);
        }).catch((e4) => {
          r5.postMessage({ type: "arcgis:auth:error", error: { name: e4.name, message: e4.message } }, t3.origin);
        });
      }
    });
  }
  disablePostMessageAuth() {
    this._postMessageAuthHandle && (this._postMessageAuthHandle.remove(), this._postMessageAuthHandle = null);
  }
  _getOAuthLocationParams() {
    var _a, _b;
    let e3 = window.location.hash;
    if (e3) {
      "#" === e3.charAt(0) && (e3 = e3.slice(1));
      const t4 = A(e3);
      let r5 = false;
      if (t4.access_token && t4.expires_in && t4.state && t4.hasOwnProperty("username")) try {
        t4.state = JSON.parse(t4.state), t4.state.portalUrl && (this._oAuthLocationParams = t4, r5 = true);
      } catch {
      }
      else if (t4.error && t4.error_description && (console.log("IdentityManager OAuth Error: ", t4.error, " - ", t4.error_description), "access_denied" === t4.error && (r5 = true, t4.state))) try {
        t4.state = JSON.parse(t4.state);
      } catch {
      }
      r5 && (window.location.hash = ((_a = t4.state) == null ? void 0 : _a.hash) || "");
    }
    let t3 = window.location.search;
    if (t3) {
      "?" === t3.charAt(0) && (t3 = t3.slice(1));
      const e4 = A(t3);
      let r5 = false;
      if (e4.code && e4.state) try {
        e4.state = JSON.parse(e4.state), e4.state.portalUrl && e4.state.uid && (this._oAuthLocationParams = e4, r5 = true);
      } catch {
      }
      else if (e4.error && e4.error_description && (console.log("IdentityManager OAuth Error: ", e4.error, " - ", e4.error_description), "access_denied" === e4.error && (r5 = true, e4.state))) try {
        e4.state = JSON.parse(e4.state);
      } catch {
      }
      if (r5) {
        const t4 = { ...e4 };
        ["code", "error", "error_description", "message_code", "persist", "state"].forEach((e5) => {
          delete t4[e5];
        });
        const r6 = v(t4), s7 = window.location.pathname + (r6 ? `?${r6}` : "") + (((_b = e4.state) == null ? void 0 : _b.hash) || "");
        window.history.replaceState(window.history.state, "", s7);
      }
    }
  }
  _getOAuthToken(e3, t3, r5, i4, o3) {
    return e3 = e3.replace(/^http:/i, "https:"), U(`${e3}/sharing/rest/oauth2/token`, { authMode: "anonymous", method: "post", query: i4 && o3 ? { grant_type: "authorization_code", code: t3, redirect_uri: i4, client_id: r5, code_verifier: o3 } : { grant_type: "refresh_token", refresh_token: t3, client_id: r5 } }).then((e4) => e4.data);
  }
  async _getCodeChallenge(e3) {
    if (e3 && globalThis.isSecureContext) {
      const t3 = new TextEncoder().encode(e3), r5 = await crypto.subtle.digest("SHA-256", t3);
      return et(new Uint8Array(r5));
    }
    return null;
  }
  _pageShowHandler(e3) {
    if (e3.persisted && this.isBusy() && this._rejectOnPersistedPageShow) {
      const e4 = new s2("identity-manager:user-aborted", "ABORTED");
      this._errbackFunc(e4);
    }
  }
  _findCredential(e3, t3) {
    let r5, s7, i4, o3, n3 = -1;
    const a3 = t3 == null ? void 0 : t3.token, h2 = t3 == null ? void 0 : t3.resource, l2 = this._isServerRsrc(e3) ? "server" : "portal", c3 = this.credentials.filter((t4) => this._hasSameServerInstance(t4.server, e3) && t4.scope === l2);
    if (e3 = h2 || e3, c3.length) if (1 === c3.length) {
      if (r5 = c3[0], i4 = this.findServerInfo(r5.server), s7 = i4 == null ? void 0 : i4.owningSystemUrl, o3 = s7 ? this.findCredential(s7, r5.userId) : void 0, n3 = this._getIdenticalSvcIdx(e3, r5), !a3) return -1 === n3 && r5.resources.push(e3), this._addResource(e3, o3), r5;
      -1 !== n3 && (r5.resources.splice(n3, 1), this._removeResource(e3, o3));
    } else {
      let t4, r6;
      if (c3.some((a4) => (r6 = this._getIdenticalSvcIdx(e3, a4), -1 !== r6 && (t4 = a4, i4 = this.findServerInfo(t4.server), s7 = i4 == null ? void 0 : i4.owningSystemUrl, o3 = s7 ? this.findCredential(s7, t4.userId) : void 0, n3 = r6, true))), a3) t4 && (t4.resources.splice(n3, 1), this._removeResource(e3, o3));
      else if (t4) return this._addResource(e3, o3), t4;
    }
  }
  _findOAuthInfo(e3) {
    let t3 = this.findOAuthInfo(e3);
    if (!t3) {
      for (const r5 of this.oAuthInfos) if (this._isIdProvider(r5.portalUrl, e3)) {
        t3 = r5;
        break;
      }
    }
    return t3;
  }
  _addResource(e3, t3) {
    t3 && -1 === this._getIdenticalSvcIdx(e3, t3) && t3.resources.push(e3);
  }
  _removeResource(e3, t3) {
    let r5 = -1;
    t3 && (r5 = this._getIdenticalSvcIdx(e3, t3), r5 > -1 && t3.resources.splice(r5, 1));
  }
  _useProxy(e3, t3) {
    return (t3 == null ? void 0 : t3.isAdmin) && !F(e3.adminTokenServiceUrl, this._appOrigin) || !this._isPortalDomain(e3.tokenServiceUrl) && "10.1" === String(e3.currentVersion) && !F(e3.tokenServiceUrl, this._appOrigin);
  }
  _getOrigin(e3) {
    const t3 = new x(e3);
    return t3.scheme + "://" + t3.host + (null != t3.port ? ":" + t3.port : "");
  }
  _getServerInstanceRoot(e3) {
    const t3 = e3.toLowerCase();
    let r5 = t3.indexOf(this._agsRest);
    return -1 === r5 && this._isAdminResource(e3) && (r5 = this._agsAdmin.test(e3) ? e3.replace(this._agsAdmin, "$1").length : e3.search(this._adminSvcs)), -1 !== r5 || a2(t3) || (r5 = t3.indexOf("/sharing")), -1 === r5 && t3.endsWith("/") && (r5 = t3.length - 1), r5 > -1 ? e3.slice(0, r5) : e3;
  }
  _hasSameServerInstance(e3, t3) {
    return e3.endsWith("/") && (e3 = e3.slice(0, -1)), e3 = e3.toLowerCase(), t3 = this._getServerInstanceRoot(t3).toLowerCase(), e3 = r2(e3), t3 = r2(t3), (e3 = e3.slice(Math.max(0, e3.indexOf(":")))) === (t3 = t3.slice(Math.max(0, t3.indexOf(":"))));
  }
  _sanitizeUrl(e3) {
    const r5 = (s.request.proxyUrl || "").toLowerCase(), s7 = r5 ? e3.toLowerCase().indexOf(r5 + "?") : -1;
    return -1 !== s7 && (e3 = e3.slice(s7 + r5.length + 1)), e3 = K(e3), I(e3).path;
  }
  _isRESTService(e3) {
    return e3.includes(this._agsRest);
  }
  _isAdminResource(e3) {
    return this._agsAdmin.test(e3) || this._adminSvcs.test(e3);
  }
  _isServerRsrc(e3) {
    return this._isRESTService(e3) || this._isAdminResource(e3);
  }
  _isIdenticalService(e3, t3) {
    let r5 = false;
    if (this._isRESTService(e3) && this._isRESTService(t3)) {
      const s7 = this._getSuffix(e3).toLowerCase(), i4 = this._getSuffix(t3).toLowerCase();
      if (r5 = s7 === i4, !r5) {
        const e4 = /(.*)\/(MapServer|FeatureServer|UtilityNetworkServer).*/gi;
        r5 = s7.replaceAll(e4, "$1") === i4.replaceAll(e4, "$1");
      }
    } else this._isAdminResource(e3) && this._isAdminResource(t3) ? r5 = true : this._isServerRsrc(e3) || this._isServerRsrc(t3) || !this._isPortalDomain(e3) || (r5 = true);
    return r5;
  }
  _isPortalDomain(e3) {
    const r5 = new x(e3.toLowerCase()), s7 = this._portalConfig;
    let i4 = this._gwDomains.some((e4) => e4.regex.test(r5.uri));
    return !i4 && s7 && (i4 = this._hasSameServerInstance(this._getServerInstanceRoot(s7.restBaseUrl), r5.uri)), i4 || s.portalUrl && (i4 = F(r5, s.portalUrl, true)), i4 || (i4 = this._portals.some((e4) => this._hasSameServerInstance(e4, r5.uri))), i4 = i4 || this._agsPortal.test(r5.path), i4;
  }
  _isIdProvider(e3, t3) {
    let r5 = -1, s7 = -1;
    this._gwDomains.forEach((i5, o3) => {
      -1 === r5 && i5.regex.test(e3) && (r5 = o3), -1 === s7 && i5.regex.test(t3) && (s7 = o3);
    });
    let i4 = false;
    if (r5 > -1 && s7 > -1 && (0 === r5 || 4 === r5 ? 0 !== s7 && 4 !== s7 || (i4 = true) : 1 === r5 ? 1 !== s7 && 2 !== s7 || (i4 = true) : 2 === r5 ? 2 === s7 && (i4 = true) : 3 === r5 && 3 === s7 && (i4 = true)), !i4) {
      const r6 = this.findServerInfo(t3), s8 = r6 == null ? void 0 : r6.owningSystemUrl;
      s8 && C(r6) && this._isPortalDomain(s8) && this._isIdProvider(e3, s8) && (i4 = true);
    }
    return i4;
  }
  _getIdenticalSvcIdx(e3, t3) {
    let r5 = -1;
    for (let s7 = 0; s7 < t3.resources.length; s7++) {
      const i4 = t3.resources[s7];
      if (this._isIdenticalService(e3, i4)) {
        r5 = s7;
        break;
      }
    }
    return r5;
  }
  _getSuffix(e3) {
    return e3.replace(this._regexSDirUrl, "").replace(this._regexServerType, "$1");
  }
  _getTokenSvcUrl(e3) {
    let t3, r5, i4;
    if (this._isRESTService(e3) || this._isAdminResource(e3)) {
      const i5 = this._getServerInstanceRoot(e3);
      return t3 = i5 + "/admin/generateToken", r5 = U(e3 = i5 + "/rest/info", { query: { f: "json" } }).then((e4) => e4.data), { adminUrl: t3, promise: r5 };
    }
    if (this._isPortalDomain(e3)) {
      let t4 = "";
      if (this._gwDomains.some((r6) => (r6.regex.test(e3) && (t4 = r6.tokenServiceUrl), !!t4)), t4 || this._portals.some((r6) => (this._hasSameServerInstance(r6, e3) && (t4 = r6 + this._gwTokenUrl), !!t4)), t4 || (i4 = e3.toLowerCase().indexOf("/sharing"), -1 !== i4 && (t4 = e3.slice(0, i4) + this._gwTokenUrl)), t4 || (t4 = this._getOrigin(e3) + this._gwTokenUrl), t4) {
        const r6 = new x(e3).port;
        /^http:\/\//i.test(e3) && "7080" === r6 && (t4 = t4.replace(/:7080/i, ":7443")), t4 = t4.replace(/http:/i, "https:");
      }
      return t4;
    }
  }
  _processOAuthResponseParams(e3, t3, r5) {
    const s7 = t3._oAuthCred;
    if (e3.code) {
      const i5 = s7.codeVerifier;
      return s7.codeVerifier = null, s7.stateUID = null, s7.save(), this._getOAuthToken(r5.server, e3.code, t3.appId, this._getRedirectURI(t3, true), i5).then((i6) => {
        const o3 = new E({ userId: i6.username, server: r5.server ?? void 0, token: i6.access_token, expires: Date.now() + 1e3 * i6.expires_in, ssl: i6.ssl, oAuthState: e3.state, _oAuthCred: s7 });
        return t3.userId = o3.userId, s7.storage = i6.persist ? b : q, s7.refreshToken = i6.refresh_token, s7.token = null, s7.expires = i6.refresh_token_expires_in ? Date.now() + 1e3 * i6.refresh_token_expires_in : null, s7.userId = o3.userId, s7.ssl = o3.ssl, s7.save(), o3;
      });
    }
    const i4 = new E({ userId: e3.username, server: r5.server ?? void 0, token: e3.access_token, expires: Date.now() + 1e3 * Number(e3.expires_in), ssl: "true" === e3.ssl, oAuthState: e3.state, _oAuthCred: s7 });
    return t3.userId = i4.userId, s7.storage = e3.persist ? b : q, s7.refreshToken = null, s7.token = i4.token, s7.expires = i4.expires, s7.userId = i4.userId, s7.ssl = i4.ssl, s7.save(), Promise.resolve(i4);
  }
  _processOAuthPopupParams(e3) {
    var _a;
    const t3 = this._oAuthDfd;
    if (this._oAuthDfd = null, t3) if (clearInterval(this._oAuthIntervalId), (_a = this._oAuthOnPopupHandle) == null ? void 0 : _a.remove(), e3.error) {
      const r5 = "access_denied" === e3.error, s7 = new s2(r5 ? "identity-manager:user-aborted" : "identity-manager:authentication-failed", r5 ? "ABORTED" : "OAuth: " + e3.error + " - " + e3.error_description);
      t3.reject(s7);
    } else this._processOAuthResponseParams(e3, t3.oinfo_, t3.sinfo_).then((e4) => {
      t3.resolve(e4);
    }).catch((e4) => {
      t3.reject(e4);
    });
  }
  _setOAuthResponseQueryString(e3) {
    e3 && ("?" === e3.charAt(0) && (e3 = e3.slice(1)), this._processOAuthPopupParams(A(e3)));
  }
  async _exchangeToken(e3, t3, r5) {
    return (await U(`${e3}/sharing/rest/oauth2/exchangeToken`, { authMode: "anonymous", method: "post", query: { f: "json", client_id: t3, token: r5 } })).data.token;
  }
  async _getPlatformSelf(e3, t3) {
    var _a;
    if (this._getPlatformSelfError && Date.now() - this._getPlatformSelfError[1] < 1e3) throw this._getPlatformSelfError[0];
    e3 = e3.replace(/^http:/i, "https:");
    try {
      const r5 = await U(`${e3}/sharing/rest/oauth2/platformSelf`, { authMode: "anonymous", headers: { "X-Esri-Auth-Client-Id": t3, "X-Esri-Auth-Redirect-Uri": window.location.href.replace(/#.*$/, "") }, method: "post", query: { f: "json", expiration: 30 }, withCredentials: true });
      return this._getPlatformSelfError = null, r5.data;
    } catch (r5) {
      throw "OAUTH_0066" === ((_a = r5.details) == null ? void 0 : _a.messageCode) && (this._getPlatformSelfError = [r5, Date.now()]), r5;
    }
  }
  _getPortalSelf(e3, t3) {
    let r5;
    if (this._gwDomains.some((t4) => (t4.regex.test(e3) && (r5 = t4.customBaseUrl), !!r5)), r5) return Promise.resolve({ allSSL: true, currentVersion: "8.4", customBaseUrl: r5, portalMode: "multitenant", supportsOAuth: true });
    this._appOrigin.startsWith("https:") ? e3 = e3.replace(/^http:/i, "https:").replace(/:7080/i, ":7443") : /^http:/i.test(t3) && (e3 = e3.replace(/^https:/i, "http:").replace(/:7443/i, ":7080"));
    return U(e3, { query: { f: "json" }, authMode: "anonymous", withCredentials: true }).then((e4) => e4.data);
  }
  _doPortalSignIn(e3) {
    const t3 = this._portalConfig, r5 = window.location.href, s7 = this.findServerInfo(e3);
    return !(!t3 && !this._isPortalDomain(r5) || !(s7 ? s7.hasPortal || s7.owningSystemUrl && this._isPortalDomain(s7.owningSystemUrl) : this._isPortalDomain(e3)) || !(this._isIdProvider(r5, e3) || t3 && (this._hasSameServerInstance(this._getServerInstanceRoot(t3.restBaseUrl), e3) || this._isIdProvider(t3.restBaseUrl, e3)) || F(r5, e3, true)));
  }
  _checkProtocol(e3, t3, r5, s7) {
    let o3 = true;
    const n3 = s7 ? t3.adminTokenServiceUrl : t3.tokenServiceUrl;
    if (n3.trim().toLowerCase().startsWith("https:") && !this._appOrigin.startsWith("https:") && T(n3) && (o3 = !!this._protocolFunc && !!this._protocolFunc({ resourceUrl: e3, serverInfo: t3 }), !o3)) {
      r5(new s2("identity-manager:aborted", "Aborted the Sign-In process to avoid sending password over insecure connection."));
    }
    return o3;
  }
  _enqueue(e3, t3, r5, s7, i4, o3) {
    return s7 || (s7 = L()), s7.resUrl_ = e3, s7.sinfo_ = t3, s7.options_ = r5, s7.admin_ = i4, s7.refresh_ = o3, this._busy ? this._hasSameServerInstance(this._getServerInstanceRoot(e3), this._busy.resUrl_) ? (this._oAuthDfd && this._oAuthDfd.oAuthWin_ && this._oAuthDfd.oAuthWin_.focus(), this._soReqs.push(s7)) : this._xoReqs.push(s7) : this._doSignIn(s7), s7.promise;
  }
  _doSignIn(e3) {
    this._busy = e3, this._rejectOnPersistedPageShow = false;
    const t3 = (t4) => {
      var _a;
      const r6 = (_a = e3.options_) == null ? void 0 : _a.resource, s8 = e3.resUrl_, i4 = e3.refresh_;
      let o4 = false;
      this.credentials.includes(t4) || (i4 && this.credentials.includes(i4) ? (i4.userId = t4.userId, i4.token = t4.token, i4.expires = t4.expires, i4.validity = t4.validity, i4.ssl = t4.ssl, i4.creationTime = t4.creationTime, o4 = true, t4 = i4) : this.credentials.push(t4)), t4.resources || (t4.resources = []), t4.resources.includes(r6 || s8) || t4.resources.push(r6 || s8), t4.scope = this._isServerRsrc(s8) ? "server" : "portal", t4.emitTokenChange();
      const n3 = this._soReqs, a4 = {};
      this._soReqs = [], n3.forEach((e4) => {
        if (!this._isIdenticalService(s8, e4.resUrl_)) {
          const r7 = this._getSuffix(e4.resUrl_);
          a4[r7] || (a4[r7] = true, t4.resources.push(e4.resUrl_));
        }
      }), e3.resolve(t4), n3.forEach((e4) => {
        this._hasSameServerInstance(this._getServerInstanceRoot(s8), e4.resUrl_) ? e4.resolve(t4) : this._soReqs.push(e4);
      }), this._busy = e3.resUrl_ = e3.sinfo_ = e3.refresh_ = null, o4 || this.emit("credential-create", { credential: t4 }), this._soReqs.length ? this._doSignIn(this._soReqs.shift()) : this._xoReqs.length && this._doSignIn(this._xoReqs.shift());
    }, r5 = (t4) => {
      e3.reject(t4), this._busy = e3.resUrl_ = e3.sinfo_ = e3.refresh_ = null, this._soReqs.length ? this._doSignIn(this._soReqs.shift()) : this._xoReqs.length && this._doSignIn(this._xoReqs.shift());
    }, s7 = (o4, a4, h2, l3) => {
      var _a, _b, _c;
      const d3 = e3.sinfo_, u2 = !e3.options_ || false !== e3.options_.prompt, _2 = d3.hasPortal && this._findOAuthInfo(e3.resUrl_);
      let f2, g;
      if (o4) t3(new E({ userId: o4, server: d3.server ?? void 0, token: h2 ?? void 0, expires: null != l3 ? Number(l3) : null, ssl: !!a4 }));
      else if (window !== window.parent && ((_a = this._appUrlObj.query) == null ? void 0 : _a["arcgis-auth-origin"]) && ((_b = this._appUrlObj.query) == null ? void 0 : _b["arcgis-auth-portal"]) && this._hasSameServerInstance(this._getServerInstanceRoot(this._appUrlObj.query["arcgis-auth-portal"]), e3.resUrl_)) {
        window.parent.postMessage({ type: "arcgis:auth:requestCredential" }, this._appUrlObj.query["arcgis-auth-origin"]);
        const s8 = o(window, "message", (e4) => {
          e4.source === window.parent && e4.data && ("arcgis:auth:credential" === e4.data.type ? (s8.remove(), e4.data.credential.expires < Date.now() ? r5(new s2("identity-manager:credential-request-failed", "Parent application's token has expired.")) : t3(new E(e4.data.credential))) : "arcgis:auth:error" === e4.data.type && (s8.remove(), "tokenExpiredError" === e4.data.error.name ? r5(new s2("identity-manager:credential-request-failed", "Parent application's token has expired.")) : r5(s2.fromJSON(e4.data.error))));
        });
        m((_c = e3.options_) == null ? void 0 : _c.signal, () => {
          s8.remove();
        });
      } else if (_2) {
        let o5 = _2._oAuthCred;
        if (!o5) {
          const e4 = new e2(_2, b), t4 = new e2(_2, q);
          e4.isValid() && t4.isValid() ? e4.expires > t4.expires ? (o5 = e4, t4.destroy()) : (o5 = t4, e4.destroy()) : o5 = e4.isValid() ? e4 : t4, _2._oAuthCred = o5;
        }
        if (o5.isValid()) {
          f2 = new E({ userId: o5.userId ?? void 0, server: d3.server ?? void 0, token: o5.token ?? void 0, expires: o5.expires, ssl: o5.ssl ?? void 0, _oAuthCred: o5 });
          const i4 = _2.appId !== o5.appId && this._doPortalSignIn(e3.resUrl_);
          i4 || o5.refreshToken ? (e3._pendingDfd = o5.refreshToken ? this._getOAuthToken(d3.server, o5.refreshToken, o5.appId).then((e4) => (f2.expires = Date.now() + 1e3 * e4.expires_in, f2.token = e4.access_token, f2)) : Promise.resolve(f2), e3._pendingDfd.then((e4) => i4 ? this._exchangeToken(e4.server, _2.appId, e4.token).then((t4) => (e4.token = t4, e4)).catch(() => e4) : e4).then((e4) => {
            t3(e4);
          }).catch((e4) => {
            var _a2;
            const t4 = (_a2 = e4.details) == null ? void 0 : _a2.httpStatus;
            t4 > 0 && 404 !== t4 ? (o5.destroy(), s7()) : r5(e4);
          })) : t3(f2);
        } else if (this._oAuthLocationParams && this._hasSameServerInstance(_2.portalUrl, this._oAuthLocationParams.state.portalUrl) && (this._oAuthLocationParams.access_token || this._oAuthLocationParams.code && this._oAuthLocationParams.state.uid === o5.stateUID && o5.codeVerifier)) {
          const s8 = this._oAuthLocationParams;
          this._oAuthLocationParams = null, e3._pendingDfd = this._processOAuthResponseParams(s8, _2, d3).then((e4) => {
            t3(e4);
          }).catch(r5);
        } else {
          const s8 = () => {
            u2 ? e3._pendingDfd = this.oAuthSignIn(e3.resUrl_, d3, _2, e3.options_).then(t3, r5) : (g = new s2("identity-manager:not-authenticated", "User is not signed in."), r5(g));
          };
          this._doPortalSignIn(e3.resUrl_) ? e3._pendingDfd = this._getPlatformSelf(d3.server, _2.appId).then((e4) => {
            F(e4.portalUrl, this._appOrigin, true) ? (f2 = new E({ userId: e4.username, server: d3.server ?? void 0, expires: Date.now() + 1e3 * e4.expires_in, token: e4.token }), t3(f2)) : s8();
          }).catch(s8) : s8();
        }
      } else if (u2) {
        if (this._checkProtocol(e3.resUrl_, d3, r5, e3.admin_)) {
          let s8 = e3.options_;
          e3.admin_ && (s8 = s8 || {}, s8.isAdmin = true), e3._pendingDfd = this.signIn(e3.resUrl_, d3, s8).then(t3, r5);
        }
      } else g = new s2("identity-manager:not-authenticated", "User is not signed in."), r5(g);
    }, o3 = () => {
      const s8 = e3.sinfo_, i4 = s8.owningSystemUrl, o4 = e3.options_;
      let n3, a4, h2, l3;
      if (o4 && (n3 = o4.token, a4 = o4.error, h2 = o4.prompt), l3 = this._findCredential(i4, { token: n3, resource: e3.resUrl_ }), !l3) {
        for (const e4 of this.credentials) if (this._isIdProvider(i4, e4.server)) {
          l3 = e4;
          break;
        }
      }
      if (l3) {
        const i5 = this.findCredential(e3.resUrl_, l3.userId);
        if (i5) t3(i5);
        else if (D(s8, this._legacyFed)) {
          const e4 = l3.toJSON();
          e4.server = s8.server, e4.resources = null, t3(new E(e4));
        } else {
          (e3._pendingDfd = this.generateToken(this.findServerInfo(l3.server), null, { serverUrl: e3.resUrl_, token: l3.token, signal: e3.options_.signal, ssl: l3.ssl })).then((r6) => {
            t3(new E({ userId: l3 == null ? void 0 : l3.userId, server: s8.server ?? void 0, token: r6.token, expires: null != r6.expires ? Number(r6.expires) : null, ssl: !!r6.ssl, isAdmin: e3.admin_, validity: r6.validity }));
          }, r5);
        }
      } else {
        this._busy = null, n3 && (e3.options_.token = null);
        (e3._pendingDfd = this.getCredential(i4.replace(/\/?$/, "/sharing"), { resource: e3.resUrl_, owningTenant: s8.owningTenant, signal: e3.options_.signal, token: n3, error: a4, prompt: h2 })).then(() => {
          this._enqueue(e3.resUrl_, e3.sinfo_, e3.options_, e3, e3.admin_);
        }, (t4) => {
          e3.resUrl_ = e3.sinfo_ = e3.refresh_ = null, e3.reject(t4);
        });
      }
    };
    this._errbackFunc = r5;
    const a3 = e3.sinfo_.owningSystemUrl, l2 = this._isServerRsrc(e3.resUrl_), d2 = e3.sinfo_._restInfoPms;
    d2 ? d2.promise.then((t4) => {
      const r6 = e3.sinfo_;
      if (r6._restInfoPms) {
        r6.adminTokenServiceUrl = r6._restInfoPms.adminUrl, r6._restInfoPms = null, r6.tokenServiceUrl = (t("authInfo.tokenServicesUrl", t4) || t("authInfo.tokenServiceUrl", t4) || t("tokenServiceUrl", t4)) ?? null, r6.shortLivedTokenValidity = t("authInfo.shortLivedTokenValidity", t4) ?? null, r6.currentVersion = t4.currentVersion, r6.owningTenant = t4.owningTenant;
        const e4 = r6.owningSystemUrl = t4.owningSystemUrl;
        e4 && this._portals.push(e4);
      }
      l2 && r6.owningSystemUrl ? o3() : s7();
    }, () => {
      e3.sinfo_._restInfoPms = null;
      const t4 = new s2("identity-manager:server-identification-failed", "Unknown resource - could not find token service endpoint.");
      r5(t4);
    }) : l2 && a3 ? o3() : e3.sinfo_._selfReq ? e3.sinfo_._selfReq.selfDfd.then((t4) => {
      var _a;
      const r6 = {};
      let s8, i4, o4, n3;
      return t4 && (s8 = (_a = t4.user) == null ? void 0 : _a.username, r6.username = s8, r6.allSSL = t4.allSSL, i4 = t4.supportsOAuth, n3 = parseFloat(t4.currentVersion), "multitenant" === t4.portalMode && (o4 = t4.customBaseUrl), e3.sinfo_.currentVersion = n3), e3.sinfo_.webTierAuth = !!s8, s8 && this.normalizeWebTierAuth ? this.generateToken(e3.sinfo_, null, { ssl: r6.allSSL }).catch(() => null).then((e4) => (r6.portalToken = e4 == null ? void 0 : e4.token, r6.tokenExpiration = e4 == null ? void 0 : e4.expires, r6)) : !s8 && i4 && n3 >= 4.4 && !this._findOAuthInfo(e3.resUrl_) ? this._generateOAuthInfo({ portalUrl: e3.sinfo_.server, customBaseUrl: o4, owningTenant: e3.sinfo_._selfReq.owningTenant }).catch(() => null).then(() => r6) : r6;
    }).catch(() => null).then((t4) => {
      e3.sinfo_._selfReq = null, t4 ? s7(t4.username, t4.allSSL, t4.portalToken, t4.tokenExpiration) : s7();
    }) : s7();
  }
  _generateOAuthInfo(e3) {
    let t3, r5 = null, i4 = e3.portalUrl;
    const o3 = e3.customBaseUrl, n3 = e3.owningTenant, a3 = !this._defaultOAuthInfo && this._createDefaultOAuthInfo && !this._hasTestedIfAppIsOnPortal;
    if (a3) {
      r5 = window.location.href;
      let e4 = r5.indexOf("?");
      e4 > -1 && (r5 = r5.slice(0, e4)), e4 = r5.search(/\/(apps|home)\//), r5 = e4 > -1 ? r5.slice(0, e4) : null;
    }
    return a3 && r5 ? (this._hasTestedIfAppIsOnPortal = true, t3 = U(r5 + "/sharing/rest", { query: { f: "json" } }).then(() => {
      this._defaultOAuthInfo = new i2({ appId: "arcgisonline", popupCallbackUrl: r5 + "/home/oauth-callback.html" });
    })) : t3 = Promise.resolve(), t3.then(() => {
      if (this._defaultOAuthInfo) return i4 = i4.replace(/^http:/i, "https:"), U(i4 + "/sharing/rest/oauth2/validateRedirectUri", { query: { accountId: n3, client_id: this._defaultOAuthInfo.appId, redirect_uri: _(this._defaultOAuthInfo.popupCallbackUrl), f: "json" } }).then((e4) => {
        if (e4.data.valid) {
          const t4 = this._defaultOAuthInfo.clone();
          e4.data.urlKey && o3 ? t4.portalUrl = "https://" + e4.data.urlKey.toLowerCase() + "." + o3 : t4.portalUrl = i4, t4.popup = window !== window.top || !(F(i4, this._appOrigin) || this._gwDomains.some((e5) => e5.regex.test(i4) && e5.regex.test(this._appOrigin))), this.oAuthInfos.push(t4);
        }
      });
    });
  }
  _doOAuthSignIn(e3, t3, r5, s7) {
    const o3 = r5._oAuthCred, a3 = { portalUrl: r5.portalUrl };
    !r5.popup && r5.preserveUrlHash && window.location.hash && (a3.hash = window.location.hash), o3.stateUID && (a3.uid = o3.stateUID);
    const h2 = { client_id: r5.appId, response_type: o3.codeVerifier ? "code" : "token", state: JSON.stringify(a3), expiration: r5.expiration, locale: r5.locale, redirect_uri: this._getRedirectURI(r5, !!o3.codeVerifier) };
    r5.forceLogin && (h2.force_login = true), r5.forceUserId && r5.userId && (h2.prepopulatedusername = r5.userId), !r5.popup && this._doPortalSignIn(e3) && (h2.redirectToUserOrgUrl = true), o3.codeVerifier && (h2.code_challenge = s7 || o3.codeVerifier, h2.code_challenge_method = s7 ? "S256" : "plain");
    const l2 = r5.portalUrl.replace(/^http:/i, "https:") + "/sharing/oauth2/authorize", c3 = l2 + "?" + v(h2);
    if (r5.popup) {
      const e4 = window.open(c3, "esriJSAPIOAuth", r5.popupWindowFeatures);
      if (e4) e4.focus(), this._oAuthDfd.oAuthWin_ = e4, this._oAuthIntervalId = setInterval(() => {
        if (e4.closed) {
          clearInterval(this._oAuthIntervalId), this._oAuthOnPopupHandle.remove();
          const e5 = this._oAuthDfd;
          if (e5) {
            const t4 = new s2("identity-manager:user-aborted", "ABORTED");
            e5.reject(t4);
          }
        }
      }, 500), this._oAuthOnPopupHandle = o(window, ["arcgis:auth:hash", "arcgis:auth:location:search"], (e5) => {
        "arcgis:auth:hash" === e5.type ? this.setOAuthResponseHash(e5.detail) : this._setOAuthResponseQueryString(e5.detail);
      });
      else {
        const e5 = new s2("identity-manager:popup-blocked", "ABORTED");
        this._oAuthDfd.reject(e5);
      }
    } else this._rejectOnPersistedPageShow = true, this._oAuthRedirectFunc ? this._oAuthRedirectFunc({ authorizeParams: h2, authorizeUrl: l2, resourceUrl: e3, serverInfo: t3, oAuthInfo: r5 }) : window.location.href = c3;
  }
  _getRedirectURI(e3, t3) {
    const r5 = window.location.href.replace(/#.*$/, "");
    if (e3.popup) return _(e3.popupCallbackUrl);
    if (t3) {
      const e4 = I(r5);
      return e4.query && ["code", "error", "error_description", "message_code", "persist", "state"].forEach((t4) => {
        delete e4.query[t4];
      }), Et(e4.path, e4.query);
    }
    return r5;
  }
};
j.prototype.declaredClass = "esri.identity.IdentityManagerBase";
var E = class extends o2.EventedAccessor {
  constructor(e3) {
    super(e3), this._oAuthCred = null, this.tokenRefreshBuffer = 2, (e3 == null ? void 0 : e3._oAuthCred) && (this._oAuthCred = e3._oAuthCred);
  }
  initialize() {
    this.resources = this.resources || [], null == this.creationTime && (this.creationTime = Date.now());
  }
  refreshToken() {
    const e3 = i, t3 = e3.findServerInfo(this.server), s7 = t3 == null ? void 0 : t3.owningSystemUrl, i4 = !!s7 && "server" === this.scope, o3 = i4 && D(t3, e3._legacyFed), n3 = t3.webTierAuth, a3 = n3 && e3.normalizeWebTierAuth, h2 = R[this.server], l2 = h2 == null ? void 0 : h2[this.userId];
    let c3, d2 = this.resources && this.resources[0], u2 = i4 ? e3.findServerInfo(s7) : null, p3 = { username: this.userId, password: l2 };
    if (n3 && !a3) return;
    i4 && !u2 && e3.serverInfos.some((t4) => (e3._isIdProvider(s7, t4.server) && (u2 = t4), !!u2));
    const _2 = u2 ? e3.findCredential(u2.server, this.userId) : null;
    if (!i4 || _2) {
      if (!o3) {
        if (i4) c3 = { serverUrl: d2, token: _2 == null ? void 0 : _2.token, ssl: _2 == null ? void 0 : _2.ssl };
        else if (a3) p3 = null, c3 = { ssl: this.ssl };
        else {
          if (!l2) {
            let r5;
            return d2 && (d2 = e3._sanitizeUrl(d2), this._enqueued = 1, r5 = e3._enqueue(d2, t3, null, null, this.isAdmin, this), r5.then(() => {
              this._enqueued = 0, this.refreshServerTokens();
            }).catch(() => {
              this._enqueued = 0;
            })), r5;
          }
          this.isAdmin && (c3 = { isAdmin: true });
        }
        return e3.generateToken(i4 ? u2 : t3, i4 ? null : p3, c3).then((e4) => {
          this.token = e4.token, this.expires = null != e4.expires ? Number(e4.expires) : null, this.creationTime = Date.now(), this.validity = e4.validity, this.emitTokenChange(), this.refreshServerTokens();
        }).catch(() => {
        });
      }
      _2 == null ? void 0 : _2.refreshToken();
    }
  }
  refreshServerTokens() {
    if ("portal" === this.scope) {
      const e3 = i;
      e3.credentials.forEach((t3) => {
        const r5 = e3.findServerInfo(t3.server), s7 = r5 == null ? void 0 : r5.owningSystemUrl;
        t3 !== this && t3.userId === this.userId && s7 && "server" === t3.scope && (e3._hasSameServerInstance(this.server, s7) || e3._isIdProvider(s7, this.server)) && (D(r5, e3._legacyFed) ? (t3.token = this.token, t3.expires = this.expires, t3.creationTime = this.creationTime, t3.validity = this.validity, t3.emitTokenChange()) : t3.refreshToken());
      });
    }
  }
  emitTokenChange(e3) {
    clearTimeout(this._refreshTimer);
    const t3 = i, s7 = this.server ? t3.findServerInfo(this.server) : null, i4 = s7 == null ? void 0 : s7.owningSystemUrl, o3 = i4 ? t3.findServerInfo(i4) : null;
    false === e3 || i4 && "portal" !== this.scope && (!(o3 == null ? void 0 : o3.webTierAuth) || t3.normalizeWebTierAuth) || null == this.expires && null == this.validity || this._startRefreshTimer(), this.emit("token-change");
  }
  destroy() {
    this.userId = this.server = this.token = this.expires = this.validity = this.resources = this.creationTime = null, this._oAuthCred && (this._oAuthCred.destroy(), this._oAuthCred = null);
    const e3 = i, t3 = e3.credentials.indexOf(this);
    t3 > -1 && e3.credentials.splice(t3, 1), this.emitTokenChange(), this.emit("destroy");
  }
  toJSON() {
    const e3 = l({ userId: this.userId, server: this.server, token: this.token, expires: this.expires, validity: this.validity, ssl: this.ssl, isAdmin: this.isAdmin, creationTime: this.creationTime, scope: this.scope }), t3 = this.resources;
    return t3 && t3.length > 0 && (e3.resources = t3.slice()), e3;
  }
  _startRefreshTimer() {
    clearTimeout(this._refreshTimer);
    const e3 = 6e4 * this.tokenRefreshBuffer, t3 = 2 ** 31 - 1;
    let r5 = (this.validity ? this.creationTime + 6e4 * this.validity : this.expires) - Date.now();
    r5 < 0 ? r5 = 0 : r5 > t3 && (r5 = t3), this._refreshTimer = setTimeout(this.refreshToken.bind(this), r5 > e3 ? r5 - e3 : r5);
  }
};
r([m2()], E.prototype, "creationTime", void 0), r([m2()], E.prototype, "expires", void 0), r([m2()], E.prototype, "isAdmin", void 0), r([m2()], E.prototype, "oAuthState", void 0), r([m2()], E.prototype, "resources", void 0), r([m2()], E.prototype, "scope", void 0), r([m2()], E.prototype, "server", void 0), r([m2()], E.prototype, "ssl", void 0), r([m2()], E.prototype, "token", void 0), r([m2()], E.prototype, "tokenRefreshBuffer", void 0), r([m2()], E.prototype, "userId", void 0), r([m2()], E.prototype, "validity", void 0), E = r([a("esri.identity.Credential")], E);

// node_modules/@arcgis/core/identity/IdentityManager.js
var r4 = class extends j {
};
r4.prototype.declaredClass = "esri.identity.IdentityManager";
var s6 = new r4();
n(s6);
export {
  s6 as default
};
//# sourceMappingURL=IdentityManager-6MRRVWT5.js.map
