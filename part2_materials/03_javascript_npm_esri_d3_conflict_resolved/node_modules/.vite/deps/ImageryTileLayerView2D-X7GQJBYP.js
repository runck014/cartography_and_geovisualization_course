import {
  d as d3,
  d2 as d4,
  f
} from "./chunk-7HSA5ETO.js";
import {
  A,
  O as O2,
  T,
  _,
  c,
  f as f2,
  g as g4,
  h as h4,
  l,
  m as m3,
  p as p4
} from "./chunk-W4BIFKZW.js";
import {
  i as i5
} from "./chunk-GBAJR7JF.js";
import {
  i as i4
} from "./chunk-TQ54TTVN.js";
import {
  a as a5,
  j as j3,
  y
} from "./chunk-EVT35YP5.js";
import {
  i as i3
} from "./chunk-ZGL6Q57M.js";
import {
  n as n3,
  r as r5,
  t as t3
} from "./chunk-KDQTUT24.js";
import {
  e as e2
} from "./chunk-TZAPBN5J.js";
import "./chunk-FKL5AVF4.js";
import {
  a as a4,
  g as g3,
  i as i2,
  u as u2
} from "./chunk-NM7Y5AVL.js";
import {
  o as o2
} from "./chunk-MCIWLF5F.js";
import {
  p as p3
} from "./chunk-5Y4XRWDV.js";
import "./chunk-ARQ76THZ.js";
import "./chunk-CKPBZSTT.js";
import {
  V,
  ce,
  fe,
  j as j2
} from "./chunk-V4ENL6LP.js";
import {
  S,
  g as g2
} from "./chunk-7PP3YNSG.js";
import "./chunk-HB2JTNV2.js";
import "./chunk-3T3LUDWR.js";
import "./chunk-VBS2Y7KE.js";
import "./chunk-Q3K5MAUZ.js";
import {
  x
} from "./chunk-DPVSO6BH.js";
import "./chunk-2XVRGGEF.js";
import "./chunk-U6IFI7EK.js";
import "./chunk-JMY2H33H.js";
import "./chunk-BXIXSFGX.js";
import "./chunk-OMMWWGIU.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-AHZHHHCW.js";
import "./chunk-OC7D2HR4.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-T23XXKIL.js";
import {
  mt
} from "./chunk-7RAZQP6S.js";
import "./chunk-256XKGQW.js";
import "./chunk-4V237NE5.js";
import {
  E,
  e,
  o2 as o3
} from "./chunk-F3ZOBTPK.js";
import {
  t as t2
} from "./chunk-EZCH3ZAJ.js";
import {
  p,
  r as r4
} from "./chunk-3MXRSVIZ.js";
import {
  h as h3
} from "./chunk-YGTM4JUB.js";
import "./chunk-73FHIZIF.js";
import "./chunk-ICIPRMPO.js";
import "./chunk-2IVHP3HQ.js";
import {
  t
} from "./chunk-EHD5KM2T.js";
import "./chunk-G6LMYOSA.js";
import "./chunk-YNC2IEH2.js";
import {
  m as m2,
  p as p2
} from "./chunk-QJXYURT2.js";
import {
  a as a3
} from "./chunk-CGJUTDVJ.js";
import {
  M,
  b as b3,
  h,
  i,
  o,
  r as r3
} from "./chunk-D6FJTDNK.js";
import {
  h as h2
} from "./chunk-GYV5TPN6.js";
import {
  z
} from "./chunk-ZOEKS56J.js";
import "./chunk-IYJHGZBJ.js";
import {
  g
} from "./chunk-T6QS4ZNU.js";
import "./chunk-D3FSVA7H.js";
import "./chunk-6B4OMNPA.js";
import "./chunk-3GQ4PJDJ.js";
import {
  D,
  L,
  O,
  P as P2,
  R,
  U
} from "./chunk-KV3S4QI2.js";
import {
  a as a2
} from "./chunk-ECMDQ4LS.js";
import "./chunk-LP6TMAPE.js";
import "./chunk-RENLZYKC.js";
import "./chunk-HFPXZJAJ.js";
import "./chunk-VGE7RXNF.js";
import "./chunk-B3SR7LF7.js";
import "./chunk-2X7T37AY.js";
import "./chunk-XQH2QDB2.js";
import {
  d as d2
} from "./chunk-6Q7GN2CW.js";
import "./chunk-MYUZZ3A3.js";
import "./chunk-2IGXKE5P.js";
import "./chunk-JFI4ESYU.js";
import "./chunk-4X2UADDH.js";
import "./chunk-ZICJB3ML.js";
import "./chunk-AVBIV2K3.js";
import "./chunk-4NJWIUZG.js";
import "./chunk-TA32QX7Z.js";
import "./chunk-NYLBGE62.js";
import "./chunk-ECCHNTW6.js";
import "./chunk-WWNVF22O.js";
import "./chunk-K5RYAJV4.js";
import "./chunk-XGYM66XX.js";
import "./chunk-JOOGZSAP.js";
import "./chunk-J6GHQIZ2.js";
import {
  C,
  P,
  d
} from "./chunk-W6D3ECTZ.js";
import "./chunk-QXDQJEIU.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-SEUZ3J6J.js";
import "./chunk-BWTCR2DR.js";
import "./chunk-SMOTPOZ7.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import "./chunk-TSVUPARM.js";
import "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import {
  u
} from "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-RCLWOQNR.js";
import "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-SEG3PRUR.js";
import "./chunk-B6VE32RA.js";
import "./chunk-AIYFWM42.js";
import "./chunk-2M53HYNY.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-Q7TEBZSN.js";
import {
  j2 as j,
  w
} from "./chunk-FG3XOAFD.js";
import "./chunk-GN5RE63N.js";
import "./chunk-2WXAPZBK.js";
import "./chunk-E2I7HYXQ.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import "./chunk-CRH37WFF.js";
import "./chunk-YFGQMO6E.js";
import "./chunk-HAF6QJ32.js";
import {
  b2,
  m
} from "./chunk-H77COA2S.js";
import {
  a4 as a
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  b,
  k
} from "./chunk-GRW2QIBT.js";
import {
  n as n2,
  r as r2
} from "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import {
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterBitmap.js
var p5 = { bandCount: 3, outMin: 0, outMax: 1, minCutOff: [0, 0, 0], maxCutOff: [255, 255, 255], factor: [1 / 255, 1 / 255, 1 / 255], useGamma: false, gamma: [1, 1, 1], gammaCorrection: [1, 1, 1], colormap: null, colormapOffset: null, stretchType: "none", type: "stretch" };
var _2 = class extends e2 {
  constructor(e17 = null, t5 = null, s19 = null) {
    super(), this._textureInvalidated = true, this._colormapTextureInvalidated = true, this._rasterTexture = null, this._rasterTextureBandIds = null, this._transformGridTexture = null, this._colormapTexture = null, this._colormap = null, this._supportsBilinearTexture = true, this._processedTexture = null, this.functionTextures = [], this.projected = false, this.stencilRef = 0, this.coordScale = [1, 1], this._processed = false, this._symbolizerParameters = null, this.height = null, this.isRendereredSource = false, this.pixelRatio = 1, this.resolution = 0, this.rotation = 0, this._source = null, this.rawPixelData = null, this._suspended = false, this._bandIds = null, this._interpolation = null, this._transformGrid = null, this.width = null, this.x = 0, this.y = 0, this.source = e17, this.transformGrid = t5, this.interpolation = s19;
  }
  destroy() {
    this._disposeTextures();
  }
  get processedTexture() {
    return this._processedTexture;
  }
  set processedTexture(e17) {
    this._processedTexture !== e17 && (this._disposeTextures(true), this._processedTexture = e17);
  }
  get rasterTexture() {
    return this._rasterTexture;
  }
  set rasterTexture(e17) {
    var _a;
    this._rasterTexture !== e17 && ((_a = this._rasterTexture) == null ? void 0 : _a.dispose(), this._rasterTexture = e17), null == e17 && (this.projected = false);
  }
  get processed() {
    return this._processed;
  }
  set processed(t5) {
    this._processed = t5, t5 || (r2(this.processedTexture), this.invalidateTexture());
  }
  get symbolizerParameters() {
    return this._symbolizerParameters || p5;
  }
  set symbolizerParameters(e17) {
    this._symbolizerParameters !== e17 && (this._symbolizerParameters = e17, this._colormapTextureInvalidated = true, this.commonUniforms = null);
  }
  get source() {
    return this._source;
  }
  set source(e17) {
    this._source !== e17 && (this._source = e17, this._rasterTexture && (this._rasterTexture.dispose(), this._rasterTexture = null, this._rasterTextureBandIds = null), this.commonUniforms = null, this.projected = false, this.invalidateTexture());
  }
  get suspended() {
    return this._suspended;
  }
  set suspended(e17) {
    this._suspended && !e17 && this.stage && (this.ready(), this.requestRender()), this._suspended = e17;
  }
  get bandIds() {
    return this._bandIds;
  }
  set bandIds(e17) {
    this._bandIds = e17, this._isBandIdsChanged(e17) && (this.projected = false, this.invalidateTexture());
  }
  get interpolation() {
    return this._interpolation || "nearest";
  }
  set interpolation(e17) {
    this._interpolation = e17, this._rasterTexture && this._rasterTexture.setSamplingMode("bilinear" === this._getTextureSamplingMethod(e17 || "nearest") ? L.LINEAR : L.NEAREST);
  }
  get transformGrid() {
    return this._transformGrid;
  }
  set transformGrid(t5) {
    this._transformGrid !== t5 && (this._transformGrid = t5, this._transformGridTexture = r2(this._transformGridTexture));
  }
  invalidateTexture() {
    this._textureInvalidated || (this._textureInvalidated = true, this.requestRender());
  }
  getRasterTextureSize(e17 = false) {
    var _a, _b;
    const t5 = e17 || this.projected;
    return [t5 ? this.width : ((_a = this.source) == null ? void 0 : _a.width) || this.width, t5 ? this.height : ((_b = this.source) == null ? void 0 : _b.height) || this.height];
  }
  getRasterCellSize() {
    var _a;
    const e17 = (_a = this.rawPixelData) == null ? void 0 : _a.srcPixelSize, { projected: t5, resolution: s19 } = this;
    return e17 && !t5 ? [e17.x, e17.y] : [s19, s19];
  }
  _createTransforms() {
    return { displayViewScreenMat3: e() };
  }
  setTransform(e17) {
    const a24 = o(this.transforms.displayViewScreenMat3), [h6, n25] = e17.toScreenNoRotation([0, 0], [this.x, this.y]), l3 = this.resolution / this.pixelRatio / e17.resolution, d5 = l3 * this.width, c4 = l3 * this.height, p6 = Math.PI * this.rotation / 180;
    M(a24, a24, t(h6, n25)), M(a24, a24, t(d5 / 2, c4 / 2)), h(a24, a24, -p6), M(a24, a24, t(-d5 / 2, -c4 / 2)), b3(a24, a24, t(d5, c4)), i(this.transforms.displayViewScreenMat3, e17.displayViewMat3, a24);
  }
  getTextures({ forProcessing: e17 = false, useProcessedTexture: t5 = false } = {}) {
    const s19 = t5 ? this._processedTexture ?? this._rasterTexture : this._rasterTexture, r16 = [], i13 = [];
    return s19 ? (this._transformGridTexture && !this.projected && (i13.push(this._transformGridTexture), r16.push("u_transformGrid")), t5 ? (i13.push(s19), r16.push("u_image"), this._colormapTexture && (i13.push(this._colormapTexture), r16.push("u_colormap")), { names: r16, textures: i13 }) : (i13.push(s19), r16.push("u_image"), this._colormapTexture && !e17 && (i13.push(this._colormapTexture), r16.push("u_colormap")), { names: r16, textures: i13 })) : { names: r16, textures: i13 };
  }
  onAttach() {
    this.invalidateTexture();
  }
  onDetach() {
    this.invalidateTexture();
  }
  updateTexture({ context: e17 }) {
    if (!this.stage) return void this._disposeTextures();
    const t5 = this._isValidSource(this.source);
    t5 && this._colormapTextureInvalidated && (this._colormapTextureInvalidated = false, this._updateColormapTexture(e17)), this._textureInvalidated && (this._textureInvalidated = false, this._createOrDestroyRasterTexture(e17), this._rasterTexture && (t5 ? this.transformGrid && !this._transformGridTexture && (this._transformGridTexture = c(e17, this.transformGrid)) : this._rasterTexture.setData(null)), this.suspended || (this.ready(), this.requestRender()));
  }
  updateProcessedTexture() {
    const { functionTextures: e17 } = this;
    0 !== e17.length && (this.processedTexture = e17.shift(), e17.forEach((e18) => e18 == null ? void 0 : e18.dispose()), e17.length = 0);
  }
  _createOrDestroyRasterTexture(e17) {
    var _a;
    const t5 = (_a = this.source) == null ? void 0 : _a.extractBands(this.bandIds);
    if (!this._isValidSource(t5)) return void (this._rasterTexture && (this._rasterTexture.dispose(), this._rasterTextureBandIds = null, this._rasterTexture = null));
    const s19 = !this._isBandIdsChanged(this.bandIds);
    if (this._rasterTexture) {
      if (s19) return;
      this._rasterTexture.dispose(), this._rasterTextureBandIds = null, this._rasterTexture = null;
    }
    this._supportsBilinearTexture = !!e17.capabilities.textureFloatLinear;
    const r16 = this._getTextureSamplingMethod(this.interpolation), i13 = this.isRendereredSource;
    this._rasterTexture = f2(e17, t5, r16, i13), this.projected = false, this._processed = false, this._rasterTextureBandIds = this.bandIds ? [...this.bandIds] : null;
  }
  _isBandIdsChanged(e17) {
    const t5 = this._rasterTextureBandIds;
    return !(null == t5 && null == e17 || t5 && e17 && t5.join("") === e17.join(""));
  }
  _isValidSource(e17) {
    var _a;
    return null != e17 && ((_a = e17.pixels) == null ? void 0 : _a.length) > 0;
  }
  _getTextureSamplingMethod(e17) {
    const { type: t5 } = this.symbolizerParameters, s19 = "lut" === t5 && !this.symbolizerParameters.isClassBreaks || "hillshade" === t5 || "stretch" === t5 && 1 === this.symbolizerParameters.bandCount;
    return !this._supportsBilinearTexture || s19 || "bilinear" !== e17 && "cubic" !== e17 ? "nearest" : "bilinear";
  }
  _updateColormapTexture(e17) {
    const t5 = this._colormap, s19 = this.symbolizerParameters.colormap;
    return s19 ? t5 ? s19.length !== t5.length || s19.some((e18, s20) => e18 !== t5[s20]) ? (this._colormapTexture && (this._colormapTexture.dispose(), this._colormapTexture = null), this._colormapTexture = m3(e17, s19), void (this._colormap = s19)) : void 0 : (this._colormapTexture = m3(e17, s19), void (this._colormap = s19)) : (this._colormapTexture && (this._colormapTexture.dispose(), this._colormapTexture = null), void (this._colormap = null));
  }
  _disposeTextures(e17 = false) {
    !this._transformGridTexture || e17 && !this.projected || (this._transformGridTexture.dispose(), this._transformGridTexture = null), !e17 && this._colormapTexture && (this._colormapTexture.dispose(), this._colormapTexture = null, this._colormap = null, this._colormapTextureInvalidated = true), !e17 && this._rasterTexture && (this._rasterTexture.dispose(), this._rasterTexture = null, this._rasterTextureBandIds = null), this._processedTexture && (this._processedTexture.dispose(), this._processedTexture = null);
  }
};
function m4(e17) {
  return null != e17.source;
}

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/utils.js
function i6(i13) {
  const n25 = [];
  return i13 && (n25.push("applyProjection"), 1 === i13.spacing[0] && n25.push("lookupProjection")), n25;
}
function n4(i13, n25, e17) {
  const u5 = !e17.capabilities.textureFloatLinear, t5 = [];
  return "cubic" === i13 ? t5.push("bicubic") : "bilinear" === i13 && (n25 ? (t5.push("bilinear"), t5.push("nnedge")) : u5 && t5.push("bilinear")), t5;
}

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/lut.js
var s2 = { vsPath: "raster/common", fsPath: "raster/lut", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a6(t5, e17, o14) {
  const a24 = o14 ? [] : i6(e17.transformGrid);
  return { defines: a24, program: t5.painter.materialManager.getProgram(s2, a24) };
}
function n5(r16, s19, a24, n25, m8 = false) {
  const { names: i13, textures: c4 } = a24.getTextures({ useProcessedTexture: m8 });
  O2(r16.context, s19, i13, c4), h4(s19, n25, a24.commonUniforms), s19.setUniformMatrix3fv("u_dvsMat3", a24.transforms.displayViewScreenMat3);
  const { colormap: f3, colormapOffset: u5 } = a24.symbolizerParameters, l3 = _(f3, u5);
  h4(s19, n25, l3);
}
var m5 = { createProgram: a6, bindTextureAndUniforms: n5 };

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/shadedrelief.js
var n6 = { vsPath: "raster/common", fsPath: "raster/hillshade", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function i7(e17, o14, s19) {
  const { colormap: a24 } = o14.symbolizerParameters, i13 = [...s19 ? [] : i6(o14.transformGrid), ...n4(o14.interpolation, true, e17.context)];
  null != a24 && i13.push("applyColormap");
  return { defines: i13, program: e17.painter.materialManager.getProgram(n6, i13) };
}
function m6(r16, t5, n25, i13, m8 = false) {
  const { names: c4, textures: l3 } = n25.getTextures({ useProcessedTexture: m8 });
  O2(r16.context, t5, c4, l3), h4(t5, i13, n25.commonUniforms), t5.setUniformMatrix3fv("u_dvsMat3", n25.transforms.displayViewScreenMat3);
  const f3 = n25.symbolizerParameters, { colormap: p6, colormapOffset: u5 } = f3;
  if (null != p6) {
    const r17 = _(p6, u5);
    h4(t5, i13, r17);
  }
  const d5 = A(f3);
  h4(t5, i13, { ...d5, u_scaling: 1 });
}
var c2 = { createProgram: i7, bindTextureAndUniforms: m6 };

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/stretch.js
var n7 = { vsPath: "raster/common", fsPath: "raster/stretch", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function i8(e17, o14, s19) {
  const { colormap: a24, bandCount: i13 } = o14.symbolizerParameters, m8 = [...s19 ? [] : i6(o14.transformGrid), ...n4(o14.interpolation, 1 === i13, e17.context)];
  o14.isRendereredSource && !s19 ? m8.push("noop") : null != a24 && m8.push("applyColormap");
  return { defines: m8, program: e17.painter.materialManager.getProgram(n7, m8) };
}
function m7(r16, t5, n25, i13, m8 = false) {
  const { names: c4, textures: l3 } = n25.getTextures({ useProcessedTexture: m8 });
  O2(r16.context, t5, c4, l3), h4(t5, i13, n25.commonUniforms), t5.setUniformMatrix3fv("u_dvsMat3", n25.transforms.displayViewScreenMat3);
  const p6 = n25.symbolizerParameters, { colormap: u5, colormapOffset: f3 } = p6;
  if (null != u5) {
    const r17 = _(u5, f3);
    h4(t5, i13, r17);
  }
  const d5 = p4(p6);
  h4(t5, i13, d5);
}
var c3 = { createProgram: i8, bindTextureAndUniforms: m7 };

// node_modules/@arcgis/core/views/2d/engine/imagery/colorizer/rasterColorizer.js
var s3 = /* @__PURE__ */ new Map();
function o4(t5) {
  return s3.get(t5);
}
s3.set("lut", m5), s3.set("hillshade", c2), s3.set("stretch", c3);

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/utils.js
var n8 = [1, 1];
var a7 = [2, 0, 0, 0, 2, 0, -1, -1, 0];
function s4(n25, a24, s19, r16) {
  const { context: i13, rasterFunction: o14, hasBranches: f3 } = n25, { raster: u5 } = o14.parameters, m8 = f3 ? (u5 == null ? void 0 : u5.id) ?? -1 : 0, c4 = [s19.functionTextures[m8] ?? s19.rasterTexture], l3 = ["u_image"];
  if (r16) {
    const e17 = m3(i13, r16);
    s19.functionTextures[100] = e17, c4.push(e17), l3.push("u_colormap");
  }
  O2(i13, a24, l3, c4);
}
function r6(t5, n25, a24) {
  const { rasters: r16 } = t5.rasterFunction.parameters;
  if (!r16) return;
  if (r16.length < 2) return s4(t5, n25, a24);
  const i13 = r16.filter((t6) => "Constant" !== t6.name).map((t6) => null != t6.id && "Identity" !== t6.name ? a24.functionTextures[t6.id] : a24.rasterTexture);
  if (O2(t5.context, n25, ["u_image", "u_image1", "u_image2"].slice(0, i13.length), i13), i13.length !== r16.length) {
    if (2 === r16.length) {
      const t6 = r16.findIndex((t7) => "Constant" === t7.name), e17 = 0 === t6 ? [0, 1, 0, 1, 0, 0, 0, 0, 0] : [1, 0, 0, 0, 1, 0, 0, 0, 0], { value: a25 } = r16[t6].parameters;
      n25.setUniform1f("u_image1Const", a25), n25.setUniformMatrix3fv("u_imageSwap", e17);
    } else if (3 === r16.length) {
      const t6 = [];
      if (r16.forEach((e17, n26) => "Constant" === e17.name && t6.push(n26)), 1 === t6.length) {
        const { value: e17 } = r16[t6[0]].parameters;
        n25.setUniform1f("u_image1Const", e17);
        const a25 = 0 === t6[0] ? [0, 1, 0, 0, 0, 1, 1, 0, 0] : 1 === t6[0] ? [1, 0, 0, 0, 0, 1, 0, 1, 0] : [1, 0, 0, 0, 1, 0, 0, 0, 1];
        n25.setUniformMatrix3fv("u_imageSwap", a25);
      } else if (2 === t6.length) {
        const { value: e17 } = r16[t6[0]].parameters;
        n25.setUniform1f("u_image1Const", e17);
        const { value: a25 } = r16[t6[1]].parameters;
        n25.setUniform1f("u_image2Const", a25);
        const s19 = r16.findIndex((t7) => "Constant" !== t7.name), i14 = 0 === s19 ? [1, 0, 0, 0, 1, 0, 0, 0, 1] : 1 === s19 ? [0, 1, 0, 1, 0, 0, 0, 0, 1] : [0, 0, 1, 1, 0, 0, 0, 1, 0];
        n25.setUniformMatrix3fv("u_imageSwap", i14);
      }
    }
  }
}
function i9(t5) {
  t5.setUniform2fv("u_coordScale", n8), t5.setUniformMatrix3fv("u_dvsMat3", a7);
}

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/aspectProcessor.js
var r7 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/aspect", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a8(t5, e17) {
  return t5.painter.materialManager.getProgram(r7, []);
}
function s5(r16, a24, s19) {
  s4(r16, a24, s19), i9(a24);
  const n25 = s19.getRasterTextureSize();
  a24.setUniform2fv("u_srcImageSize", n25);
  const o14 = s19.getRasterCellSize();
  a24.setUniform2fv("u_cellSize", o14);
}
var n9 = { createProgram: a8, bindTextureAndUniforms: s5 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/bandArithmeticProcessor.js
var a9 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/bandarithmetic", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e3(t5, r16) {
  const { painter: e17, rasterFunction: n25 } = t5, { indexType: s19, isOutputRounded: o14 } = n25.parameters, i13 = [s19];
  return o14 && i13.push("roundOutput"), e17.materialManager.getProgram(a9, i13);
}
function n10(a24, e17, n25) {
  s4(a24, e17, n25), i9(e17);
  const { bandIndexMat3: s19, adjustments: o14 } = a24.rasterFunction.parameters;
  e17.setUniformMatrix3fv("u_bandIndexMat3", s19), e17.setUniform1fv("u_adjustments", o14);
}
var s6 = { createProgram: e3, bindTextureAndUniforms: n10 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/colormapToRGBProcessor.js
var o5 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/colormap2rgb", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e4(r16) {
  const { painter: t5 } = r16;
  return t5.materialManager.getProgram(o5, []);
}
function a10(o14, e17, a24) {
  const { indexedColormap: n25, offset: s19 } = o14.rasterFunction.parameters;
  s4(o14, e17, a24, n25), i9(e17), e17.setUniform1f("u_colormapOffset", s19), e17.setUniform1f("u_colormapMaxIndex", n25.length / 4 - 1);
}
var n11 = { createProgram: e4, bindTextureAndUniforms: a10 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/compositeBandProcessor.js
var n12 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/compositeband", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a11(t5, r16) {
  const a24 = t5.rasterFunction.parameters.rasters.filter((t6) => "Constant" === t6.name), e17 = [];
  return a24.length && (e17.push("oneConstant"), 2 === a24.length && e17.push("twoConstant")), t5.painter.materialManager.getProgram(n12, e17);
}
function e5(n25, a24, e17) {
  r6(n25, a24, e17), i9(a24);
}
var s7 = { createProgram: a11, bindTextureAndUniforms: e5 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/computeChangeProcessor.js
var n13 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/computechange", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function r8(t5) {
  const { painter: e17, rasterFunction: r16 } = t5, { method: a24, rasters: s19, isOutputRounded: o14 } = r16.parameters, i13 = [a24.includes("-") ? a24.slice(0, a24.indexOf("-")) : a24];
  return s19.filter((t6) => "Constant" === t6.name).length && i13.push("oneConstant"), o14 && i13.push("roundOutput"), e17.materialManager.getProgram(n13, i13);
}
function a12(n25, r16, a24) {
  r6(n25, r16, a24), i9(r16);
  const { domainRange: s19 } = n25.rasterFunction.parameters;
  r16.setUniform2fv("u_domainRange", s19);
}
var s8 = { createProgram: r8, bindTextureAndUniforms: a12 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/contrastProcessor.js
var s9 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/contrast", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e6(t5, r16) {
  return t5.painter.materialManager.getProgram(s9, []);
}
function a13(s19, e17, a24) {
  s4(s19, e17, a24), i9(e17);
  const { contrastOffset: n25, brightnessOffset: o14 } = s19.rasterFunction.parameters;
  e17.setUniform1f("u_contrastOffset", n25), e17.setUniform1f("u_brightnessOffset", o14);
}
var n14 = { createProgram: e6, bindTextureAndUniforms: a13 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/convolutionProcessor.js
var t4 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/convolution", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a14(e17, r16) {
  const { painter: a24, rasterFunction: n25 } = e17, { kernelRows: o14, kernelCols: s19 } = n25.parameters, i13 = [{ name: "rows", value: o14 }, { name: "cols", value: s19 }];
  return a24.materialManager.getProgram(t4, i13);
}
function n15(t5, a24, n25) {
  s4(t5, a24, n25), i9(a24), a24.setUniform2fv("u_srcImageSize", [n25.width, n25.height]);
  const { kernel: o14, clampRange: s19 } = t5.rasterFunction.parameters;
  a24.setUniform1fv("u_kernel", o14), a24.setUniform2fv("u_clampRange", s19);
}
var o6 = { createProgram: a14, bindTextureAndUniforms: n15 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/curvatureProcessor.js
var e7 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/curvature", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function a15(r16, t5) {
  const { painter: a24, rasterFunction: s19 } = r16, { curvatureType: n25 } = s19.parameters, o14 = [n25];
  return a24.materialManager.getProgram(e7, o14);
}
function s10(e17, a24, s19) {
  s4(e17, a24, s19), i9(a24);
  const n25 = s19.getRasterTextureSize();
  a24.setUniform2fv("u_srcImageSize", n25);
  const { zFactor: o14 } = e17.rasterFunction.parameters, i13 = s19.getRasterCellSize();
  a24.setUniform1f("u_zlFactor", 200 * o14 / i13[0] / i13[1]);
}
var n16 = { createProgram: a15, bindTextureAndUniforms: s10 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/extractBandProcessor.js
var a16 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/extractband", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e8(t5, r16) {
  return t5.painter.materialManager.getProgram(a16, []);
}
function n17(a24, e17, n25) {
  s4(a24, e17, n25), i9(e17);
  const { bandIndexMat3: o14 } = a24.rasterFunction.parameters;
  e17.setUniformMatrix3fv("u_bandIndexMat3", o14);
}
var o7 = { createProgram: e8, bindTextureAndUniforms: n17 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/focalStatisticsProcessor.js
var e9 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/focalstatistics", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function r9(t5, a24) {
  const { painter: r16, rasterFunction: s19 } = t5, { kernelRows: n25, kernelCols: o14, fillNoDataOnly: i13, statisticsType: c4 } = s19.parameters, l3 = [{ name: "rows", value: n25 }, { name: "cols", value: o14 }, c4];
  return i13 && l3.push("fill"), r16.materialManager.getProgram(e9, l3);
}
function s11(e17, r16, s19) {
  s4(e17, r16, s19), i9(r16), r16.setUniform2fv("u_srcImageSize", [s19.width, s19.height]);
  const { clampRange: n25 } = e17.rasterFunction.parameters;
  r16.setUniform2fv("u_clampRange", n25);
}
var n18 = { createProgram: r9, bindTextureAndUniforms: s11 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/grayscaleProcessor.js
var a17 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/grayscale", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e10(t5, r16) {
  return t5.painter.materialManager.getProgram(a17, []);
}
function s12(a24, e17, s19) {
  s4(a24, e17, s19), i9(e17);
  const { weights: n25 } = a24.rasterFunction.parameters;
  e17.setUniform3fv("u_weights", n25);
}
var n19 = { createProgram: e10, bindTextureAndUniforms: s12 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/hillshadeProcessor.js
var s13 = { vsPath: "raster/rfx/vs", fsPath: "raster/hillshade", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function r10(e17, t5) {
  const { indexedColormap: r16 } = e17.rasterFunction.parameters, o14 = [];
  return (r16 == null ? void 0 : r16.length) && o14.push("applyColormap"), e17.painter.materialManager.getProgram(s13, o14);
}
function o8(s19, r16, o14) {
  const i13 = s19.rasterFunction.parameters, { indexedColormap: n25 } = i13;
  s4(s19, r16, o14, n25), i9(r16);
  const a24 = o14.getRasterTextureSize();
  r16.setUniform2fv("u_srcImageSize", a24);
  const f3 = o14.getRasterCellSize();
  r16.setUniform2fv("u_cellSize", f3);
  const { pixelSizeFactor: m8 } = i13;
  if (0 === m8) r16.setUniform2fv("u_factor", [i13.factor[0] / f3[0], i13.factor[1] / f3[1]]);
  else {
    const { zFactor: e17, pixelSizePower: t5, gcsFactor: s20 } = i13, o15 = f3[0] * s20, n26 = f3[1] * s20, a25 = (e17 + o15 ** t5 * m8) / (8 * o15), c4 = (e17 + n26 ** t5 * m8) / (8 * n26);
    r16.setUniform2fv("u_factor", [a25, c4]);
  }
  r16.setUniform1i("u_hillshadeType", i13.hillshadeType), r16.setUniform1fv("u_sinZcosAs", i13.sinZcosAs), r16.setUniform1fv("u_sinZsinAs", i13.sinZsinAs), r16.setUniform1fv("u_cosZs", i13.cosZs), r16.setUniform1fv("u_weights", i13.weights), r16.setUniform1f("u_opacity", 1), r16.setUniform1i("u_flipY", 0), r16.setUniform1f("u_scaling", 255), r16.setUniform1f("u_minValue", i13.minValue), r16.setUniform1f("u_maxValue", i13.maxValue), n25 && (r16.setUniform1f("u_colormapOffset", i13.offset), r16.setUniform1f("u_colormapMaxIndex", n25.length / 4 - 1));
}
var i10 = { createProgram: r10, bindTextureAndUniforms: o8 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/localProcessor.js
var a18 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/local", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e11(t5) {
  const { painter: n25, rasterFunction: e17 } = t5, { imageCount: r16, operationName: o14, rasters: s19, isOutputRounded: u5 } = e17.parameters, i13 = [o14.toLowerCase()];
  2 === r16 && i13.push("twoImages");
  const m8 = s19.filter((t6) => "Constant" === t6.name);
  return m8.length && (i13.push("oneConstant"), 2 === m8.length && i13.push("twoConstant")), u5 && i13.push("roundOutput"), n25.materialManager.getProgram(a18, i13);
}
function r11(a24, e17, r16) {
  r6(a24, e17, r16), i9(e17);
  const { domainRange: o14 } = a24.rasterFunction.parameters;
  e17.setUniform2fv("u_domainRange", o14);
}
var o9 = { createProgram: e11, bindTextureAndUniforms: r11 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/maskProcessor.js
var r12 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/mask", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function n20(t5, a24) {
  const { painter: n25, rasterFunction: e17 } = t5, s19 = e17.parameters.bandCount > 1 ? ["multiBand"] : [];
  return n25.materialManager.getProgram(r12, s19);
}
function e12(r16, n25, e17) {
  s4(r16, n25, e17), i9(n25);
  const { includedRanges: s19, noDataValues: o14 } = r16.rasterFunction.parameters;
  n25.setUniform1fv("u_includedRanges", s19), n25.setUniform1fv("u_noDataValues", o14);
}
var s14 = { createProgram: n20, bindTextureAndUniforms: e12 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/ndviProcessor.js
var a19 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/ndvi", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e13(t5, r16) {
  const { painter: e17, rasterFunction: n25 } = t5, s19 = n25.parameters.scaled ? ["scaled"] : [];
  return e17.materialManager.getProgram(a19, s19);
}
function n21(a24, e17, n25) {
  s4(a24, e17, n25), i9(e17);
  const { bandIndexMat3: s19 } = a24.rasterFunction.parameters;
  e17.setUniformMatrix3fv("u_bandIndexMat3", s19);
}
var s15 = { createProgram: e13, bindTextureAndUniforms: n21 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/remapProcessor.js
var r13 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/remap", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function e14(a24, t5) {
  return a24.painter.materialManager.getProgram(r13, []);
}
function n22(r16, e17, n25) {
  s4(r16, e17, n25), i9(e17);
  const { noDataRanges: s19, rangeMaps: o14, allowUnmatched: f3, clampRange: i13 } = r16.rasterFunction.parameters;
  e17.setUniform1fv("u_noDataRanges", s19), e17.setUniform1fv("u_rangeMaps", o14), e17.setUniform1f("u_unmatchMask", f3 ? 1 : 0), e17.setUniform2fv("u_clampRange", i13);
}
var s16 = { createProgram: e14, bindTextureAndUniforms: n22 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/reprojectProcessor.js
var e15 = { vsPath: "raster/common", fsPath: "raster/reproject", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function i11(r16, t5) {
  var _a;
  const { painter: i13 } = r16, o14 = [], { interpolation: s19, transformGrid: n25 } = t5, a24 = (_a = r16.rasterFunction) == null ? void 0 : _a.parameters;
  return "cubic" === s19 ? o14.push("bicubic") : "bilinear" === s19 && (o14.push("bilinear"), (a24 == null ? void 0 : a24.requireNNEdge) && o14.push("nnedge")), n25 && (o14.push("applyProjection"), 1 === n25.spacing[0] && o14.push("lookupProjection")), i13.materialManager.getProgram(e15, o14);
}
function o10(e17, i13, o14) {
  const { names: s19, textures: n25 } = o14.getTextures({ forProcessing: true });
  O2(e17.context, i13, s19, n25), i13.setUniform1f("u_scale", 1), i13.setUniform2fv("u_offset", [0, 0]), i13.setUniform2fv("u_coordScale", [1, 1]), i13.setUniformMatrix3fv("u_dvsMat3", [2, 0, 0, 0, 2, 0, -1, -1, 0]), i13.setUniform1i("u_flipY", 0), i13.setUniform1f("u_opacity", 1);
  const { width: a24, height: f3, source: c4, transformGrid: m8 } = o14;
  i13.setUniform2fv("u_srcImageSize", [c4.width, c4.height]), i13.setUniform2fv("u_targetImageSize", [a24, f3]), i13.setUniform2fv("u_transformSpacing", m8 ? m8.spacing : a2), i13.setUniform2fv("u_transformGridSize", m8 ? m8.size : a2);
}
var s17 = { createProgram: i11, bindTextureAndUniforms: o10 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/slopeProcessor.js
var r14 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/slope", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function s18(e17, t5) {
  const { painter: s19, rasterFunction: o14 } = e17, { slopeType: a24, isOutputRounded: i13 } = o14.parameters, n25 = [];
  return "percent-rise" === a24 && n25.push("percentRise"), i13 && n25.push("roundOutput"), s19.materialManager.getProgram(r14, n25);
}
function o11(r16, s19, o14) {
  s4(r16, s19, o14), i9(s19);
  const a24 = o14.getRasterTextureSize();
  s19.setUniform2fv("u_srcImageSize", a24);
  const i13 = o14.getRasterCellSize();
  s19.setUniform2fv("u_cellSize", i13);
  const { zFactor: n25, slopeType: u5, pixelSizePower: p6, pixelSizeFactor: c4 } = r16.rasterFunction.parameters;
  s19.setUniform1f("u_zFactor", n25), s19.setUniform1f("u_pixelSizePower", "adjusted" === u5 ? p6 : 0), s19.setUniform1f("u_pixelSizeFactor", "adjusted" === u5 ? c4 : 0);
}
var a20 = { createProgram: s18, bindTextureAndUniforms: o11 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/stretchProcessor.js
var a21 = { vsPath: "raster/rfx/vs", fsPath: "raster/rfx/stretch", attributes: /* @__PURE__ */ new Map([["a_position", 0], ["a_texcoord", 1]]) };
function u3(t5, r16) {
  const { useGamma: u5, bandCount: e17, isOutputRounded: n25 } = t5.rasterFunction.parameters, o14 = [];
  return u5 && o14.push("useGamma"), e17 > 1 && o14.push("multiBand"), n25 && o14.push("roundOutput"), t5.painter.materialManager.getProgram(a21, o14);
}
function e16(a24, u5, e17) {
  s4(a24, u5, e17), i9(u5);
  const { width: n25, height: o14 } = e17, m8 = a24.rasterFunction.parameters;
  u5.setUniform2fv("u_srcImageSize", [n25, o14]), u5.setUniform1f("u_minOutput", m8.outMin), u5.setUniform1f("u_maxOutput", m8.outMax), u5.setUniform1fv("u_factor", m8.factor), u5.setUniform1fv("u_minCutOff", m8.minCutOff), u5.setUniform1fv("u_maxCutOff", m8.maxCutOff), u5.setUniform1fv("u_gamma", m8.gamma), u5.setUniform1fv("u_gammaCorrection", m8.gammaCorrection);
}
var n23 = { createProgram: u3, bindTextureAndUniforms: e16 };

// node_modules/@arcgis/core/views/2d/engine/imagery/processor/rasterProcessor.js
var F = /* @__PURE__ */ new Map();
function R2(r16, e17) {
  const o14 = new p2();
  return o14.width = r16, o14.height = e17, o14.internalFormat = P2.RGBA32F, o14.samplingMode = L.NEAREST, o14.dataType = U.FLOAT, o14.isImmutable = true, o14.wrapMode = D.CLAMP_TO_EDGE, o14;
}
function y2(r16, e17, o14, t5) {
  const { context: s19, requestRender: c4, allowDelayedRender: i13 } = r16, n25 = t5.createProgram(r16, o14);
  return i13 && null != c4 && !n25.compiled ? (c4(), null) : (s19.bindFramebuffer(e17), s19.setViewport(0, 0, e17.width, e17.height), s19.useProgram(n25), n25);
}
function B(r16) {
  return F.get(r16.toLowerCase());
}
function C2(r16, e17, o14, t5) {
  const s19 = r16.rasterFunction.name.toLowerCase(), c4 = "reproject" === s19 ? s17 : B(s19);
  if (null == c4) return;
  const i13 = y2(r16, o14, t5, c4);
  if (!i13) return;
  c4.bindTextureAndUniforms(r16, i13, t5);
  const { interpolation: n25 } = t5;
  "reproject" === s19 && (t5.interpolation = "nearest"), e17.draw();
  const [m8, a24] = t5.getRasterTextureSize("reproject" === s19), p6 = R2(m8, a24), l3 = new m2(r16.context, p6);
  if (o14.copyToTexture(0, 0, m8, a24, 0, 0, l3), "reproject" === s19) t5.rasterTexture = l3, t5.projected = true, t5.interpolation = n25;
  else {
    const e18 = r16.hasBranches ? r16.rasterFunction.id : 0;
    t5.functionTextures[e18] = l3;
  }
}
F.set("arithmetic", o9), F.set("aspect", n9), F.set("bandarithmetic", s6), F.set("colormaptorgb", n11), F.set("computechange", s8), F.set("compositeband", s7), F.set("convolution", o6), F.set("contrastbrightness", n14), F.set("curvature", n16), F.set("extractband", o7), F.set("statistics", n18), F.set("grayscale", n19), F.set("hillshade", i10), F.set("shadedrelief", i10), F.set("local", o9), F.set("mask", s14), F.set("ndvi", s15), F.set("remap", s16), F.set("slope", a20), F.set("stretch", n23);

// node_modules/@arcgis/core/views/2d/engine/imagery/BrushRasterBitmap.js
var h5 = class extends t3 {
  constructor() {
    super(...arguments), this.name = "raster", this._quad = null, this._rendererUniformInfos = /* @__PURE__ */ new Map(), this._fbo = null;
  }
  dispose() {
    r2(this._quad), r2(this._fbo);
  }
  prepareState(e17) {
    const { context: t5, renderPass: r16 } = e17, s19 = "raster" === r16;
    t5.setBlendingEnabled(!s19), t5.setBlendFunctionSeparate(R.ONE, R.ONE_MINUS_SRC_ALPHA, R.ONE, R.ONE_MINUS_SRC_ALPHA), t5.setColorMask(true, true, true, true), t5.setStencilWriteMask(0), t5.setStencilTestEnabled(!s19);
  }
  draw(e17, r16) {
    if (!m4(r16) || r16.suspended) return;
    const { renderPass: s19 } = e17;
    if ("raster-bitmap" !== s19) return "raster" === s19 ? this._process(e17, r16) : void this._drawBitmap(e17, r16, true);
    this._drawBitmap(e17, r16);
  }
  _process(t5, r16) {
    const { rasterFunction: i13 } = t5, o14 = "Reproject" === i13.name;
    if (!(o14 ? !(r16.rasterTexture && r16.projected) : !r16.processed)) return;
    const { timeline: n25, context: a24 } = t5;
    n25.begin(this.name);
    const d5 = a24.getBoundFramebufferObject(), c4 = a24.getViewport();
    o14 || (r16.processedTexture = r2(r16.processedTexture)), a24.setStencilFunction(O.EQUAL, r16.stencilRef, 255), r16.updateTexture(t5), this._initQuad(a24);
    const [f3, u5] = r16.getRasterTextureSize(o14), { isStandardRasterTileSize: p6, fbo: h6 } = this._getRasterFBO(a24, f3, u5);
    C2(t5, this._quad, h6, r16), p6 || h6.dispose(), a24.bindFramebuffer(d5), a24.setViewport(c4.x, c4.y, c4.width, c4.height), n25.end(this.name);
  }
  _drawBitmap(e17, t5, s19 = false) {
    const { timeline: i13, context: o14 } = e17;
    if (i13.begin(this.name), o14.setStencilFunction(O.EQUAL, t5.stencilRef, 255), t5.updateTexture(e17), s19 && !t5.processedTexture) {
      if (t5.updateProcessedTexture(), !t5.processedTexture) return void i13.end(this.name);
      t5.processed = true;
    }
    this._initBitmapCommonUniforms(t5);
    const a24 = t5.symbolizerParameters.type, d5 = o4(a24), { requestRender: c4, allowDelayedRender: f3 } = e17, { defines: u5, program: p6 } = d5.createProgram(e17, t5, t5.projected && s19);
    if (f3 && null != c4 && !p6.compiled) return void c4();
    o14.useProgram(p6);
    const h6 = this._getUniformInfos(a24, o14, p6, u5);
    this._quad || (this._quad = new n3(o14, [0, 0, 1, 0, 0, 1, 1, 1])), d5.bindTextureAndUniforms(e17, p6, t5, h6, s19), this._quad.draw(), i13.end(this.name);
  }
  _initBitmapCommonUniforms(e17) {
    if (!e17.commonUniforms) {
      const t5 = g4(1, [0, 0]), { transformGrid: r16, width: s19, height: i13 } = e17, o14 = l(r16, [s19, i13], [e17.source.width, e17.source.height], 1, false);
      e17.commonUniforms = { ...t5, ...o14, u_coordScale: e17.coordScale };
    }
  }
  _getRasterFBO(e17, t5, r16) {
    const s19 = t5 === a3 && r16 === a3;
    return s19 ? (this._fbo || (this._fbo = this._createNewFBO(e17, t5, r16)), { isStandardRasterTileSize: s19, fbo: this._fbo }) : { isStandardRasterTileSize: s19, fbo: this._createNewFBO(e17, t5, r16) };
  }
  _createNewFBO(e17, t5, r16) {
    const s19 = R2(t5, r16);
    return new x(e17, s19);
  }
  _initQuad(e17) {
    this._quad || (this._quad = new n3(e17, [0, 0, 1, 0, 0, 1, 1, 1]));
  }
  _getUniformInfos(e17, t5, r16, s19) {
    const i13 = s19.length > 0 ? e17 + "-" + s19.join("-") : e17;
    if (this._rendererUniformInfos.has(i13)) return this._rendererUniformInfos.get(i13);
    const o14 = T(t5, r16);
    return this._rendererUniformInfos.set(i13, o14), o14;
  }
};

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterTile.js
var i12 = class extends r5 {
  constructor(t5, e17, i13, a24, r16, l3, n25 = null) {
    super(t5, e17, i13, a24, r16, l3), this.bitmap = null, this.bitmap = new _2(n25, null, null), this.bitmap.coordScale = [r16, l3], this.bitmap.once("isReady", () => this.ready());
  }
  destroy() {
    super.destroy(), this.bitmap.destroy(), this.bitmap = null, this.stage = null;
  }
  set stencilRef(t5) {
    this.bitmap.stencilRef = t5;
  }
  get stencilRef() {
    return this.bitmap.stencilRef;
  }
  setTransform(t5) {
    super.setTransform(t5), this.bitmap.transforms.displayViewScreenMat3 = this.transforms.displayViewScreenMat3;
  }
  _createTransforms() {
    return { displayViewScreenMat3: e(), tileMat3: e() };
  }
  onAttach() {
    this.bitmap.stage = this.stage;
  }
  onDetach() {
    this.bitmap.stage = null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterTileContainer.js
var o12 = class extends i3 {
  constructor() {
    super(...arguments), this.isCustomTilingScheme = false;
  }
  createTile(e17) {
    const r16 = this._getTileBounds(e17), [s19, i13] = this.tileInfoView.tileInfo.size, n25 = this.tileInfoView.getTileResolution(e17.level);
    return new i12(e17, n25, r16[0], r16[3], s19, i13);
  }
  prepareRenderPasses(e17) {
    const r16 = e17.registerRenderPass({ name: "imagery (tile)", brushes: [h5], target: () => this.children.map((e18) => e18.bitmap), drawPhase: E.MAP });
    return [...super.prepareRenderPasses(e17), r16];
  }
  doRender(e17) {
    if (!this.visible || e17.drawPhase !== E.MAP) return;
    const { rasterFunctionChain: r16 } = this;
    if (!r16) return e17.renderPass = "raster-bitmap", void super.doRender(e17);
    if (!r16.hasFocalFunction) {
      const [s19, t5] = this.tileInfoView.tileInfo.size;
      e17.renderPass = "raster", e17.rasterFunction = { name: "Reproject", parameters: { targetImageSize: [s19, t5], requireNNEdge: r16.isSourceSingleBand }, pixelType: "f32", id: 0, isNoopProcess: false }, super.doRender(e17);
    }
    if (r16 == null ? void 0 : r16.functions.length) {
      const { functions: s19, hasBranches: t5 } = r16;
      for (let r17 = 0; r17 < s19.length; r17++) {
        const i13 = s19[r17];
        "Constant" !== i13.name && "Identity" !== i13.name && (e17.renderPass = "raster", e17.rasterFunction = i13, e17.hasBranches = t5, super.doRender(e17));
      }
    }
    e17.rasterFunction = null, e17.renderPass = "bitmap", super.doRender(e17);
  }
  _getTileBounds(s19) {
    const t5 = this.tileInfoView.getTileBounds(u(), s19);
    if (this.isCustomTilingScheme && s19.world) {
      const { tileInfo: e17 } = this.tileInfoView, i13 = mt(e17.spatialReference);
      if (i13) {
        const r16 = e17.lodAt(s19.level);
        if (!r16) return t5;
        const { resolution: n25 } = r16, o14 = n25 * e17.size[0];
        t5[0] = i13 * s19.world + e17.origin.x + s19.col * o14, t5[2] = t5[0] + o14;
      }
    }
    return t5;
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/BaseImageryTileSubView2D.js
var S2 = [0, 0];
var v = class extends b2 {
  constructor() {
    super(...arguments), this._updatingHandles = new h2(), this._emptyTilePixelBlock = null, this._tileStrategy = null, this._tileInfoView = null, this._fetchQueue = null, this._blockCacheRegistryUrl = null, this._blockCacheRegistryId = null, this._srcResolutions = [], this.previousLOD = null, this._needBlockCacheUpdate = false, this._globalSymbolizerParams = null, this._symbolizerParams = null, this._abortController = null, this._isCustomTilingScheme = false, this._maxIndexedColormapSize = 0, this._rasterFunctionState = "na", this._globalUpdateRequested = false, this.attached = false, this.timeExtent = null, this.redrawOrRefetch = k(async (e17 = {}) => {
      const t5 = this._rasterFunctionState;
      if (e17.reprocess && (await this._updatingHandles.addPromise(this.layer.updateRasterFunction()), this.updateRasterFunctionParameters()), !this.previousLOD || this.layerView.suspended) return;
      const i13 = this._rasterFunctionState, { type: s19 } = this;
      return e17.refetch || "raster" !== s19 && !!e17.reprocess || "cpu" === i13 || "cpu" === t5 ? this._updatingHandles.addPromise(this.doRefresh()) : this._updatingHandles.addPromise(this._redrawImage(e17.signal));
    });
  }
  destroy() {
    this._updatingHandles.destroy();
  }
  get useWebGLForProcessing() {
    return this._get("useWebGLForProcessing") ?? true;
  }
  set useWebGLForProcessing(e17) {
    this._set("useWebGLForProcessing", e17);
  }
  get useProgressiveUpdate() {
    return this._get("useProgressiveUpdate") ?? true;
  }
  set useProgressiveUpdate(e17) {
    if (this._tileStrategy && this.useProgressiveUpdate !== e17) {
      this._tileStrategy.destroy(), this.container.removeAllChildren();
      const t5 = this._getCacheSize(e17);
      this._tileStrategy = new r4({ cachePolicy: "purge", acquireTile: (e18) => this.acquireTile(e18), releaseTile: (e18) => this.releaseTile(e18), cacheSize: t5, tileInfoView: this._tileInfoView }), this._set("useProgressiveUpdate", e17), this.layerView.requestUpdate();
    }
  }
  update(e17) {
    var _a;
    this._fetchQueue.pause(), this._fetchQueue.state = e17.state, this._tileStrategy.update(e17), this._fetchQueue.resume();
    const { extent: t5, resolution: i13, scale: s19 } = e17.state, r16 = this._tileInfoView.getClosestInfoForScale(s19);
    if (this.layer.raster) {
      if (!this.useProgressiveUpdate || this._needBlockCacheUpdate) {
        const e18 = this._srcResolutions[r16.level], s20 = t5.toJSON ? t5 : w.fromJSON(t5);
        g3(this._blockCacheRegistryUrl, this._blockCacheRegistryId, s20, i13, e18, this.layer.raster.ioConfig.sampling);
      }
      this._needBlockCacheUpdate = false, ((_a = this.previousLOD) == null ? void 0 : _a.level) !== r16.level && (this.previousLOD = r16, null == this._symbolizerParams || this.layerView.hasTilingEffects || this._updateSymbolizerParams(), this._tileStrategy.updateCacheSize(0));
    }
  }
  moveEnd() {
    !this.layerView.hasTilingEffects && this.useProgressiveUpdate || (this._abortController && this._abortController.abort(), this._abortController = new AbortController(), 0 === this._fetchQueue.length && this._redrawImage(this._abortController.signal).then(() => {
      this._globalUpdateRequested = false, this.layerView.requestUpdate();
    }));
    const e17 = this._getCacheSize(this.useProgressiveUpdate);
    this._tileStrategy.updateCacheSize(e17), this.layerView.requestUpdate();
  }
  get updating() {
    var _a;
    return this._globalUpdateRequested || ((_a = this._updatingHandles) == null ? void 0 : _a.updating);
  }
  attach() {
    const e17 = t2();
    this._maxIndexedColormapSize = 4 * (e17.maxTextureSize || 4096), this._initializeTileInfo(), this._tileInfoView = new h3(this.layerView.tileInfo, this.layerView.fullExtent);
    const t5 = this._computeFetchConcurrency();
    this._fetchQueue = new p({ tileInfoView: this._tileInfoView, concurrency: t5, process: (e18, t6) => this._fetchTile(e18, t6), priority: g.MAPVIEW_FETCH_QUEUE, scheduler: this.scheduler });
    const i13 = this._getCacheSize(this.useProgressiveUpdate);
    this._tileStrategy = new r4({ cachePolicy: "purge", acquireTile: (e18) => this.acquireTile(e18), releaseTile: (e18) => this.releaseTile(e18), cacheSize: i13, tileInfoView: this._tileInfoView }), this._updateBlockCacheRegistry();
  }
  detach() {
    this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), this._fetchQueue = this._tileStrategy = this._tileInfoView = null, a4(this._blockCacheRegistryUrl, this._blockCacheRegistryId), this._blockCacheRegistryUrl = this._blockCacheRegistryId = null;
  }
  acquireTile(e17) {
    const t5 = this.container.createTile(e17);
    return this._updatingHandles.addPromise(this._enqueueTileFetch(t5)), this.layerView.requestUpdate(), this._needBlockCacheUpdate = true, this._globalUpdateRequested = this.layerView.hasTilingEffects || !this.useProgressiveUpdate, t5;
  }
  releaseTile(e17) {
    this._fetchQueue.abort(e17.key.id), this.container.removeChild(e17), e17.once("detach", () => {
      e17.destroy(), this.layerView.requestUpdate();
    }), this.layerView.requestUpdate();
  }
  createEmptyTilePixelBlock(e17 = null) {
    const t5 = null == e17 || e17.join(",") === this._tileInfoView.tileInfo.size.join(",");
    if (t5 && null != this._emptyTilePixelBlock) return this._emptyTilePixelBlock;
    e17 = e17 || this._tileInfoView.tileInfo.size;
    const [i13, s19] = e17, r16 = new g2({ width: i13, height: s19, pixels: [new Uint8Array(i13 * s19)], mask: new Uint8Array(i13 * s19), pixelType: "u8" });
    return t5 && (this._emptyTilePixelBlock = r16), r16;
  }
  _getBandIds() {
    if (!("rasterFunctionChain" in this.container) || !this.container.rasterFunctionChain) return this.layer.bandIds;
    const { bandIds: e17, raster: t5 } = this.layer, i13 = "rasterFunction" in t5 ? t5.rasterFunction.rawInputBandIds : null;
    return (e17 == null ? void 0 : e17.length) && (i13 == null ? void 0 : i13.length) && 1 !== t5.rasterInfo.bandCount ? e17.map((e18) => i13[Math.min(e18, i13.length - 1)]) : e17 || i13;
  }
  updateRasterFunctionParameters() {
  }
  _fetchTile(e17, t5) {
    const i13 = this._getFetchOptions(e17.level, t5.signal);
    return this.fetchTile(e17, i13);
  }
  _getFetchOptions(e17, t5) {
    const i13 = this.canUseWebGLForProcessing(), { layerView: s19 } = this, { tileInfo: r16 } = s19, a24 = !r16.isWrappable && null != V(s19.view.spatialReference), o14 = i13 && this.layer.raster.hasUniqueSourceStorageInfo;
    return { allowPartialFill: true, datumTransformation: s19.datumTransformation, interpolation: i13 ? "nearest" : this.layer.interpolation, registryId: this._blockCacheRegistryId, requestRawData: o14, skipRasterFunction: "raster" === this.type && null != this.container.rasterFunctionChain, signal: t5, srcResolution: this._srcResolutions[e17], timeExtent: s19.timeExtent, tileInfo: r16, disableWrapAround: a24 };
  }
  _getCacheSize(e17) {
    return e17 ? 40 : 0;
  }
  _initializeTileInfo() {
    const { layerView: e17 } = this, t5 = e17.view.spatialReference;
    if (this._canUseLayerLODs()) {
      const { origin: i14, lods: s19 } = this.layer.tileInfo, r17 = s19.map(({ scale: e18 }) => e18), a25 = z.create({ spatialReference: t5, size: a3, scales: r17, origin: i14 });
      return e17.set("tileInfo", a25), void (this._srcResolutions = s19.map(({ resolution: e18 }) => ({ x: e18, y: e18 })));
    }
    const { scales: i13, srcResolutions: r16, isCustomTilingScheme: a24 } = fe(this.layer.serviceRasterInfo, t5, { tileSize: a3, alignGlobalDatasetWithAGOL: true, limitToSrcResolution: false }), o14 = z.create({ spatialReference: t5, size: a3, scales: i13 }), l3 = 0 === o14.origin.x;
    n2(e17.fullExtent);
    const { xmin: n25, ymax: c4 } = e17.fullExtent;
    (l3 || a24 && o14.origin.x > n25) && (o14.origin = new j({ x: n25, y: c4, spatialReference: t5 })), this._isCustomTilingScheme = a24, e17.set("tileInfo", o14), this._srcResolutions = r16 ?? [];
  }
  _canUseLayerLODs() {
    var _a;
    const { layer: e17, layerView: t5 } = this;
    if ("Map" !== e17.raster.tileType) return false;
    const { lods: i13 } = e17.tileInfo, s19 = (_a = t5.view.constraints) == null ? void 0 : _a.effectiveLODs;
    return (s19 == null ? void 0 : s19.length) === i13.length && s19.every(({ scale: e18 }, t6) => Math.abs(e18 - i13[t6].scale) < 1e-3);
  }
  _computeFetchConcurrency() {
    const { blockBoundary: e17 } = this.layer.serviceRasterInfo.storageInfo, t5 = e17[e17.length - 1];
    return (t5.maxCol - t5.minCol + 1) * (t5.maxRow - t5.minRow + 1) > 64 ? 2 : 10;
  }
  async _enqueueTileFetch(e17, t5) {
    var _a;
    if (!this._fetchQueue.has(e17.key.id)) {
      try {
        const t6 = await this._fetchQueue.push(e17.key), r16 = this._getBandIds();
        let o14 = !this.useProgressiveUpdate || this.layerView.hasTilingEffects && !this._globalSymbolizerParams;
        if (this._globalUpdateRequested && !this.layerView.moving && 0 === this._fetchQueue.length) {
          o14 = false;
          try {
            await this._redrawImage((_a = this._abortController) == null ? void 0 : _a.signal);
          } catch (s19) {
            b(s19) && n.getLogger(this).error(s19);
          }
          this._globalUpdateRequested = false;
        }
        !this.canUseWebGLForProcessing() && "rasterVF" !== this.type || this.layerView.hasTilingEffects || null != this._symbolizerParams || this._updateSymbolizerParams();
        const l3 = this._tileInfoView.getTileCoords(S2, e17.key), n25 = this._tileInfoView.getTileResolution(e17.key);
        await this.updateTileSource(e17, { source: t6, symbolizerParams: this._symbolizerParams, globalSymbolizerParams: this._globalSymbolizerParams, suspended: o14, bandIds: r16, coords: l3, resolution: n25 }), e17.once("attach", () => this.layerView.requestUpdate()), this.container.addChild(e17);
      } catch (s19) {
        b(s19) || n.getLogger(this).error(s19);
      }
      this.layerView.requestUpdate();
    }
  }
  async _redrawImage(e17) {
    if (0 === this.container.children.length) return;
    await this.layer.updateRenderer(), this.layerView.hasTilingEffects ? await this._updateGlobalSymbolizerParams(e17) : (this._updateSymbolizerParams(), this._globalSymbolizerParams = null);
    const t5 = this.container.children.map(async (e18) => this.updateTileSymbolizerParameters(e18, { local: this._symbolizerParams, global: this._globalSymbolizerParams }));
    await Promise.allSettled(t5), this.container.requestRender();
  }
  async _updateGlobalSymbolizerParams(e17) {
    const t5 = this._getFetchOptions(this.previousLOD.level, e17), i13 = await this.layer.fetchPixels(this.layerView.view.extent, this.layerView.view.width, this.layerView.view.height, { ...t5, interpolation: "nearest", requestRawData: false, skipRasterFunction: false });
    if (!(i13 == null ? void 0 : i13.pixelBlock)) return;
    const { resolution: s19 } = this.previousLOD, r16 = this._getBandIds(), a24 = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: i13.pixelBlock.extractBands(r16), isGCS: this.layerView.view.spatialReference.isGeographic, resolution: { x: s19, y: s19 }, bandIds: r16 });
    !this.canUseWebGLForProcessing() && a24 && "stretch" === a24.type && this.layer.renderer && "raster-stretch" === this.layer.renderer.type && (a24.factor = a24.factor.map((e18) => 255 * e18), a24.outMin = Math.round(255 * a24.outMin), a24.outMax = Math.round(255 * a24.outMax)), this._globalSymbolizerParams = a24;
  }
  _updateSymbolizerParams() {
    const { resolution: e17 } = this.previousLOD, t5 = this._getBandIds();
    this._symbolizerParams = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: null, isGCS: this.layerView.view.spatialReference.isGeographic, resolution: { x: e17, y: e17 }, bandIds: t5 });
  }
  _updateBlockCacheRegistry(e17 = false) {
    const { layer: t5, layerView: i13 } = this, { raster: s19 } = t5, { multidimensionalDefinition: r16 } = t5.normalizeRasterFetchOptions({ multidimensionalDefinition: t5.multidimensionalDefinition, timeExtent: i13.timeExtent }), a24 = s19.rasterInfo.multidimensionalInfo ? s19.getSliceIndex(r16) : null, o14 = i2(s19.rasterId, a24);
    if (o14 !== this._blockCacheRegistryUrl) {
      if (null != this._blockCacheRegistryUrl && a4(this._blockCacheRegistryUrl, this._blockCacheRegistryId), this._blockCacheRegistryId = u2(o14, s19.rasterInfo), e17) {
        const { view: e18 } = i13, t6 = this._tileInfoView.getClosestInfoForScale(e18.scale), r17 = this._srcResolutions[t6.level];
        g3(o14, this._blockCacheRegistryId, e18.extent, e18.resolution, r17, s19.ioConfig.sampling);
      }
      this._blockCacheRegistryUrl = o14;
    }
  }
  async doRefresh() {
    if (!this.attached || !this.previousLOD || this.layerView.suspended) return;
    await this.layer.updateRenderer(), this.layerView.hasTilingEffects || this._updateSymbolizerParams(), this._updateBlockCacheRegistry(true), this._fetchQueue.reset();
    const e17 = [];
    this._globalUpdateRequested = this.layerView.hasTilingEffects || !this.useProgressiveUpdate, this._tileStrategy.refresh((t5) => e17.push(this._enqueueTileFetch(t5))), await this._updatingHandles.addPromise(Promise.allSettled(e17));
  }
};
r([m()], v.prototype, "_globalUpdateRequested", void 0), r([m()], v.prototype, "attached", void 0), r([m()], v.prototype, "container", void 0), r([m()], v.prototype, "layer", void 0), r([m()], v.prototype, "layerView", void 0), r([m()], v.prototype, "scheduler", void 0), r([m()], v.prototype, "type", void 0), r([m()], v.prototype, "useWebGLForProcessing", null), r([m()], v.prototype, "useProgressiveUpdate", null), r([m()], v.prototype, "timeExtent", void 0), r([m()], v.prototype, "updating", null), v = r([a("esri.views.2d.layers.imagery.BaseImageryTileSubView2D")], v);

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryTileView2D.js
var a22 = class extends v {
  constructor() {
    super(...arguments), this.type = "raster";
  }
  attach() {
    super.attach(), this.container = new o12(this._tileInfoView), this.container.isCustomTilingScheme = this._isCustomTilingScheme, this.updateRasterFunctionParameters();
  }
  detach() {
    super.detach(), this.container.removeAllChildren(), this.container = null;
  }
  canUseWebGLForProcessing() {
    var _a, _b;
    const { symbolizer: e17 } = this.layer, t5 = (_b = (_a = e17.lookup) == null ? void 0 : _a.colormapLut) == null ? void 0 : _b.indexedColormap, r16 = t5 && t5.length > this._maxIndexedColormapSize;
    return this.useWebGLForProcessing && e17.canRenderInWebGL && !r16 && !("majority" === this.layer.interpolation && o3(this.layer));
  }
  fetchTile(e17, t5) {
    return this.layer.fetchTile(e17.level, e17.row, e17.col, t5);
  }
  updateRasterFunctionParameters() {
    const { clips: e17, view: t5 } = this.layerView;
    null != this._geometry && e17.remove(this._geometry);
    const { raster: r16, type: s19 } = this.layer;
    if ("Function" === r16.datasetFormat) {
      const s20 = r16.getClippingGeometry(t5.spatialReference);
      if (s20) {
        const t6 = new a5({ geometry: s20 });
        e17.add(t6), this._geometry = t6;
      }
    }
    const { container: i13 } = this;
    if ("Function" !== r16.datasetFormat || "wcs" === s19) return i13.rasterFunctionChain = null, i13.children.forEach((e18) => {
      const { bitmap: t6 } = e18;
      t6 && (t6.suspended = true, t6.processed = false, t6.projected && (t6.invalidateTexture(), t6.rasterTexture = null));
    }), void (this._rasterFunctionState = "na");
    const o14 = this._rasterFunctionState, { rasterFunction: a24, primaryRasters: l3 } = r16, c4 = a24.supportsGPU && (!l3 || l3.rasters.length <= 1), u5 = c4 ? a24.flatWebGLFunctionChain : null, { renderer: p6 } = this.layer, d5 = !c4 || !(u5 == null ? void 0 : u5.functions.length) || "raster-stretch" === (p6 == null ? void 0 : p6.type) && p6.dynamicRangeAdjustment || !this.canUseWebGLForProcessing();
    i13.rasterFunctionChain = d5 ? null : u5;
    const h6 = null == a24 ? "na" : i13.rasterFunctionChain ? "gpu" : "cpu";
    i13.children.forEach((e18) => {
      const { bitmap: t6 } = e18;
      t6 && (t6.suspended = o14 !== h6, t6.processed = false, t6.processedTexture = null);
    }), this._rasterFunctionState = h6;
  }
  async updateTileSource(e17, t5) {
    const r16 = this._getBandIds(), s19 = this._getLayerInterpolation(), i13 = this.canUseWebGLForProcessing(), { source: o14, globalSymbolizerParams: n25, suspended: a24, coords: l3, resolution: c4 } = t5, u5 = this.layerView.hasTilingEffects ? n25 : t5.symbolizerParams, { bitmap: p6 } = e17;
    if ([p6.x, p6.y] = l3, p6.resolution = c4, null != (o14 == null ? void 0 : o14.pixelBlock)) {
      const e18 = { extent: o14.extent, pixelBlock: o14.pixelBlock, srcPixelSize: o14.srcTilePixelSize };
      if (p6.rawPixelData = e18, i13) p6.source = o14.pixelBlock, p6.isRendereredSource = false;
      else {
        const t6 = await this.layer.applyRenderer(e18, "stretch" === (n25 == null ? void 0 : n25.type) ? n25 : void 0);
        p6.source = t6, p6.isRendereredSource = true;
      }
      p6.symbolizerParameters = i13 ? u5 : null, p6.transformGrid = i13 ? o14.transformGrid : null;
    } else {
      const e18 = this.createEmptyTilePixelBlock();
      p6.source = e18, p6.symbolizerParameters = i13 ? u5 : null, p6.transformGrid = null;
    }
    p6.bandIds = i13 ? r16 : null, p6.width = this._tileInfoView.tileInfo.size[0], p6.height = this._tileInfoView.tileInfo.size[1], p6.interpolation = s19, p6.suspended = a24, p6.invalidateTexture();
  }
  async updateTileSymbolizerParameters(e17, t5) {
    const { local: r16, global: s19 } = t5, i13 = this._getBandIds(), o14 = this._getLayerInterpolation(), n25 = this.canUseWebGLForProcessing(), { bitmap: a24 } = e17, { rawPixelData: l3 } = a24;
    n25 || null == l3 ? (a24.isRendereredSource && null != l3 && (a24.source = l3.pixelBlock), a24.isRendereredSource = false) : (a24.source = await this.layer.applyRenderer(l3, "stretch" === (s19 == null ? void 0 : s19.type) ? s19 : void 0), a24.isRendereredSource = true), a24.symbolizerParameters = n25 ? this.layerView.hasTilingEffects ? s19 : r16 : null, a24.bandIds = n25 ? i13 : null, a24.interpolation = o14, a24.suspended = false;
  }
  _getLayerInterpolation() {
    const { interpolation: e17, renderer: t5 } = this.layer;
    if (!t5) return e17;
    const r16 = t5.type;
    return "raster-colormap" === r16 || "unique-value" === r16 ? "nearest" : "raster-stretch" === t5.type && null != t5.colorRamp ? "bilinear" === e17 || "cubic" === e17 ? "bilinear" : "nearest" : e17;
  }
};
r([m()], a22.prototype, "container", void 0), r([m()], a22.prototype, "layer", void 0), r([m()], a22.prototype, "type", void 0), a22 = r([a("esri.views.2d.layers.imagery.ImageryTileView2D")], a22);
var l2 = a22;

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFTile.js
var r15 = class extends r5 {
  constructor(t5, e17, s19, a24, r16, l3, o14 = null) {
    super(t5, e17, s19, a24, r16, l3), this.tileData = new f(o14), this.tileData.coordScale = [r16, l3], this.tileData.once("isReady", () => this.ready());
  }
  destroy() {
    super.destroy(), this.tileData.destroy(), this.tileData = null, this.stage = null;
  }
  set stencilRef(t5) {
    this.tileData.stencilRef = t5;
  }
  get stencilRef() {
    return this.tileData.stencilRef;
  }
  _createTransforms() {
    return { displayViewScreenMat3: e(), tileMat3: e() };
  }
  setTransform(s19) {
    super.setTransform(s19);
    const i13 = this.resolution / (s19.resolution * s19.pixelRatio), a24 = this.transforms.tileMat3, [r16, l3] = this.tileData.offset, o14 = [this.x + r16 * this.resolution, this.y - l3 * this.resolution], [n25, h6] = s19.toScreenNoRotation([0, 0], o14), { symbolTileSize: c4 } = this.tileData.symbolizerParameters, f3 = Math.round((this.width - this.tileData.offset[0]) / c4) * c4, m8 = Math.round((this.height - this.tileData.offset[1]) / c4) * c4, D2 = f3 / this.rangeX * i13, d5 = m8 / this.rangeY * i13;
    r3(a24, D2, 0, 0, 0, d5, 0, n25, h6, 1), i(this.transforms.displayViewScreenMat3, s19.displayViewMat3, a24), this.tileData.transforms.displayViewScreenMat3 = this.transforms.displayViewScreenMat3;
  }
  onAttach() {
    this.tileData.stage = this.stage;
  }
  onDetach() {
    this.tileData.stage = null;
  }
};

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFTileContainer.js
var o13 = class extends i3 {
  constructor() {
    super(...arguments), this.isCustomTilingScheme = false, this.symbolTypes = ["triangle"];
  }
  createTile(s19) {
    const t5 = this.tileInfoView.getTileBounds(u(), s19), [i13, o14] = this.tileInfoView.tileInfo.size, n25 = this.tileInfoView.getTileResolution(s19.level);
    return new r15(s19, n25, t5[0], t5[3], i13, o14);
  }
  prepareRenderPasses(e17) {
    const r16 = e17.registerRenderPass({ name: "imagery (vf tile)", brushes: [d4], target: () => this.children.map((e18) => e18.tileData), drawPhase: E.MAP });
    return [...super.prepareRenderPasses(e17), r16];
  }
  doRender(e17) {
    this.visible && e17.drawPhase === E.MAP && this.symbolTypes.forEach((s19) => {
      e17.renderPass = s19, super.doRender(e17);
    });
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/VectorFieldTileView2D.js
var a23 = class extends v {
  constructor() {
    super(...arguments), this._handle = null, this.type = "rasterVF";
  }
  canUseWebGLForProcessing() {
    return false;
  }
  async fetchTile(e17, t5) {
    var _a;
    t5 = { ...t5, interpolation: "nearest", requestProjectedLocalDirections: true };
    const i13 = await this.layer.fetchTile(e17.level, e17.row, e17.col, t5);
    return "vector-magdir" === ((_a = this.layer.serviceRasterInfo) == null ? void 0 : _a.dataType) && (i13 == null ? void 0 : i13.pixelBlock) && (i13.pixelBlock = await this.layer.convertVectorFieldData(i13.pixelBlock, t5)), i13;
  }
  updateTileSource(e17, t5) {
    const i13 = t5.symbolizerParams, { tileData: r16 } = e17;
    r16.key = e17.key, r16.width = this._tileInfoView.tileInfo.size[0], r16.height = this._tileInfoView.tileInfo.size[1];
    const { symbolTileSize: o14 } = i13, { source: s19 } = t5;
    if (r16.offset = this._getTileSymbolOffset(r16.key, o14), null != (s19 == null ? void 0 : s19.pixelBlock)) {
      const e18 = { extent: s19.extent, pixelBlock: s19.pixelBlock };
      r16.rawPixelData = e18, r16.symbolizerParameters = i13, r16.source = this._sampleVectorFieldData(s19.pixelBlock, i13, r16.offset);
    } else {
      const e18 = [Math.round((this._tileInfoView.tileInfo.size[0] - r16.offset[0]) / o14), Math.round((this._tileInfoView.tileInfo.size[1] - r16.offset[1]) / o14)], t6 = this.createEmptyTilePixelBlock(e18);
      r16.source = t6, r16.symbolizerParameters = i13;
    }
    return r16.invalidateVAO(), Promise.resolve();
  }
  updateTileSymbolizerParameters(e17, t5) {
    var _a;
    const i13 = t5.local, { symbolTileSize: r16 } = i13, { tileData: o14 } = e17;
    o14.offset = this._getTileSymbolOffset(o14.key, r16);
    const s19 = o14.symbolizerParameters.symbolTileSize;
    o14.symbolizerParameters = i13;
    const l3 = (_a = o14.rawPixelData) == null ? void 0 : _a.pixelBlock;
    return null != l3 && s19 !== r16 && (o14.source = this._sampleVectorFieldData(l3, o14.symbolizerParameters, o14.offset)), Promise.resolve();
  }
  attach() {
    super.attach(), this.container = new o13(this._tileInfoView), this.container.isCustomTilingScheme = this._isCustomTilingScheme, this._updateSymbolType(this.layer.renderer), this._handle = d(() => this.layer.renderer, (e17) => this._updateSymbolType(e17));
  }
  detach() {
    var _a;
    super.detach(), this.container.removeAllChildren(), (_a = this._handle) == null ? void 0 : _a.remove(), this._handle = null, this.container = null;
  }
  _getTileSymbolOffset(e17, t5) {
    const i13 = e17.col * this._tileInfoView.tileInfo.size[0] % t5, r16 = e17.row * this._tileInfoView.tileInfo.size[1] % t5;
    return [i13 > t5 / 2 ? t5 - i13 : -i13, r16 > t5 / 2 ? t5 - r16 : -r16];
  }
  _sampleVectorFieldData(e17, t5, i13) {
    const { symbolTileSize: r16 } = t5;
    return S(e17, "vector-uv", r16, i13);
  }
  _updateSymbolType(e17) {
    "vector-field" === e17.type && (this.container.symbolTypes = "wind-barb" === e17.style ? ["scalar", "triangle"] : "simple-scalar" === e17.style ? ["scalar"] : ["triangle"]);
  }
};
r([m()], a23.prototype, "container", void 0), r([m()], a23.prototype, "layer", void 0), r([m()], a23.prototype, "type", void 0), a23 = r([a("esri.views.2d.layers.imagery.VectorFieldTileView2D")], a23);
var n24 = a23;

// node_modules/@arcgis/core/views/layers/ImageryTileLayerView.js
var u4 = (u5) => {
  let p6 = class extends u5 {
    constructor() {
      super(...arguments), this._rasterFieldPrefix = "Raster.", this.layer = null, this.tileInfo = null;
    }
    get fullExtent() {
      try {
        return this.layer.loaded ? this._getFullExtent() : null;
      } catch {
        return null;
      }
    }
    get timeExtent() {
      var _a;
      return i5(this.layer, (_a = this.view) == null ? void 0 : _a.timeExtent, this._get("timeExtent"));
    }
    get hasTilingEffects() {
      return !!(this.layer.renderer && "dynamicRangeAdjustment" in this.layer.renderer && this.layer.renderer.dynamicRangeAdjustment);
    }
    get datumTransformation() {
      try {
        return this.layer.loaded ? j2(this.layer.fullExtent, this.view.spatialReference, true) : null;
      } catch {
        return null;
      }
    }
    supportsSpatialReference(e17) {
      try {
        return !this.layer.loaded || !!ce(this.layer.serviceRasterInfo, e17);
      } catch {
        return false;
      }
    }
    async fetchPopupFeaturesAtLocation(e17, s19) {
      var _a, _b;
      const { layer: a24 } = this;
      if (!e17) throw new s("imageryTileLayerView:fetchPopupFeatures", "Nothing to fetch without area", { layer: a24 });
      const { popupEnabled: i13 } = a24, o14 = p3(a24, s19);
      if (!i13 || null == o14) return [];
      const n25 = [], { value: u6, magdirValue: p7, processedValue: c4 } = await a24.identify(e17, { timeExtent: this.timeExtent, signal: s19 == null ? void 0 : s19.signal });
      let m8 = "";
      if (u6 == null ? void 0 : u6.length) {
        m8 = "imagery-tile" === a24.type && a24.hasStandardTime() && null != u6[0] ? u6.map((e19) => a24.getStandardTimeValue(e19)).join(", ") : u6.join(", ");
        const e18 = { ObjectId: 0 }, r16 = "Raster.ServicePixelValue";
        e18[r16] = "imagery-tile" === a24.type && "Function" === a24.raster.datasetFormat ? c4 == null ? void 0 : c4.join(", ") : m8, e18[r16 + ".Raw"] = m8;
        const s20 = ((_a = a24.raster) == null ? void 0 : _a.rasterInfo) ?? a24.serviceRasterInfo, i14 = s20 == null ? void 0 : s20.attributeTable;
        if (null != i14) {
          const { fields: t5, features: s21 } = i14, a25 = t5.find(({ name: e19 }) => "value" === e19.toLowerCase()), o16 = e18[r16], n26 = a25 ? s21.find((e19) => String(e19.attributes[a25.name]) === o16) : null;
          if (n26) {
            for (const r17 in n26.attributes) if (n26.attributes.hasOwnProperty(r17)) {
              e18[this._rasterFieldPrefix + r17] = n26.attributes[r17];
            }
          }
        }
        const o15 = s20 == null ? void 0 : s20.dataType;
        "vector-magdir" !== o15 && "vector-uv" !== o15 || (e18["Raster.Magnitude"] = p7 == null ? void 0 : p7[0], e18["Raster.Direction"] = p7 == null ? void 0 : p7[1]);
        const l3 = new d2({ geometry: (_b = this.fullExtent) == null ? void 0 : _b.clone(), attributes: e18, layer: a24, sourceLayer: a24 });
        n25.push(l3);
      }
      return n25;
    }
    _getFullExtent() {
      return ce(this.layer.serviceRasterInfo, this.view.spatialReference);
    }
  };
  return r([m()], p6.prototype, "fullExtent", null), r([m()], p6.prototype, "layer", void 0), r([m({ readOnly: true })], p6.prototype, "timeExtent", null), r([m()], p6.prototype, "tileInfo", void 0), r([m({ readOnly: true })], p6.prototype, "hasTilingEffects", null), r([m()], p6.prototype, "datumTransformation", null), p6 = r([a("esri.views.layers.ImageryTileLayerView")], p6), p6;
};

// node_modules/@arcgis/core/views/2d/layers/ImageryTileLayerView2D.js
var b4 = class extends u4(i4(j3(y))) {
  constructor() {
    super(...arguments), this._useWebGLForProcessing = true, this._useProgressiveUpdate = true, this.subview = null;
  }
  get useWebGLForProcessing() {
    return this._useWebGLForProcessing;
  }
  set useWebGLForProcessing(e17) {
    this._useWebGLForProcessing = e17, this.subview && "useWebGLForProcessing" in this.subview && (this.subview.useWebGLForProcessing = e17);
  }
  get useProgressiveUpdate() {
    return this._useWebGLForProcessing;
  }
  set useProgressiveUpdate(e17) {
    this._useProgressiveUpdate = e17, this.subview && "useProgressiveUpdate" in this.subview && (this.subview.useProgressiveUpdate = e17);
  }
  get displayParameters() {
    const { layer: e17 } = this, s19 = this._get("displayParameters");
    return e17.renderer ? { bandIds: e17.bandIds, renderer: e17.renderer, interpolation: e17.interpolation, multidimensionalDefinition: e17.multidimensionalDefinition, rasterFunction: "imagery-tile" === e17.type ? e17.rasterFunction : null } : s19;
  }
  update(e17) {
    var _a;
    (_a = this.subview) == null ? void 0 : _a.update(e17), this.notifyChange("updating");
  }
  isUpdating() {
    return !this.subview || this.subview.updating;
  }
  attach() {
    this.layer.increaseRasterJobHandlerUsage(), this._updateSubview(), this.addAttachHandles([d(() => this.displayParameters, (e17, t5) => {
      const r16 = e17.interpolation !== (t5 == null ? void 0 : t5.interpolation) && ("majority" === e17.interpolation || "majority" === (t5 == null ? void 0 : t5.interpolation)) && o3(this.layer), o14 = e17.renderer !== (t5 == null ? void 0 : t5.renderer) && this._getSubviewType(t5 == null ? void 0 : t5.renderer) !== this._getSubviewType(e17.renderer);
      o14 && this._updateSubview();
      const a24 = e17.multidimensionalDefinition !== (t5 == null ? void 0 : t5.multidimensionalDefinition), n25 = e17.rasterFunction !== (t5 == null ? void 0 : t5.rasterFunction), u5 = n25 && !this._useWebGLForProcessing, h6 = a24 || r16 || o14 || u5;
      this.subview.redrawOrRefetch({ refetch: h6, reprocess: n25 }).catch((e18) => {
        b(e18) || n.getLogger(this).error(e18);
      }), this.notifyChange("updating");
    }), d(() => this.layer.multidimensionalSubset ?? null, (e17, t5) => {
      const { multidimensionalDefinition: r16 } = this.layer;
      null != r16 && o2(r16, e17) !== o2(r16, t5) && (this.subview.redrawOrRefetch({ refetch: true }).catch((e18) => {
        b(e18) || n.getLogger(this).error(e18);
      }), this.notifyChange("updating"));
    }, C), d(() => this.timeExtent, () => {
      this.subview.timeExtent = this.timeExtent, this.subview.redrawOrRefetch({ refetch: true }).catch((e17) => {
        b(e17) || n.getLogger(this).error(e17);
      });
    }, P)]);
  }
  detach() {
    var _a;
    this.layer.decreaseRasterJobHandlerUsage(), this._detachSubview(this.subview), (_a = this.subview) == null ? void 0 : _a.destroy(), this.subview = null;
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.subview.moveEnd();
  }
  doRefresh() {
    return this.subview ? this.subview.doRefresh() : Promise.resolve();
  }
  _updateSubview() {
    var _a;
    const { renderer: e17 } = this.layer;
    if (!e17) return;
    const s19 = this._getSubviewType(e17);
    if (this.subview) {
      if (this.subview.type === s19) return void this._attachSubview(this.subview);
      this._detachSubview(this.subview), (_a = this.subview) == null ? void 0 : _a.destroy(), this.subview = null;
    }
    const { layer: i13 } = this;
    let t5;
    if (t5 = "rasterVF" === s19 ? new n24({ layer: i13, layerView: this, scheduler: this.scheduler }) : "flow" === s19 ? new d3({ layer: i13, layerView: this, scheduler: this.scheduler }) : new l2({ layer: i13, layerView: this, scheduler: this.scheduler }), "useWebGLForProcessing" in t5 && (t5.useWebGLForProcessing = this._useWebGLForProcessing), "useProgressiveUpdate" in t5 && (t5.useProgressiveUpdate = this._useProgressiveUpdate), "previousLOD" in t5) {
      const { subview: e18 } = this;
      t5.previousLOD = e18 && "previousLOD" in e18 ? e18.previousLOD : null;
    }
    this._attachSubview(t5), this.subview = t5, this.requestUpdate();
  }
  _attachSubview(e17) {
    e17 && !e17.attached && (e17.attach(), e17.attached = true, this.container.addChildAt(e17.container, 0));
  }
  _detachSubview(e17) {
    (e17 == null ? void 0 : e17.attached) && (this.container.removeChild(e17.container), e17.detach(), e17.attached = false);
  }
  _getSubviewType(e17) {
    const s19 = e17 == null ? void 0 : e17.type;
    return "vector-field" === s19 ? "rasterVF" : "flow" === s19 ? "flow" : "raster";
  }
};
r([m()], b4.prototype, "subview", void 0), r([m()], b4.prototype, "useWebGLForProcessing", null), r([m()], b4.prototype, "useProgressiveUpdate", null), r([m({ readOnly: true })], b4.prototype, "displayParameters", null), b4 = r([a("esri.views.2d.layers.ImageryTileLayerView2D")], b4);
var g5 = b4;
export {
  g5 as default
};
//# sourceMappingURL=ImageryTileLayerView2D-X7GQJBYP.js.map
