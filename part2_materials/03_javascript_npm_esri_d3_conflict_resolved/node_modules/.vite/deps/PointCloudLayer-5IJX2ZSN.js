import {
  R,
  V as V2
} from "./chunk-VVKTZSKL.js";
import {
  $,
  Z,
  w
} from "./chunk-F5BQ5T2D.js";
import "./chunk-UHYXHDMF.js";
import {
  a as a4,
  a2 as a5,
  a3 as a6,
  d
} from "./chunk-EC7LZBDX.js";
import "./chunk-JEA2CH67.js";
import "./chunk-FDS5NNQY.js";
import "./chunk-ACRZEGQW.js";
import "./chunk-NT3C5DNX.js";
import {
  i as i2
} from "./chunk-ZZTUJWOP.js";
import {
  l
} from "./chunk-SVRTKGNR.js";
import {
  s as s2
} from "./chunk-GEPD6W23.js";
import {
  p
} from "./chunk-ULSRCITK.js";
import {
  e as e2
} from "./chunk-FLUE3DMC.js";
import {
  j
} from "./chunk-RG7AMCT5.js";
import {
  t
} from "./chunk-IGMG7ERK.js";
import {
  b
} from "./chunk-V47ZBW5W.js";
import {
  c,
  d as d2,
  l as l2
} from "./chunk-HKYICNT2.js";
import {
  S
} from "./chunk-VGUQMPM6.js";
import "./chunk-TWYDW6LU.js";
import "./chunk-YQIF7GJR.js";
import "./chunk-4ISVH4NS.js";
import "./chunk-NIWINVGG.js";
import "./chunk-DOENTAA7.js";
import "./chunk-CGSFKZP2.js";
import "./chunk-RXJCBLN2.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-BVHISPUT.js";
import {
  f as f2
} from "./chunk-QMGMKWTA.js";
import {
  i4 as i,
  q
} from "./chunk-MYUZZ3A3.js";
import "./chunk-2IGXKE5P.js";
import "./chunk-ZICJB3ML.js";
import "./chunk-4NJWIUZG.js";
import "./chunk-TA32QX7Z.js";
import "./chunk-P3GRQ2CH.js";
import "./chunk-NYLBGE62.js";
import {
  y
} from "./chunk-QCBTLG25.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-XGYM66XX.js";
import "./chunk-JOOGZSAP.js";
import "./chunk-J6GHQIZ2.js";
import "./chunk-VEUN2EF3.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-BWTCR2DR.js";
import "./chunk-SMOTPOZ7.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-7FJIOZSE.js";
import "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import {
  r as r3
} from "./chunk-TSVUPARM.js";
import "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-RCLWOQNR.js";
import "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-RD2BBQYN.js";
import "./chunk-SEG3PRUR.js";
import "./chunk-B6VE32RA.js";
import "./chunk-AIYFWM42.js";
import "./chunk-2M53HYNY.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-FG3XOAFD.js";
import {
  o
} from "./chunk-GN5RE63N.js";
import {
  r as r2
} from "./chunk-2WXAPZBK.js";
import "./chunk-E2I7HYXQ.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import {
  U
} from "./chunk-CRH37WFF.js";
import {
  V
} from "./chunk-YFGQMO6E.js";
import {
  f
} from "./chunk-HAF6QJ32.js";
import {
  m
} from "./chunk-H77COA2S.js";
import {
  a4 as a3,
  x
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  a as a2
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import {
  a,
  e,
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/layers/pointCloudFilters/PointCloudFilter.js
var t2 = class extends f {
  constructor(o2) {
    super(o2), this.field = null, this.type = null;
  }
  clone() {
    return console.warn(".clone() is not implemented for " + this.declaredClass), null;
  }
};
r([m({ type: String, json: { write: { enabled: true, isRequired: true } } })], t2.prototype, "field", void 0), r([m({ readOnly: true, nonNullable: true, json: { read: false } })], t2.prototype, "type", void 0), t2 = r([a3("esri.layers.pointCloudFilters.PointCloudFilter")], t2);
var l3 = t2;

// node_modules/@arcgis/core/layers/pointCloudFilters/PointCloudBitfieldFilter.js
var d3;
var p2 = d3 = class extends l3 {
  constructor(e4) {
    super(e4), this.requiredClearBits = null, this.requiredSetBits = null, this.type = "bitfield";
  }
  clone() {
    return new d3({ field: this.field, requiredClearBits: a(this.requiredClearBits), requiredSetBits: a(this.requiredSetBits) });
  }
};
r([m({ type: [x], json: { write: { enabled: true, overridePolicy() {
  return { enabled: true, isRequired: !this.requiredSetBits };
} } } })], p2.prototype, "requiredClearBits", void 0), r([m({ type: [x], json: { write: { enabled: true, overridePolicy() {
  return { enabled: true, isRequired: !this.requiredClearBits };
} } } })], p2.prototype, "requiredSetBits", void 0), r([r3({ pointCloudBitfieldFilter: "bitfield" })], p2.prototype, "type", void 0), p2 = d3 = r([a3("esri.layers.pointCloudFilters.PointCloudBitfieldFilter")], p2);
var u = p2;

// node_modules/@arcgis/core/layers/pointCloudFilters/PointCloudReturnFilter.js
var n2;
var p3 = n2 = class extends l3 {
  constructor(r4) {
    super(r4), this.includedReturns = [], this.type = "return";
  }
  clone() {
    return new n2({ field: this.field, includedReturns: a(this.includedReturns) });
  }
};
r([m({ type: [["firstOfMany", "last", "lastOfMany", "single"]], json: { write: { enabled: true, isRequired: true } } })], p3.prototype, "includedReturns", void 0), r([r3({ pointCloudReturnFilter: "return" })], p3.prototype, "type", void 0), p3 = n2 = r([a3("esri.layers.pointCloudFilters.PointCloudReturnFilter")], p3);
var u2 = p3;

// node_modules/@arcgis/core/layers/pointCloudFilters/PointCloudValueFilter.js
var l4;
var p4 = l4 = class extends l3 {
  constructor(e4) {
    super(e4), this.mode = "exclude", this.type = "value", this.values = [];
  }
  clone() {
    return new l4({ field: this.field, mode: this.mode, values: a(this.values) });
  }
};
r([m({ type: ["exclude", "include"], json: { write: { enabled: true, isRequired: true } } })], p4.prototype, "mode", void 0), r([r3({ pointCloudValueFilter: "value" })], p4.prototype, "type", void 0), r([m({ type: [Number], json: { write: { enabled: true, isRequired: true } } })], p4.prototype, "values", void 0), p4 = l4 = r([a3("esri.layers.pointCloudFilters.PointCloudValueFilter")], p4);
var u3 = p4;

// node_modules/@arcgis/core/layers/pointCloudFilters/typeUtils.js
var e3 = { key: "type", base: l3, typeMap: { value: u3, bitfield: u, return: u2 } };

// node_modules/@arcgis/core/renderers/PointCloudRGBRenderer.js
var p5;
var c2 = p5 = class extends a4 {
  constructor(r4) {
    super(r4), this.type = "point-cloud-rgb", this.field = null;
  }
  clone() {
    return new p5({ ...this.cloneProperties(), field: a(this.field) });
  }
};
r([r3({ pointCloudRGBRenderer: "point-cloud-rgb" })], c2.prototype, "type", void 0), r([m({ type: String, json: { write: true } })], c2.prototype, "field", void 0), c2 = p5 = r([a3("esri.renderers.PointCloudRGBRenderer")], c2);
var n3 = c2;

// node_modules/@arcgis/core/renderers/support/pointCloud/typeUtils.js
var i3 = { key: "type", base: a4, typeMap: { "point-cloud-class-breaks": d, "point-cloud-rgb": n3, "point-cloud-stretch": a5, "point-cloud-unique-value": a6 }, errorContext: "renderer" };

// node_modules/@arcgis/core/layers/PointCloudLayer.js
var O = s2();
var V3 = class extends R(l(b(j(t(S(e2(i2(f2)))))))) {
  constructor(...e4) {
    super(...e4), this.operationalLayerType = "PointCloudLayer", this.popupEnabled = true, this.popupTemplate = null, this.opacity = 1, this.filters = [], this.fields = null, this.fieldsIndex = null, this.outFields = null, this.path = null, this.legendEnabled = true, this.renderer = null, this.type = "point-cloud";
  }
  normalizeCtorArgs(e4, r4) {
    return "string" == typeof e4 ? { url: e4, ...r4 } : e4;
  }
  get defaultPopupTemplate() {
    return this.attributeStorageInfo ? this.createPopupTemplate() : null;
  }
  getFieldDomain(e4) {
    const r4 = this.fieldsIndex.get(e4);
    return (r4 == null ? void 0 : r4.domain) ? r4.domain : null;
  }
  readServiceFields(e4, r4, t3) {
    return Array.isArray(e4) ? e4.map((e5) => {
      const r5 = new y();
      return "FieldTypeInteger" === e5.type && ((e5 = a(e5)).type = "esriFieldTypeInteger"), r5.read(e5, t3), r5;
    }) : Array.isArray(r4.attributeStorageInfo) ? r4.attributeStorageInfo.map((e5) => new y({ name: e5.name, type: "ELEVATION" === e5.name ? "double" : "integer" })) : null;
  }
  set elevationInfo(e4) {
    this._set("elevationInfo", e4), this._validateElevationInfo();
  }
  writeRenderer(e4, r4, t3, o2) {
    e("layerDefinition.drawingInfo.renderer", e4.write({}, o2), r4);
  }
  load(e4) {
    const r4 = null != e4 ? e4.signal : null, t3 = this.loadFromPortal({ supportedTypes: ["Scene Service"] }, e4).catch(a2).then(() => this._fetchService(r4));
    return this.addResolvingPromise(t3), Promise.resolve(this);
  }
  createPopupTemplate(e4) {
    const r4 = p(this, e4);
    return r4 && (this._formatPopupTemplateReturnsField(r4), this._formatPopupTemplateRGBField(r4)), r4;
  }
  _formatPopupTemplateReturnsField(e4) {
    var _a;
    const r4 = this.fieldsIndex.get("RETURNS");
    if (!r4) return;
    const t3 = (_a = e4.fieldInfos) == null ? void 0 : _a.find((e5) => e5.fieldName === r4.name);
    if (!t3) return;
    const o2 = new i({ name: "pcl-returns-decoded", title: r4.alias || r4.name, expression: `
        var returnValue = $feature.${r4.name};
        return (returnValue % 16) + " / " + Floor(returnValue / 16);
      ` });
    e4.expressionInfos = [...e4.expressionInfos || [], o2], t3.fieldName = "expression/pcl-returns-decoded";
  }
  _formatPopupTemplateRGBField(e4) {
    var _a;
    const r4 = this.fieldsIndex.get("RGB");
    if (!r4) return;
    const t3 = (_a = e4.fieldInfos) == null ? void 0 : _a.find((e5) => e5.fieldName === r4.name);
    if (!t3) return;
    const o2 = new i({ name: "pcl-rgb-decoded", title: r4.alias || r4.name, expression: `
        var rgb = $feature.${r4.name};
        var red = Floor(rgb / 65536, 0);
        var green = Floor((rgb - (red * 65536)) / 256,0);
        var blue = rgb - (red * 65536) - (green * 256);

        return "rgb(" + red + "," + green + "," + blue + ")";
      ` });
    e4.expressionInfos = [...e4.expressionInfos || [], o2], t3.fieldName = "expression/pcl-rgb-decoded";
  }
  async queryCachedStatistics(e4, r4) {
    var _a;
    if (await this.load(r4), !this.attributeStorageInfo) throw new s("scenelayer:no-cached-statistics", "Cached statistics are not available for this layer");
    const i4 = this.fieldsIndex.get(e4);
    if (!i4) throw new s("pointcloudlayer:field-unexisting", `Field '${e4}' does not exist on the layer`);
    for (const o2 of this.attributeStorageInfo) if (o2.name === i4.name) {
      const e5 = V(((_a = this.parsedUrl) == null ? void 0 : _a.path) ?? "", `./statistics/${o2.key}`);
      return U(e5, { query: { f: "json", ...this.customParameters, token: this.apiKey }, responseType: "json", signal: r4 ? r4.signal : null }).then((e6) => e6.data);
    }
    throw new s("pointcloudlayer:no-cached-statistics", "Cached statistics for this attribute are not available");
  }
  async saveAs(e4, r4) {
    return this._debouncedSaveOperations(V2.SAVE_AS, { ...r4, getTypeKeywords: () => this._getTypeKeywords(), portalItemLayerType: "point-cloud" }, e4);
  }
  async save() {
    const e4 = { getTypeKeywords: () => this._getTypeKeywords(), portalItemLayerType: "point-cloud" };
    return this._debouncedSaveOperations(V2.SAVE, e4);
  }
  validateLayer(e4) {
    if (e4.layerType && "PointCloud" !== e4.layerType) throw new s("pointcloudlayer:layer-type-not-supported", "PointCloudLayer does not support this layer type", { layerType: e4.layerType });
    if (isNaN(this.version.major) || isNaN(this.version.minor)) throw new s("layer:service-version-not-supported", "Service version is not supported.", { serviceVersion: this.version.versionString, supportedVersions: "1.x-2.x" });
    if (this.version.major > 2) throw new s("layer:service-version-too-new", "Service version is too new.", { serviceVersion: this.version.versionString, supportedVersions: "1.x-2.x" });
  }
  hasCachedStatistics(e4) {
    return null != this.attributeStorageInfo && this.attributeStorageInfo.some((r4) => r4.name === e4);
  }
  _getTypeKeywords() {
    return ["PointCloud"];
  }
  _validateElevationInfo() {
    const e4 = this.elevationInfo;
    $(n.getLogger(this), Z("Point cloud layers", "absolute-height", e4)), $(n.getLogger(this), w("Point cloud layers", e4));
  }
};
r([m({ type: ["PointCloudLayer"] })], V3.prototype, "operationalLayerType", void 0), r([m(l2)], V3.prototype, "popupEnabled", void 0), r([m({ type: q, json: { name: "popupInfo", write: true } })], V3.prototype, "popupTemplate", void 0), r([m({ readOnly: true, json: { read: false } })], V3.prototype, "defaultPopupTemplate", null), r([m({ readOnly: true, json: { write: false, read: false, origins: { "web-document": { write: false, read: false } } } })], V3.prototype, "opacity", void 0), r([m({ type: ["show", "hide"] })], V3.prototype, "listMode", void 0), r([m({ types: [e3], json: { origins: { service: { read: { source: "filters" } } }, name: "layerDefinition.filters", write: true } })], V3.prototype, "filters", void 0), r([m({ type: [y] })], V3.prototype, "fields", void 0), r([m(O.fieldsIndex)], V3.prototype, "fieldsIndex", void 0), r([o("service", "fields", ["fields", "attributeStorageInfo"])], V3.prototype, "readServiceFields", null), r([m(O.outFields)], V3.prototype, "outFields", void 0), r([m({ readOnly: true })], V3.prototype, "attributeStorageInfo", void 0), r([m(c)], V3.prototype, "elevationInfo", null), r([m({ type: String, json: { origins: { "web-scene": { read: true, write: true }, "portal-item": { read: true, write: true } }, read: false } })], V3.prototype, "path", void 0), r([m(d2)], V3.prototype, "legendEnabled", void 0), r([m({ types: i3, json: { origins: { service: { read: { source: "drawingInfo.renderer" } } }, name: "layerDefinition.drawingInfo.renderer", write: { target: { "layerDefinition.drawingInfo.renderer": { types: i3 }, "layerDefinition.drawingInfo.transparency": { type: Number } } } } })], V3.prototype, "renderer", void 0), r([r2("renderer")], V3.prototype, "writeRenderer", null), r([m({ json: { read: false }, readOnly: true })], V3.prototype, "type", void 0), V3 = r([a3("esri.layers.PointCloudLayer")], V3);
var U2 = V3;
export {
  U2 as default
};
//# sourceMappingURL=PointCloudLayer-5IJX2ZSN.js.map
