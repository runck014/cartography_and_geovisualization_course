import {
  c as c2,
  p
} from "./chunk-F3IC5LHL.js";
import {
  U
} from "./chunk-CRH37WFF.js";
import {
  s
} from "./chunk-GRW2QIBT.js";
import {
  c
} from "./chunk-XKQWTZMW.js";

// node_modules/@arcgis/core/geometry/support/meshUtils/External.js
var a = class {
  constructor(t, r, e) {
    this.assetName = t, this.assetMimeType = r, this.parts = e;
  }
  equals(t) {
    return this === t || this.assetName === t.assetName && this.assetMimeType === t.assetMimeType && c(this.parts, t.parts, (t2, r) => t2.equals(r));
  }
  isOnService(t) {
    return this.parts.every((r) => r.isOnService(t));
  }
  makeHash() {
    let t = "";
    for (const r of this.parts) t += r.partHash;
    return t;
  }
  async toBlob(t) {
    const { parts: r } = this;
    if (1 === r.length) return r[0].toBlob(t);
    const s2 = await Promise.all(r.map((r2) => r2.toBlob(t)));
    return s(t), new Blob(s2);
  }
};
var i = class {
  constructor(t, r) {
    this.partUrl = t, this.partHash = r;
  }
  equals(t) {
    return this === t || this.partUrl === t.partUrl && this.partHash === t.partHash;
  }
  isOnService(t) {
    return this.partUrl.startsWith(`${t.path}/assets/`);
  }
  async toBlob(r) {
    const { data: s2 } = await U(this.partUrl, { responseType: "blob" });
    return s(r), s2;
  }
};
function o(t) {
  return l(t == null ? void 0 : t.source);
}
function u(t) {
  if (!Array.isArray(t)) return false;
  return t.every((t2) => t2 instanceof a);
}
var c3 = /^(model\/gltf\+json)|(model\/gltf-binary)$/;
var f = /\.(gltf|glb)/i;
function l(t) {
  if (!t) return false;
  if (Array.isArray(t)) {
    return t.some(p2);
  }
  return p2(t);
}
function p2(t) {
  if (t instanceof File) {
    const { type: r, name: e } = t;
    return c3.test(r) || f.test(e);
  }
  return c3.test(t.assetMimeType) || f.test(t.assetName);
}
function m(t, r) {
  if (!t) return false;
  const { source: e } = t;
  return y(e, r);
}
function h(t, r) {
  if (t === r) return true;
  const { source: e } = t, { source: s2 } = r;
  if (e === s2) return true;
  if (u(e) && u(s2)) {
    if (e.length !== s2.length) return false;
    const t2 = (t3, r3) => t3.assetName < r3.assetName ? -1 : t3.assetName > r3.assetName ? 1 : 0, r2 = [...e].sort(t2), n = [...s2].sort(t2);
    for (let e2 = 0; e2 < r2.length; ++e2) if (!r2[e2].equals(n[e2])) return false;
    return true;
  }
  return false;
}
function y(t, r) {
  if (Array.isArray(t)) {
    const e = t;
    return e.length > 0 && e.every((t2) => g(t2, r));
  }
  return g(t, r);
}
function g(t, r) {
  return t instanceof a && t.isOnService(r);
}
function b(t, r) {
  return t instanceof File ? c2(t, r) : p(t.assetMimeType, t.assetName, r);
}
function N(t) {
  return Array.isArray(t) ? t : [t];
}
function A(t) {
  return !!t.original;
}

export {
  a,
  i,
  o,
  m,
  h,
  b,
  N,
  A
};
//# sourceMappingURL=chunk-ZWM63JM7.js.map
