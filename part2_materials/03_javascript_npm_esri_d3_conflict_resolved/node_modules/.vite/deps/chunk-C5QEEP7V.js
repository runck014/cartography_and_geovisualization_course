import {
  d,
  g
} from "./chunk-P3GRQ2CH.js";
import {
  has
} from "./chunk-XKQWTZMW.js";

// node_modules/@arcgis/core/rest/support/jsonUtils.js
function n(n3, r2, u2) {
  return !!t(n3, r2, u2);
}
function r(n3, r2, u2) {
  return t(n3, r2, u2);
}
function t(n3, r2, t2) {
  return n3 && n3.hasOwnProperty(r2) ? n3[r2] : t2;
}

// node_modules/@arcgis/core/layers/support/serviceCapabilitiesUtils.js
var p = { name: "supportsName", size: "supportsSize", contentType: "supportsContentType", keywords: "supportsKeywords", exifInfo: "supportsExifInfo" };
function o(t2) {
  var _a;
  const s = (_a = t2 == null ? void 0 : t2.supportedSpatialAggregationStatistics) == null ? void 0 : _a.map((t3) => t3.toLowerCase());
  return { envelope: !!(s == null ? void 0 : s.includes("envelopeaggregate")), centroid: !!(s == null ? void 0 : s.includes("centroidaggregate")), convexHull: !!(s == null ? void 0 : s.includes("convexhullaggregate")) };
}
function u(t2, s) {
  var _a;
  const e = (_a = t2 == null ? void 0 : t2.supportedOperationsWithCacheHint) == null ? void 0 : _a.map((t3) => t3.toLowerCase());
  return !!(e == null ? void 0 : e.includes(s.toLowerCase()));
}
function n2(t2) {
  var _a;
  const s = (_a = t2 == null ? void 0 : t2.supportedStatisticTypes) == null ? void 0 : _a.map((t3) => t3.toLowerCase());
  return { count: !!(s == null ? void 0 : s.includes("count")), sum: !!(s == null ? void 0 : s.includes("sum")), min: !!(s == null ? void 0 : s.includes("min")), max: !!(s == null ? void 0 : s.includes("max")), avg: !!(s == null ? void 0 : s.includes("avg")), var: !!(s == null ? void 0 : s.includes("var")), stddev: !!(s == null ? void 0 : s.includes("stddev")), percentileContinuous: !!(s == null ? void 0 : s.includes("percentile_continuous")), percentileDiscrete: !!(s == null ? void 0 : s.includes("percentile_discrete")), envelope: !!(s == null ? void 0 : s.includes("envelopeaggregate")), centroid: !!(s == null ? void 0 : s.includes("centroidaggregate")), convexHull: !!(s == null ? void 0 : s.includes("convexhullaggregate")) };
}
function i(t2, s) {
  return { analytics: a(t2), attachment: c(t2), data: d2(t2), metadata: l(t2), operations: y(t2.capabilities, t2, s), query: m(t2, s), queryBins: C(t2), queryRelated: g2(t2), queryTopFeatures: h(t2), editing: v(t2) };
}
function a(t2) {
  return { supportsCacheHint: u(t2.advancedQueryCapabilities, "queryAnalytics") };
}
function c(t2) {
  const s = t2.attachmentProperties, r2 = { supportsName: false, supportsSize: false, supportsContentType: false, supportsKeywords: false, supportsExifInfo: false, supportsCacheHint: u(t2.advancedQueryCapabilities, "queryAttachments"), supportsResize: n(t2, "supportsAttachmentsResizing", false) };
  return s && Array.isArray(s) && s.forEach((t3) => {
    const s2 = p[t3.name];
    s2 && (r2[s2] = !!t3.isEnabled);
  }), r2;
}
function d2(t2) {
  return { isVersioned: n(t2, "isDataVersioned", false), isBranchVersioned: n(t2, "isDataBranchVersioned", false), supportsAttachment: n(t2, "hasAttachments", false), supportsM: n(t2, "hasM", false), supportsZ: n(t2, "hasZ", false) };
}
function l(t2) {
  return { supportsAdvancedFieldProperties: n(t2, "supportsFieldDescriptionProperty", false) };
}
function y(s, r2, p2) {
  const o2 = s ? s.toLowerCase().split(",").map((t2) => t2.trim()) : [], u2 = p2 ? d(p2) : null, n3 = o2.includes(null != u2 && "MapServer" === u2.serverType ? "data" : "query"), i2 = o2.includes("editing") && !r2.datesInUnknownTimezone;
  let a2 = i2 && o2.includes("create"), c2 = i2 && o2.includes("delete"), d3 = i2 && o2.includes("update");
  const l2 = o2.includes("changetracking"), y2 = r2.advancedQueryCapabilities;
  return i2 && !(a2 || c2 || d3) && (a2 = c2 = d3 = true), { supportsCalculate: n(r2, "supportsCalculate", false), supportsTruncate: n(r2, "supportsTruncate", false), supportsValidateSql: n(r2, "supportsValidateSql", false), supportsAdd: a2, supportsDelete: c2, supportsEditing: i2, supportsChangeTracking: l2, supportsQuery: n3, supportsQueryAnalytics: n(y2, "supportsQueryAnalytic", false), supportsQueryAttachments: n(y2, "supportsQueryAttachments", false), supportsQueryBins: n(y2, "supportsQueryBins", false), supportsQueryTopFeatures: n(y2, "supportsTopFeaturesQuery", false), supportsResizeAttachments: n(r2, "supportsAttachmentsResizing", false), supportsSync: o2.includes("sync"), supportsUpdate: d3, supportsExceedsLimitStatistics: n(r2, "supportsExceedsLimitStatistics", false), supportsAsyncConvert3D: n(r2, "supportsAsyncConvert3D", false) };
}
function m(t2, p2) {
  const n3 = t2.advancedQueryCapabilities, i2 = t2.ownershipBasedAccessControlForFeatures, a2 = t2.archivingInfo, c2 = t2.currentVersion, d3 = p2 == null ? void 0 : p2.includes("MapServer"), l2 = !d3 || c2 >= has("mapserver-pbf-version-support"), y2 = g(p2), m2 = new Set((t2.supportedQueryFormats ?? "").split(",").map((t3) => t3.toLowerCase().trim()));
  return { maxRecordCount: r(t2, "maxRecordCount", void 0), maxRecordCountFactor: r(t2, "maxRecordCountFactor", void 0), standardMaxRecordCount: r(t2, "standardMaxRecordCount", void 0), supportedSpatialAggregationStatistics: o(n3), supportsCacheHint: n(n3, "supportsQueryWithCacheHint", false) || u(n3, "query"), supportsCentroid: n(n3, "supportsReturningGeometryCentroid", false), supportsCompactGeometry: y2, supportsDefaultSpatialReference: n(n3, "supportsDefaultSR", false), supportsDisjointSpatialRelationship: n(n3, "supportsDisjointSpatialRel", false), supportsDistance: n(n3, "supportsQueryWithDistance", false), supportsDistinct: n(n3, "supportsDistinct", t2.supportsAdvancedQueries), supportsExtent: n(n3, "supportsReturningQueryExtent", false), supportsFormatPBF: l2 && m2.has("pbf"), supportsFullTextSearch: n(n3, "supportsFullTextSearch", false), supportsGeometryProperties: n(n3, "supportsReturningGeometryProperties", false), supportsHavingClause: n(n3, "supportsHavingClause", false), supportsHistoricMoment: n(a2, "supportsQueryWithHistoricMoment", false), supportsMaxRecordCountFactor: n(n3, "supportsMaxRecordCountFactor", false), supportsOrderBy: n(n3, "supportsOrderBy", t2.supportsAdvancedQueries), supportsPagination: n(n3, "supportsPagination", false), supportsPercentileStatistics: n(n3, "supportsPercentileStatistics", false), supportsQuantization: n(t2, "supportsCoordinatesQuantization", false), supportsQuantizationEditMode: n(t2, "supportsQuantizationEditMode", false), supportsQueryByAnonymous: n(i2, "allowAnonymousToQuery", true), supportsQueryByOthers: n(i2, "allowOthersToQuery", true), supportsQueryGeometry: n(t2, "supportsReturningQueryGeometry", false), supportsResultType: n(n3, "supportsQueryWithResultType", false), supportsSpatialAggregationStatistics: n(n3, "supportsSpatialAggregationStatistics", false), supportsSqlExpression: n(n3, "supportsSqlExpression", false), supportsStandardizedQueriesOnly: n(t2, "useStandardizedQueries", false), supportsStatistics: n(n3, "supportsStatistics", t2.supportsStatistics), supportsTopFeaturesQuery: n(n3, "supportsTopFeaturesQuery", false), tileMaxRecordCount: r(t2, "tileMaxRecordCount", void 0) };
}
function g2(t2) {
  const s = t2.advancedQueryCapabilities, r2 = n(s, "supportsAdvancedQueryRelated", false);
  return { supportsPagination: n(s, "supportsQueryRelatedPagination", false), supportsCount: r2, supportsOrderBy: r2, supportsCacheHint: u(s, "queryRelated") };
}
function h(t2) {
  return { supportsCacheHint: u(t2.advancedQueryCapabilities, "queryTopFilter") };
}
function C(t2) {
  const s = t2 ? t2.queryBinsCapabilities : void 0;
  return { supportsDate: n(s, "supportsDateBin", false), supportsFixedInterval: n(s, "supportsFixedIntervalBin", false), supportsAutoInterval: n(s, "supportsAutoIntervalBin", false), supportsFixedBoundaries: n(s, "supportsFixedBoundariesBin", false), supportedStatistics: n2(s) };
}
function v(t2) {
  const s = t2.ownershipBasedAccessControlForFeatures, p2 = t2 ? t2.advancedEditingCapabilities : void 0;
  return { supportsGeometryUpdate: n(t2, "allowGeometryUpdates", true), supportsGlobalId: n(t2, "supportsApplyEditsWithGlobalIds", false), supportsReturnServiceEditsInSourceSpatialReference: n(t2, "supportsReturnServiceEditsInSourceSR", false), supportsRollbackOnFailure: n(t2, "supportsRollbackOnFailureParameter", false), supportsUpdateWithoutM: n(t2, "allowUpdateWithoutMValues", false), supportsUploadWithItemId: n(t2, "supportsAttachmentsByUploadId", false), supportsDeleteByAnonymous: n(s, "allowAnonymousToDelete", true), supportsDeleteByOthers: n(s, "allowOthersToDelete", true), supportsUpdateByAnonymous: n(s, "allowAnonymousToUpdate", true), supportsUpdateByOthers: n(s, "allowOthersToUpdate", true), supportsAsyncApplyEdits: n(p2, "supportsAsyncApplyEdits", false), zDefault: r(t2, "zDefault", void 0) };
}
function A(t2) {
  var _a;
  return { operations: { supportsAppend: n(t2, "supportsAppend", false), supportsCoverageQuery: ((_a = t2 == null ? void 0 : t2.playbackInfo) == null ? void 0 : _a.klv["0601"]) ?? false, supportsExportClip: n(t2, "supportsExportClip", false), supportsExportFrameset: n(t2, "supportsExportFrameset", false), supportsMensuration: n(t2, "supportsMensuration", false), supportsUpdate: n(t2, "supportsUpdate", false) } };
}

export {
  i,
  A
};
//# sourceMappingURL=chunk-C5QEEP7V.js.map
