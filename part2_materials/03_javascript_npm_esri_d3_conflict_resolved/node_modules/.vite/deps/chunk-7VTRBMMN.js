import {
  R
} from "./chunk-YEDSTDY4.js";
import {
  a as a2,
  m as m2,
  s
} from "./chunk-LE3YW4Y3.js";
import {
  i as i2
} from "./chunk-NYLBGE62.js";
import {
  n as n3
} from "./chunk-EZXLBRAS.js";
import {
  f as f2
} from "./chunk-3L2AYCZY.js";
import {
  r as r2
} from "./chunk-TSVUPARM.js";
import {
  h
} from "./chunk-JS7R723S.js";
import {
  g
} from "./chunk-2WXAPZBK.js";
import {
  i,
  n as n2
} from "./chunk-7O7KFKCG.js";
import {
  f
} from "./chunk-HAF6QJ32.js";
import {
  m
} from "./chunk-H77COA2S.js";
import {
  a4 as a,
  w
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  e,
  n2 as n
} from "./chunk-PKLD5YJF.js";

// node_modules/@arcgis/core/rest/support/BinParametersAttributes.js
var i3 = class extends i2(f) {
  constructor(r3) {
    super(r3), this.alias = null, this.expression = null, this.field = null, this.responseType = null;
  }
};
r([m({ type: String, json: { write: true } })], i3.prototype, "alias", void 0), r([m({ type: String, json: { write: true } })], i3.prototype, "expression", void 0), r([m({ type: String, json: { write: true } })], i3.prototype, "field", void 0), r([m({ type: String, json: { write: true } })], i3.prototype, "responseType", void 0), i3 = r([a("esri.rest.support.BinParametersAttributes")], i3);
var n4 = i3;
i3.from = w(i3);

// node_modules/@arcgis/core/rest/support/BinParametersBase.js
var a3 = new n2({ naturalLog: "natural-log", squareRoot: "square-root" });
var n5 = class extends i2(f) {
  constructor(t) {
    super(t), this.expression = null, this.field = null, this.firstDayOfWeek = null, this.hideUpperBound = null, this.splitByAttributes = null, this.stackByAttributes = null, this.transformation = null;
  }
};
r([m({ type: String, json: { write: true } })], n5.prototype, "expression", void 0), r([m({ type: String, json: { name: "onField", write: true } })], n5.prototype, "field", void 0), r([m({ type: String, json: { write: true } })], n5.prototype, "firstDayOfWeek", void 0), r([m({ type: String, json: { write: true } })], n5.prototype, "hideUpperBound", void 0), r([m({ type: n4, json: { write: { target: { splitBy: { type: String }, splitByField: { type: String }, splitByAlias: { type: String } }, writer: (t, e2) => {
  null != t.field && (e2.splitByField = t.field), null != t.expression && (e2.splitBy = t.expression), null != t.alias && (e2.splitByAlias = t.alias);
} }, read: { source: ["splitBy", "splitByField", "splitByAlias"], reader: (t, e2) => new n4({ field: e2.splitByField, expression: e2.splitBy, alias: e2.splitByAlias }) } } })], n5.prototype, "splitByAttributes", void 0), r([m({ type: n4, json: { write: { target: { stackBy: { type: String }, stackByField: { type: String }, stackByAlias: { type: String }, jsonStyle: { type: String } }, writer: (t, e2) => {
  null != t.field && (e2.stackByField = t.field), null != t.expression && (e2.stackBy = t.expression), null != t.alias && (e2.stackByAlias = t.alias), null != t.responseType && (e2.jsonStyle = t.responseType);
}, overridePolicy() {
  var _a, _b;
  return { enabled: null != ((_a = this.stackByAttributes) == null ? void 0 : _a.field) || null != ((_b = this.stackByAttributes) == null ? void 0 : _b.expression) };
} }, read: { source: ["stackBy", "stackByField", "stackByAlias", "jsonStyle"], reader: (t, e2) => new n4({ field: e2.stackByField, expression: e2.stackBy, alias: e2.stackByAlias, responseType: e2.jsonStyle }) } } })], n5.prototype, "stackByAttributes", void 0), r([r2(a3)], n5.prototype, "transformation", void 0), n5 = r([a("esri.rest.support.BinParametersBase")], n5);
var y = n5;

// node_modules/@arcgis/core/rest/support/NormalizationBinParametersMixin.js
var n6 = i()({ naturalLog: "natural-log", squareRoot: "square-root", percentOfTotal: "percent-of-total", log: "log", field: "field" });
var l = "percent-of-total";
var s2 = "field";
var m3 = (t) => {
  let m8 = class extends t {
    constructor() {
      super(...arguments), this.normalizationField = null, this.normalizationMaxValue = null, this.normalizationMinValue = null, this.normalizationTotal = null;
    }
    get normalizationType() {
      let o = this._get("normalizationType");
      const t2 = !!this.normalizationField, a4 = null != this.normalizationTotal;
      return t2 || a4 ? (o = t2 && s2 || a4 && l || null, t2 && a4 && n.getLogger(this).warn("warning: both normalizationField and normalizationTotal are set!")) : o !== s2 && o !== l || (o = null), o;
    }
    set normalizationType(o) {
      this._set("normalizationType", o);
    }
  };
  return r([m({ type: String, json: { name: "parameters.normalizationField", write: true } })], m8.prototype, "normalizationField", void 0), r([m({ type: Number, json: { name: "parameters.normalizationMaxValue", write: true } })], m8.prototype, "normalizationMaxValue", void 0), r([m({ type: Number, json: { name: "parameters.normalizationMinValue", write: true } })], m8.prototype, "normalizationMinValue", void 0), r([m({ type: Number, json: { name: "parameters.normalizationTotal", write: true } })], m8.prototype, "normalizationTotal", void 0), r([r2(n6, { name: "parameters.normalizationType" })], m8.prototype, "normalizationType", null), m8 = r([a("esri.rest.support.NormalizationBinParametersMixin")], m8), m8;
};

// node_modules/@arcgis/core/rest/support/AutoIntervalBinParameters.js
function p(r3, e2, o) {
  e(o, r3 instanceof Date ? r3.getTime() : r3, e2);
}
var m4 = class extends m3(y) {
  constructor(r3) {
    super(r3), this.bins = null, this.end = null, this.start = null, this.type = "auto-interval";
  }
};
r([m({ type: Number, json: { name: "parameters.numberOfBins", write: true } })], m4.prototype, "bins", void 0), r([m({ json: { name: "parameters.end", write: { writer: p } } })], m4.prototype, "end", void 0), r([m({ json: { name: "parameters.start", write: { writer: p } } })], m4.prototype, "start", void 0), r([r2({ autoIntervalBin: "auto-interval" }, { readOnly: true })], m4.prototype, "type", void 0), m4 = r([a("esri.rest.support.AutoIntervalBinParameters")], m4);
var c = m4;
m4.from = w(m4);

// node_modules/@arcgis/core/rest/support/DateBinTimeInterval.js
var c2 = i()({ year: "years", quarter: "quarters", month: "months", week: "weeks", day: "days", hour: "hours", minute: "minutes", second: "seconds" });
var n7 = class extends i2(f) {
  constructor(r3) {
    super(r3), this.value = null, this.units = null;
  }
};
r([m({ type: Number, json: { name: "number", write: true } })], n7.prototype, "value", void 0), r([r2(c2, { name: "unit" })], n7.prototype, "units", void 0), n7 = r([a("esri.rest.support.DateBinTimeInterval")], n7);
var u = n7;
n7.from = w(n7);

// node_modules/@arcgis/core/rest/support/DateBinParameters.js
function i4(e2, r3, o) {
  e(o, "string" == typeof e2 ? e2 : e2 == null ? void 0 : e2.getTime(), r3);
}
function m5(e2, t) {
  const r3 = e2.parameters[t];
  return r3 ? "string" == typeof r3 ? r3 : new Date(r3) : null;
}
var c3 = class extends y {
  constructor(e2) {
    super(e2), this.end = null, this.interval = null, this.offset = null, this.start = null, this.type = "date";
  }
};
r([m({ cast: (e2) => e2 ? "string" == typeof e2 ? e2 : new Date(e2) : null, json: { name: "parameters.end", read: { reader: (e2, t) => m5(t, "end") }, write: { writer: i4 } } })], c3.prototype, "end", void 0), r([m({ type: u, json: { name: "parameters", write: true } })], c3.prototype, "interval", void 0), r([m({ type: u, json: { name: "parameters.offset", write: true } })], c3.prototype, "offset", void 0), r([m({ cast: (e2) => e2 ? "string" == typeof e2 ? e2 : new Date(e2) : null, json: { name: "parameters.start", read: { reader: (e2, t) => m5(t, "start") }, write: { writer: i4 } } })], c3.prototype, "start", void 0), r([r2({ dateBin: "date" }, { readOnly: true })], c3.prototype, "type", void 0), c3 = r([a("esri.rest.support.DateBinParameters")], c3);
var d = c3;
c3.from = w(c3);

// node_modules/@arcgis/core/rest/support/FixedBoundariesBinParameters.js
function p2(r3) {
  return r3[0] instanceof Date;
}
function n8(r3, e2, s3) {
  e(s3, r3 && p2(r3) ? r3.map((r4) => r4.getTime()) : r3, e2);
}
var c4 = class extends y {
  constructor(r3) {
    super(r3), this.boundaries = null, this.type = "fixed-boundaries";
  }
};
r([m({ json: { name: "parameters.boundaries", write: { writer: n8 } } })], c4.prototype, "boundaries", void 0), r([r2({ fixedBoundariesBin: "fixed-boundaries" }, { readOnly: true })], c4.prototype, "type", void 0), c4 = r([a("esri.rest.support.FixedBoundariesBinParameters")], c4);
var m6 = c4;
c4.from = w(c4);

// node_modules/@arcgis/core/rest/support/FixedIntervalBinParameters.js
function n9(r3, t, o) {
  e(o, r3 instanceof Date ? r3.getTime() : r3, t);
}
var m7 = class extends m3(y) {
  constructor(r3) {
    super(r3), this.end = null, this.interval = null, this.start = null, this.type = "fixed-interval";
  }
};
r([m({ json: { name: "parameters.end", write: { writer: n9 } } })], m7.prototype, "end", void 0), r([m({ type: Number, json: { name: "parameters.interval", write: true } })], m7.prototype, "interval", void 0), r([m({ json: { name: "parameters.start", write: { writer: n9 } } })], m7.prototype, "start", void 0), r([r2({ fixedIntervalBin: "fixed-interval" }, { readOnly: true })], m7.prototype, "type", void 0), m7 = r([a("esri.rest.support.FixedIntervalBinParameters")], m7);
var c5 = m7;
m7.from = w(m7);

// node_modules/@arcgis/core/rest/support/BinsQuery.js
var b = new n2({ asc: "ascending", desc: "descending" });
var B = { base: y, key: "type", typeMap: { "auto-interval": c, date: d, "fixed-boundaries": m6, "fixed-interval": c5 } };
var P = class extends i2(f) {
  constructor(e2) {
    super(e2), this.binParameters = null, this.binOrder = "ascending", this.cacheHint = void 0, this.datumTransformation = null, this.defaultSpatialReference = null, this.distance = void 0, this.geometry = null, this.lowerBoundaryAlias = null, this.outSpatialReference = null, this.outStatistics = null, this.quantizationParameters = null, this.returnDistinctValues = null, this.spatialRelationship = "intersects", this.upperBoundaryAlias = null, this.units = null, this.where = "1=1";
  }
  set outTimeZone(e2) {
    this._set("outTimeZone", e2), e2 && !h(e2) && n.getLogger(this).warn("#outTimeZone", `the parsed value '${e2}' may not be a valid IANA time zone`);
  }
};
r([m({ types: B, json: { name: "bin", write: true } })], P.prototype, "binParameters", void 0), r([r2(b)], P.prototype, "binOrder", void 0), r([m({ type: Boolean, json: { write: true } })], P.prototype, "cacheHint", void 0), r([m({ json: { write: true } })], P.prototype, "datumTransformation", void 0), r([m({ type: g, json: { name: "defaultSR", write: true } })], P.prototype, "defaultSpatialReference", void 0), r([m({ type: Number, json: { write: { overridePolicy: (e2) => ({ enabled: e2 > 0 }) } } })], P.prototype, "distance", void 0), r([m({ types: n3, json: { read: f2, write: true } })], P.prototype, "geometry", void 0), r([m({ type: String, json: { write: true } })], P.prototype, "lowerBoundaryAlias", void 0), r([m({ type: g, json: { name: "outSR", write: true } })], P.prototype, "outSpatialReference", void 0), r([m({ type: [m2], json: { write: { enabled: true, overridePolicy() {
  return { enabled: null != this.outStatistics && this.outStatistics.length > 0 };
} } } })], P.prototype, "outStatistics", void 0), r([m({ value: null, json: { name: "outTimeReference", read: { reader: (e2) => e2.ianaTimeZone }, write: { writer: (e2, t, o) => {
  e2 && (t[o] = { ianaTimeZone: e2 });
} } } })], P.prototype, "outTimeZone", null), r([m({ type: a2, json: { write: true } })], P.prototype, "quantizationParameters", void 0), r([m({ type: Boolean, json: { write: true } })], P.prototype, "returnDistinctValues", void 0), r([r2(s, { name: "spatialRel" })], P.prototype, "spatialRelationship", void 0), r([m({ type: String, json: { write: true } })], P.prototype, "upperBoundaryAlias", void 0), r([m({ type: String, json: { read: R.read, write: { writer: R.write, overridePolicy(e2) {
  return { enabled: null != e2 && null != this.distance && this.distance > 0 };
} } } })], P.prototype, "units", void 0), r([m({ type: String, json: { write: true } })], P.prototype, "where", void 0), P = r([a("esri.rest.support.BinsQuery")], P);
var R2 = P;
P.from = w(P);

export {
  R2 as R
};
//# sourceMappingURL=chunk-7VTRBMMN.js.map
