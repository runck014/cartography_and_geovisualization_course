import {
  l as l2
} from "./chunk-5PEZCNND.js";
import {
  d,
  e,
  t
} from "./chunk-PBHXMZZN.js";
import {
  f,
  g,
  u as u2,
  y
} from "./chunk-5OJUBUJF.js";
import "./chunk-OZQVNYO5.js";
import {
  c
} from "./chunk-6TRZLPPJ.js";
import "./chunk-WYO25WZZ.js";
import "./chunk-OC7D2HR4.js";
import {
  G
} from "./chunk-KKH7HGO3.js";
import "./chunk-2RIHQI4N.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-WPERPIJF.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-73FHIZIF.js";
import "./chunk-ICIPRMPO.js";
import "./chunk-N7UV77NP.js";
import "./chunk-KZYGXJYH.js";
import "./chunk-JFI4ESYU.js";
import "./chunk-4X2UADDH.js";
import "./chunk-ZICJB3ML.js";
import {
  s as s2
} from "./chunk-AVBIV2K3.js";
import {
  l
} from "./chunk-4NJWIUZG.js";
import "./chunk-NYLBGE62.js";
import "./chunk-K5RYAJV4.js";
import "./chunk-W6D3ECTZ.js";
import "./chunk-QXDQJEIU.js";
import "./chunk-SEUZ3J6J.js";
import "./chunk-BWTCR2DR.js";
import "./chunk-SMOTPOZ7.js";
import {
  u
} from "./chunk-YVSEBNS4.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import "./chunk-TSVUPARM.js";
import "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-RCLWOQNR.js";
import "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-SEG3PRUR.js";
import "./chunk-B6VE32RA.js";
import "./chunk-AIYFWM42.js";
import "./chunk-2M53HYNY.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-FG3XOAFD.js";
import "./chunk-GN5RE63N.js";
import "./chunk-2WXAPZBK.js";
import "./chunk-E2I7HYXQ.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import "./chunk-CRH37WFF.js";
import "./chunk-YFGQMO6E.js";
import "./chunk-HAF6QJ32.js";
import "./chunk-H77COA2S.js";
import "./chunk-7LJCT7EA.js";
import "./chunk-MV5XBD6C.js";
import "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import {
  s2 as s
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/symbols/support/previewSymbol2D.js
var d2 = "picture-fill";
var f2 = "picture-marker";
var y2 = "simple-fill";
var g2 = "simple-line";
var w = "simple-marker";
var v = "text";
var x = "Aa";
var b = t.size;
var M = t.maxSize;
var k = t.maxOutlineSize;
var L = t.lineWidth;
var z = 225;
var j = document.createElement("canvas");
function C(e2, t2) {
  const a = j.getContext("2d"), o = [];
  t2 && (t2.weight && o.push(t2.weight), t2.size && o.push(t2.size + "px"), t2.family && o.push(t2.family)), a.font = o.join(" ");
  const { width: i, actualBoundingBoxLeft: l3, actualBoundingBoxRight: n, actualBoundingBoxAscent: s3, actualBoundingBoxDescent: r } = a.measureText(e2);
  return { width: Math.ceil(Math.max(i, l3 + n)), height: Math.ceil(s3 + r), x: Math.floor(l3), y: Math.floor((s3 - r) / 2) };
}
function S(e2) {
  const t2 = e2 == null ? void 0 : e2.size;
  return { width: null != t2 && "object" == typeof t2 && "width" in t2 ? u(t2.width) : null, height: null != t2 && "object" == typeof t2 && "height" in t2 ? u(t2.height) : null };
}
async function B(e2, t2) {
  const a = t2.fill, o = e2.color;
  if ("pattern" === (a == null ? void 0 : a.type) && o && e2.type !== d2) {
    const e3 = await f(a.src, o.toCss(true));
    a.src = e3, t2.fill = a;
  }
}
async function U(e2, t2, a, i) {
  var _a, _b, _c;
  if (!("font" in e2) || !e2.font || "text" !== t2.shape.type) return;
  try {
    await c(e2.font);
  } catch {
  }
  const { width: l3, height: n } = S(i);
  if (!/[\uE600-\uE6FF]/.test(t2.shape.text)) {
    const { width: o, height: s3, x: r, y: c2 } = C(t2.shape.text, { weight: (_a = t2.font) == null ? void 0 : _a.weight, size: (_b = t2.font) == null ? void 0 : _b.size, family: (_c = t2.font) == null ? void 0 : _c.family });
    a[0] = l3 ?? o, a[1] = n ?? s3, t2.shape.x = r, t2.shape.y = c2;
    let h = "angle" in e2 ? e2.angle : null;
    if (null != (i == null ? void 0 : i.rotation) && (h = (h ?? 0) + i.rotation), h) {
      const e3 = h * (Math.PI / 180), t3 = Math.abs(Math.sin(e3)), o2 = Math.abs(Math.cos(e3));
      a[1] = a[0] * t3 + a[1] * o2;
    }
  }
}
function E(e2, t2, a, o, l3) {
  var _a;
  if (null != e2.haloColor && null != e2.haloSize) {
    l3.masking ?? (l3.masking = a.map(() => []));
    const n = u(e2.haloSize);
    o[0] += n, o[1] += n, a.unshift([{ ...t2, fill: null, stroke: { color: e2.haloColor, width: 2 * n, join: "round", cap: "round" } }]), l3.masking.unshift([{ shape: { type: "rect", x: 0, y: 0, width: o[0] + 2 * s2, height: o[1] + 2 * s2 }, fill: [255, 255, 255], stroke: null }, { ...t2, fill: [0, 0, 0, 0], stroke: null }]);
  }
  null == e2.backgroundColor && null == e2.borderLineColor || (o[0] += 2 * s2, o[1] += 2 * s2, a.unshift([{ shape: { type: "rect", x: 0, y: 0, width: o[0], height: o[1] }, fill: e2.backgroundColor, stroke: { color: e2.borderLineColor, width: u(e2.borderLineSize) } }]), (_a = l3.masking) == null ? void 0 : _a.unshift([]));
}
function F(e2, t2) {
  return e2 > t2 ? "dark" : "light";
}
function D(e2, t2) {
  var _a;
  const a = "number" == typeof (t2 == null ? void 0 : t2.size) ? t2 == null ? void 0 : t2.size : null, o = null != a ? u(a) : null, r = null != (t2 == null ? void 0 : t2.maxSize) ? u(t2.maxSize) : null;
  let c2 = "angle" in e2 ? e2.angle : null;
  null != (t2 == null ? void 0 : t2.rotation) && (c2 = (c2 ?? 0) + t2.rotation);
  const u3 = u2(e2);
  let m = y(e2);
  "dark" !== A(e2, 245) || (t2 == null ? void 0 : t2.ignoreWhiteSymbols) || (m = { width: 0.75, ...m, color: "#bdc3c7" });
  const p = { shape: null, fill: u3, stroke: m, offset: [0, 0] };
  (m == null ? void 0 : m.width) && (m.width = Math.min(m.width, k));
  const z2 = (m == null ? void 0 : m.width) || 0;
  let j2 = null != (t2 == null ? void 0 : t2.size) && (null == (t2 == null ? void 0 : t2.scale) || (t2 == null ? void 0 : t2.scale)), B2 = 0, U2 = 0, E2 = false;
  switch (e2.type) {
    case w: {
      const a2 = e2.style, { width: l3, height: n } = S(t2), s3 = l3 === n && null != l3 ? l3 : null != o ? o : Math.min(u(e2.size), r || M);
      switch (B2 = s3, U2 = s3, a2) {
        case "circle":
          p.shape = { type: "circle", cx: 0, cy: 0, r: 0.5 * s3 }, j2 || (B2 += z2, U2 += z2);
          break;
        case "cross":
          p.shape = { type: "path", path: [{ command: "M", values: [0, 0.5 * U2] }, { command: "L", values: [B2, 0.5 * U2] }, { command: "M", values: [0.5 * B2, 0] }, { command: "L", values: [0.5 * B2, U2] }] };
          break;
        case "diamond":
          p.shape = { type: "path", path: [{ command: "M", values: [0, 0.5 * U2] }, { command: "L", values: [0.5 * B2, 0] }, { command: "L", values: [B2, 0.5 * U2] }, { command: "L", values: [0.5 * B2, U2] }, { command: "Z", values: [] }] }, j2 || (B2 += z2, U2 += z2);
          break;
        case "square":
          p.shape = { type: "path", path: [{ command: "M", values: [0, 0] }, { command: "L", values: [B2, 0] }, { command: "L", values: [B2, U2] }, { command: "L", values: [0, U2] }, { command: "Z", values: [] }] }, j2 || (B2 += z2, U2 += z2), c2 && (E2 = true);
          break;
        case "triangle":
          p.shape = { type: "path", path: [{ command: "M", values: [0.5 * B2, 0] }, { command: "L", values: [B2, U2] }, { command: "L", values: [0, U2] }, { command: "Z", values: [] }] }, j2 || (B2 += z2, U2 += z2), c2 && (E2 = true);
          break;
        case "x":
          p.shape = { type: "path", path: [{ command: "M", values: [0, 0] }, { command: "L", values: [B2, U2] }, { command: "M", values: [B2, 0] }, { command: "L", values: [0, U2] }] }, c2 && (E2 = true);
          break;
        case "path":
          p.shape = { type: "path", path: e2.path || "" }, j2 || (B2 += z2, U2 += z2), c2 && (E2 = true), j2 = true;
      }
      break;
    }
    case g2: {
      const { width: e3, height: a2 } = S(t2), i = g(m).reduce((e4, t3) => e4 + t3, 0), l3 = i && Math.ceil(L / i), n = a2 ?? o ?? z2, r2 = e3 ?? (i * l3 || L);
      m && (m.width = n), B2 = r2, U2 = n, j2 = true, p.shape = { type: "path", path: [{ command: "M", values: [n / 2, U2 / 2] }, { command: "L", values: [B2 - n / 2, U2 / 2] }] };
      break;
    }
    case d2:
    case y2: {
      const e3 = "object" == typeof (t2 == null ? void 0 : t2.symbolConfig) && !!((_a = t2 == null ? void 0 : t2.symbolConfig) == null ? void 0 : _a.isSquareFill), { width: a2, height: i } = S(t2);
      B2 = !e3 && a2 !== i || null == a2 ? null != o ? o : b : a2, U2 = !e3 && a2 !== i || null == i ? B2 : i, j2 || (B2 += z2, U2 += z2), j2 = true, p.shape = e3 ? { type: "path", path: [{ command: "M", values: [0, 0] }, { command: "L", values: [B2, 0] }, { command: "L", values: [B2, U2] }, { command: "L", values: [0, U2] }, { command: "L", values: [0, 0] }, { command: "Z", values: [] }] } : e.fill[0];
      break;
    }
    case f2: {
      const a2 = Math.min(u(e2.width), r || M), l3 = Math.min(u(e2.height), r || M), { width: n, height: s3 } = S(t2), h = n === s3 && null != n ? n : null != o ? o : Math.max(a2, l3), u4 = a2 / l3;
      B2 = u4 <= 1 ? Math.ceil(h * u4) : h, U2 = u4 <= 1 ? h : Math.ceil(h / u4), p.shape = { type: "image", x: -Math.round(B2 / 2), y: -Math.round(U2 / 2), width: B2, height: U2, src: e2.url || "" }, c2 && (E2 = true);
      break;
    }
    case v: {
      const a2 = e2, l3 = (t2 == null ? void 0 : t2.overrideText) || a2.text || x, n = a2.font, { width: s3, height: c3 } = S(t2), h = null != c3 ? c3 : null != o ? o : Math.min(u(n.size), r || M), { width: u4, height: m2 } = C(l3, { weight: n.weight, size: h, family: n.family }), d3 = /[\uE600-\uE6FF]/.test(l3);
      B2 = s3 ?? (d3 ? h : u4), U2 = d3 ? h : m2;
      let f3 = 0.5 * (d3 ? h : m2);
      d3 && (f3 += 5), p.shape = { type: "text", text: l3, x: a2.xoffset || 0, y: a2.yoffset || f3, align: "middle", alignBaseline: a2.verticalAlignment, decoration: n && n.decoration, rotated: a2.rotated, kerning: a2.kerning }, p.font = n && { size: h, style: n.style, decoration: n.decoration, weight: n.weight, family: n.family };
      break;
    }
  }
  return { shapeDescriptor: p, size: [B2, U2], renderOptions: { node: t2 == null ? void 0 : t2.node, scale: j2, opacity: t2 == null ? void 0 : t2.opacity, rotations: [c2], useRotationSize: E2, effectView: t2 == null ? void 0 : t2.effectView, ariaLabel: t2 == null ? void 0 : t2.ariaLabel } };
}
async function Z(e2, t2) {
  var _a;
  const { shapeDescriptor: o, size: i, renderOptions: l3 } = D(e2, t2);
  if (!o.shape) throw new s("symbolPreview: renderPreviewHTML2D", "symbol not supported.");
  await B(e2, o), await U(e2, o, i, t2);
  const n = [[o]];
  if ("object" == typeof (t2 == null ? void 0 : t2.symbolConfig) && ((_a = t2 == null ? void 0 : t2.symbolConfig) == null ? void 0 : _a.applyColorModulation)) {
    const e3 = 0.6 * i[0];
    n.unshift([{ ...o, offset: [-e3, 0], fill: d(o.fill, -0.3) }]), n.push([{ ...o, offset: [e3, 0], fill: d(o.fill, 0.3) }]), i[0] += 2 * e3, l3.scale = false;
  }
  return "text" === e2.type && E(e2, o, n, i, l3), l2(n, i, l3);
}
function A(a, o = z) {
  const i = u2(a), s3 = y(a), r = !i || "type" in i ? null : new l(i), c2 = (s3 == null ? void 0 : s3.color) ? new l(s3 == null ? void 0 : s3.color) : null, h = r ? F(G(r), o) : null, u3 = c2 ? F(G(c2), o) : null;
  return u3 ? h ? h === u3 ? h : o >= z ? "light" : "dark" : u3 : h;
}
export {
  A as getContrastingBackgroundTheme,
  D as getRenderSymbolParameters,
  Z as previewSymbol2D
};
//# sourceMappingURL=previewSymbol2D-VHBT3246.js.map
