import {
  F,
  s as s2
} from "./chunk-23TJP3F6.js";
import {
  _,
  x
} from "./chunk-YFGQMO6E.js";
import {
  w
} from "./chunk-7LJCT7EA.js";
import {
  u
} from "./chunk-R2PAF6JT.js";
import {
  n2 as n,
  s
} from "./chunk-PKLD5YJF.js";

// node_modules/@arcgis/core/support/basemapUtils.js
var p = () => n.getLogger("esri.support.basemapUtils");
function y() {
  return {};
}
function m(e) {
  for (const r2 in e) {
    const t = e[r2];
    u(t), delete e[r2];
  }
}
function b(t, n2) {
  let a;
  if ("string" == typeof t) {
    const i = t in s2, l = !i && t.includes("/");
    if (!i && !l) {
      if (s.apiKey) p().warn(`Unable to find basemap definition for: ${t}. See available styles at https://developers.arcgis.com/rest/basemap-styles/`);
      else {
        const e = Object.entries(s2).filter(([e2, r2]) => r2.classic || r2.is3d).map(([e2]) => `"${e2}"`).sort().join(", ");
        p().warn(`Unable to find basemap definition for: ${t}. Try one of these: ${e}`);
      }
      return null;
    }
    n2 && (a = n2[t]), a || (a = i ? F.fromId(t) : new F({ style: { id: t } }), n2 && (n2[t] = a));
  } else a = w(F, t);
  return (a == null ? void 0 : a.destroyed) && (p().warn("The provided basemap is already destroyed", { basemap: a }), a = null), a;
}
function T(e) {
  return !!(e == null ? void 0 : e.baseLayers.concat(e.referenceLayers).some(U));
}
function U(e) {
  if (x2(e.url)) return true;
  if ("vector-tile" === e.type) for (const r2 in e.sourceNameToSource) {
    const t = e.sourceNameToSource[r2];
    if (x2(t == null ? void 0 : t.sourceUrl)) return true;
  }
  return false;
}
function j(e, r2) {
  var _a;
  if (null == r2 || null == e) return { spatialReference: null, updating: false };
  if ("not-loaded" === r2.loadStatus) return r2.load(), { spatialReference: null, updating: true };
  if (r2.spatialReference) return { spatialReference: r2.spatialReference, updating: false };
  if (0 === r2.baseLayers.length) return { spatialReference: null, updating: false };
  const t = r2.baseLayers.at(0);
  switch (t.loadStatus) {
    case "not-loaded":
      t.load();
    case "loading":
      return { spatialReference: null, updating: true };
    case "failed":
      return { spatialReference: null, updating: false };
  }
  const n2 = (("supportedSpatialReferences" in t ? t.supportedSpatialReferences : null) || ["tileInfo" in t ? (_a = t.tileInfo) == null ? void 0 : _a.spatialReference : t.spatialReference]).filter(Boolean), a = e.spatialReference;
  return a ? { spatialReference: n2.find((e2) => a.equals(e2)) ?? n2[0] ?? null, updating: false } : { spatialReference: n2[0], updating: false };
}
var q = /^(basemaps|ibasemaps).*-api\.arcgis\.com$/i;
function x2(e) {
  if (!e) return false;
  const r2 = new x(_(e));
  return !!r2.authority && q.test(r2.authority);
}

export {
  y,
  m,
  b,
  T,
  U,
  j
};
//# sourceMappingURL=chunk-PJNOPBRY.js.map
