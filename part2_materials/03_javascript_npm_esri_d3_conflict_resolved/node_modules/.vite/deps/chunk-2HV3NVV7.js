import {
  $,
  E,
  I,
  K,
  L,
  P,
  Pe,
  Q,
  Se,
  U,
  W,
  X,
  Ye,
  a,
  be,
  de,
  ee,
  he,
  ne,
  q,
  r,
  s,
  te,
  v,
  ye,
  z
} from "./chunk-6ZMDPECL.js";
import {
  t
} from "./chunk-Q4J5AN2X.js";
import {
  m
} from "./chunk-BN24XFSK.js";
import {
  n
} from "./chunk-FG3XOAFD.js";

// node_modules/@arcgis/core/arcade/deepClone.js
function m2(a2) {
  p = a2;
}
var p;
function f(m3) {
  return null === m3 ? null : ee(m3) ? m3.clone() : I(m3) ? m3 : q(m3) ? m3.clone() : X(m3) ? m3.toArray().map((a2) => f(a2)) : E(m3) ? m3.map((a2) => f(a2)) : U(m3) ? p.createFromArcadeFeature(m3) : W(m3) || K(m3) ? m3 : Q(m3) || "esri.arcade.Attachment" === (m3 == null ? void 0 : m3.declaredClass) ? m3.deepClone() : ("esri.arcade.Portal" === (m3 == null ? void 0 : m3.declaredClass) || $(m3) || m3 instanceof s || v(m3), m3);
}

// node_modules/@arcgis/core/arcade/Dictionary.js
function v2(t2, s2, i = false, e = false) {
  if (null == t2) return null;
  if (z(t2)) return he(t2);
  if (L(t2)) return Se(t2);
  if (P(t2)) return de(t2);
  if (ee(t2)) return be(t2, s2);
  if (te(t2)) return t2;
  if (ne(t2)) return t2;
  if (E(t2)) {
    const r3 = [];
    for (const n2 of t2) r3.push(v2(n2, s2, i, e));
    return r3;
  }
  if (e && q(t2)) return t2;
  const r2 = new N();
  r2.immutable = false;
  for (const n2 of Object.keys(t2)) {
    const o = t2[n2];
    void 0 !== o && r2.setField(n2, v2(o, s2, i, e));
  }
  return r2.immutable = i, r2;
}
var N = class _N {
  constructor(t2) {
    this.declaredClass = "esri.arcade.Dictionary", this.attributes = null, this.plain = false, this.immutable = true, this.attributes = t2 instanceof _N ? t2.attributes : t2 ?? {};
  }
  field(t2) {
    const s2 = t2.toLowerCase(), r2 = this.attributes[t2];
    if (void 0 !== r2) return r2;
    for (const i in this.attributes) if (i.toLowerCase() === s2) return this.attributes[i];
    throw new a(null, r.FieldNotFound, null, { key: t2 });
  }
  setField(s2, r2) {
    if (this.immutable) throw new a(null, r.Immutable, null);
    if (v(r2)) throw new a(null, r.NoFunctionInDictionary, null);
    const o = s2.toLowerCase();
    r2 instanceof Date && (r2 = m.dateJSToArcadeDate(r2));
    if (void 0 === this.attributes[s2]) {
      for (const t2 in this.attributes) if (t2.toLowerCase() === o) return void (this.attributes[t2] = r2);
      this.attributes[s2] = r2;
    } else this.attributes[s2] = r2;
  }
  hasField(t2) {
    const s2 = t2.toLowerCase();
    if (void 0 !== this.attributes[t2]) return true;
    for (const i in this.attributes) if (i.toLowerCase() === s2) return true;
    return false;
  }
  keys() {
    let t2 = [];
    for (const s2 in this.attributes) t2.push(s2);
    return t2 = t2.sort(), t2;
  }
  castToText(s2 = false) {
    let i = "";
    for (const e in this.attributes) {
      "" !== i && (i += ",");
      const n2 = this.attributes[e];
      null == n2 ? i += JSON.stringify(e) + ":null" : L(n2) || z(n2) || P(n2) ? i += JSON.stringify(e) + ":" + JSON.stringify(n2) : n2 instanceof n ? i += JSON.stringify(e) + ":" + ye(n2) : n2 instanceof t || Array.isArray(n2) ? i += JSON.stringify(e) + ":" + ye(n2, null, s2) : n2 instanceof m ? i += s2 ? JSON.stringify(e) + ":" + JSON.stringify(n2.getTime()) : JSON.stringify(e) + ":" + n2.stringify() : null !== n2 && "object" == typeof n2 && void 0 !== n2.castToText && (i += JSON.stringify(e) + ":" + n2.castToText(s2));
    }
    return "{" + i + "}";
  }
  static convertObjectToArcadeDictionary(t2, s2, i = true, e = false) {
    const r2 = new _N();
    r2.immutable = false;
    for (const n2 in t2) {
      const o = t2[n2];
      void 0 !== o && r2.setField(n2.toString(), v2(o, s2, i, e));
    }
    return r2.immutable = i, r2;
  }
  static convertJsonToArcade(t2, s2, i = false, e = false) {
    return v2(t2, s2, i, e);
  }
  castAsJson(t2 = null) {
    const s2 = {};
    for (let i in this.attributes) {
      const e = this.attributes[i];
      void 0 !== e && ((t2 == null ? void 0 : t2.keyTranslate) && (i = t2.keyTranslate(i)), s2[i] = Ye(e, t2));
    }
    return s2;
  }
  async castDictionaryValueAsJsonAsync(t2, s2, i, e = null, r2) {
    const n2 = await Pe(i, e, r2);
    return t2[s2] = n2, n2;
  }
  async castAsJsonAsync(s2 = null, i = null) {
    const e = {}, r2 = [];
    for (let n2 in this.attributes) {
      const o = this.attributes[n2];
      (i == null ? void 0 : i.keyTranslate) && (n2 = i.keyTranslate(n2)), void 0 !== o && (I(o) || o instanceof n || o instanceof m ? e[n2] = Ye(o, i) : r2.push(this.castDictionaryValueAsJsonAsync(e, n2, o, s2, i)));
    }
    return r2.length > 0 && await Promise.all(r2), e;
  }
  deepClone() {
    const t2 = new _N();
    t2.immutable = false;
    for (const i of this.keys()) t2.setField(i, f(this.field(i)));
    return t2;
  }
};

export {
  m2 as m,
  f,
  N
};
//# sourceMappingURL=chunk-2HV3NVV7.js.map
