import {
  y as y2
} from "./chunk-HCUIGCK7.js";
import "./chunk-PAS43ZQC.js";
import {
  i as i2
} from "./chunk-G7VPHLH2.js";
import {
  f as f2,
  m as m2,
  te
} from "./chunk-DDODLGIL.js";
import {
  e as e3
} from "./chunk-V6VYGXU4.js";
import {
  t as t3
} from "./chunk-LFMMBYIR.js";
import "./chunk-CFLZHE4P.js";
import "./chunk-5TUUVC6K.js";
import "./chunk-LTKYSPF4.js";
import "./chunk-F3IC5LHL.js";
import "./chunk-X3DAAXDC.js";
import "./chunk-A3GASGJZ.js";
import "./chunk-RH3RAT7T.js";
import "./chunk-556C3V64.js";
import "./chunk-OMMWWGIU.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-D4XQN7BI.js";
import "./chunk-C5QEEP7V.js";
import "./chunk-XECP56E2.js";
import "./chunk-ZTENQQ25.js";
import {
  t as t4
} from "./chunk-TGFVKJXH.js";
import {
  i
} from "./chunk-ZZTUJWOP.js";
import {
  l as l2
} from "./chunk-SVRTKGNR.js";
import "./chunk-QSIT7EPR.js";
import "./chunk-TP6LRQ42.js";
import {
  l as l3
} from "./chunk-ZE6OS33V.js";
import "./chunk-MWZJIOOL.js";
import "./chunk-ULSRCITK.js";
import {
  e as e2
} from "./chunk-FLUE3DMC.js";
import "./chunk-5GQ62KHN.js";
import "./chunk-YAGJS3MX.js";
import "./chunk-43KBLSS3.js";
import {
  j
} from "./chunk-RG7AMCT5.js";
import {
  f
} from "./chunk-PV3ZZQOV.js";
import {
  l
} from "./chunk-SM2VXWMT.js";
import "./chunk-WYO25WZZ.js";
import "./chunk-OC7D2HR4.js";
import {
  t as t2
} from "./chunk-IGMG7ERK.js";
import {
  b as b2
} from "./chunk-V47ZBW5W.js";
import {
  y
} from "./chunk-HKYICNT2.js";
import {
  S
} from "./chunk-VGUQMPM6.js";
import "./chunk-KKH7HGO3.js";
import "./chunk-Z3NV3VCK.js";
import "./chunk-7VNQKVOW.js";
import "./chunk-PNVXSHN2.js";
import "./chunk-3DVL3O3F.js";
import "./chunk-RN66FJAW.js";
import "./chunk-QYSQ6XPQ.js";
import "./chunk-2RIHQI4N.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-NXGNMEHZ.js";
import "./chunk-TWYDW6LU.js";
import "./chunk-PVHAAI32.js";
import "./chunk-MLATPUII.js";
import "./chunk-NVFQGMP6.js";
import "./chunk-P2IB5HBH.js";
import "./chunk-XX37BOHH.js";
import "./chunk-5CRXWQ3Y.js";
import "./chunk-4RFCLPAF.js";
import "./chunk-4ISVH4NS.js";
import "./chunk-NIWINVGG.js";
import "./chunk-DOENTAA7.js";
import "./chunk-CVI4GL5M.js";
import "./chunk-CGSFKZP2.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-WPERPIJF.js";
import "./chunk-RXJCBLN2.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-XKMN3LJN.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-6B4OMNPA.js";
import "./chunk-3GQ4PJDJ.js";
import "./chunk-VIP4NQFO.js";
import {
  f as f3
} from "./chunk-QMGMKWTA.js";
import "./chunk-XQH2QDB2.js";
import "./chunk-6Q7GN2CW.js";
import "./chunk-MYUZZ3A3.js";
import "./chunk-2IGXKE5P.js";
import "./chunk-JFI4ESYU.js";
import "./chunk-4X2UADDH.js";
import "./chunk-ZICJB3ML.js";
import "./chunk-AVBIV2K3.js";
import "./chunk-4NJWIUZG.js";
import "./chunk-F3NUC2RS.js";
import "./chunk-LE3YW4Y3.js";
import {
  p
} from "./chunk-TA32QX7Z.js";
import "./chunk-NYLL2YZF.js";
import "./chunk-P3GRQ2CH.js";
import "./chunk-NYLBGE62.js";
import "./chunk-LPNAPHOF.js";
import "./chunk-QCBTLG25.js";
import "./chunk-ECCHNTW6.js";
import "./chunk-WWNVF22O.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-K5RYAJV4.js";
import "./chunk-XGYM66XX.js";
import "./chunk-JOOGZSAP.js";
import "./chunk-J6GHQIZ2.js";
import "./chunk-VEUN2EF3.js";
import "./chunk-W6D3ECTZ.js";
import {
  t
} from "./chunk-EDGKOPSL.js";
import "./chunk-QXDQJEIU.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-SEUZ3J6J.js";
import "./chunk-BWTCR2DR.js";
import "./chunk-SMOTPOZ7.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-7FJIOZSE.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import "./chunk-TSVUPARM.js";
import "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import {
  c
} from "./chunk-JS7R723S.js";
import "./chunk-RCLWOQNR.js";
import "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-RD2BBQYN.js";
import "./chunk-SEG3PRUR.js";
import "./chunk-B6VE32RA.js";
import "./chunk-AIYFWM42.js";
import "./chunk-2M53HYNY.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-Q7TEBZSN.js";
import {
  w
} from "./chunk-FG3XOAFD.js";
import {
  o
} from "./chunk-GN5RE63N.js";
import {
  r as r2
} from "./chunk-2WXAPZBK.js";
import {
  c as c2
} from "./chunk-E2I7HYXQ.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import {
  U
} from "./chunk-CRH37WFF.js";
import "./chunk-YFGQMO6E.js";
import "./chunk-HAF6QJ32.js";
import {
  e,
  m,
  n2 as n
} from "./chunk-H77COA2S.js";
import {
  a4 as a2,
  x
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  a,
  b
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import {
  s2 as s
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/layers/MapImageLayer.js
var J = class extends l(l3(t2(m2(f2(l2(b2(j(S(f(i(e2(f3)))))))))))) {
  constructor(...e4) {
    super(...e4), this._exportImageParameters = new y2({ layer: this }), this.dateFieldsTimeZone = null, this.datesInUnknownTimezone = false, this.dpi = 96, this.gdbVersion = null, this.imageFormat = "png24", this.imageMaxHeight = 2048, this.imageMaxWidth = 2048, this.imageTransparency = true, this.isReference = null, this.labelsVisible = false, this.operationalLayerType = "ArcGISMapServiceLayer", this.preferredTimeZone = null, this.sourceJSON = null, this.sublayers = null, this.type = "map-image", this.url = null;
  }
  normalizeCtorArgs(e4, r3) {
    return "string" == typeof e4 ? { url: e4, ...r3 } : e4;
  }
  load(e4) {
    const r3 = null != e4 ? e4.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service"] }, e4).catch(a).then(() => this._fetchService(r3))), Promise.resolve(this);
  }
  destroy() {
    this._exportImageParameters.destroy();
  }
  readImageFormat(e4, r3) {
    const t5 = r3.supportedImageFormatTypes;
    return t5 && t5.includes("PNG32") ? "png32" : "png24";
  }
  writeSublayers(e4, r3, t5, i3) {
    var _a, _b, _c;
    if (!this.loaded || !e4) return;
    const s2 = e4.slice().reverse().flatten(({ sublayers: e5 }) => e5 && e5.toArray().reverse()).toArray();
    let o2 = false;
    const a3 = n(i3.origin);
    if (((_a = this.capabilities) == null ? void 0 : _a.operations.supportsExportMap) && ((_c = (_b = this.capabilities) == null ? void 0 : _b.exportMap) == null ? void 0 : _c.supportsDynamicLayers)) {
      if (a3 === e.PORTAL_ITEM) {
        const e5 = this.createSublayersForOrigin("service").sublayers;
        o2 = e3(s2, e5, e.SERVICE);
      } else if (a3 > e.PORTAL_ITEM) {
        const e5 = this.createSublayersForOrigin("portal-item");
        o2 = e3(s2, e5.sublayers, n(e5.origin));
      }
    }
    const p2 = [], n2 = { writeSublayerStructure: o2, ...i3 };
    let m3 = o2 || this.hasVisibleLayersForOrigin(a3);
    s2.forEach((e5) => {
      const r4 = e5.write({}, n2);
      p2.push(r4), m3 = m3 || "user" === e5.originOf("visible");
    });
    p2.some((e5) => Object.keys(e5).length > 1) && (r3.layers = p2), m3 && (r3.visibleLayers = s2.filter((e5) => e5.visible).map((e5) => e5.id));
  }
  createExportImageParameters(e4, r3, t5, i3) {
    const s2 = (i3 == null ? void 0 : i3.pixelRatio) || 1;
    e4 && this.version >= 10 && (e4 = e4.clone().shiftCentralMeridian()), this._exportImageParameters.floors = (i3 == null ? void 0 : i3.floors) ?? null, this._exportImageParameters.scale = i2({ extent: e4, width: r3 }) * s2;
    const o2 = this._exportImageParameters.toJSON(), a3 = !(i3 == null ? void 0 : i3.rotation) || this.version < 10.3 ? {} : { rotation: -i3.rotation }, p2 = e4 == null ? void 0 : e4.spatialReference, n2 = c2(p2);
    o2.dpi *= s2;
    const m3 = {};
    if (i3 == null ? void 0 : i3.timeExtent) {
      const { start: e5, end: r4 } = i3.timeExtent.toJSON();
      m3.time = e5 && r4 && e5 === r4 ? "" + e5 : `${e5 ?? "null"},${r4 ?? "null"}`;
    } else this.timeInfo && !this.timeInfo.hasLiveData && (m3.time = "null,null");
    return { bbox: e4 && e4.xmin + "," + e4.ymin + "," + e4.xmax + "," + e4.ymax, bboxSR: n2, imageSR: n2, size: r3 + "," + t5, ...o2, ...a3, ...m3 };
  }
  async fetchImage(e4, r3, t5, i3) {
    const { data: s2 } = await this._fetchImage("image", e4, r3, t5, i3);
    return s2;
  }
  async fetchImageBitmap(e4, r3, t5, i3) {
    const { data: s2, url: o2 } = await this._fetchImage("blob", e4, r3, t5, i3);
    return t3(s2, o2, i3 == null ? void 0 : i3.signal);
  }
  async fetchRecomputedExtents(e4 = {}) {
    const t5 = { ...e4, query: { returnUpdates: true, f: "json", ...this.customParameters, token: this.apiKey } }, { data: i3 } = await U(this.url, t5), { extent: s2, fullExtent: o2, timeExtent: a3 } = i3, p2 = s2 || o2;
    return { fullExtent: p2 && w.fromJSON(p2), timeExtent: a3 && p.fromJSON({ start: a3[0], end: a3[1] }) };
  }
  loadAll() {
    return t(this, (e4) => {
      e4(this.allSublayers), e4(this.subtables);
    });
  }
  serviceSupportsSpatialReference(e4) {
    return t4(this, e4);
  }
  async _fetchImage(e4, i3, s2, o2, p2) {
    var _a, _b, _c;
    const n2 = { responseType: e4, signal: (p2 == null ? void 0 : p2.signal) ?? null, query: { ...this.parsedUrl.query, ...this.createExportImageParameters(i3, s2, o2, p2), f: "image", ...this.refreshParameters, ...this.customParameters, token: this.apiKey } }, m3 = this.parsedUrl.path + "/export";
    if (null != ((_a = n2.query) == null ? void 0 : _a.dynamicLayers) && !((_c = (_b = this.capabilities) == null ? void 0 : _b.exportMap) == null ? void 0 : _c.supportsDynamicLayers)) throw new s("mapimagelayer:dynamiclayer-not-supported", `service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`, { query: n2.query });
    try {
      const { data: e5 } = await U(m3, n2);
      return { data: e5, url: m3 };
    } catch (l4) {
      if (b(l4)) throw l4;
      throw new s("mapimagelayer:image-fetch-error", `Unable to load image: ${m3}`, { error: l4 });
    }
  }
  async _fetchService(e4) {
    if (this.sourceJSON) return void this.read(this.sourceJSON, { origin: "service", url: this.parsedUrl });
    const { data: t5, ssl: i3 } = await U(this.parsedUrl.path, { query: { f: "json", ...this.parsedUrl.query, ...this.customParameters, token: this.apiKey }, signal: e4 });
    i3 && (this.url = this.url.replace(/^http:/i, "https:")), this.sourceJSON = t5, this.read(t5, { origin: "service", url: this.parsedUrl });
  }
  hasVisibleLayersForOrigin(e4) {
    var _a;
    return !(null == e4 || !((_a = this.sublayersSourceJSON[e4]) == null ? void 0 : _a.visibleLayers));
  }
};
r([m(c("dateFieldsTimeReference"))], J.prototype, "dateFieldsTimeZone", void 0), r([m({ type: Boolean })], J.prototype, "datesInUnknownTimezone", void 0), r([m()], J.prototype, "dpi", void 0), r([m()], J.prototype, "gdbVersion", void 0), r([m()], J.prototype, "imageFormat", void 0), r([o("imageFormat", ["supportedImageFormatTypes"])], J.prototype, "readImageFormat", null), r([m({ json: { origins: { service: { read: { source: "maxImageHeight" } } } } })], J.prototype, "imageMaxHeight", void 0), r([m({ json: { origins: { service: { read: { source: "maxImageWidth" } } } } })], J.prototype, "imageMaxWidth", void 0), r([m()], J.prototype, "imageTransparency", void 0), r([m({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], J.prototype, "isReference", void 0), r([m({ json: { read: false, write: false } })], J.prototype, "labelsVisible", void 0), r([m({ type: ["ArcGISMapServiceLayer"] })], J.prototype, "operationalLayerType", void 0), r([m({ json: { read: false, write: false } })], J.prototype, "popupEnabled", void 0), r([m(c("preferredTimeReference"))], J.prototype, "preferredTimeZone", void 0), r([m()], J.prototype, "sourceJSON", void 0), r([m({ json: { write: { ignoreOrigin: true } } })], J.prototype, "sublayers", void 0), r([r2("sublayers", { layers: { type: [te] }, visibleLayers: { type: [x] } })], J.prototype, "writeSublayers", null), r([m({ type: ["show", "hide", "hide-children"] })], J.prototype, "listMode", void 0), r([m({ json: { read: false }, readOnly: true, value: "map-image" })], J.prototype, "type", void 0), r([m(y)], J.prototype, "url", void 0), J = r([a2("esri.layers.MapImageLayer")], J);
var q = J;
export {
  q as default
};
//# sourceMappingURL=MapImageLayer-BXSH5QHP.js.map
