import {
  c as c2
} from "./chunk-W4BIFKZW.js";
import {
  a as a2
} from "./chunk-5EPIZ7XS.js";
import {
  o,
  y
} from "./chunk-EAYFTXNC.js";
import {
  t
} from "./chunk-VKINFEL6.js";
import "./chunk-DVRUAVBV.js";
import {
  S,
  f as f2,
  g as g3
} from "./chunk-6ALL3HYU.js";
import {
  j as j2,
  y as y2
} from "./chunk-EVT35YP5.js";
import "./chunk-2JJO7SCG.js";
import "./chunk-OHKRFTGD.js";
import {
  F
} from "./chunk-4BM4QPL6.js";
import "./chunk-LAXNQQQH.js";
import "./chunk-5PECYTTZ.js";
import "./chunk-ZGL6Q57M.js";
import {
  n
} from "./chunk-KDQTUT24.js";
import "./chunk-TZAPBN5J.js";
import "./chunk-FKL5AVF4.js";
import "./chunk-QLTGZ6EP.js";
import {
  b,
  d as d2,
  g as g2
} from "./chunk-NZJPSBEF.js";
import "./chunk-CKPBZSTT.js";
import "./chunk-MNEG3JYG.js";
import "./chunk-5CHZW6XY.js";
import "./chunk-BOYBHWD5.js";
import {
  C,
  ie
} from "./chunk-V4ENL6LP.js";
import "./chunk-HB2JTNV2.js";
import "./chunk-DLJHW32W.js";
import "./chunk-6LGJYARD.js";
import "./chunk-3T3LUDWR.js";
import "./chunk-VBS2Y7KE.js";
import "./chunk-2O2NCM6Y.js";
import "./chunk-OXCT6NNS.js";
import "./chunk-J3GKRP7Y.js";
import "./chunk-Q3K5MAUZ.js";
import {
  x
} from "./chunk-DPVSO6BH.js";
import "./chunk-5VEO4IUH.js";
import "./chunk-2XVRGGEF.js";
import "./chunk-6TRZLPPJ.js";
import "./chunk-U6IFI7EK.js";
import "./chunk-N42IF4WX.js";
import "./chunk-MCHNAU6L.js";
import "./chunk-MYNRH67A.js";
import "./chunk-VAGIPHHR.js";
import "./chunk-JMY2H33H.js";
import "./chunk-MA2KDKKH.js";
import "./chunk-BXIXSFGX.js";
import "./chunk-EVK6ZSVY.js";
import "./chunk-YEDSTDY4.js";
import "./chunk-OMMWWGIU.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-HACIIBEF.js";
import "./chunk-C2RS46RL.js";
import "./chunk-AHZHHHCW.js";
import "./chunk-BN24XFSK.js";
import "./chunk-5GQ62KHN.js";
import "./chunk-YAGJS3MX.js";
import "./chunk-43KBLSS3.js";
import "./chunk-OC7D2HR4.js";
import "./chunk-KKH7HGO3.js";
import "./chunk-7VNQKVOW.js";
import "./chunk-PNVXSHN2.js";
import "./chunk-3DVL3O3F.js";
import "./chunk-RN66FJAW.js";
import "./chunk-QYSQ6XPQ.js";
import "./chunk-2RIHQI4N.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-NXGNMEHZ.js";
import "./chunk-TWYDW6LU.js";
import "./chunk-PVHAAI32.js";
import "./chunk-MLATPUII.js";
import "./chunk-NVFQGMP6.js";
import "./chunk-P2IB5HBH.js";
import "./chunk-XX37BOHH.js";
import "./chunk-5CRXWQ3Y.js";
import "./chunk-CGSFKZP2.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-WPERPIJF.js";
import "./chunk-RXJCBLN2.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-XKMN3LJN.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-T23XXKIL.js";
import "./chunk-4V237NE5.js";
import "./chunk-F3ZOBTPK.js";
import "./chunk-EZCH3ZAJ.js";
import {
  c
} from "./chunk-DB6SP72M.js";
import "./chunk-KDUYQUT4.js";
import "./chunk-73FHIZIF.js";
import "./chunk-ICIPRMPO.js";
import "./chunk-2IVHP3HQ.js";
import "./chunk-EHD5KM2T.js";
import "./chunk-G6LMYOSA.js";
import "./chunk-YNC2IEH2.js";
import {
  m as m2,
  p
} from "./chunk-QJXYURT2.js";
import "./chunk-CGJUTDVJ.js";
import "./chunk-D6FJTDNK.js";
import "./chunk-GYV5TPN6.js";
import "./chunk-D3FSVA7H.js";
import "./chunk-6B4OMNPA.js";
import "./chunk-3GQ4PJDJ.js";
import "./chunk-QEJMJI2R.js";
import {
  D,
  G,
  U as U2,
  X
} from "./chunk-KV3S4QI2.js";
import "./chunk-ECMDQ4LS.js";
import "./chunk-LP6TMAPE.js";
import "./chunk-RENLZYKC.js";
import "./chunk-2X7T37AY.js";
import "./chunk-XQH2QDB2.js";
import "./chunk-6Q7GN2CW.js";
import "./chunk-MYUZZ3A3.js";
import "./chunk-2IGXKE5P.js";
import "./chunk-JFI4ESYU.js";
import "./chunk-4X2UADDH.js";
import "./chunk-ZICJB3ML.js";
import "./chunk-AVBIV2K3.js";
import "./chunk-4NJWIUZG.js";
import "./chunk-F3NUC2RS.js";
import "./chunk-LE3YW4Y3.js";
import "./chunk-TA32QX7Z.js";
import "./chunk-NYLL2YZF.js";
import "./chunk-NYLBGE62.js";
import "./chunk-LPNAPHOF.js";
import "./chunk-QCBTLG25.js";
import "./chunk-ECCHNTW6.js";
import {
  f
} from "./chunk-WWNVF22O.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-K5RYAJV4.js";
import {
  K,
  W
} from "./chunk-XGYM66XX.js";
import "./chunk-JOOGZSAP.js";
import "./chunk-J6GHQIZ2.js";
import {
  d
} from "./chunk-W6D3ECTZ.js";
import "./chunk-QXDQJEIU.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-SEUZ3J6J.js";
import "./chunk-BWTCR2DR.js";
import "./chunk-SMOTPOZ7.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-7FJIOZSE.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import "./chunk-TSVUPARM.js";
import "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import {
  V
} from "./chunk-RCLWOQNR.js";
import "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-SEG3PRUR.js";
import "./chunk-B6VE32RA.js";
import "./chunk-AIYFWM42.js";
import "./chunk-2M53HYNY.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-Q7TEBZSN.js";
import {
  j2 as j,
  w
} from "./chunk-FG3XOAFD.js";
import "./chunk-GN5RE63N.js";
import {
  g
} from "./chunk-2WXAPZBK.js";
import "./chunk-E2I7HYXQ.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import {
  U,
  s
} from "./chunk-CRH37WFF.js";
import {
  A,
  v
} from "./chunk-YFGQMO6E.js";
import "./chunk-HAF6QJ32.js";
import {
  m
} from "./chunk-H77COA2S.js";
import {
  a4 as a
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import "./chunk-GRW2QIBT.js";
import {
  e,
  u
} from "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/views/support/imageReprojection.js
var l = class _l {
  constructor(t2) {
    if (this._ownsRctx = false, t2) this._ownsRctx = false, this._rctx = t2;
    else {
      if (_l._instance) return _l._instanceRefCount++, _l._instance;
      _l._instanceRefCount = 1, _l._instance = this, this._ownsRctx = true;
      const t3 = document.createElement("canvas").getContext("webgl2");
      t3.getExtension("OES_texture_float"), this._rctx = new y(t3, {});
    }
    const e2 = { applyProjection: true, bilinear: false, bicubic: false }, r2 = o("raster/reproject", "raster/reproject", /* @__PURE__ */ new Map([["a_position", 0]]), e2);
    this._program = this._rctx.programCache.acquire(r2.shaders.vertexShader, r2.shaders.fragmentShader, r2.attributes), this._rctx.useProgram(this._program), this._program.setUniform1f("u_opacity", 1), this._program.setUniform1i("u_image", 0), this._program.setUniform1i("u_flipY", 0), this._program.setUniform1i("u_transformGrid", 1), this._quad = new n(this._rctx, [0, 0, 1, 0, 0, 1, 1, 1]);
  }
  reprojectTexture(t2, s2, n2 = false) {
    const o2 = K(t2.extent, s2), m3 = new j({ x: (t2.extent.xmax - t2.extent.xmin) / t2.texture.descriptor.width, y: (t2.extent.ymax - t2.extent.ymin) / t2.texture.descriptor.height, spatialReference: t2.extent.spatialReference }), { x: _, y: g4 } = C(m3, s2, t2.extent);
    let l2 = (_ + g4) / 2;
    const w2 = Math.round((o2.xmax - o2.xmin) / l2), b2 = Math.round((o2.ymax - o2.ymin) / l2);
    l2 = (o2.width / w2 + o2.height / b2) / 2;
    const j4 = new j({ x: l2, y: l2, spatialReference: o2.spatialReference }), D2 = ie({ projectedExtent: o2, srcBufferExtent: t2.extent, pixelSize: j4, hasWrapAround: true, spacing: [16, 16] }), R = c2(this._rctx, D2), C3 = new p(w2, b2);
    C3.wrapMode = D.CLAMP_TO_EDGE;
    const T = new x(this._rctx, C3);
    this._rctx.bindFramebuffer(T), this._rctx.setViewport(0, 0, w2, b2), this._rctx.useProgram(this._program), this._rctx.bindTexture(t2.texture, 0), this._rctx.bindTexture(R, 1), this._quad.bind();
    const { width: y3 = 0, height: E = 0 } = t2.texture.descriptor;
    if (this._program.setUniform2f("u_srcImageSize", y3, E), this._program.setUniform2fv("u_transformSpacing", D2.spacing), this._program.setUniform2fv("u_transformGridSize", D2.size), this._program.setUniform2f("u_targetImageSize", w2, b2), this._quad.draw(), this._quad.unbind(), this._rctx.useProgram(null), this._rctx.bindFramebuffer(null), R.dispose(), n2) {
      const { width: t3, height: e2 } = T, r2 = new ImageData(t3 ?? 0, e2 ?? 0);
      T.readPixels(0, 0, t3 ?? 0, e2 ?? 0, G.RGBA, U2.UNSIGNED_BYTE, r2.data);
      const i = T.detachColorTexture(X.COLOR_ATTACHMENT0);
      return T.dispose(), { texture: i, extent: o2, imageData: r2 };
    }
    const M = T.detachColorTexture(X.COLOR_ATTACHMENT0);
    return T.dispose(), { texture: M, extent: o2 };
  }
  reprojectBitmapData(t2, e2) {
    const r2 = g3(t2.bitmapData) ? f2(t2.bitmapData) : t2.bitmapData, i = new p();
    i.wrapMode = D.CLAMP_TO_EDGE, i.width = t2.bitmapData.width, i.height = t2.bitmapData.height;
    const a3 = new m2(this._rctx, i, r2), o2 = this.reprojectTexture({ texture: a3, extent: t2.extent }, e2, true);
    o2.texture.dispose();
    const m3 = document.createElement("canvas"), p2 = o2.imageData;
    m3.width = p2.width, m3.height = p2.height;
    return m3.getContext("2d").putImageData(p2, 0, 0), { bitmapData: m3, extent: o2.extent };
  }
  async loadAndReprojectBitmapData(e2, r2, i) {
    const a3 = (await U(e2, { responseType: "image" })).data, s2 = document.createElement("canvas");
    s2.width = a3.width, s2.height = a3.height;
    const n2 = s2.getContext("2d");
    n2.drawImage(a3, 0, 0);
    const o2 = n2.getImageData(0, 0, s2.width, s2.height);
    if (r2.spatialReference.equals(i)) return { bitmapData: o2, extent: r2 };
    const m3 = this.reprojectBitmapData({ bitmapData: o2, extent: r2 }, i);
    return { bitmapData: m3.bitmapData, extent: m3.extent };
  }
  destroy() {
    this._ownsRctx ? (_l._instanceRefCount--, 0 === _l._instanceRefCount && (this._quad.dispose(), this._program.dispose(), this._rctx.dispose(), _l._instance = null)) : (this._quad.dispose(), this._program.dispose());
  }
};
l._instanceRefCount = 0;

// node_modules/@arcgis/core/views/2d/layers/KMLLayerView2D.js
var C2 = class {
  constructor() {
    this.allSublayers = /* @__PURE__ */ new Map(), this.allPoints = [], this.allPolylines = [], this.allPolygons = [], this.allMapImages = [];
  }
};
var j3 = class extends j2(y2) {
  constructor() {
    super(...arguments), this._bitmapIndex = /* @__PURE__ */ new Map(), this._mapImageContainer = new a2(), this._kmlVisualData = new C2(), this._fetchController = null, this.allVisiblePoints = new c(), this.allVisiblePolylines = new c(), this.allVisiblePolygons = new c(), this.allVisibleMapImages = new V();
  }
  async hitTest(e2, i) {
    var _a, _b, _c;
    const t2 = this.layer;
    return [(_a = this._pointsView) == null ? void 0 : _a.hitTest(e2), (_b = this._polylinesView) == null ? void 0 : _b.hitTest(e2), (_c = this._polygonsView) == null ? void 0 : _c.hitTest(e2)].flat().filter(Boolean).map((i2) => (i2.layer = t2, i2.sourceLayer = t2, { type: "graphic", graphic: i2, layer: t2, mapPoint: e2 }));
  }
  update(e2) {
    this._polygonsView && this._polygonsView.processUpdate(e2), this._polylinesView && this._polylinesView.processUpdate(e2), this._pointsView && this._pointsView.processUpdate(e2);
  }
  attach() {
    this._fetchController = new AbortController(), this.container.addChild(this._mapImageContainer), this._polygonsView = new F({ view: this.view, graphics: this.allVisiblePolygons, requestUpdateCallback: () => this.requestUpdate(), container: new t(this.view.featuresTilingScheme) }), this.container.addChild(this._polygonsView.container), this._polylinesView = new F({ view: this.view, graphics: this.allVisiblePolylines, requestUpdateCallback: () => this.requestUpdate(), container: new t(this.view.featuresTilingScheme) }), this.container.addChild(this._polylinesView.container), this._pointsView = new F({ view: this.view, graphics: this.allVisiblePoints, requestUpdateCallback: () => this.requestUpdate(), container: new t(this.view.featuresTilingScheme) }), this.container.addChild(this._pointsView.container), this.addAttachHandles([this.allVisibleMapImages.on("change", (e2) => {
      e2.added.forEach((e3) => this._addMapImage(e3)), e2.removed.forEach((e3) => this._removeMapImage(e3));
    }), d(() => this.layer.visibleSublayers, (e2) => {
      for (const i of this._kmlVisualData.allSublayers.values()) i.visibility = 0;
      for (const i of e2) {
        const e3 = this._kmlVisualData.allSublayers.get(i.id);
        e3 && (e3.visibility = 1);
      }
      this._refreshCollections();
    })]), this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)), this._imageReprojector = new l();
  }
  detach() {
    this._fetchController = e(this._fetchController), this._mapImageContainer.removeAllChildren(), this.container.removeAllChildren(), this._bitmapIndex.clear(), this._polygonsView = u(this._polygonsView), this._polylinesView = u(this._polylinesView), this._pointsView = u(this._pointsView), this._imageReprojector = u(this._imageReprojector);
  }
  viewChange() {
    this._polygonsView.viewChange(), this._polylinesView.viewChange(), this._pointsView.viewChange();
  }
  moveEnd() {
  }
  isUpdating() {
    return this._pointsView.updating || this._polygonsView.updating || this._polylinesView.updating;
  }
  _addMapImage(e2) {
    var _a, _b;
    (((_a = this.view.spatialReference) == null ? void 0 : _a.isWGS84) || ((_b = this.view.spatialReference) == null ? void 0 : _b.isWebMercator)) && this._imageReprojector.loadAndReprojectBitmapData(e2.href, w.fromJSON(e2.extent), this.view.spatialReference).then((i) => {
      const t2 = new S(i.bitmapData);
      t2.x = i.extent.xmin, t2.y = i.extent.ymax, t2.resolution = i.extent.width / i.bitmapData.width, t2.rotation = e2.rotation, this._mapImageContainer.addChild(t2), this._bitmapIndex.set(e2, t2);
    });
  }
  async _getViewDependentUrl(e2, t2) {
    const { viewFormat: s2, viewBoundScale: a3, httpQuery: o2 } = e2;
    if (null != s2) {
      if (null == t2) throw new Error("Loading this network link requires a view state.");
      let n2;
      if (await W(), null != a3 && 1 !== a3) {
        const e3 = new w(t2.extent);
        e3.expand(a3), n2 = e3;
      } else n2 = t2.extent;
      n2 = K(n2, g.WGS84);
      const h = K(n2, g.WebMercator), y3 = n2.xmin, g4 = n2.xmax, w2 = n2.ymin, _ = n2.ymax, b2 = t2.size[0] * t2.pixelRatio, V2 = t2.size[1] * t2.pixelRatio, f3 = Math.max(h.width, h.height), v2 = { "[bboxWest]": y3.toString(), "[bboxEast]": g4.toString(), "[bboxSouth]": w2.toString(), "[bboxNorth]": _.toString(), "[lookatLon]": n2.center.x.toString(), "[lookatLat]": n2.center.y.toString(), "[lookatRange]": f3.toString(), "[lookatTilt]": "0", "[lookatHeading]": t2.rotation.toString(), "[lookatTerrainLon]": n2.center.x.toString(), "[lookatTerrainLat]": n2.center.y.toString(), "[lookatTerrainAlt]": "0", "[cameraLon]": n2.center.x.toString(), "[cameraLat]": n2.center.y.toString(), "[cameraAlt]": f3.toString(), "[horizFov]": "60", "[vertFov]": "60", "[horizPixels]": b2.toString(), "[vertPixels]": V2.toString(), "[terrainEnabled]": "0", "[clientVersion]": s, "[kmlVersion]": "2.2", "[clientName]": "ArcGIS API for JavaScript", "[language]": "en-US" }, S2 = (e3) => {
        for (const i in e3) {
          let t3;
          for (t3 in v2) e3[i] = e3[i].replace(t3, v2[t3]);
        }
      }, I = A(s2);
      S2(I);
      let x2 = {};
      null != o2 && (x2 = A(o2), S2(x2));
      const C3 = f(e2.href);
      C3.query = { ...C3.query, ...I, ...x2 };
      return `${C3.path}?${v(I)}`;
    }
    return e2.href;
  }
  async _fetchService(e2) {
    const i = new C2();
    await this._loadVisualData(this.layer.url, i, e2), this._kmlVisualData = i, this._refreshCollections();
  }
  _refreshCollections() {
    this.allVisiblePoints.removeAll(), this.allVisiblePolylines.removeAll(), this.allVisiblePolygons.removeAll(), this.allVisibleMapImages.removeAll(), this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter((e2) => this._isSublayerVisible(e2.sublayerId)).map(({ item: e2 }) => e2)), this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter((e2) => this._isSublayerVisible(e2.sublayerId)).map(({ item: e2 }) => e2)), this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter((e2) => this._isSublayerVisible(e2.sublayerId)).map(({ item: e2 }) => e2)), this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter((e2) => this._isSublayerVisible(e2.sublayerId)).map(({ item: e2 }) => e2));
  }
  _isSublayerVisible(e2) {
    const i = this._kmlVisualData.allSublayers.get(e2);
    return !!(i == null ? void 0 : i.visibility) && (-1 === i.parentFolderId || this._isSublayerVisible(i.parentFolderId));
  }
  _loadVisualData(e2, i, t2) {
    return this._fetchParsedKML(e2, t2).then(async (e3) => {
      for (const s2 of e3.sublayers) {
        i.allSublayers.set(s2.id, s2);
        const e4 = s2.points ? await b(s2.points) : [], a3 = s2.polylines ? await b(s2.polylines) : [], o2 = s2.polygons ? await b(s2.polygons) : [], l2 = s2.mapImages || [];
        if (i.allPoints.push(...e4.map((e5) => ({ item: e5, sublayerId: s2.id }))), i.allPolylines.push(...a3.map((e5) => ({ item: e5, sublayerId: s2.id }))), i.allPolygons.push(...o2.map((e5) => ({ item: e5, sublayerId: s2.id }))), i.allMapImages.push(...l2.map((e5) => ({ item: e5, sublayerId: s2.id }))), s2.networkLink) {
          const e5 = await this._getViewDependentUrl(s2.networkLink, this.view.state);
          await this._loadVisualData(e5, i, t2);
        }
      }
    });
  }
  _fetchParsedKML(e2, i) {
    return g2(e2, this.layer.spatialReference, this.layer.refreshInterval, i).then((e3) => d2(e3.data));
  }
  _removeMapImage(e2) {
    const i = this._bitmapIndex.get(e2);
    i && (this._mapImageContainer.removeChild(i), this._bitmapIndex.delete(e2));
  }
};
r([m()], j3.prototype, "_pointsView", void 0), r([m()], j3.prototype, "_polylinesView", void 0), r([m()], j3.prototype, "_polygonsView", void 0), r([m()], j3.prototype, "updating", void 0), j3 = r([a("esri.views.2d.layers.KMLLayerView2D")], j3);
var k = j3;
export {
  k as default
};
//# sourceMappingURL=KMLLayerView2D-QGMKZDM3.js.map
