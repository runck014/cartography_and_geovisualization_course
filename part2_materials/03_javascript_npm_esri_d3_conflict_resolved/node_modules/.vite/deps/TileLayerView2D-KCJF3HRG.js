import {
  n as n2,
  o,
  r as r3
} from "./chunk-6ZPEBUNI.js";
import {
  R,
  _
} from "./chunk-37X6JYDL.js";
import {
  r as r4
} from "./chunk-NACUKAMN.js";
import {
  h as h2
} from "./chunk-MKVZ2GKM.js";
import "./chunk-6ALL3HYU.js";
import {
  i
} from "./chunk-TQ54TTVN.js";
import {
  j,
  y
} from "./chunk-EVT35YP5.js";
import "./chunk-UCJNTTSW.js";
import "./chunk-2JJO7SCG.js";
import "./chunk-OHKRFTGD.js";
import {
  F
} from "./chunk-4BM4QPL6.js";
import "./chunk-LAXNQQQH.js";
import "./chunk-5PECYTTZ.js";
import "./chunk-ZGL6Q57M.js";
import "./chunk-KDQTUT24.js";
import "./chunk-TZAPBN5J.js";
import "./chunk-FKL5AVF4.js";
import "./chunk-PAS43ZQC.js";
import "./chunk-G7VPHLH2.js";
import "./chunk-V6VYGXU4.js";
import "./chunk-QLTGZ6EP.js";
import "./chunk-5Y4XRWDV.js";
import "./chunk-CKPBZSTT.js";
import "./chunk-6ZMDPECL.js";
import "./chunk-KSR45ZRP.js";
import "./chunk-Q4J5AN2X.js";
import "./chunk-BOYBHWD5.js";
import "./chunk-HB2JTNV2.js";
import "./chunk-DLJHW32W.js";
import "./chunk-6LGJYARD.js";
import "./chunk-3T3LUDWR.js";
import "./chunk-CQZSH27Y.js";
import "./chunk-VBS2Y7KE.js";
import "./chunk-BX4DTVY3.js";
import "./chunk-7TPUFUXO.js";
import "./chunk-2O2NCM6Y.js";
import "./chunk-OXCT6NNS.js";
import "./chunk-J3GKRP7Y.js";
import "./chunk-Q3K5MAUZ.js";
import "./chunk-DPVSO6BH.js";
import "./chunk-5VEO4IUH.js";
import "./chunk-2XVRGGEF.js";
import "./chunk-6TRZLPPJ.js";
import "./chunk-U6IFI7EK.js";
import "./chunk-N42IF4WX.js";
import "./chunk-QJIG5NA3.js";
import "./chunk-MCHNAU6L.js";
import "./chunk-MYNRH67A.js";
import "./chunk-VAGIPHHR.js";
import "./chunk-JMY2H33H.js";
import "./chunk-MA2KDKKH.js";
import "./chunk-BXIXSFGX.js";
import "./chunk-556C3V64.js";
import "./chunk-OJRG2YGM.js";
import "./chunk-EVK6ZSVY.js";
import "./chunk-YEDSTDY4.js";
import "./chunk-OMMWWGIU.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-HACIIBEF.js";
import "./chunk-C2RS46RL.js";
import "./chunk-AHZHHHCW.js";
import "./chunk-BN24XFSK.js";
import "./chunk-YAGJS3MX.js";
import "./chunk-OC7D2HR4.js";
import "./chunk-KKH7HGO3.js";
import "./chunk-QYSQ6XPQ.js";
import "./chunk-2RIHQI4N.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-NXGNMEHZ.js";
import "./chunk-P2IB5HBH.js";
import "./chunk-CGSFKZP2.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-RXJCBLN2.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-T23XXKIL.js";
import "./chunk-NSVZKQ66.js";
import "./chunk-BZVFVFOB.js";
import "./chunk-7RAZQP6S.js";
import "./chunk-256XKGQW.js";
import "./chunk-4V237NE5.js";
import "./chunk-F3ZOBTPK.js";
import "./chunk-EZCH3ZAJ.js";
import {
  c
} from "./chunk-DB6SP72M.js";
import {
  p,
  r as r2
} from "./chunk-3MXRSVIZ.js";
import {
  h
} from "./chunk-YGTM4JUB.js";
import "./chunk-KDUYQUT4.js";
import "./chunk-73FHIZIF.js";
import "./chunk-ICIPRMPO.js";
import {
  e as e2
} from "./chunk-2IVHP3HQ.js";
import "./chunk-EHD5KM2T.js";
import "./chunk-G6LMYOSA.js";
import "./chunk-YNC2IEH2.js";
import "./chunk-QJXYURT2.js";
import "./chunk-CGJUTDVJ.js";
import "./chunk-D6FJTDNK.js";
import "./chunk-GYV5TPN6.js";
import {
  g
} from "./chunk-T6QS4ZNU.js";
import "./chunk-D3FSVA7H.js";
import "./chunk-6B4OMNPA.js";
import "./chunk-3GQ4PJDJ.js";
import "./chunk-QEJMJI2R.js";
import "./chunk-KV3S4QI2.js";
import "./chunk-ECMDQ4LS.js";
import "./chunk-LP6TMAPE.js";
import "./chunk-RENLZYKC.js";
import "./chunk-VGE7RXNF.js";
import "./chunk-B3SR7LF7.js";
import "./chunk-2X7T37AY.js";
import "./chunk-6Q7GN2CW.js";
import "./chunk-MYUZZ3A3.js";
import "./chunk-2IGXKE5P.js";
import "./chunk-JFI4ESYU.js";
import "./chunk-4X2UADDH.js";
import "./chunk-ZICJB3ML.js";
import "./chunk-AVBIV2K3.js";
import "./chunk-4NJWIUZG.js";
import "./chunk-F3NUC2RS.js";
import "./chunk-LE3YW4Y3.js";
import "./chunk-TA32QX7Z.js";
import "./chunk-NYLL2YZF.js";
import "./chunk-NYLBGE62.js";
import "./chunk-QCBTLG25.js";
import "./chunk-ECCHNTW6.js";
import "./chunk-WWNVF22O.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-K5RYAJV4.js";
import "./chunk-XGYM66XX.js";
import "./chunk-JOOGZSAP.js";
import "./chunk-J6GHQIZ2.js";
import "./chunk-W6D3ECTZ.js";
import "./chunk-QXDQJEIU.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-SEUZ3J6J.js";
import "./chunk-BWTCR2DR.js";
import "./chunk-SMOTPOZ7.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import "./chunk-TSVUPARM.js";
import "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-RCLWOQNR.js";
import "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-SEG3PRUR.js";
import "./chunk-B6VE32RA.js";
import "./chunk-AIYFWM42.js";
import "./chunk-2M53HYNY.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-FG3XOAFD.js";
import "./chunk-GN5RE63N.js";
import "./chunk-2WXAPZBK.js";
import {
  s3 as s
} from "./chunk-E2I7HYXQ.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import "./chunk-CRH37WFF.js";
import "./chunk-YFGQMO6E.js";
import "./chunk-HAF6QJ32.js";
import {
  m
} from "./chunk-H77COA2S.js";
import {
  a4 as a
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  b,
  e
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import {
  n2 as n
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/views/2d/layers/TileLayerView2D.js
var V = [0, 0];
var G = class extends i(r3(j(y))) {
  constructor() {
    super(...arguments), this._fetchQueue = null, this._highlightGraphics = new c(), this._highlightView = null, this._popupHighlightHelper = null, this._tileStrategy = null, this.layer = null;
  }
  get resampling() {
    return !("resampling" in this.layer) || false !== this.layer.resampling;
  }
  get tilemapCache() {
    return "tilemapCache" in this.layer ? this.layer.tilemapCache : null;
  }
  update(e3) {
    var _a;
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume(), (_a = this._highlightView) == null ? void 0 : _a.processUpdate(e3);
  }
  attach() {
    const e3 = "tileServers" in this.layer ? this.layer.tileServers : null, t = this.tilemapCache;
    if (this._tileInfoView = new h(this.layer.tileInfo, this.layer.fullExtent, t == null ? void 0 : t.effectiveMinLOD, t == null ? void 0 : t.effectiveMaxLOD), this._fetchQueue = new p({ tileInfoView: this._tileInfoView, concurrency: e3 && 10 * e3.length || 10, process: (e4, t2) => this.fetchTile(e4, t2), scheduler: this.scheduler, priority: g.MAPVIEW_FETCH_QUEUE }), this._tileStrategy = new r2({ cachePolicy: "keep", resampling: this.resampling, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), _(this, this.layer)) {
      const e4 = this._highlightView = new F({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new h2(this.view.featuresTilingScheme), defaultPointSymbolEnabled: false });
      this.container.addChild(this._highlightView.container), this._popupHighlightHelper = new R({ createFetchPopupFeaturesQueryGeometry: (e5, t2) => r4(e5, t2, this.view), highlightGraphics: this._highlightGraphics, highlightGraphicUpdated: (t2, i2) => {
        e4.graphicUpdateHandler({ graphic: t2, property: i2 });
      }, layerView: this, updatingHandles: this._updatingHandles });
    }
    this.requestUpdate(), this.addAttachHandles(this._updatingHandles.add(() => this.resampling, () => {
      this.doRefresh();
    })), super.attach();
  }
  detach() {
    var _a, _b;
    super.detach(), this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), (_a = this._popupHighlightHelper) == null ? void 0 : _a.destroy(), (_b = this._highlightView) == null ? void 0 : _b.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = this._popupHighlightHelper = null;
  }
  async fetchPopupFeaturesAtLocation(e3, t) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.fetchPopupFeaturesAtLocation(e3, t) : [];
  }
  highlight(e3) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.highlight(e3) : e();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e3) {
    var _a;
    return s((_a = this.layer.tileInfo) == null ? void 0 : _a.spatialReference, e3);
  }
  async doRefresh() {
    if (this.attached) {
      if (this.suspended) return this._tileStrategy.clear(), void this.requestUpdate();
      this._fetchQueue.reset(), this._tileStrategy.refresh((e3) => this._updatingHandles.addPromise(this._enqueueTileFetch(e3)));
    }
  }
  acquireTile(e3) {
    const t = this._bitmapView.createTile(e3), i2 = t.bitmap;
    return [i2.x, i2.y] = this._tileInfoView.getTileCoords(V, t.key), i2.resolution = this._tileInfoView.getTileResolution(t.key), [i2.width, i2.height] = this._tileInfoView.tileInfo.size, this._updatingHandles.addPromise(this._enqueueTileFetch(t)), this._bitmapView.addChild(t), this.requestUpdate(), t;
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", () => e3.destroy()), this.requestUpdate();
  }
  async fetchTile(e3, t = {}) {
    const i2 = this.tilemapCache, { signal: r5, resamplingLevel: o2 = 0 } = t;
    if (!i2) try {
      return await this._fetchImage(e3, r5);
    } catch (n3) {
      if (!b(n3) && !this.resampling) return o(this._tileInfoView.tileInfo.size);
      if (o2 < 3) {
        const i3 = this._tileInfoView.getTileParentId(e3.id);
        if (i3) {
          const s2 = new e2(i3), r6 = await this.fetchTile(s2, { ...t, resamplingLevel: o2 + 1 });
          return n2(this._tileInfoView, r6, s2, e3);
        }
      }
      throw n3;
    }
    const l = new e2(0, 0, 0, 0);
    let p2;
    try {
      if (await i2.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, l, { signal: r5 }), !this.resampling && l.level !== e3.level) return o(this._tileInfoView.tileInfo.size);
      p2 = await this._fetchImage(l, r5);
    } catch (n3) {
      if (b(n3)) throw n3;
      return o(this._tileInfoView.tileInfo.size);
    }
    return this.resampling ? n2(this._tileInfoView, p2, l, e3) : p2;
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const t = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = t, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", () => this.requestUpdate());
      } catch (t) {
        b(t) || n.getLogger(this).error(t);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, t) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: t });
  }
};
r([m()], G.prototype, "resampling", null), r([m()], G.prototype, "tilemapCache", null), G = r([a("esri.views.2d.layers.TileLayerView2D")], G);
var I = G;
export {
  I as default
};
//# sourceMappingURL=TileLayerView2D-KCJF3HRG.js.map
