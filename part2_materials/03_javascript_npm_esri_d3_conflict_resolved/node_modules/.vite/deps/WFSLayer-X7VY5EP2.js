import {
  S as S2,
  W,
  Y,
  v,
  z
} from "./chunk-6CGXGSS3.js";
import "./chunk-ZUIEEFUU.js";
import "./chunk-N77L5742.js";
import "./chunk-5PXF5FL6.js";
import {
  u,
  y as y3
} from "./chunk-2L7UGRIC.js";
import "./chunk-E6IUAXXM.js";
import "./chunk-MSUBZ5BW.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import {
  c as c3
} from "./chunk-JED7FM2Q.js";
import "./chunk-FFUKJAFO.js";
import "./chunk-H4E2VVPD.js";
import {
  p
} from "./chunk-CQFC4JO6.js";
import "./chunk-VS5MKM3H.js";
import {
  c as c2
} from "./chunk-CQTV4C3X.js";
import "./chunk-764E6KTP.js";
import {
  s as s2
} from "./chunk-GEPD6W23.js";
import {
  C,
  n as n2
} from "./chunk-TP6LRQ42.js";
import {
  l as l2
} from "./chunk-ZE6OS33V.js";
import "./chunk-MWZJIOOL.js";
import {
  p as p2
} from "./chunk-ULSRCITK.js";
import {
  e as e2
} from "./chunk-FLUE3DMC.js";
import {
  m as m3,
  u as u2
} from "./chunk-5GQ62KHN.js";
import "./chunk-YAGJS3MX.js";
import "./chunk-43KBLSS3.js";
import {
  j
} from "./chunk-RG7AMCT5.js";
import {
  f
} from "./chunk-PV3ZZQOV.js";
import {
  l
} from "./chunk-SM2VXWMT.js";
import "./chunk-WYO25WZZ.js";
import "./chunk-OC7D2HR4.js";
import {
  t
} from "./chunk-IGMG7ERK.js";
import {
  b as b3
} from "./chunk-V47ZBW5W.js";
import {
  b as b2,
  c as c4,
  d as d2,
  l as l3,
  p as p5,
  s as s3,
  y as y4
} from "./chunk-HKYICNT2.js";
import {
  S
} from "./chunk-VGUQMPM6.js";
import "./chunk-KKH7HGO3.js";
import "./chunk-Z3NV3VCK.js";
import "./chunk-7VNQKVOW.js";
import "./chunk-PNVXSHN2.js";
import "./chunk-3DVL3O3F.js";
import "./chunk-RN66FJAW.js";
import "./chunk-QYSQ6XPQ.js";
import "./chunk-2RIHQI4N.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-NXGNMEHZ.js";
import "./chunk-TWYDW6LU.js";
import {
  d
} from "./chunk-PVHAAI32.js";
import "./chunk-MLATPUII.js";
import "./chunk-NVFQGMP6.js";
import "./chunk-P2IB5HBH.js";
import "./chunk-XX37BOHH.js";
import "./chunk-5CRXWQ3Y.js";
import "./chunk-4RFCLPAF.js";
import "./chunk-4ISVH4NS.js";
import "./chunk-NIWINVGG.js";
import "./chunk-DOENTAA7.js";
import "./chunk-CGSFKZP2.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-WPERPIJF.js";
import "./chunk-RXJCBLN2.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-XKMN3LJN.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import {
  f as f2
} from "./chunk-QMGMKWTA.js";
import {
  p as p3
} from "./chunk-2EGO74J5.js";
import "./chunk-4SUK447J.js";
import "./chunk-2X7T37AY.js";
import "./chunk-XQH2QDB2.js";
import "./chunk-6Q7GN2CW.js";
import {
  q
} from "./chunk-MYUZZ3A3.js";
import "./chunk-2IGXKE5P.js";
import "./chunk-JFI4ESYU.js";
import "./chunk-4X2UADDH.js";
import "./chunk-ZICJB3ML.js";
import "./chunk-AVBIV2K3.js";
import "./chunk-4NJWIUZG.js";
import {
  b
} from "./chunk-F3NUC2RS.js";
import "./chunk-LE3YW4Y3.js";
import "./chunk-TA32QX7Z.js";
import "./chunk-NYLL2YZF.js";
import "./chunk-P3GRQ2CH.js";
import "./chunk-NYLBGE62.js";
import "./chunk-LPNAPHOF.js";
import {
  y as y2
} from "./chunk-QCBTLG25.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-K5RYAJV4.js";
import "./chunk-XGYM66XX.js";
import "./chunk-JOOGZSAP.js";
import "./chunk-J6GHQIZ2.js";
import "./chunk-VEUN2EF3.js";
import "./chunk-W6D3ECTZ.js";
import "./chunk-QXDQJEIU.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-SEUZ3J6J.js";
import {
  g as g2,
  p as p4
} from "./chunk-BWTCR2DR.js";
import "./chunk-SMOTPOZ7.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-7FJIOZSE.js";
import "./chunk-GNWAZIVF.js";
import {
  o
} from "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import "./chunk-TSVUPARM.js";
import "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import {
  c,
  i
} from "./chunk-JS7R723S.js";
import "./chunk-RCLWOQNR.js";
import "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-RD2BBQYN.js";
import "./chunk-SEG3PRUR.js";
import {
  m as m2
} from "./chunk-B6VE32RA.js";
import "./chunk-AIYFWM42.js";
import "./chunk-2M53HYNY.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-Q7TEBZSN.js";
import {
  w
} from "./chunk-FG3XOAFD.js";
import "./chunk-GN5RE63N.js";
import {
  g,
  r as r2
} from "./chunk-2WXAPZBK.js";
import "./chunk-E2I7HYXQ.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import "./chunk-CRH37WFF.js";
import {
  I
} from "./chunk-YFGQMO6E.js";
import "./chunk-HAF6QJ32.js";
import {
  m
} from "./chunk-H77COA2S.js";
import {
  a4 as a,
  x
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  k,
  y
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import {
  e,
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";
import {
  has
} from "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/layers/graphics/sources/WFSSource.js
var x2 = class extends m2 {
  constructor() {
    super(...arguments), this._connection = null, this._workerHandler = null, this.capabilities = y3(false, false), this.type = "wfs", this.refresh = k(async () => {
      await this.load();
      const e3 = { customParameters: this.layer.customParameters, maxRecordCount: this.layer.maxRecordCount, maxTotalRecordCount: this.layer.maxTotalRecordCount, maxPageCount: this.layer.maxPageCount }, { extent: t2 } = await this._workerHandler.refresh(e3);
      return t2 && (this.sourceJSON.extent = t2), { dataChanged: true, updates: { extent: this.sourceJSON.extent } };
    });
  }
  load(e3) {
    const t2 = null != e3 ? e3.signal : null;
    return this.addResolvingPromise(this._startWorker({ signal: t2 })), Promise.resolve(this);
  }
  destroy() {
    var _a;
    (_a = this._connection) == null ? void 0 : _a.close(), this._connection = null, this._workerHandler = null;
  }
  async openPorts() {
    return await this.load(), this._connection.openPorts();
  }
  async queryFeatures(e3, t2 = {}) {
    const r3 = await this.queryFeaturesJSON(e3, t2);
    return d.fromJSON(r3);
  }
  async queryFeaturesJSON(e3, t2 = {}) {
    return await this.load(t2), this._workerHandler.queryFeatures(e3 ? e3.toJSON() : void 0, t2);
  }
  async queryFeatureCount(e3, t2 = {}) {
    return await this.load(t2), this._workerHandler.queryFeatureCount(e3 ? e3.toJSON() : void 0, t2);
  }
  async queryObjectIds(e3, t2 = {}) {
    return await this.load(t2), this._workerHandler.queryObjectIds(e3 ? e3.toJSON() : void 0, t2);
  }
  async queryExtent(e3, t2 = {}) {
    await this.load(t2);
    const r3 = await this._workerHandler.queryExtent(e3 ? e3.toJSON() : void 0, t2);
    return { count: r3.count, extent: w.fromJSON(r3.extent) };
  }
  async querySnapping(e3, t2 = {}) {
    return await this.load(t2), this._workerHandler.querySnapping(e3, t2);
  }
  async _createLoadOptions(e3) {
    var _a, _b;
    const { url: r3, customParameters: o2, name: a2, namespaceUri: s4, fields: i2, geometryType: n3, maxRecordCount: l4, maxPageCount: u3, maxTotalRecordCount: p6, swapXY: h } = this.layer, w2 = "defaults" === this.layer.originOf("spatialReference") ? void 0 : this.layer.spatialReference;
    if (!r3) throw new s("wfs-layer:missing-url", "WFSLayer must be created with a url");
    this.wfsCapabilities || (this.wfsCapabilities = await v(r3, { customParameters: o2, ...e3 }));
    const g3 = ["fields", "geometryType", "name", "namespaceUri", "swapXY"].some((e4) => null == this.layer[e4]), x3 = g3 ? await W(this.wfsCapabilities, a2, s4, { spatialReference: w2, customParameters: o2, signal: e3 == null ? void 0 : e3.signal }) : { ...z(i2 ?? []), geometryType: n3, name: a2, namespaceUri: s4, spatialReference: w2, swapXY: h }, F = Y(this.wfsCapabilities.readFeatureTypes(), x3.name, x3.namespaceUri), S3 = o.toJSON(x3.geometryType), { operations: j2 } = this.wfsCapabilities, C2 = j2.GetFeature.url, O = j2.GetFeature.outputFormat;
    return { customParameters: o2, featureType: F, fields: ((_a = x3.fields) == null ? void 0 : _a.map((e4) => e4.toJSON())) ?? [], geometryField: x3.geometryField, geometryType: S3, getFeatureUrl: C2, getFeatureOutputFormat: O, maxRecordCount: l4, maxPageCount: u3, maxTotalRecordCount: p6, objectIdField: x3.objectIdField, spatialReference: (_b = x3.spatialReference) == null ? void 0 : _b.toJSON(), swapXY: !!x3.swapXY };
  }
  async _startWorker(e3) {
    const [t2, r3] = await y([this._createLoadOptions(e3), p3("WFSSourceWorker", { ...e3, strategy: has("feature-layers-workers") ? "dedicated" : "local", registryTarget: this })]), a2 = t2.error || r3.error || null, n3 = r3.value || null;
    if (a2) throw n3 && n3.close(), a2;
    const l4 = t2.value;
    this._connection = r3.value, this._workerHandler = this._connection.createInvokeProxy();
    const c5 = await this._workerHandler.load(l4, e3);
    for (const s4 of c5.warnings) n.getLogger(this.layer).warn("#load()", `${s4.message} (title: '${this.layer.title || "no title"}', id: '${this.layer.id ?? "no id"}')`, { warning: s4 });
    this.sourceJSON = { dateFieldsTimeReference: { timeZoneIANA: i }, extent: c5.extent, fields: l4.fields, geometryType: l4.geometryType, objectIdField: l4.objectIdField, geometryField: l4.geometryField, drawingInfo: u(l4.geometryType), name: l4.featureType.title, wfsInfo: { name: l4.featureType.name, featureUrl: l4.getFeatureUrl, maxFeatures: l4.maxRecordCount, swapXY: l4.swapXY, supportedSpatialReferences: l4.featureType.supportedSpatialReferences, version: "2.0.0", wfsNamespace: l4.featureType.namespaceUri } };
  }
};
r([m()], x2.prototype, "capabilities", void 0), r([m({ constructOnly: true })], x2.prototype, "layer", void 0), r([m()], x2.prototype, "sourceJSON", void 0), r([m()], x2.prototype, "type", void 0), r([m()], x2.prototype, "wfsCapabilities", void 0), x2 = r([a("esri.layers.graphics.sources.WFSSource")], x2);

// node_modules/@arcgis/core/layers/WFSLayer.js
var B;
var G = s2();
var J = B = class extends p(e2(c3(c2(l(l2(f(t(b3(j(S(f2))))))))))) {
  static fromWFSLayerInfo(e3) {
    const { customParameters: r3, fields: t2, geometryField: i2, geometryType: o2, name: s4, namespaceUri: n3, objectIdField: p6, spatialReference: a2, swapXY: l4, url: d3, wfsCapabilities: m4 } = e3;
    return new B({ customParameters: r3, fields: t2, geometryField: i2, geometryType: o2, name: s4, namespaceUri: n3, objectIdField: p6, spatialReference: a2, swapXY: l4, url: d3, wfsCapabilities: m4 });
  }
  constructor(e3) {
    super(e3), this.copyright = null, this.customParameters = null, this.dateFieldsTimeZone = null, this.definitionExpression = null, this.displayField = null, this.elevationInfo = null, this.featureUrl = void 0, this.fields = null, this.fieldsIndex = null, this.fullExtent = null, this.geometryType = null, this.labelsVisible = true, this.labelingInfo = null, this.legendEnabled = true, this.objectIdField = null, this.operationalLayerType = "WFS", this.maxRecordCount = 3e3, this.maxPageCount = 10, this.maxTotalRecordCount = 2e5, this.mode = 0, this.name = null, this.namespaceUri = null, this.outFields = null, this.popupEnabled = true, this.popupTemplate = null, this.screenSizePerspectiveEnabled = true, this.source = new x2({ layer: this }), this.spatialReference = g.WGS84, this.spatialReferences = [4326], this.swapXY = void 0, this.title = "WFS", this.type = "wfs", this.url = null, this.version = void 0;
  }
  destroy() {
    var _a;
    (_a = this.source) == null ? void 0 : _a.destroy();
  }
  load(e3) {
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["WFS"] }, e3).then(() => this.source.load(e3)).then(() => {
      this.read(this.source.sourceJSON, { origin: "service", url: this.parsedUrl }), this.revert(["objectIdField", "fields", "timeInfo", "spatialReference", "name", "namespaceUri"], "service"), p4(this.renderer, this.fieldsIndex), g2(this.timeInfo, this.fieldsIndex);
    })), Promise.resolve(this);
  }
  get capabilities() {
    var _a;
    return (_a = this.source) == null ? void 0 : _a.capabilities;
  }
  get createQueryVersion() {
    return this.commitProperty("definitionExpression"), this.commitProperty("timeExtent"), this.commitProperty("timeOffset"), this.commitProperty("geometryType"), this.commitProperty("capabilities"), (this._get("createQueryVersion") || 0) + 1;
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  writeFields(e3, r3, t2) {
    const i2 = e3.filter((e4) => e4.name !== S2);
    this.geometryField && i2.unshift(new y2({ name: this.geometryField, alias: this.geometryField, type: "geometry" })), e(t2, i2.map((e4) => e4.toJSON()), r3);
  }
  get parsedUrl() {
    return I(this.url);
  }
  set renderer(e3) {
    p4(e3, this.fieldsIndex), this._set("renderer", e3);
  }
  get wfsCapabilities() {
    var _a;
    return (_a = this.source) == null ? void 0 : _a.wfsCapabilities;
  }
  set wfsCapabilities(e3) {
    this.source && (this.source.wfsCapabilities = e3);
  }
  createPopupTemplate(e3) {
    return p2(this, e3);
  }
  createQuery() {
    const e3 = new b({ returnGeometry: true, outFields: ["*"], where: this.definitionExpression || "1=1" }), { timeOffset: r3, timeExtent: t2 } = this;
    return e3.timeExtent = null != r3 && null != t2 ? t2.offset(-r3.value, r3.unit) : t2 || null, e3;
  }
  getFieldDomain(e3, r3) {
    var _a;
    return (_a = this.getField(e3)) == null ? void 0 : _a.domain;
  }
  getField(e3) {
    var _a;
    return (_a = this.fieldsIndex) == null ? void 0 : _a.get(e3);
  }
  queryFeatures(e3, r3) {
    return this.load().then(() => this.source.queryFeatures(b.from(e3) || this.createQuery(), r3)).then((e4) => {
      if (e4 == null ? void 0 : e4.features) for (const r4 of e4.features) r4.layer = r4.sourceLayer = this;
      return e4;
    });
  }
  queryObjectIds(e3, r3) {
    return this.load().then(() => this.source.queryObjectIds(b.from(e3) || this.createQuery(), r3));
  }
  queryFeatureCount(e3, r3) {
    return this.load().then(() => this.source.queryFeatureCount(b.from(e3) || this.createQuery(), r3));
  }
  queryExtent(e3, r3) {
    return this.load().then(() => this.source.queryExtent(b.from(e3) || this.createQuery(), r3));
  }
  async hasDataChanged() {
    try {
      const { dataChanged: e3, updates: r3 } = await this.source.refresh();
      return null != r3 && this.read(r3, { origin: "service", url: this.parsedUrl, ignoreDefaults: true }), e3;
    } catch {
    }
    return false;
  }
};
r([m({ readOnly: true })], J.prototype, "capabilities", null), r([m({ type: String })], J.prototype, "copyright", void 0), r([m({ readOnly: true })], J.prototype, "createQueryVersion", null), r([m({ json: { name: "wfsInfo.customParameters", write: { overridePolicy: (e3) => ({ enabled: !!(e3 && Object.keys(e3).length > 0), ignoreOrigin: true }) } } })], J.prototype, "customParameters", void 0), r([m(c("dateFieldsTimeReference"))], J.prototype, "dateFieldsTimeZone", void 0), r([m({ readOnly: true })], J.prototype, "defaultPopupTemplate", null), r([m({ type: String, json: { name: "layerDefinition.definitionExpression", write: { enabled: true, allowNull: true } } })], J.prototype, "definitionExpression", void 0), r([m({ type: String })], J.prototype, "displayField", void 0), r([m(c4)], J.prototype, "elevationInfo", void 0), r([m({ type: String, readOnly: true, json: { name: "wfsInfo.featureUrl", write: { ignoreOrigin: true, isRequired: true } } })], J.prototype, "featureUrl", void 0), r([m({ type: [y2], json: { name: "layerDefinition.fields", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "fields" } } } })], J.prototype, "fields", void 0), r([r2("fields")], J.prototype, "writeFields", null), r([m(G.fieldsIndex)], J.prototype, "fieldsIndex", void 0), r([m({ type: w, json: { name: "extent" } })], J.prototype, "fullExtent", void 0), r([m()], J.prototype, "geometryField", void 0), r([m({ type: String, json: { read: { source: "layerDefinition.geometryType", reader: o.read }, write: { target: "layerDefinition.geometryType", writer: o.write, ignoreOrigin: true }, origins: { service: { read: o.read } } } })], J.prototype, "geometryType", void 0), r([m({ type: String })], J.prototype, "id", void 0), r([m(p5)], J.prototype, "labelsVisible", void 0), r([m({ type: [C], json: { name: "layerDefinition.drawingInfo.labelingInfo", read: { reader: n2 }, write: true } })], J.prototype, "labelingInfo", void 0), r([m(d2)], J.prototype, "legendEnabled", void 0), r([m({ type: ["show", "hide"] })], J.prototype, "listMode", void 0), r([m({ type: String })], J.prototype, "objectIdField", void 0), r([m({ type: ["WFS"] })], J.prototype, "operationalLayerType", void 0), r([m({ type: x, json: { name: "wfsInfo.maxFeatures", write: { ignoreOrigin: true, isRequired: true } } })], J.prototype, "maxRecordCount", void 0), r([m({ type: x })], J.prototype, "maxPageCount", void 0), r([m({ type: x })], J.prototype, "maxTotalRecordCount", void 0), r([m({ type: [0], readOnly: true, json: { origins: { "web-map": { write: { ignoreOrigin: true, isRequired: true } } } } })], J.prototype, "mode", void 0), r([m({ type: String, json: { name: "wfsInfo.name", write: { ignoreOrigin: true, isRequired: true } } })], J.prototype, "name", void 0), r([m({ type: String, json: { name: "wfsInfo.wfsNamespace", write: { ignoreOrigin: true, isRequired: true } } })], J.prototype, "namespaceUri", void 0), r([m(b2)], J.prototype, "opacity", void 0), r([m(G.outFields)], J.prototype, "outFields", void 0), r([m({ readOnly: true })], J.prototype, "parsedUrl", null), r([m(l3)], J.prototype, "popupEnabled", void 0), r([m({ type: q, json: { name: "popupInfo", write: true } })], J.prototype, "popupTemplate", void 0), r([m({ types: m3, json: { origins: { service: { name: "drawingInfo.renderer" }, "web-scene": { types: u2, name: "layerDefinition.drawingInfo.renderer", write: true } }, name: "layerDefinition.drawingInfo.renderer", write: { ignoreOrigin: true } } })], J.prototype, "renderer", null), r([m(s3)], J.prototype, "screenSizePerspectiveEnabled", void 0), r([m({ readOnly: true })], J.prototype, "source", void 0), r([m({ type: g, json: { name: "layerDefinition.spatialReference", write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "extent.spatialReference" } } } })], J.prototype, "spatialReference", void 0), r([m({ readOnly: true, type: [x], json: { name: "wfsInfo.supportedSpatialReferences", write: { ignoreOrigin: true, isRequired: true } } })], J.prototype, "spatialReferences", void 0), r([m({ type: Boolean, value: false, json: { name: "wfsInfo.swapXY", write: { ignoreOrigin: true, isRequired: true } } })], J.prototype, "swapXY", void 0), r([m({ json: { write: { ignoreOrigin: true, isRequired: true }, origins: { service: { name: "name" } } } })], J.prototype, "title", void 0), r([m({ json: { read: false }, readOnly: true })], J.prototype, "type", void 0), r([m(y4)], J.prototype, "url", void 0), r([m({ type: String, readOnly: true, json: { name: "wfsInfo.version", write: { ignoreOrigin: true, isRequired: true } } })], J.prototype, "version", void 0), r([m()], J.prototype, "wfsCapabilities", null), J = B = r([a("esri.layers.WFSLayer")], J);
var M = J;
export {
  M as default
};
//# sourceMappingURL=WFSLayer-X7VY5EP2.js.map
