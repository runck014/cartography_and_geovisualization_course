import {
  S as S2,
  d as d2,
  g as g2,
  j as j2
} from "./chunk-NZJPSBEF.js";
import "./chunk-5GQ62KHN.js";
import "./chunk-YAGJS3MX.js";
import "./chunk-43KBLSS3.js";
import {
  j
} from "./chunk-RG7AMCT5.js";
import {
  f
} from "./chunk-PV3ZZQOV.js";
import {
  l
} from "./chunk-SM2VXWMT.js";
import "./chunk-WYO25WZZ.js";
import "./chunk-OC7D2HR4.js";
import {
  t
} from "./chunk-IGMG7ERK.js";
import {
  b
} from "./chunk-V47ZBW5W.js";
import {
  y
} from "./chunk-HKYICNT2.js";
import {
  S
} from "./chunk-VGUQMPM6.js";
import "./chunk-KKH7HGO3.js";
import "./chunk-7VNQKVOW.js";
import "./chunk-PNVXSHN2.js";
import "./chunk-3DVL3O3F.js";
import "./chunk-RN66FJAW.js";
import "./chunk-2RIHQI4N.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-NXGNMEHZ.js";
import "./chunk-TWYDW6LU.js";
import "./chunk-PVHAAI32.js";
import "./chunk-MLATPUII.js";
import "./chunk-NVFQGMP6.js";
import "./chunk-P2IB5HBH.js";
import "./chunk-XX37BOHH.js";
import "./chunk-5CRXWQ3Y.js";
import "./chunk-4ISVH4NS.js";
import "./chunk-NIWINVGG.js";
import "./chunk-DOENTAA7.js";
import "./chunk-CGSFKZP2.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-WPERPIJF.js";
import "./chunk-RXJCBLN2.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-XKMN3LJN.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import {
  n
} from "./chunk-VIP4NQFO.js";
import {
  f as f2
} from "./chunk-QMGMKWTA.js";
import "./chunk-XQH2QDB2.js";
import "./chunk-6Q7GN2CW.js";
import "./chunk-MYUZZ3A3.js";
import "./chunk-2IGXKE5P.js";
import "./chunk-JFI4ESYU.js";
import "./chunk-4X2UADDH.js";
import "./chunk-ZICJB3ML.js";
import "./chunk-AVBIV2K3.js";
import "./chunk-4NJWIUZG.js";
import "./chunk-TA32QX7Z.js";
import "./chunk-NYLBGE62.js";
import "./chunk-LPNAPHOF.js";
import "./chunk-QCBTLG25.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-K5RYAJV4.js";
import "./chunk-XGYM66XX.js";
import "./chunk-JOOGZSAP.js";
import "./chunk-J6GHQIZ2.js";
import {
  C,
  d,
  v,
  w as w2
} from "./chunk-W6D3ECTZ.js";
import "./chunk-QXDQJEIU.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-SEUZ3J6J.js";
import "./chunk-BWTCR2DR.js";
import "./chunk-SMOTPOZ7.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-EZXLBRAS.js";
import "./chunk-7FJIOZSE.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2PK57UYA.js";
import "./chunk-3L2AYCZY.js";
import "./chunk-TSVUPARM.js";
import "./chunk-VUJERGGB.js";
import "./chunk-NTI2OCVI.js";
import "./chunk-ZCHZRNUG.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-JVEZN6WF.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import {
  V
} from "./chunk-RCLWOQNR.js";
import {
  o
} from "./chunk-DOTSJZHK.js";
import "./chunk-UCO66LNK.js";
import "./chunk-5YRJ4YFE.js";
import "./chunk-RD2BBQYN.js";
import "./chunk-SEG3PRUR.js";
import {
  m as m2
} from "./chunk-B6VE32RA.js";
import "./chunk-AIYFWM42.js";
import "./chunk-2M53HYNY.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-Q7TEBZSN.js";
import {
  w as w3
} from "./chunk-FG3XOAFD.js";
import {
  o as o2
} from "./chunk-GN5RE63N.js";
import {
  g,
  r as r2
} from "./chunk-2WXAPZBK.js";
import "./chunk-E2I7HYXQ.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-WTNHDCCU.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-TVTRNT6K.js";
import "./chunk-CRH37WFF.js";
import {
  qt
} from "./chunk-YFGQMO6E.js";
import {
  u2 as u
} from "./chunk-HAF6QJ32.js";
import {
  m
} from "./chunk-H77COA2S.js";
import {
  a4 as a2,
  w
} from "./chunk-7LJCT7EA.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  a
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-L6CCOEVE.js";
import {
  c
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/layers/support/KMLSublayer.js
var j3;
var S3 = j3 = class extends o.EventedMixin(u(m2)) {
  constructor(...e) {
    super(...e), this.description = null, this.fullExtent = null, this.id = null, this.networkLink = null, this.parent = null, this.sublayers = null, this.title = null, this.sourceJSON = null, this.layer = null, this.addHandles([v(() => this.sublayers, "after-add", ({ item: e2 }) => {
      e2.parent = this, e2.layer = this.layer;
    }, C), v(() => this.sublayers, "after-remove", ({ item: e2 }) => {
      e2.layer = e2.parent = null;
    }, C), d(() => this.sublayers, (e2, t2) => {
      if (t2) for (const r3 of t2) r3.layer = r3.parent = null;
      if (e2) for (const r3 of e2) r3.parent = this, r3.layer = this.layer;
    }, C), d(() => this.layer, (e2) => {
      if (this.sublayers) for (const t2 of this.sublayers) t2.layer = e2;
    }, C)]);
  }
  initialize() {
    w2(() => this.networkLink).then(() => w2(() => true === this.visible)).then(() => this.load());
  }
  load(e) {
    var _a;
    if (!this.networkLink) return;
    if (this.networkLink.viewFormat) return;
    const r3 = null != e ? e.signal : null, s = this._fetchService(((_a = this._get("networkLink")) == null ? void 0 : _a.href) ?? "", r3).then((e2) => {
      var _a2;
      const r4 = j2(e2.sublayers);
      this.fullExtent = w3.fromJSON(r4), this.sourceJSON = e2;
      const s2 = w(V.ofType(j3), S2(j3, e2));
      this.sublayers ? this.sublayers.addMany(s2) : this.sublayers = s2, (_a2 = this.layer) == null ? void 0 : _a2.emit("sublayer-update"), this.layer && this.layer.notifyChange("visibleSublayers");
    });
    return this.addResolvingPromise(s), Promise.resolve(this);
  }
  get visible() {
    return this._get("visible");
  }
  set visible(e) {
    this._get("visible") !== e && (this._set("visible", e), this.layer && this.layer.notifyChange("visibleSublayers"));
  }
  readVisible(e, t2) {
    return !!t2.visibility;
  }
  _fetchService(e, t2) {
    return g2(e, this.layer.outSpatialReference, this.layer.refreshInterval, t2).then((e2) => d2(e2.data));
  }
};
r([m()], S3.prototype, "description", void 0), r([m({ type: w3 })], S3.prototype, "fullExtent", void 0), r([m()], S3.prototype, "id", void 0), r([m({ readOnly: true, value: null })], S3.prototype, "networkLink", void 0), r([m({ json: { write: { allowNull: true } } })], S3.prototype, "parent", void 0), r([m({ type: V.ofType(S3), json: { write: { allowNull: true } } })], S3.prototype, "sublayers", void 0), r([m({ value: null, json: { read: { source: "name", reader: (e) => c(e) } } })], S3.prototype, "title", void 0), r([m({ value: true })], S3.prototype, "visible", null), r([o2("visible", ["visibility"])], S3.prototype, "readVisible", null), r([m()], S3.prototype, "sourceJSON", void 0), r([m()], S3.prototype, "layer", void 0), S3 = j3 = r([a2("esri.layers.support.KMLSublayer")], S3);
var k = S3;

// node_modules/@arcgis/core/layers/KMLLayer.js
var w4 = ["kml", "xml"];
var F = class extends l(f(t(b(j(S(f2)))))) {
  constructor(...e) {
    super(...e), this._visibleFolders = [], this.allSublayers = new n({ getCollections: () => [this.sublayers], getChildrenFunction: (e2) => e2.sublayers }), this.outSpatialReference = g.WGS84, this.path = null, this.legendEnabled = false, this.operationalLayerType = "KML", this.sublayers = null, this.type = "kml", this.url = null;
  }
  initialize() {
    this.addHandles([d(() => this.sublayers, (e, r3) => {
      r3 && r3.forEach((e2) => {
        e2.parent = null, e2.layer = null;
      }), e && e.forEach((e2) => {
        e2.parent = this, e2.layer = this;
      });
    }, C), this.on("sublayer-update", () => this.notifyChange("fullExtent"))]);
  }
  normalizeCtorArgs(e, r3) {
    return "string" == typeof e ? { url: e, ...r3 } : e;
  }
  readSublayersFromItemOrWebMap(e, r3) {
    this._visibleFolders = r3.visibleFolders;
  }
  readSublayers(e, r3, t2) {
    return S2(k, r3, t2, this._visibleFolders);
  }
  writeSublayers(e, r3) {
    const t2 = [], o3 = e.toArray();
    for (; o3.length; ) {
      const e2 = o3[0];
      e2.networkLink || (e2.visible && t2.push(e2.id), e2.sublayers && o3.push(...e2.sublayers.toArray())), o3.shift();
    }
    r3.visibleFolders = t2;
  }
  get title() {
    const e = this._get("title");
    return e && "defaults" !== this.originOf("title") ? e : this.url ? qt(this.url, w4) || "KML" : e;
  }
  set title(e) {
    this._set("title", e);
  }
  get visibleSublayers() {
    const e = this.sublayers, r3 = [], t2 = (e2) => {
      e2.visible && (r3.push(e2), e2.sublayers && e2.sublayers.forEach(t2));
    };
    return e && e.forEach(t2), r3;
  }
  get fullExtent() {
    return this._recomputeFullExtent();
  }
  load(e) {
    const r3 = null != e ? e.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["KML"], supportsData: false }, e).catch(a).then(() => this._fetchService(r3))), Promise.resolve(this);
  }
  destroy() {
    super.destroy(), this.allSublayers.destroy();
  }
  async _fetchService(e) {
    const r3 = await Promise.resolve().then(() => this.resourceInfo ? { ssl: false, data: this.resourceInfo } : g2(this.url ?? "", this.outSpatialReference, this.refreshInterval, e)), t2 = d2(r3.data);
    t2 && this.read(t2, { origin: "service" });
  }
  _recomputeFullExtent() {
    let e = null;
    null != this.extent && (e = this.extent.clone());
    const r3 = (t2) => {
      if (t2.sublayers) for (const o3 of t2.sublayers.items) r3(o3), o3.visible && o3.fullExtent && (null != e ? e.union(o3.fullExtent) : e = o3.fullExtent.clone());
    };
    return r3(this), e;
  }
};
r([m({ readOnly: true })], F.prototype, "allSublayers", void 0), r([m({ type: g })], F.prototype, "outSpatialReference", void 0), r([m({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], F.prototype, "path", void 0), r([m({ readOnly: true, json: { read: false, write: false } })], F.prototype, "legendEnabled", void 0), r([m({ type: ["show", "hide", "hide-children"] })], F.prototype, "listMode", void 0), r([m({ type: ["KML"] })], F.prototype, "operationalLayerType", void 0), r([m({})], F.prototype, "resourceInfo", void 0), r([m({ type: V.ofType(k), json: { write: { ignoreOrigin: true } } })], F.prototype, "sublayers", void 0), r([o2(["web-map", "portal-item"], "sublayers", ["visibleFolders"])], F.prototype, "readSublayersFromItemOrWebMap", null), r([o2("service", "sublayers", ["sublayers"])], F.prototype, "readSublayers", null), r([r2("sublayers")], F.prototype, "writeSublayers", null), r([m({ readOnly: true, json: { read: false } })], F.prototype, "type", void 0), r([m({ json: { origins: { "web-map": { read: { source: "title" } } }, write: { ignoreOrigin: true } } })], F.prototype, "title", null), r([m(y)], F.prototype, "url", void 0), r([m({ readOnly: true })], F.prototype, "visibleSublayers", null), r([m({ type: w3 })], F.prototype, "extent", void 0), r([m()], F.prototype, "fullExtent", null), F = r([a2("esri.layers.KMLLayer")], F);
var O = F;
export {
  O as default
};
//# sourceMappingURL=KMLLayer-A3H3UAGR.js.map
