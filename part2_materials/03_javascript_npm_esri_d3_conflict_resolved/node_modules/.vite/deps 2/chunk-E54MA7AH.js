import {
  s as s3
} from "./chunk-6TU4HBID.js";
import {
  c as c2,
  f,
  t as t2
} from "./chunk-X7VTUWCX.js";
import {
  L,
  S,
  b,
  c2 as c,
  e,
  m,
  o2 as o,
  s as s2,
  t,
  u
} from "./chunk-GRW2QIBT.js";
import {
  l
} from "./chunk-R2PAF6JT.js";
import {
  s2 as s
} from "./chunk-PKLD5YJF.js";
import {
  has
} from "./chunk-XKQWTZMW.js";

// node_modules/@arcgis/core/core/workers/utils.js
var r = "worker:port-closed";
var e2;
!function(t4) {
  t4[t4.HANDSHAKE = 0] = "HANDSHAKE", t4[t4.OPEN = 1] = "OPEN", t4[t4.OPENED = 2] = "OPENED", t4[t4.RESPONSE = 3] = "RESPONSE", t4[t4.INVOKE = 4] = "INVOKE", t4[t4.ABORT = 5] = "ABORT", t4[t4.CLOSE = 6] = "CLOSE", t4[t4.OPEN_PORT = 7] = "OPEN_PORT", t4[t4.ON = 8] = "ON";
}(e2 || (e2 = {}));
var n = 0;
function s4() {
  return n++;
}
function o2(t4) {
  return t4 && "object" == typeof t4 && ("result" in t4 || "transferList" in t4);
}
function i(t4) {
  return t4 ? "string" == typeof t4 ? JSON.stringify({ name: "message", message: t4 }) : t4.toJSON ? JSON.stringify(t4) : JSON.stringify({ name: t4.name, message: t4.message, details: t4.details || { stack: t4.stack } }) : null;
}
function a(t4, r2, n4, s5) {
  if (r2.type === e2.OPEN_PORT) return void t4.postMessage(r2, [r2.port]);
  if (r2.type !== e2.INVOKE && r2.type !== e2.RESPONSE) return void t4.postMessage(r2);
  let f3;
  if (o2(n4) ? (f3 = u2(n4.transferList), r2.data = n4.result) : (f3 = u2(s5), r2.data = n4), f3) {
    if (has("ff")) {
      for (const n5 of f3) if ("byteLength" in n5 && n5.byteLength > 267386880) {
        const n6 = "Worker call with large ArrayBuffer would crash Firefox";
        switch (r2.type) {
          case e2.INVOKE:
            throw n6;
          case e2.RESPONSE:
            return void a(t4, { type: e2.RESPONSE, jobId: r2.jobId, error: i(n6) });
        }
      }
    }
    t4.postMessage(r2, f3);
  } else t4.postMessage(r2);
}
function f2(t4) {
  if (!t4) return null;
  const r2 = t4.data;
  return r2 ? "string" == typeof r2 ? JSON.parse(r2) : r2 : null;
}
function u2(t4) {
  if (!(t4 == null ? void 0 : t4.length)) return null;
  if (has("esri-workers-arraybuffer-transfer")) return t4;
  const r2 = t4.filter((t5) => !c3(t5));
  return r2.length ? r2 : null;
}
function c3(t4) {
  var _a;
  return t4 instanceof ArrayBuffer || "ArrayBuffer" === ((_a = t4 == null ? void 0 : t4.constructor) == null ? void 0 : _a.name);
}
async function O(e5) {
  try {
    return await e5;
  } catch (n4) {
    const e6 = (n4 == null ? void 0 : n4.name) === r;
    if (!(b(n4) || e6)) throw n4;
    return;
  }
}

// node_modules/@arcgis/core/core/workers/connectionRegistry.js
var n2 = new FinalizationRegistry((n4) => {
  n4.close();
});
function e3(e5, i3) {
  n2.register(e5, i3, i3);
}
function i2(e5) {
  n2.unregister(e5);
}

// node_modules/@arcgis/core/core/workers/InvokeHandler.js
function t3(t4, r2) {
  return new Proxy({}, { get: (e5, i3, s5) => (...e6) => {
    let s6, o3;
    const a2 = e6[e6.length - 1];
    n3(a2) && (s6 = a2.signal, o3 = a2.transferList, e6.pop());
    return t4.apply(r2 ? `${r2}.${i3.toString()}` : i3.toString(), e6, { transferList: o3, signal: s6 });
  } });
}
function n3(t4) {
  return "object" == typeof t4 && !Array.isArray(t4) && null != t4 && ("signal" in t4 || "transferList" in t4 || 0 === Object.keys(t4).length);
}

// node_modules/@arcgis/core/core/workers/registry.js
var e4 = { statsWorker: () => import("./statsWorker-N2PA5VLK.js"), geometryEngineWorker: () => import("./geometryEngineWorker-26EODBCA.js"), CSVSourceWorker: () => import("./CSVSourceWorker-VOLI4I3Y.js"), EdgeProcessingWorker: () => import("./EdgeProcessingWorker-2SVAJWE3.js"), ElevationSamplerWorker: () => import("./ElevationSamplerWorker-ESTG6SCY.js"), FeatureServiceSnappingSourceWorker: () => import("./FeatureServiceSnappingSourceWorker-R5VQEER7.js"), GeoJSONSourceWorker: () => import("./GeoJSONSourceWorker-DXAGG4PL.js"), LercWorker: () => import("./LercWorker-DZIEV3XA.js"), MemorySourceWorker: () => import("./MemorySourceWorker-UV6TGMRM.js"), PBFDecoderWorker: () => import("./PBFDecoderWorker-YKSSY3Y2.js"), FeaturePipelineWorker: () => import("./FeaturePipelineWorker-CNKVOOKC.js"), PointCloudWorker: () => import("./PointCloudWorker-O5XFIDJH.js"), RasterWorker: () => import("./RasterWorker-I4LKXKKF.js"), SceneLayerSnappingSourceWorker: () => import("./SceneLayerSnappingSourceWorker-YLTXDW2U.js"), SceneLayerWorker: () => import("./SceneLayerWorker-3LDPAQIA.js"), WFSSourceWorker: () => import("./WFSSourceWorker-BSU76HBB.js"), WorkerTileHandler: () => import("./WorkerTileHandler-FDZ5TWVA.js"), Lyr3DWorker: () => import("./Lyr3DWorker-NQEZTKEZ.js"), Feature3DPipelineWorker: () => import("./Feature3DPipelineWorker-RG5FX6WO.js") };

// node_modules/@arcgis/core/core/workers/RemoteClient.js
var { CLOSE: M, ABORT: k, INVOKE: j, RESPONSE: y, OPEN_PORT: I, ON: J } = e2;
var w = 2;
var O2 = class {
  constructor(e5) {
    this._invoke = e5, this._timer = null, this._cancelledJobIds = /* @__PURE__ */ new Set(), this._invokeMessages = [], this._timer = null, this._process = this._process.bind(this);
  }
  push(e5) {
    e5.type === e2.ABORT ? this._cancelledJobIds.add(e5.jobId) : (this._invokeMessages.push(e5), null === this._timer && (this._timer = setTimeout(this._process, 0)));
  }
  clear() {
    this._invokeMessages.length = 0, this._cancelledJobIds.clear(), this._timer = null;
  }
  _process() {
    this._timer = null;
    for (const e5 of this._invokeMessages) this._cancelledJobIds.has(e5.jobId) || this._invoke(e5);
    this._cancelledJobIds.clear(), this._invokeMessages.length = 0;
  }
};
var E = class _E {
  static connect(e5, s5) {
    const t4 = new MessageChannel();
    let o3;
    o3 = "function" == typeof e5 ? new e5() : "default" in e5 && "function" == typeof e5.default ? new e5.default() : e5;
    const n4 = new _E(t4.port1, { channel: t4, client: o3, schedule: s5 });
    return "object" == typeof o3 && "remoteClient" in o3 && (o3.remoteClient = n4), _E.clients.set(n4, o3), t4.port2;
  }
  static loadWorker(e5) {
    const s5 = e4[e5];
    return s5 ? s5() : Promise.resolve(null);
  }
  constructor(e5, s5, t4) {
    this._port = e5, this._jobQueue = t4, this._outJobs = /* @__PURE__ */ new Map(), this._inJobs = /* @__PURE__ */ new Map(), this._invokeQueue = new O2((e6) => this._onInvokeMessage(e6)), this._client = s5.client, this._onMessage = this._onMessage.bind(this), this._channel = s5.channel, this._schedule = s5.schedule, this._port.addEventListener("message", this._onMessage), this._port.start();
  }
  close() {
    this._post({ type: M }), this._close();
  }
  isBusy() {
    return this._outJobs.size > 0;
  }
  invoke(e5, s5, t4) {
    return this.apply(e5, [s5], t4);
  }
  apply(e5, t4, o3) {
    const a2 = o3 == null ? void 0 : o3.signal, h = o3 == null ? void 0 : o3.transferList;
    if (!this._port) return Promise.reject(new s(r, `Cannot call invoke('${e5}'), port is closed`, { methodName: e5, data: t4 }));
    const c5 = s4();
    return new Promise((s5, o4) => {
      if (c(a2)) return this._processWork(), void o4(u());
      const p = m(a2, () => {
        const e6 = this._outJobs.get(c5);
        e6 && (this._outJobs.delete(c5), this._processWork(), l(e6.abortHandle), this._post({ type: k, jobId: c5 }), o4(u()));
      }), _ = { resolve: s5, reject: o4, abortHandle: p, debugInfo: e5 };
      this._outJobs.set(c5, _), this._post({ type: j, jobId: c5, methodName: e5, abortable: null != a2 }, t4, h);
    });
  }
  createInvokeProxy(e5) {
    return t3(this, e5);
  }
  on(e5, s5) {
    const t4 = new MessageChannel();
    function n4(e6) {
      s5(e6.data);
    }
    return this._port.postMessage({ type: e2.ON, eventType: e5, port: t4.port2 }, [t4.port2]), t4.port1.addEventListener("message", n4), t4.port1.start(), e(() => {
      t4.port1.postMessage({ type: e2.CLOSE }), t4.port1.close(), t4.port1.removeEventListener("message", n4);
    });
  }
  jobAdded() {
    this._processWork();
  }
  openPort() {
    const e5 = new MessageChannel();
    return this._post({ type: I, port: e5.port2 }), e5.port1;
  }
  _processWork() {
    var _a;
    if (this._outJobs.size >= w) return;
    const e5 = (_a = this._jobQueue) == null ? void 0 : _a.pop();
    if (!e5) return;
    const { methodName: s5, data: t4, invokeOptions: o3, resolver: n4 } = e5;
    this.apply(s5, t4, o3).then((e6) => n4.resolve(e6)).catch((e6) => n4.reject(e6));
  }
  _close() {
    this._channel && (this._channel = void 0), this._port.removeEventListener("message", this._onMessage), this._port.close(), this._outJobs.forEach((e5) => {
      l(e5.abortHandle), e5.reject(u(`Worker closing, aborting job calling '${e5.debugInfo}'`));
    }), this._inJobs.clear(), this._outJobs.clear(), this._invokeQueue.clear(), this._port = null, this._client = null, this._schedule = null;
  }
  _onMessage(e5) {
    null != this._schedule ? this._schedule(() => this._processMessage(e5, true)) : this._processMessage(e5, false);
  }
  _processMessage(e5, s5) {
    const t4 = f2(e5);
    if (t4) switch (t4.type) {
      case y:
        this._onResponseMessage(t4);
        break;
      case j:
        s5 ? this._onInvokeMessage(t4) : this._invokeQueue.push(t4);
        break;
      case k:
        this._onAbortMessage(t4);
        break;
      case M:
        this._onCloseMessage();
        break;
      case I:
        this._onOpenPortMessage(t4);
        break;
      case J:
        this._onOnMessage(t4);
    }
  }
  _onAbortMessage(e5) {
    const s5 = this._inJobs, t4 = e5.jobId, o3 = s5.get(t4);
    this._invokeQueue.push(e5), o3 && (o3.controller && o3.controller.abort(), s5.delete(t4));
  }
  _onCloseMessage() {
    const e5 = this._client;
    this._close(), e5 && "destroy" in e5 && _E.clients.get(this) === e5 && e5.destroy(), _E.clients.delete(this), (e5 == null ? void 0 : e5.remoteClient) && (e5.remoteClient = null);
  }
  _onInvokeMessage(e5) {
    const { methodName: s5, jobId: t4, data: o3 = [], abortable: n4 } = e5, r2 = n4 ? new AbortController() : null, i3 = this._inJobs;
    let l2, c5 = this._client, p = c5[s5];
    try {
      if (!p && s5 && s5.includes(".")) {
        const e6 = s5.split(".");
        for (let s6 = 0; s6 < e6.length - 1; s6++) c5 = c5[e6[s6]], p = c5[e6[s6 + 1]];
      }
      if ("function" != typeof p) throw new TypeError(`${s5} is not a function`);
      o3.push({ client: this, signal: r2 ? r2.signal : null }), l2 = p.apply(c5, o3);
    } catch (_) {
      return void this._post({ type: y, jobId: t4, error: i(_) });
    }
    S(l2) ? (i3.set(t4, { controller: r2, promise: l2 }), l2.then((e6) => {
      i3.has(t4) && (i3.delete(t4), this._post({ type: y, jobId: t4 }, e6));
    }, (e6) => {
      i3.has(t4) && (i3.delete(t4), b(e6) || this._post({ type: y, jobId: t4, error: i(e6 || { message: `Error encountered at method ${s5}` }) }));
    })) : this._post({ type: y, jobId: t4 }, l2);
  }
  _onOpenPortMessage(e5) {
    new _E(e5.port, { client: this._client });
  }
  _onOnMessage(e5) {
    const { port: s5 } = e5, o3 = this._client.on(e5.eventType, (e6) => {
      s5.postMessage(e6);
    }), n4 = o(e5.port, "message", (e6) => {
      const t4 = f2(e6);
      (t4 == null ? void 0 : t4.type) === e2.CLOSE && (n4.remove(), o3.remove(), s5.close());
    });
  }
  _onResponseMessage(e5) {
    const { jobId: t4, error: o3, data: r2 } = e5, i3 = this._outJobs;
    if (!i3.has(t4)) return;
    const l2 = i3.get(t4);
    i3.delete(t4), this._processWork(), l(l2.abortHandle), o3 ? l2.reject(s.fromJSON(JSON.parse(o3))) : l2.resolve(r2);
  }
  _post(e5, s5, t4) {
    return a(this._port, e5, s5, t4);
  }
};
E.kernelInfo = { buildDate: c2, fullVersion: t2, revision: f }, E.clients = /* @__PURE__ */ new Map();

// node_modules/@arcgis/core/core/workers/Connection.js
var c4 = class {
  constructor() {
    this._inUseClients = new Array(), this._clients = new Array(), this._clientPromises = new Array(), this._ongoingJobsQueue = new s3();
  }
  destroy() {
    this.close();
  }
  get closed() {
    var _a;
    return !((_a = this._clients) == null ? void 0 : _a.length);
  }
  open(e5, s5) {
    return new Promise((i3, o3) => {
      let r2 = true;
      const l2 = (e6) => {
        s2(s5.signal), r2 && (r2 = false, e6());
      };
      this._clients.length = e5.length, this._clientPromises.length = e5.length, this._inUseClients.length = e5.length;
      for (let n4 = 0; n4 < e5.length; ++n4) {
        const r3 = e5[n4];
        S(r3) ? this._clientPromises[n4] = r3.then((e6) => (this._clients[n4] = new E(e6, s5, this._ongoingJobsQueue), l2(i3), this._clients[n4]), () => (l2(o3), null)) : (this._clients[n4] = new E(r3, s5, this._ongoingJobsQueue), this._clientPromises[n4] = Promise.resolve(this._clients[n4]), l2(i3));
      }
    });
  }
  broadcast(e5, t4, s5) {
    const i3 = new Array(this._clientPromises.length);
    for (let n4 = 0; n4 < this._clientPromises.length; ++n4) {
      const o3 = this._clientPromises[n4];
      i3[n4] = o3.then((i4) => i4 == null ? void 0 : i4.invoke(e5, t4, s5));
    }
    return i3;
  }
  close() {
    let e5;
    for (; e5 = this._ongoingJobsQueue.pop(); ) e5.resolver.reject(u(`Worker closing, aborting job calling '${e5.methodName}'`));
    for (const t4 of this._clientPromises) t4.then((e6) => e6 == null ? void 0 : e6.close());
    this._clients.length = 0, this._clientPromises.length = 0, this._inUseClients.length = 0, i2(this);
  }
  invoke(e5, t4, s5) {
    return this.apply(e5, [t4], s5);
  }
  apply(e5, t4, s5) {
    const n4 = L();
    this._ongoingJobsQueue.push({ methodName: e5, data: t4, invokeOptions: s5, resolver: n4 });
    for (let i3 = 0; i3 < this._clientPromises.length; i3++) {
      const e6 = this._clients[i3];
      e6 ? e6.jobAdded() : this._clientPromises[i3].then((e7) => e7 == null ? void 0 : e7.jobAdded());
    }
    return n4.promise;
  }
  createInvokeProxy(e5) {
    return t3(this, e5);
  }
  on(t4, s5) {
    return Promise.all(this._clientPromises).then(() => t(this._clients.map((e5) => e5.on(t4, s5))));
  }
  openPorts() {
    return new Promise((e5) => {
      const t4 = new Array(this._clientPromises.length);
      let s5 = t4.length;
      for (let i3 = 0; i3 < this._clientPromises.length; ++i3) {
        this._clientPromises[i3].then((n4) => {
          n4 && (t4[i3] = n4.openPort()), 0 == --s5 && e5(t4);
        });
      }
    });
  }
  get test() {
  }
};

export {
  e3 as e,
  e2,
  s4 as s,
  i,
  a,
  f2 as f,
  O,
  E,
  c4 as c
};
//# sourceMappingURL=chunk-E54MA7AH.js.map
