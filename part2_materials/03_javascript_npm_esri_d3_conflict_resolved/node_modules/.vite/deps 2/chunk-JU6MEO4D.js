import {
  m as m2
} from "./chunk-CY5MS6DC.js";
import {
  M,
  w as w2
} from "./chunk-A3J7W53Y.js";
import {
  o
} from "./chunk-HLF5XJSV.js";
import {
  g
} from "./chunk-L6D73M4D.js";
import {
  c as c2
} from "./chunk-P5H5PJSC.js";
import {
  n
} from "./chunk-7O7KFKCG.js";
import {
  U,
  i,
  n2
} from "./chunk-X7VTUWCX.js";
import {
  f,
  u2 as u3
} from "./chunk-VU6O6TFT.js";
import {
  b2 as b,
  m
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a2,
  w
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  a as a3,
  c2 as c,
  s as s3,
  u as u2
} from "./chunk-GRW2QIBT.js";
import {
  l,
  u
} from "./chunk-R2PAF6JT.js";
import {
  a,
  s,
  s2
} from "./chunk-PKLD5YJF.js";

// node_modules/@arcgis/core/portal/portalDefault.js
var t;
function n3(e2) {
  return t && !t.destroyed || (t = e2()), t;
}

// node_modules/@arcgis/core/portal/PortalQueryParams.js
var u4;
var m3 = new n({ avgRating: "avg-rating", numRatings: "num-ratings", numComments: "num-comments", numViews: "num-views" });
var p = u4 = class extends b {
  constructor(t2) {
    super(t2), this.categories = null, this.disableExtraQuery = false, this.extent = null, this.filter = null, this.num = 10, this.query = null, this.sortField = null, this.start = 1;
  }
  get sortOrder() {
    return this._get("sortOrder") || "asc";
  }
  set sortOrder(t2) {
    "asc" !== t2 && "desc" !== t2 || this._set("sortOrder", t2);
  }
  clone() {
    return new u4({ categories: this.categories ? a(this.categories) : null, disableExtraQuery: this.disableExtraQuery, extent: this.extent ? this.extent.clone() : null, filter: this.filter, num: this.num, query: this.query, sortField: this.sortField, sortOrder: this.sortOrder, start: this.start });
  }
  toRequestOptions(t2, r2) {
    let e2 = [];
    this.categories && (e2 = this.categories.map((t3) => Array.isArray(t3) ? JSON.stringify(t3) : t3));
    let s4 = "";
    if (this.extent) {
      const t3 = M(this.extent, g.WGS84);
      null != t3 && (s4 = `${t3.xmin},${t3.ymin},${t3.xmax},${t3.ymax}`);
    }
    let o2 = this.query;
    !this.disableExtraQuery && t2.extraQuery && (o2 = "(" + o2 + ")" + t2.extraQuery);
    const i2 = { categories: e2, bbox: s4, q: o2, filter: this.filter, num: this.num, sortField: null, sortOrder: null, start: this.start };
    return this.sortField && (i2.sortField = this.sortField.split(",").map((t3) => m3.toJSON(t3.trim())).join(","), i2.sortOrder = this.sortOrder), { query: { ...r2, ...i2 } };
  }
};
r([m()], p.prototype, "categories", void 0), r([m()], p.prototype, "disableExtraQuery", void 0), r([m({ type: w2 })], p.prototype, "extent", void 0), r([m()], p.prototype, "filter", void 0), r([m()], p.prototype, "num", void 0), r([m()], p.prototype, "query", void 0), r([m()], p.prototype, "sortField", void 0), r([m()], p.prototype, "sortOrder", null), r([m()], p.prototype, "start", void 0), p = u4 = r([a2("esri.portal.PortalQueryParams")], p);
var c3 = p;

// node_modules/@arcgis/core/portal/PortalGroup.js
var l2;
var u5 = l2 = class extends f {
  constructor(t2) {
    super(t2), this.access = null, this.created = null, this.description = null, this.id = null, this.isInvitationOnly = false, this.modified = null, this.owner = null, this.portal = null, this.snippet = null, this.sortField = null, this.sortOrder = null, this.sourceJSON = null, this.tags = null, this.title = null;
  }
  get thumbnailUrl() {
    var _a;
    const t2 = this.url, r2 = this.thumbnail;
    return t2 && r2 && this.portal ? (_a = this.portal) == null ? void 0 : _a.normalizeUrl(`${t2}/info/${r2}?f=json`) : null;
  }
  get url() {
    var _a;
    const t2 = (_a = this.portal) == null ? void 0 : _a.restUrl;
    return t2 ? t2 + "/community/groups/" + this.id : null;
  }
  fetchCategorySchema(t2) {
    return this.portal.request(this.url + "/categorySchema", t2).then((r2) => {
      const e2 = r2.categorySchema || [];
      return e2.some((t3) => "contentCategorySetsGroupQuery.LivingAtlas" === t3.source) ? this._fetchCategorySchemaSet("LivingAtlas", t2) : e2;
    });
  }
  fetchMembers(t2) {
    return this.portal.request(this.url + "/users", t2);
  }
  getThumbnailUrl(t2) {
    let r2 = this.thumbnailUrl;
    return r2 && t2 && (r2 += `&w=${t2}`), r2;
  }
  toJSON() {
    throw new s2("internal:not-yet-implemented", "PortalGroup.toJSON is not yet implemented");
  }
  static fromJSON(t2) {
    if (!t2) return null;
    if (t2.declaredClass) throw new Error("JSON object is already hydrated");
    const r2 = new l2({ sourceJSON: t2 });
    return r2.read(t2), r2;
  }
  queryItems(t2, r2) {
    let e2 = w(c3, t2);
    const o2 = this.portal;
    return parseFloat(o2.currentVersion) > 5 ? (e2 = e2 || new c3(), o2.queryPortal(`/content/groups/${this.id}/search`, e2, "PortalItem", r2)) : (e2 = e2 ? e2.clone() : new c3(), e2.query = "group:" + this.id + (e2.query ? " " + e2.query : ""), o2.queryItems(e2, r2));
  }
  _fetchCategorySchemaSet(t2, e2) {
    const o2 = this.portal;
    return o2.fetchSelf(o2.authMode, true, e2).then((t3) => {
      const s4 = t3.contentCategorySetsGroupQuery;
      if (s4) {
        const t4 = new c3({ disableExtraQuery: true, num: 1, query: s4 });
        return o2.queryGroups(t4, e2);
      }
      throw new s2("portal-group:fetchCategorySchema", "contentCategorySetsGroupQuery value not found");
    }).then((o3) => {
      if (o3.total) {
        const r2 = o3.results[0], s4 = new c3({ num: 1, query: `typekeywords:"${t2}"` });
        return r2.queryItems(s4, e2);
      }
      throw new s2("portal-group:fetchCategorySchema", "contentCategorySetsGroupQuery group not found");
    }).then((t3) => {
      if (t3.total) {
        return t3.results[0].fetchData("json", e2).then((t4) => {
          const r2 = t4 == null ? void 0 : t4.categorySchema;
          return (r2 == null ? void 0 : r2.length) ? r2 : [];
        });
      }
      return [];
    });
  }
};
r([m()], u5.prototype, "access", void 0), r([m({ type: Date })], u5.prototype, "created", void 0), r([m()], u5.prototype, "description", void 0), r([m()], u5.prototype, "id", void 0), r([m()], u5.prototype, "isInvitationOnly", void 0), r([m({ type: Date })], u5.prototype, "modified", void 0), r([m()], u5.prototype, "owner", void 0), r([m()], u5.prototype, "portal", void 0), r([m()], u5.prototype, "snippet", void 0), r([m()], u5.prototype, "sortField", void 0), r([m()], u5.prototype, "sortOrder", void 0), r([m()], u5.prototype, "sourceJSON", void 0), r([m()], u5.prototype, "tags", void 0), r([m()], u5.prototype, "thumbnail", void 0), r([m({ readOnly: true })], u5.prototype, "thumbnailUrl", null), r([m()], u5.prototype, "title", void 0), r([m({ readOnly: true })], u5.prototype, "url", null), u5 = l2 = r([a2("esri.portal.PortalGroup")], u5);
var p2 = u5;

// node_modules/@arcgis/core/portal/PortalQueryResult.js
var e = class extends b {
  constructor(r2) {
    super(r2), this.nextQueryParams = null, this.queryParams = null, this.results = null, this.total = null;
  }
};
r([m()], e.prototype, "nextQueryParams", void 0), r([m()], e.prototype, "queryParams", void 0), r([m()], e.prototype, "results", void 0), r([m()], e.prototype, "total", void 0), e = r([a2("esri.portal.PortalQueryResult")], e);
var p3 = e;

// node_modules/@arcgis/core/portal/PortalFolder.js
var p4 = class extends f {
  constructor(t2) {
    super(t2), this.created = null, this.id = null, this.portal = null, this.title = null, this.username = null;
  }
  get url() {
    var _a;
    const t2 = (_a = this.portal) == null ? void 0 : _a.restUrl;
    return t2 ? `${t2}/content/users/${this.username}/${this.id}` : null;
  }
  toJSON() {
    throw new s2("internal:not-yet-implemented", "PortalFolder.toJSON is not yet implemented");
  }
};
r([m({ type: Date })], p4.prototype, "created", void 0), r([m()], p4.prototype, "id", void 0), r([m()], p4.prototype, "portal", void 0), r([m()], p4.prototype, "title", void 0), r([m({ readOnly: true })], p4.prototype, "url", null), r([m()], p4.prototype, "username", void 0), p4 = r([a2("esri.portal.PortalFolder")], p4);
var l3 = p4;

// node_modules/@arcgis/core/portal/PortalUser.js
var n4;
var u6 = n4 = class extends f {
  constructor(t2) {
    super(t2), this.access = null, this.created = null, this.culture = null, this.description = null, this.email = null, this.fullName = null, this.modified = null, this.orgId = null, this.portal = null, this.preferredView = null, this.privileges = null, this.region = null, this.role = null, this.roleId = null, this.sourceJSON = null, this.units = null, this.username = null, this.userLicenseTypeId = null, this.userType = null;
  }
  get thumbnailUrl() {
    const t2 = this.url, e2 = this.thumbnail;
    return t2 && e2 ? this.portal.normalizeUrl(`${t2}/info/${e2}?f=json`) : null;
  }
  get userContentUrl() {
    var _a;
    const t2 = (_a = this.portal) == null ? void 0 : _a.restUrl;
    return t2 ? `${t2}/content/users/${this.username}` : null;
  }
  get url() {
    var _a;
    const t2 = (_a = this.portal) == null ? void 0 : _a.restUrl;
    return t2 ? `${t2}/community/users/${this.username}` : null;
  }
  addItem(t2) {
    const e2 = t2 && t2.item, r2 = t2 == null ? void 0 : t2.data, o2 = t2 == null ? void 0 : t2.folder, s4 = { method: "post" };
    e2 && (s4.query = e2.createPostQuery(), null != r2 && ("string" == typeof r2 ? s4.query.text = r2 : "object" == typeof r2 && (s4.query.text = JSON.stringify(r2))));
    let l4 = this.userContentUrl;
    return o2 && (l4 += "/" + ("string" == typeof o2 ? o2 : o2.id)), this.portal.request(l4 + "/addItem", s4).then((t3) => (e2.id = t3.id, e2.portal = this.portal, e2.loaded ? e2.reload() : e2.load()));
  }
  async deleteItem(t2, e2 = false) {
    let r2 = this.userContentUrl;
    t2.ownerFolder && (r2 += "/" + t2.ownerFolder);
    const o2 = e2 ? { permanentDelete: true } : {};
    await this.portal.request(r2 + `/items/${t2.id}/delete`, { method: "post", query: o2 }), t2.id = null, t2.portal = null;
  }
  async deleteItems(t2, r2 = false) {
    t2 = t2.slice();
    const o2 = this.userContentUrl + "/deleteItems", s4 = [], l4 = t2.map((t3) => t3.id);
    if (l4.length) {
      const i2 = { method: "post", query: { items: l4.join(","), permanentDelete: r2 } }, n5 = await this.portal.request(o2, i2);
      for (const r3 of n5.results) {
        const o3 = t2.find((t3) => r3.itemId === t3.id), l5 = r3.success;
        let i3 = null;
        l5 ? (o3.id = null, o3.portal = null) : r3.error && (i3 = new s2("portal:delete-item-failed", r3.error.message, r3.error)), s4.push({ item: o3, success: l5, error: i3 });
      }
    }
    return s4;
  }
  fetchFolders() {
    const t2 = { query: { num: 1 } };
    return this.portal.request(this.userContentUrl ?? "", t2).then((t3) => {
      let e2;
      return e2 = t3 && t3.folders ? t3.folders.map((t4) => {
        const e3 = l3.fromJSON(t4);
        return e3.portal = this.portal, e3;
      }) : [], e2;
    });
  }
  fetchGroups() {
    return this.portal.request(this.url ?? "").then((t2) => {
      let e2;
      return e2 = t2 && t2.groups ? t2.groups.map((t3) => {
        const e3 = p2.fromJSON(t3);
        return e3.portal = this.portal, e3;
      }) : [], e2;
    });
  }
  async fetchItems(t2) {
    t2 ?? (t2 = {});
    let e2 = this.userContentUrl ?? "";
    t2.folder && (e2 += "/" + t2.folder.id);
    const { default: r2 } = await import("./PortalItem-7MJLHPDM.js"), o2 = { folders: false, inRecycleBin: !!t2.inRecycleBin || null, foldersContent: !(t2.folder || !t2.includeSubfolderItems) || null, num: t2.num || 10, start: t2.start || 1, sortField: t2.sortField || "created", sortOrder: t2.sortOrder || "asc" }, s4 = await this.portal.request(e2, { query: o2 });
    let l4;
    return (s4 == null ? void 0 : s4.items) ? (l4 = s4.items.map((t3) => {
      const e3 = r2.fromJSON(t3);
      return e3.portal = this.portal, e3;
    }), await Promise.all(l4.map((t3) => t3.load())), { items: l4, nextStart: s4.nextStart, total: s4.total }) : { items: [], nextStart: -1, total: 0 };
  }
  fetchTags() {
    return this.portal.request(this.url + "/tags").then((t2) => t2.tags);
  }
  getThumbnailUrl(t2) {
    let e2 = this.thumbnailUrl;
    return e2 && t2 && (e2 += `&w=${t2}`), e2;
  }
  queryFavorites(t2) {
    return this.favGroupId ? (this._favGroup || (this._favGroup = new p2({ id: this.favGroupId, portal: this.portal })), this._favGroup.queryItems(t2)) : Promise.reject(new s2("internal:unknown", "Unknown internal error", { internalError: "Unknown favGroupId" }));
  }
  async restoreItem(t2, e2) {
    const r2 = this.userContentUrl, o2 = e2 ? { folderID: "string" == typeof e2 ? e2 : e2.id } : null;
    await this.portal.request(r2 + `/items/${t2.id}/restore`, { method: "post", query: o2 });
  }
  toJSON() {
    throw new s2("internal:not-yet-implemented", "PortalUser.toJSON is not yet implemented");
  }
  static fromJSON(t2) {
    if (!t2) return null;
    if (t2.declaredClass) throw new Error("JSON object is already hydrated");
    const e2 = new n4({ sourceJSON: t2 });
    return e2.read(t2), e2;
  }
};
r([m()], u6.prototype, "access", void 0), r([m({ type: Date })], u6.prototype, "created", void 0), r([m()], u6.prototype, "culture", void 0), r([m()], u6.prototype, "description", void 0), r([m()], u6.prototype, "email", void 0), r([m()], u6.prototype, "favGroupId", void 0), r([m()], u6.prototype, "fullName", void 0), r([m({ type: Date })], u6.prototype, "modified", void 0), r([m()], u6.prototype, "orgId", void 0), r([m()], u6.prototype, "portal", void 0), r([m()], u6.prototype, "preferredView", void 0), r([m()], u6.prototype, "privileges", void 0), r([m()], u6.prototype, "region", void 0), r([m()], u6.prototype, "role", void 0), r([m()], u6.prototype, "roleId", void 0), r([m()], u6.prototype, "sourceJSON", void 0), r([m()], u6.prototype, "thumbnail", void 0), r([m({ readOnly: true })], u6.prototype, "thumbnailUrl", null), r([m()], u6.prototype, "units", void 0), r([m({ readOnly: true })], u6.prototype, "userContentUrl", null), r([m({ readOnly: true })], u6.prototype, "url", null), r([m()], u6.prototype, "username", void 0), r([m()], u6.prototype, "userLicenseTypeId", void 0), r([m()], u6.prototype, "userType", void 0), u6 = n4 = r([a2("esri.portal.PortalUser")], u6);
var p5 = u6;

// node_modules/@arcgis/core/portal/Portal.js
var _;
var M2;
var Q = { PortalGroup: () => Promise.resolve({ default: p2 }), PortalItem: () => import("./PortalItem-7MJLHPDM.js"), PortalUser: () => Promise.resolve({ default: p5 }) };
var U2 = _ = class extends u3(m2) {
  constructor(e2) {
    super(e2), this._esriIdCredentialCreateHandle = null, this.access = null, this.allSSL = false, this.authMode = "auto", this.authorizedCrossOriginDomains = null, this.basemapGalleryGroupQuery = null, this.basemapGalleryGroupQuery3D = null, this.bingKey = null, this.canListApps = false, this.canListData = false, this.canListPreProvisionedItems = false, this.canProvisionDirectPurchase = false, this.canSearchPublic = true, this.canShareBingPublic = false, this.canSharePublic = false, this.canSignInArcGIS = false, this.canSignInIDP = false, this.colorSetsGroupQuery = null, this.commentsEnabled = false, this.created = null, this.culture = null, this.customBaseUrl = null, this.default3DBasemapQuery = null, this.defaultBasemap = null, this.defaultDevBasemap = null, this.defaultExtent = null, this.defaultVectorBasemap = null, this.description = null, this.devBasemapGalleryGroupQuery = null, this.eueiEnabled = null, this.featuredGroups = null, this.featuredItemsGroupQuery = null, this.galleryTemplatesGroupQuery = null, this.layoutGroupQuery = null, this.livingAtlasGroupQuery = null, this.hasCategorySchema = false, this.hasClassificationSchema = false, this.helperServices = null, this.homePageFeaturedContent = null, this.homePageFeaturedContentCount = null, this.httpPort = null, this.httpsPort = null, this.id = null, this.ipCntryCode = null, this.isPortal = false, this.isReadOnly = false, this.layerTemplatesGroupQuery = null, this.maxTokenExpirationMinutes = null, this.modified = null, this.name = null, this.portalHostname = null, this.portalMode = null, this.portalProperties = null, this.region = null, this.recycleBinEnabled = false, this.rotatorPanels = null, this.showHomePageDescription = false, this.sourceJSON = null, this.supportsHostedServices = false, this.symbolSetsGroupQuery = null, this.templatesGroupQuery = null, this.units = null, this.url = s.portalUrl, this.urlKey = null, this.user = null, this.use3dBasemaps = true, this.useDefault3dBasemap = false, this.useStandardizedQuery = false, this.useVectorBasemaps = false, this.vectorBasemapGalleryGroupQuery = null;
  }
  normalizeCtorArgs(e2) {
    return "string" == typeof e2 ? { url: e2 } : e2;
  }
  destroy() {
    C.unregister(this), this.defaultBasemap = u(this.defaultBasemap), this.defaultDevBasemap = u(this.defaultDevBasemap), this.defaultVectorBasemap = u(this.defaultVectorBasemap), this._esriIdCredentialCreateHandle = l(this._esriIdCredentialCreateHandle);
  }
  readAuthorizedCrossOriginDomains(e2) {
    if (e2) for (const r2 of e2) s.request.trustedServers.includes(r2) || s.request.trustedServers.push(r2);
    return e2;
  }
  readDefaultBasemap(e2) {
    return this._readBasemap(e2);
  }
  readDefaultDevBasemap(e2) {
    return this._readBasemap(e2);
  }
  readDefaultVectorBasemap(e2) {
    return this._readBasemap(e2);
  }
  get extraQuery() {
    var _a;
    const e2 = (_a = this.user) == null ? void 0 : _a.orgId, t2 = !e2 || this.canSearchPublic;
    return this.id && !t2 ? ` AND orgid:${this.id}` : null;
  }
  get hasAPIKey() {
    return n2(this.url);
  }
  get isOrganization() {
    return !!this.access;
  }
  get itemPageUrl() {
    return this.url ? `${this.url}/home/item.html` : null;
  }
  get restUrl() {
    let e2 = this.url;
    if (e2) {
      const t2 = e2.indexOf("/sharing");
      e2 = t2 > 0 ? e2.slice(0, t2) : this.url.replace(/\/+$/, ""), e2 += "/sharing/rest";
    }
    return e2;
  }
  get thumbnailUrl() {
    const e2 = this.restUrl, t2 = this.thumbnail;
    return e2 && t2 ? this._normalizeSSL(e2 + "/portals/self/resources/" + t2) : null;
  }
  readUrlKey(e2) {
    return e2 ? e2.toLowerCase() : e2;
  }
  readUser(e2) {
    let t2 = null;
    return e2 && (t2 = p5.fromJSON(e2), t2.portal = this), t2;
  }
  load(e2) {
    const t2 = import("./Basemap-H55GTY6Y.js").then(({ default: t3 }) => {
      s3(e2), M2 = t3;
    }).then(() => this.sourceJSON ? this.sourceJSON : this.fetchSelf(this.authMode, false, e2)).then((e3) => {
      var _a;
      if (!this.hasAPIKey && i) {
        const e4 = i;
        this.credential = e4.findCredential(this.restUrl), this.credential || this.authMode !== _.AUTH_MODE_AUTO && this.authMode !== _.AUTH_MODE_NO_PROMPT || ((_a = this._esriIdCredentialCreateHandle) == null ? void 0 : _a.remove(), this._esriIdCredentialCreateHandle = e4.on("credential-create", w3(new WeakRef(this))), C.register(this, this._esriIdCredentialCreateHandle, this));
      }
      this.sourceJSON = e3, this.read(e3);
    });
    return this.addResolvingPromise(t2), Promise.resolve(this);
  }
  async createElevationLayers() {
    await this.load();
    const e2 = this._getHelperService("defaultElevationLayers"), t2 = (await import("./ElevationLayer-ZQYJTV3D.js")).default;
    return e2 ? e2.map((e3) => new t2({ id: e3.id, url: e3.url })) : [];
  }
  async fetchBasemaps(e2, t2) {
    const r2 = await this._fetchBasemaps(e2, t2);
    if (true === (t2 == null ? void 0 : t2.include3d) && false !== this.use3dBasemaps) {
      const o2 = await this._fetchBasemaps3D(e2, t2);
      r2.unshift(...o2);
    }
    return r2;
  }
  async fetchDefault3DBasemap(e2) {
    if (!this.useDefault3dBasemap || !this.default3DBasemapQuery || "none" === this.default3DBasemapQuery) return null;
    const t2 = new c3();
    t2.query = this.default3DBasemapQuery, t2.disableExtraQuery = true;
    const r2 = (await this.queryItems(t2, e2)).results.find((e3) => "Web Scene" === e3.type);
    return r2 ? new M2({ portalItem: r2 }) : null;
  }
  fetchCategorySchema(e2) {
    return this.hasCategorySchema ? this.request(this.restUrl + "/portals/self/categorySchema", e2).then((e3) => e3.categorySchema) : c(e2) ? Promise.reject(u2()) : Promise.resolve([]);
  }
  fetchFeaturedGroups(e2) {
    const t2 = this.featuredGroups, r2 = new c3({ num: 100, sortField: "title" });
    if (t2 == null ? void 0 : t2.length) {
      const o2 = [];
      for (const e3 of t2) o2.push(`(title:"${e3.title}" AND owner:${e3.owner})`);
      return r2.query = o2.join(" OR "), this.queryGroups(r2, e2).then((e3) => e3.results);
    }
    return c(e2) ? Promise.reject(u2()) : Promise.resolve([]);
  }
  fetchRegions(e2) {
    var _a;
    const t2 = ((_a = this.user) == null ? void 0 : _a.culture) || this.culture || c2();
    return this.request(this.restUrl + "/portals/regions", { ...e2, query: { culture: t2 } });
  }
  fetchSettings(e2) {
    var _a;
    const t2 = ((_a = this.user) == null ? void 0 : _a.culture) || this.culture || c2();
    return this.request(this.restUrl + "/portals/self/settings", { ...e2, query: { culture: t2 } });
  }
  static getDefault() {
    return n3(() => new _());
  }
  queryGroups(e2, t2) {
    return this.queryPortal("/community/groups", e2, "PortalGroup", t2);
  }
  queryItems(e2, t2) {
    return this.queryPortal("/search", e2, "PortalItem", t2);
  }
  queryUsers(e2, t2) {
    return e2.sortField || (e2.sortField = "username"), this.queryPortal("/community/users", e2, "PortalUser", t2);
  }
  fetchSelf(e2 = this.authMode, t2 = false, r2) {
    const o2 = this.restUrl + "/portals/self", s4 = { authMode: e2, query: { culture: c2().toLowerCase() }, withCredentials: true, ...r2 };
    return "auto" === s4.authMode && (s4.authMode = "no-prompt"), t2 && (s4.query.default = true), this.request(o2, s4);
  }
  queryPortal(e2, t2, r2, o2) {
    const s4 = w(c3, t2), a4 = (t3) => this.request(this.restUrl + e2, { ...s4.toRequestOptions(this), ...o2 }).then((e3) => {
      const r3 = s4.clone();
      return r3.start = e3.nextStart, new p3({ nextQueryParams: r3, queryParams: s4, total: e3.total, results: _._resultsToTypedArray(t3, { portal: this }, e3, o2) });
    }).then((e3) => Promise.all(e3.results.map((t4) => "function" == typeof t4.when ? t4.when() : e3)).then(() => e3, (t4) => (a3(t4), e3)));
    return r2 && Q[r2] ? Q[r2]().then(({ default: e3 }) => (s3(o2), a4(e3))) : a4();
  }
  signIn() {
    if (this.hasAPIKey) return this.load().then(() => {
      if (!this.user) throw new s2("portal:not-authenticated", "Unable to authenticate user. Portal.user is missing");
    });
    if (this.authMode === _.AUTH_MODE_ANONYMOUS || this.authMode === _.AUTH_MODE_NO_PROMPT && !i) return Promise.reject(new s2("portal:invalid-auth-mode", `Current "authMode"' is "${this.authMode}"`));
    if ("failed" === this.loadStatus) return Promise.reject(this.loadError);
    const e2 = (e3) => Promise.resolve().then(() => "not-loaded" === this.loadStatus ? (e3 || (this.authMode = "immediate"), this.load().then(() => null)) : "loading" === this.loadStatus ? this.load().then(() => this.credential ? null : (this.credential = e3, this.fetchSelf("immediate"))) : this.user && this.credential === e3 ? null : (this.credential = e3, this.fetchSelf("immediate"))).then((e4) => {
      e4 && (this.sourceJSON = e4, this.read(e4));
    });
    return i ? i.getCredential(this.restUrl, { prompt: this.authMode !== _.AUTH_MODE_NO_PROMPT }).then((t2) => e2(t2)) : e2(this.credential);
  }
  normalizeUrl(e2) {
    var _a;
    const t2 = (_a = this.credential) == null ? void 0 : _a.token;
    return this._normalizeSSL(t2 ? e2 + (e2.includes("?") ? "&" : "?") + "token=" + t2 : e2);
  }
  requestToTypedArray(e2, t2, r2) {
    return this.request(e2, t2).then((e3) => {
      const t3 = _._resultsToTypedArray(r2, { portal: this }, e3);
      return Promise.all(t3.map((t4) => "function" == typeof t4.when ? t4.when() : e3)).then(() => t3, () => t3);
    });
  }
  request(e2, t2 = {}) {
    const r2 = { f: "json", ...t2.query }, { authMode: s4 = this.authMode === _.AUTH_MODE_ANONYMOUS || this.authMode === _.AUTH_MODE_NO_PROMPT ? this.authMode : "auto", body: a4 = null, cacheBust: i2 = false, method: l4 = "auto", responseType: u7 = "json", signal: n5 } = t2, p6 = { authMode: s4, body: a4, cacheBust: i2, method: l4, query: r2, responseType: u7, timeout: 0, signal: n5 };
    return t2.withCredentials && (p6.withCredentials = true), U(this._normalizeSSL(e2), p6).then((e3) => e3.data);
  }
  toJSON() {
    throw new s2("internal:not-yet-implemented", "Portal.toJSON is not yet implemented");
  }
  static fromJSON(e2) {
    if (!e2) return null;
    if (e2.declaredClass) throw new Error("JSON object is already hydrated");
    return new _({ sourceJSON: e2 });
  }
  _getHelperService(e2) {
    const t2 = this.helperServices && this.helperServices[e2];
    if (!t2) throw new s2("portal:service-not-found", `The \`helperServices\` do not include an entry named "${e2}"`);
    return t2;
  }
  async _fetchBasemaps(e2, t2) {
    const r2 = new c3();
    r2.query = e2 || (this.hasAPIKey ? this.devBasemapGalleryGroupQuery : this.useVectorBasemaps ? this.vectorBasemapGalleryGroupQuery : this.basemapGalleryGroupQuery), r2.disableExtraQuery = true;
    const o2 = await this.queryGroups(r2, t2);
    if (!o2.total) return [];
    const s4 = o2.results[0];
    r2.num = 100, r2.query = 'type:"Web Map" -type:"Web Application"', r2.sortField = s4.sortField || "name", r2.sortOrder = s4.sortOrder || "desc";
    const a4 = await s4.queryItems(r2, t2);
    if (!a4.total) return [];
    return a4.results.filter((e3) => "Web Map" === e3.type).map((e3) => new M2({ portalItem: e3 }));
  }
  async _fetchBasemaps3D(e2, t2) {
    const r2 = e2 || this.basemapGalleryGroupQuery3D;
    if (!r2) return [];
    const o2 = new c3({ query: r2, disableExtraQuery: true }), s4 = await this.queryGroups(o2, t2);
    if (!s4.total) return [];
    const a4 = s4.results[0];
    o2.num = 100, o2.query = 'type:"Web Scene"', o2.sortField = a4.sortField || "name", o2.sortOrder = a4.sortOrder || "desc";
    const i2 = await a4.queryItems(o2, t2);
    if (!i2.total) return [];
    return i2.results.filter((e3) => "Web Scene" === e3.type).map((e3) => new M2({ portalItem: e3 }));
  }
  _normalizeSSL(e2) {
    return e2.replace(/^http:/i, "https:").replace(":7080", ":7443");
  }
  _readBasemap(e2) {
    if (e2) {
      const t2 = M2.fromJSON(e2);
      return t2.portalItem = { portal: this }, t2;
    }
    return null;
  }
  static _resultsToTypedArray(e2, t2, r2, o2) {
    let s4;
    if (r2) {
      const a4 = null != o2 ? o2.signal : null;
      s4 = r2.listings || r2.notifications || r2.userInvitations || r2.tags || r2.items || r2.groups || r2.comments || r2.provisions || r2.results || r2.relatedItems || r2, (e2 || t2) && (s4 = s4.map((r3) => {
        const o3 = Object.assign(e2 ? e2.fromJSON(r3) : r3, t2);
        return "function" == typeof o3.load && o3.load(a4), o3;
      }));
    } else s4 = [];
    return s4;
  }
};
U2.AUTH_MODE_ANONYMOUS = "anonymous", U2.AUTH_MODE_AUTO = "auto", U2.AUTH_MODE_IMMEDIATE = "immediate", U2.AUTH_MODE_NO_PROMPT = "no-prompt", r([m()], U2.prototype, "access", void 0), r([m()], U2.prototype, "allSSL", void 0), r([m()], U2.prototype, "authMode", void 0), r([m()], U2.prototype, "authorizedCrossOriginDomains", void 0), r([o("authorizedCrossOriginDomains")], U2.prototype, "readAuthorizedCrossOriginDomains", null), r([m()], U2.prototype, "basemapGalleryGroupQuery", void 0), r([m({ json: { name: "3DBasemapGalleryGroupQuery" } })], U2.prototype, "basemapGalleryGroupQuery3D", void 0), r([m()], U2.prototype, "bingKey", void 0), r([m()], U2.prototype, "canListApps", void 0), r([m()], U2.prototype, "canListData", void 0), r([m()], U2.prototype, "canListPreProvisionedItems", void 0), r([m()], U2.prototype, "canProvisionDirectPurchase", void 0), r([m()], U2.prototype, "canSearchPublic", void 0), r([m()], U2.prototype, "canShareBingPublic", void 0), r([m()], U2.prototype, "canSharePublic", void 0), r([m()], U2.prototype, "canSignInArcGIS", void 0), r([m()], U2.prototype, "canSignInIDP", void 0), r([m()], U2.prototype, "colorSetsGroupQuery", void 0), r([m()], U2.prototype, "commentsEnabled", void 0), r([m({ type: Date })], U2.prototype, "created", void 0), r([m()], U2.prototype, "credential", void 0), r([m()], U2.prototype, "culture", void 0), r([m()], U2.prototype, "currentVersion", void 0), r([m()], U2.prototype, "customBaseUrl", void 0), r([m()], U2.prototype, "default3DBasemapQuery", void 0), r([m()], U2.prototype, "defaultBasemap", void 0), r([o("defaultBasemap")], U2.prototype, "readDefaultBasemap", null), r([m()], U2.prototype, "defaultDevBasemap", void 0), r([o("defaultDevBasemap")], U2.prototype, "readDefaultDevBasemap", null), r([m({ type: w2 })], U2.prototype, "defaultExtent", void 0), r([m()], U2.prototype, "defaultVectorBasemap", void 0), r([o("defaultVectorBasemap")], U2.prototype, "readDefaultVectorBasemap", null), r([m()], U2.prototype, "description", void 0), r([m()], U2.prototype, "devBasemapGalleryGroupQuery", void 0), r([m()], U2.prototype, "eueiEnabled", void 0), r([m({ readOnly: true })], U2.prototype, "extraQuery", null), r([m()], U2.prototype, "featuredGroups", void 0), r([m()], U2.prototype, "featuredItemsGroupQuery", void 0), r([m()], U2.prototype, "galleryTemplatesGroupQuery", void 0), r([m()], U2.prototype, "layoutGroupQuery", void 0), r([m()], U2.prototype, "livingAtlasGroupQuery", void 0), r([m({ readOnly: true })], U2.prototype, "hasAPIKey", null), r([m()], U2.prototype, "hasCategorySchema", void 0), r([m()], U2.prototype, "hasClassificationSchema", void 0), r([m()], U2.prototype, "helpBase", void 0), r([m()], U2.prototype, "helperServices", void 0), r([m()], U2.prototype, "helpMap", void 0), r([m()], U2.prototype, "homePageFeaturedContent", void 0), r([m()], U2.prototype, "homePageFeaturedContentCount", void 0), r([m()], U2.prototype, "httpPort", void 0), r([m()], U2.prototype, "httpsPort", void 0), r([m()], U2.prototype, "id", void 0), r([m()], U2.prototype, "ipCntryCode", void 0), r([m({ readOnly: true })], U2.prototype, "isOrganization", null), r([m()], U2.prototype, "isPortal", void 0), r([m()], U2.prototype, "isReadOnly", void 0), r([m({ readOnly: true })], U2.prototype, "itemPageUrl", null), r([m()], U2.prototype, "layerTemplatesGroupQuery", void 0), r([m()], U2.prototype, "maxTokenExpirationMinutes", void 0), r([m({ type: Date })], U2.prototype, "modified", void 0), r([m()], U2.prototype, "name", void 0), r([m()], U2.prototype, "portalHostname", void 0), r([m()], U2.prototype, "portalMode", void 0), r([m()], U2.prototype, "portalProperties", void 0), r([m()], U2.prototype, "region", void 0), r([m()], U2.prototype, "recycleBinEnabled", void 0), r([m({ readOnly: true })], U2.prototype, "restUrl", null), r([m()], U2.prototype, "rotatorPanels", void 0), r([m()], U2.prototype, "showHomePageDescription", void 0), r([m()], U2.prototype, "sourceJSON", void 0), r([m()], U2.prototype, "staticImagesUrl", void 0), r([m({ json: { name: "2DStylesGroupQuery" } })], U2.prototype, "stylesGroupQuery2d", void 0), r([m({ json: { name: "stylesGroupQuery" } })], U2.prototype, "stylesGroupQuery3d", void 0), r([m()], U2.prototype, "supportsHostedServices", void 0), r([m()], U2.prototype, "symbolSetsGroupQuery", void 0), r([m()], U2.prototype, "templatesGroupQuery", void 0), r([m()], U2.prototype, "thumbnail", void 0), r([m({ readOnly: true })], U2.prototype, "thumbnailUrl", null), r([m()], U2.prototype, "units", void 0), r([m()], U2.prototype, "url", void 0), r([m()], U2.prototype, "urlKey", void 0), r([o("urlKey")], U2.prototype, "readUrlKey", null), r([m()], U2.prototype, "user", void 0), r([o("user")], U2.prototype, "readUser", null), r([m()], U2.prototype, "use3dBasemaps", void 0), r([m()], U2.prototype, "useDefault3dBasemap", void 0), r([m()], U2.prototype, "useStandardizedQuery", void 0), r([m()], U2.prototype, "useVectorBasemaps", void 0), r([m()], U2.prototype, "vectorBasemapGalleryGroupQuery", void 0), U2 = _ = r([a2("esri.portal.Portal")], U2);
var b2 = U2;
var C = new FinalizationRegistry((e2) => {
  e2.remove();
});
function w3(e2) {
  const t2 = i;
  return () => {
    const r2 = e2.deref();
    r2 && t2.findCredential(r2.restUrl) && r2.signIn().catch(() => {
    });
  };
}

export {
  c3 as c,
  p5 as p,
  b2 as b
};
//# sourceMappingURL=chunk-JU6MEO4D.js.map
