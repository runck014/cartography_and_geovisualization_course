import {
  d as d2
} from "./chunk-VILGTHTP.js";
import {
  q
} from "./chunk-ATEWWVHG.js";
import {
  j2
} from "./chunk-LEOFRCUR.js";
import {
  i as i2
} from "./chunk-M5RSIRGD.js";
import {
  r as r3
} from "./chunk-UYSPJCCV.js";
import {
  d,
  v2 as v
} from "./chunk-VNRDIGVF.js";
import {
  j2 as j
} from "./chunk-A3J7W53Y.js";
import {
  o
} from "./chunk-HLF5XJSV.js";
import {
  r as r2
} from "./chunk-L6D73M4D.js";
import {
  i
} from "./chunk-7O7KFKCG.js";
import {
  f
} from "./chunk-VU6O6TFT.js";
import {
  m
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";

// node_modules/@arcgis/core/rest/support/networkEnums.js
var i3 = { esriCentimeters: "centimeters", esriDecimalDegrees: "decimal-degrees", esriDecimeters: "decimeters", esriFeet: "feet", esriInches: "inches", esriKilometers: "kilometers", esriMeters: "meters", esriMiles: "miles", esriMillimeters: "millimeters", esriNauticalMiles: "nautical-miles", esriPoints: "points", esriUnknownUnits: "unknown", esriYards: "yards" };
var r4 = i()(i3);
var s = i()({ ...i3, esriIntFeet: "international-feet", esriIntInches: "international-inches", esriIntMiles: "international-miles", esriIntNauticalMiles: "international-nautical-miles", esriIntYards: "international-yards" });
var t = i()({ esriAcres: "international-acres", esriAcresUS: "us-acres", esriAres: "ares", esriHectares: "hectares", esriSquareCentimeters: "square-centimeters", esriSquareDecimeters: "square-decimeters", esriSquareFeet: "square-international-feet", esriSquareFeetUS: "square-us-feet", esriSquareInches: "square-international-inches", esriSquareInchesUS: "square-us-inches", esriSquareKilometers: "square-kilometers", esriSquareMeters: "square-meters", esriSquareMiles: "square-international-miles", esriSquareMilesUS: "square-us-miles", esriSquareMillimeters: "square-millimeters", esriSquareYards: "square-international-yards", esriSquareYardsUS: "square-us-yards", esriUnknownAreaUnits: "unknown" });
var a2 = i()({ esriNAUCentimeters: "centimeters", esriNAUDecimalDegrees: "decimal-degrees", esriNAUDecimeters: "decimeters", esriNAUFeet: "feet", esriNAUInches: "inches", esriNAUKilometers: "kilometers", esriNAUMeters: "meters", esriNAUMiles: "miles", esriNAUMillimeters: "millimeters", esriNAUNauticalMiles: "nautical-miles", esriNAUPoints: "points", esriNAUYards: "yards" });
var n = i()({ esriNAUDays: "days", esriNAUHours: "hours", esriNAUMinutes: "minutes", esriNAUSeconds: "seconds" });
var o2 = i()({ esriNAUCentimeters: "centimeters", esriNAUDecimalDegrees: "decimal-degrees", esriNAUDecimeters: "decimeters", esriNAUFeet: "feet", esriNAUInches: "inches", esriNAUKilometers: "kilometers", esriNAUMeters: "meters", esriNAUMiles: "miles", esriNAUMillimeters: "millimeters", esriNAUNauticalMiles: "nautical-miles", esriNAUPoints: "points", esriNAUYards: "yards", esriNAUDays: "days", esriNAUHours: "hours", esriNAUMinutes: "minutes", esriNAUSeconds: "seconds", esriNAUKilometersPerHour: "kilometers-per-hour", esriNAUMilesPerHour: "miles-per-hour", esriNAUUnknown: "unknown" });
var l = i()({ esriDOTComplete: "complete", esriDOTCompleteNoEvents: "complete-no-events", esriDOTFeatureSets: "featuresets", esriDOTInstructionsOnly: "instructions-only", esriDOTStandard: "standard", esriDOTSummaryOnly: "summary-only" });
var c = i()({ esriNAOutputLineNone: "none", esriNAOutputLineStraight: "straight", esriNAOutputLineTrueShape: "true-shape", esriNAOutputLineTrueShapeWithMeasure: "true-shape-with-measure" });
var u = i()({ esriNAOutputPolygonNone: "none", esriNAOutputPolygonSimplified: "simplified", esriNAOutputPolygonDetailed: "detailed" });
var m2 = i()({ esriNFSBAllowBacktrack: "allow-backtrack", esriNFSBAtDeadEndsOnly: "at-dead-ends-only", esriNFSBNoBacktrack: "no-backtrack", esriNFSBAtDeadEndsAndIntersections: "at-dead-ends-and-intersections" });
var d3 = i()({ esriNATravelDirectionFromFacility: "from-facility", esriNATravelDirectionToFacility: "to-facility" });
var h = i()({ esriNATimeOfDayNotUsed: "not-used", esriNATimeOfDayUseAsStartTime: "start", esriNATimeOfDayUseAsEndTime: "end" });
var A = i()({ AUTOMOBILE: "automobile", TRUCK: "truck", WALK: "walk", OTHER: "other" });
var p = i()({ 0: "either-side-of-vehicle", 1: "right-side-of-vehicle", 2: "left-side-of-vehicle", 3: "no-u-turn" }, { useNumericKeys: true });
var v2 = i()({ 0: "stop", 1: "waypoint", 2: "break" }, { useNumericKeys: true });
var T = i()({ 0: "ok", 1: "not-located", 2: "network-element-not-located", 3: "element-not-traversable", 4: "invalid-field-values", 5: "not-reached", 6: "time-window-violation", 7: "not-located-on-closest" }, { useNumericKeys: true });
var N = i()({ 1: "right", 2: "left" }, { useNumericKeys: true });
var g = i()({ 0: "restriction", 1: "scaled-cost", 2: "added-cost" }, { useNumericKeys: true });
var k = i()({ 0: "permit", 1: "restrict" }, { useNumericKeys: true });
var S = i()({ 1: "header", 50: "arrive", 51: "depart", 52: "straight", 100: "on-ferry", 101: "off-ferry", 102: "central-fork", 103: "roundabout", 104: "u-turn", 150: "door", 151: "stairs", 152: "elevator", 153: "escalator", 154: "pedestrian-ramp", 200: "left-fork", 201: "left-ramp", 202: "clockwise-roundabout", 203: "left-handed-u-turn", 204: "bear-left", 205: "left-turn", 206: "sharp-left", 207: "left-turn-and-immediate-left-turn", 208: "left-turn-and-immediate-right-turn", 300: "right-fork", 301: "right-ramp", 302: "counter-clockwise-roundabout", 303: "right-handed-u-turn", 304: "bear-right", 305: "right-turn", 306: "sharp-right", 307: "right-turn-and-immediate-left-turn", 308: "right-turn-and-immediate-right-turn", 400: "up-elevator", 401: "up-escalator", 402: "up-stairs", 500: "down-elevator", 501: "down-escalator", 502: "down-stairs", 1e3: "general-event", 1001: "landmark", 1002: "time-zone-change", 1003: "traffic-event", 1004: "scaled-cost-barrier-event", 1005: "boundary-crossing", 1006: "restriction-violation", 1007: "lane" }, { useNumericKeys: true });
var f2 = i()({ 0: "unknown", 1: "segment", 2: "maneuver-segment", 3: "restriction-violation", 4: "scaled-cost-barrier", 5: "heavy-traffic", 6: "slow-traffic", 7: "moderate-traffic" }, { useNumericKeys: true });
var U = i()({ "NA Campus": "campus", "NA Desktop": "desktop", "NA Navigation": "navigation" });
var y = i()({ Kilometers: "kilometers", Miles: "miles", Meters: "meters" }, { ignoreUnknown: false });
var D = i()({ Minutes: "minutes", TimeAt1KPH: "time-at-1-kph", TravelTime: "travel-time", TruckMinutes: "truck-minutes", TruckTravelTime: "truck-travel-time", WalkTime: "walk-time" }, { ignoreUnknown: false });
var w = i()({ Kilometers: "kilometers", Miles: "miles", Meters: "meters", Minutes: "minutes", TimeAt1KPH: "time-at-1-kph", TravelTime: "travel-time", TruckMinutes: "truck-minutes", TruckTravelTime: "truck-travel-time", WalkTime: "walk-time" }, { ignoreUnknown: false });
var M = i()({ "Any Hazmat Prohibited": "any-hazmat-prohibited", "Avoid Carpool Roads": "avoid-carpool-roads", "Avoid Express Lanes": "avoid-express-lanes", "Avoid Ferries": "avoid-ferries", "Avoid Gates": "avoid-gates", "Avoid Limited Access Roads": "avoid-limited-access-roads", "Avoid Private Roads": "avoid-private-roads", "Avoid Roads Unsuitable for Pedestrians": "avoid-roads-unsuitable-for-pedestrians", "Avoid Stairways": "avoid-stairways", "Avoid Toll Roads": "avoid-toll-roads", "Avoid Toll Roads for Trucks": "avoid-toll-roads-for-trucks", "Avoid Truck Restricted Roads": "avoid-truck-restricted-roads", "Avoid Unpaved Roads": "avoid-unpaved-roads", "Axle Count Restriction": "axle-count-restriction", "Driving a Bus": "driving-a-bus", "Driving a Taxi": "driving-a-taxi", "Driving a Truck": "driving-a-truck", "Driving an Automobile": "driving-an-automobile", "Driving an Emergency Vehicle": "driving-an-emergency-vehicle", "Height Restriction": "height-restriction", "Kingpin to Rear Axle Length Restriction": "kingpin-to-rear-axle-length-restriction", "Length Restriction": "length-restriction", "Preferred for Pedestrians": "preferred-for-pedestrians", "Riding a Motorcycle": "riding-a-motorcycle", "Roads Under Construction Prohibited": "roads-under-construction-prohibited", "Semi or Tractor with One or More Trailers Prohibited": "semi-or-tractor-with-one-or-more-trailers-prohibited", "Single Axle Vehicles Prohibited": "single-axle-vehicles-prohibited", "Tandem Axle Vehicles Prohibited": "tandem-axle-vehicles-prohibited", "Through Traffic Prohibited": "through-traffic-prohibited", "Truck with Trailers Restriction": "truck-with-trailers-restriction", "Use Preferred Hazmat Routes": "use-preferred-hazmat-routes", "Use Preferred Truck Routes": "use-preferred-truck-routes", Walking: "walking", "Weight Restriction": "weight-restriction" }, { ignoreUnknown: false });
var R = i()({ esriSpatialRelIntersects: "intersects", esriSpatialRelContains: "contains", esriSpatialRelCrosses: "crosses", esriSpatialRelEnvelopeIntersects: "envelope-intersects", esriSpatialRelIndexIntersects: "index-intersects", esriSpatialRelOverlaps: "overlaps", esriSpatialRelTouches: "touches", esriSpatialRelWithin: "within", esriSpatialRelRelation: "relation" });
var b = i()({ esriGeometryPoint: "point", esriGeometryPolyline: "polyline", esriGeometryPolygon: "polygon", esriGeometryEnvelope: "envelope", esriGeometryMultipoint: "multipoint" });
var q2 = i()({ esriNAUTCost: "cost", esriNAUTDescriptor: "descriptor", esriNAUTRestriction: "restriction", esriNAUTHierarchy: "hierarchy" });
var P = i()({ esriDSTAltName: "alt-name", esriDSTArrive: "arrive", esriDSTBranch: "branch", esriDSTCrossStreet: "cross-street", esriDSTCumulativeLength: "cumulative-length", esriDSTDepart: "depart", esriDSTEstimatedArrivalTime: "estimated-arrival-time", esriDSTExit: "exit", esriDSTGeneral: "general", esriDSTLength: "length", esriDSTServiceTime: "service-time", esriDSTStreetName: "street-name", esriDSTSummary: "summary", esriDSTTime: "time", esriDSTTimeWindow: "time-window", esriDSTToward: "toward", esriDSTViolationTime: "violation-time", esriDSTWaitTime: "wait-time" });

// node_modules/@arcgis/core/rest/support/DirectionLine.js
var u2;
var m3 = u2 = class extends i2(f) {
  constructor(e2) {
    super(e2), this.directionLineType = null, this.directionPointId = null, this.distance = null, this.duration = null, this.fromLevel = null, this.geometry = null, this.objectId = null, this.popupTemplate = null, this.symbol = null, this.toLevel = null, this.type = "direction-line";
  }
  static fromGraphic(e2) {
    return new u2({ directionLineType: f2.fromJSON(e2.attributes.DirectionLineType), directionPointId: e2.attributes.DirectionPointID, distance: e2.attributes.Meters, duration: e2.attributes.Minutes, fromLevel: e2.attributes.FromLevel ?? null, geometry: e2.geometry, objectId: e2.attributes.ObjectID ?? e2.attributes.__OBJECTID, popupTemplate: e2.popupTemplate, symbol: e2.symbol, toLevel: e2.attributes.ToLevel ?? null });
  }
  toGraphic() {
    const e2 = { ObjectID: this.objectId, DirectionLineType: null != this.directionLineType ? f2.toJSON(this.directionLineType) : null, DirectionPointID: this.directionPointId, Meters: this.distance, Minutes: this.duration };
    return null != this.fromLevel && (e2.FromLevel = this.fromLevel), null != this.toLevel && (e2.ToLevel = this.toLevel), new d2({ geometry: this.geometry, attributes: e2, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
m3.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID" }, { name: "DirectionLineType", alias: "Line Type", type: "esriFieldTypeInteger" }, { name: "DirectionPointID", alias: "Direction Point ID", type: "esriFieldTypeInteger" }, { name: "FromLevel", alias: "From Level", type: "esriFieldTypeInteger" }, { name: "Meters", alias: "Meters", type: "esriFieldTypeDouble" }, { name: "Minutes", alias: "Minutes", type: "esriFieldTypeDouble" }, { name: "ToLevel", alias: "To Level", type: "esriFieldTypeInteger" }], r([m({ type: f2.apiValues, json: { read: { source: "attributes.DirectionLineType", reader: f2.read } } })], m3.prototype, "directionLineType", void 0), r([m({ json: { read: { source: "attributes.DirectionPointID" } } })], m3.prototype, "directionPointId", void 0), r([m({ json: { read: { source: "attributes.Meters" } } })], m3.prototype, "distance", void 0), r([m({ json: { read: { source: "attributes.Minutes" } } })], m3.prototype, "duration", void 0), r([m({ json: { read: { source: "attributes.FromLevel" } } })], m3.prototype, "fromLevel", void 0), r([m({ type: d })], m3.prototype, "geometry", void 0), r([m({ json: { read: { source: "attributes.ObjectID" } } })], m3.prototype, "objectId", void 0), r([m({ type: q })], m3.prototype, "popupTemplate", void 0), r([m({ types: j2 })], m3.prototype, "symbol", void 0), r([m({ json: { read: { source: "attributes.ToLevel" } } })], m3.prototype, "toLevel", void 0), r([m({ readOnly: true, json: { read: false } })], m3.prototype, "type", void 0), m3 = u2 = r([a("esri.rest.support.DirectionLine")], m3);
var c2 = m3;

// node_modules/@arcgis/core/rest/support/DirectionPoint.js
var m4;
var c3 = m4 = class extends i2(f) {
  constructor(e2) {
    super(e2), this.alternateName = null, this.arrivalTime = null, this.arrivalTimeOffset = null, this.azimuth = null, this.branchName = null, this.directionPointType = null, this.displayText = null, this.exitName = null, this.geometry = null, this.intersectingName = null, this.level = null, this.name = null, this.objectId = null, this.popupTemplate = null, this.sequence = null, this.shortVoiceInstruction = null, this.stopId = null, this.symbol = null, this.towardName = null, this.type = "direction-point", this.voiceInstruction = null;
  }
  readArrivalTime(e2, t2) {
    return null != t2.attributes.ArrivalTime ? new Date(t2.attributes.ArrivalTime) : null;
  }
  static fromGraphic(e2) {
    return new m4({ alternateName: e2.attributes.AlternateName ?? null, arrivalTime: null != e2.attributes.ArrivalTime ? new Date(e2.attributes.ArrivalTime) : null, arrivalTimeOffset: e2.attributes.ArrivalUTCOffset ?? null, azimuth: e2.attributes.Azimuth ?? null, branchName: e2.attributes.BranchName ?? null, directionPointType: S.fromJSON(e2.attributes.DirectionPointType), displayText: e2.attributes.DisplayText ?? null, exitName: e2.attributes.ExitName ?? null, geometry: e2.geometry, intersectingName: e2.attributes.IntersectingName ?? null, level: e2.attributes.Level ?? null, name: e2.attributes.Name ?? null, objectId: e2.attributes.ObjectID ?? e2.attributes.__OBJECTID, popupTemplate: e2.popupTemplate, sequence: e2.attributes.Sequence, shortVoiceInstruction: e2.attributes.ShortVoiceInstruction ?? null, stopId: e2.attributes.StopID ?? null, symbol: e2.symbol, towardName: e2.attributes.TowardName ?? null, voiceInstruction: e2.attributes.VoiceInstruction ?? null });
  }
  toGraphic() {
    const e2 = { ObjectID: this.objectId, DirectionPointType: null != this.directionPointType ? S.toJSON(this.directionPointType) : null, Sequence: this.sequence, StopID: this.stopId };
    return null != this.alternateName && (e2.AlternateName = this.alternateName), null != this.arrivalTime && (e2.ArrivalTime = this.arrivalTime.getTime()), null != this.arrivalTimeOffset && (e2.ArrivalUTCOffset = this.arrivalTimeOffset), null != this.azimuth && (e2.Azimuth = this.azimuth), null != this.branchName && (e2.BranchName = this.branchName), null != this.displayText && (e2.DisplayText = this.displayText), null != this.exitName && (e2.ExitName = this.exitName), null != this.intersectingName && (e2.IntersectingName = this.intersectingName), null != this.level && (e2.Level = this.level), null != this.name && (e2.Name = this.name), null != this.shortVoiceInstruction && (e2.ShortVoiceInstruction = this.shortVoiceInstruction), null != this.towardName && (e2.TowardName = this.towardName), null != this.voiceInstruction && (e2.VoiceInstruction = this.voiceInstruction), new d2({ geometry: this.geometry, attributes: e2, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
c3.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID" }, { name: "AlternateName", alias: "Alternative Name", type: "esriFieldTypeString" }, { name: "ArrivalTime", alias: "Arrival Time", type: "esriFieldTypeDate" }, { name: "ArrivalUTCOffset", alias: "Arrival Time Offset", type: "esriFieldTypeInteger" }, { name: "Azimuth", alias: "Azimuth", type: "esriFieldTypeDouble" }, { name: "BranchName", alias: "Branch Name", type: "esriFieldTypeString" }, { name: "DirectionPointType", alias: "Directions Point Type", type: "esriFieldTypeInteger" }, { name: "DisplayText", alias: "Display Text", type: "esriFieldTypeString" }, { name: "ExitName", alias: "Exit Name", type: "esriFieldTypeString" }, { name: "IntersectingName", alias: "Intersecting Name", type: "esriFieldTypeString" }, { name: "Level", alias: "Level", type: "esriFieldTypeInteger" }, { name: "Name", alias: "Name", type: "esriFieldTypeString" }, { name: "Sequence", alias: "Sequence", type: "esriFieldTypeInteger" }, { name: "ShortVoiceInstruction", alias: "Short Voice Instruction", type: "esriFieldTypeString" }, { name: "StopID", alias: "Stop ID", type: "esriFieldTypeInteger" }, { name: "TowardName", alias: "Toward Name", type: "esriFieldTypeString" }, { name: "VoiceInstruction", alias: "Voice Instruction", type: "esriFieldTypeString" }], r([m({ json: { read: { source: "attributes.AlternateName" } } })], c3.prototype, "alternateName", void 0), r([m()], c3.prototype, "arrivalTime", void 0), r([o("arrivalTime", ["attributes.ArrivalTime"])], c3.prototype, "readArrivalTime", null), r([m({ json: { read: { source: "attributes.ArrivalUTCOffset" } } })], c3.prototype, "arrivalTimeOffset", void 0), r([m({ json: { read: { source: "attributes.Azimuth" } } })], c3.prototype, "azimuth", void 0), r([m({ json: { read: { source: "attributes.BranchName" } } })], c3.prototype, "branchName", void 0), r([m({ type: S.apiValues, json: { read: { source: "attributes.DirectionPointType", reader: S.read } } })], c3.prototype, "directionPointType", void 0), r([m({ json: { read: { source: "attributes.DisplayText" } } })], c3.prototype, "displayText", void 0), r([m({ json: { read: { source: "attributes.ExitName" } } })], c3.prototype, "exitName", void 0), r([m({ type: j })], c3.prototype, "geometry", void 0), r([m({ json: { read: { source: "attributes.IntersectingName" } } })], c3.prototype, "intersectingName", void 0), r([m({ json: { read: { source: "attributes.Level" } } })], c3.prototype, "level", void 0), r([m({ json: { read: { source: "attributes.Name" } } })], c3.prototype, "name", void 0), r([m({ json: { read: { source: "attributes.ObjectID" } } })], c3.prototype, "objectId", void 0), r([m({ type: q })], c3.prototype, "popupTemplate", void 0), r([m({ json: { read: { source: "attributes.Sequence" } } })], c3.prototype, "sequence", void 0), r([m({ json: { read: { source: "attributes.ShortVoiceInstruction" } } })], c3.prototype, "shortVoiceInstruction", void 0), r([m({ json: { read: { source: "attributes.StopID" } } })], c3.prototype, "stopId", void 0), r([m({ types: j2 })], c3.prototype, "symbol", void 0), r([m({ json: { read: { source: "attributes.TowardName" } } })], c3.prototype, "towardName", void 0), r([m({ readOnly: true, json: { read: false } })], c3.prototype, "type", void 0), r([m({ json: { read: { source: "attributes.VoiceInstruction" } } })], c3.prototype, "voiceInstruction", void 0), c3 = m4 = r([a("esri.rest.support.DirectionPoint")], c3);
var y2 = c3;

// node_modules/@arcgis/core/rest/route/utils.js
function r5(r6, e2) {
  if (null == r6) return null;
  const i5 = {}, s3 = new RegExp(`^${e2}`, "i");
  for (const n3 of Object.keys(r6)) if (s3.test(n3)) {
    const s4 = n3.slice(e2.length);
    i5[w.fromJSON(s4)] = r6[n3];
  }
  return i5;
}
function e(r6, e2, i5) {
  if (null != r6) {
    e2.attributes || (e2.attributes = {});
    for (const s3 in r6) {
      const n3 = w.toJSON(s3);
      e2.attributes[`${i5}${n3}`] = r6[s3];
    }
  }
}
function i4(r6) {
  const e2 = {};
  for (const i5 of Object.keys(r6)) {
    const s3 = i5;
    e2[w.fromJSON(s3)] = r6[i5];
  }
  return e2;
}
function s2(r6) {
  const e2 = {};
  for (const i5 of Object.keys(r6)) {
    const s3 = i5;
    e2[w.toJSON(s3)] = r6[i5];
  }
  return e2;
}
function n2(t2, r6) {
  return null == t2 || null == r6 ? null : Math.round((t2 - r6) / 6e4);
}
function o3(t2) {
  var _a, _b, _c;
  const r6 = t2.toJSON(), e2 = r6;
  return e2.accumulateAttributeNames && (e2.accumulateAttributeNames = (_a = r6.accumulateAttributeNames) == null ? void 0 : _a.join()), e2.attributeParameterValues && (e2.attributeParameterValues = JSON.stringify(r6.attributeParameterValues)), e2.barriers && (e2.barriers = JSON.stringify(r6.barriers)), e2.outSR && (e2.outSR = (_b = r6.outSR) == null ? void 0 : _b.wkid), e2.overrides && (e2.overrides = JSON.stringify(r6.overrides)), e2.polygonBarriers && (e2.polygonBarriers = JSON.stringify(r6.polygonBarriers)), e2.polylineBarriers && (e2.polylineBarriers = JSON.stringify(r6.polylineBarriers)), e2.restrictionAttributeNames && (e2.restrictionAttributeNames = (_c = r6.restrictionAttributeNames) == null ? void 0 : _c.join()), e2.stops && (e2.stops = JSON.stringify(r6.stops)), e2.travelMode && (e2.travelMode = JSON.stringify(r6.travelMode)), e2;
}

// node_modules/@arcgis/core/rest/support/PointBarrier.js
var S2;
var T2 = S2 = class extends i2(f) {
  constructor(t2) {
    super(t2), this.addedCost = null, this.barrierType = null, this.costs = null, this.curbApproach = null, this.fullEdge = null, this.geometry = null, this.name = null, this.objectId = null, this.popupTemplate = null, this.sideOfEdge = null, this.sourceId = null, this.sourceOid = null, this.status = null, this.symbol = null, this.type = "point-barrier";
  }
  readCosts(t2, e2) {
    return r5(e2.attributes, "Attr_");
  }
  writeCosts(t2, e2) {
    e(t2, e2, "Attr_");
  }
  static fromGraphic(t2) {
    return new S2({ addedCost: t2.attributes.AddedCost ?? null, barrierType: null != t2.attributes.BarrierType ? g.fromJSON(t2.attributes.BarrierType) : null, costs: null != t2.attributes.Costs ? i4(JSON.parse(t2.attributes.Costs)) : null, curbApproach: null != t2.attributes.CurbApproach ? p.fromJSON(t2.attributes.CurbApproach) : null, fullEdge: null != t2.attributes.FullEdge ? k.fromJSON(t2.attributes.FullEdge) : null, geometry: t2.geometry, name: t2.attributes.Name ?? null, objectId: t2.attributes.ObjectID ?? t2.attributes.__OBJECTID, popupTemplate: t2.popupTemplate, status: null != t2.attributes.Status ? T.fromJSON(t2.attributes.Status) : null, symbol: t2.symbol });
  }
  toGraphic() {
    const t2 = { ObjectID: this.objectId, AddedCost: this.addedCost, BarrierType: null != this.barrierType ? g.toJSON(this.barrierType) : null, Costs: null != this.costs ? JSON.stringify(s2(this.costs)) : null, CurbApproach: null != this.curbApproach ? p.toJSON(this.curbApproach) : null, FullEdge: null != this.fullEdge ? k.toJSON(this.fullEdge) : null, Name: this.name, Status: null != this.status ? T.toJSON(this.status) : null };
    return new d2({ geometry: this.geometry, attributes: t2, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
T2.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID" }, { name: "AddedCost", alias: "Added Cost", type: "esriFieldTypeDouble" }, { name: "BarrierType", alias: "Barrier Type", type: "esriFieldTypeInteger" }, { name: "Costs", alias: "Costs", type: "esriFieldTypeString" }, { name: "CurbApproach", alias: "Curb Approach", type: "esriFieldTypeInteger" }, { name: "FullEdge", alias: "Full Edge", type: "esriFieldTypeInteger" }, { name: "Name", alias: "Name", type: "esriFieldTypeString" }, { name: "Status", alias: "Status", type: "esriFieldTypeInteger" }], r([m()], T2.prototype, "addedCost", void 0), r([m({ type: g.apiValues, json: { name: "attributes.BarrierType", read: { reader: g.read }, write: { writer: g.write } } })], T2.prototype, "barrierType", void 0), r([m()], T2.prototype, "costs", void 0), r([o("costs", ["attributes"])], T2.prototype, "readCosts", null), r([r2("costs")], T2.prototype, "writeCosts", null), r([m({ constructOnly: true, type: p.apiValues, json: { read: { source: "attributes.CurbApproach", reader: p.read } } })], T2.prototype, "curbApproach", void 0), r([m({ type: k.apiValues, json: { name: "attributes.FullEdge", read: { reader: k.read }, write: { writer: k.write } } })], T2.prototype, "fullEdge", void 0), r([m({ type: j, json: { write: true } })], T2.prototype, "geometry", void 0), r([m({ json: { name: "attributes.Name" } })], T2.prototype, "name", void 0), r([m({ json: { name: "attributes.ObjectID" } })], T2.prototype, "objectId", void 0), r([m({ type: q })], T2.prototype, "popupTemplate", void 0), r([m({ type: N.apiValues, json: { read: { source: "attributes.SideOfEdge", reader: N.read } } })], T2.prototype, "sideOfEdge", void 0), r([m({ json: { read: { source: "attributes.SourceID" } } })], T2.prototype, "sourceId", void 0), r([m({ json: { read: { source: "attributes.SourceOID" } } })], T2.prototype, "sourceOid", void 0), r([m({ type: T.apiValues, json: { read: { source: "attributes.Status", reader: T.read } } })], T2.prototype, "status", void 0), r([m({ types: j2 })], T2.prototype, "symbol", void 0), r([m({ readOnly: true, json: { read: false } })], T2.prototype, "type", void 0), T2 = S2 = r([a("esri.rest.support.PointBarrier")], T2);
var C = T2;

// node_modules/@arcgis/core/rest/support/PolygonBarrier.js
var j3;
var h2 = j3 = class extends i2(f) {
  constructor(t2) {
    super(t2), this.barrierType = null, this.costs = null, this.geometry = null, this.name = null, this.objectId = null, this.popupTemplate = null, this.scaleFactor = null, this.symbol = null, this.type = "polygon-barrier";
  }
  readCosts(t2, e2) {
    return r5(e2.attributes, "Attr_");
  }
  writeCosts(t2, e2) {
    e(t2, e2, "Attr_");
  }
  static fromGraphic(t2) {
    return new j3({ barrierType: null != t2.attributes.BarrierType ? g.fromJSON(t2.attributes.BarrierType) : null, costs: null != t2.attributes.Costs ? i4(JSON.parse(t2.attributes.Costs)) : null, geometry: t2.geometry, name: t2.attributes.Name ?? null, objectId: t2.attributes.ObjectID ?? t2.attributes.__OBJECTID, popupTemplate: t2.popupTemplate, scaleFactor: t2.attributes.ScaleFactor ?? null, symbol: t2.symbol });
  }
  toGraphic() {
    const t2 = { ObjectID: this.objectId, BarrierType: null != this.barrierType ? g.toJSON(this.barrierType) : null, Costs: null != this.costs ? JSON.stringify(s2(this.costs)) : null, Name: this.name ?? null, ScaleFactor: this.scaleFactor ?? null };
    return new d2({ geometry: this.geometry, attributes: t2, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
h2.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID" }, { name: "BarrierType", alias: "Barrier Type", type: "esriFieldTypeInteger" }, { name: "Costs", alias: "Costs", type: "esriFieldTypeString" }, { name: "Name", alias: "Name", type: "esriFieldTypeString" }, { name: "ScaleFactor", alias: "Scale Factor", type: "esriFieldTypeDouble" }], r([m({ type: g.apiValues, json: { name: "attributes.BarrierType", read: { reader: g.read }, write: { writer: g.write } } })], h2.prototype, "barrierType", void 0), r([m()], h2.prototype, "costs", void 0), r([o("costs", ["attributes"])], h2.prototype, "readCosts", null), r([r2("costs")], h2.prototype, "writeCosts", null), r([m({ type: v, json: { write: true } })], h2.prototype, "geometry", void 0), r([m({ json: { name: "attributes.Name" } })], h2.prototype, "name", void 0), r([m({ json: { name: "attributes.ObjectID" } })], h2.prototype, "objectId", void 0), r([m({ type: q })], h2.prototype, "popupTemplate", void 0), r([m()], h2.prototype, "scaleFactor", void 0), r([m({ types: j2 })], h2.prototype, "symbol", void 0), r([m({ readOnly: true, json: { read: false } })], h2.prototype, "type", void 0), h2 = j3 = r([a("esri.rest.support.PolygonBarrier")], h2);
var T3 = h2;

// node_modules/@arcgis/core/rest/support/PolylineBarrier.js
var b2;
var d4 = b2 = class extends i2(f) {
  constructor(e2) {
    super(e2), this.barrierType = null, this.costs = null, this.geometry = null, this.name = null, this.objectId = null, this.popupTemplate = null, this.scaleFactor = null, this.symbol = null, this.type = "polyline-barrier";
  }
  readCosts(e2, t2) {
    return r5(t2.attributes, "Attr_");
  }
  static fromGraphic(e2) {
    return new b2({ barrierType: null != e2.attributes.BarrierType ? g.fromJSON(e2.attributes.BarrierType) : null, costs: null != e2.attributes.Costs ? i4(JSON.parse(e2.attributes.Costs)) : null, geometry: e2.geometry, name: e2.attributes.Name ?? null, objectId: e2.attributes.ObjectID ?? e2.attributes.__OBJECTID, popupTemplate: e2.popupTemplate, scaleFactor: e2.attributes.ScaleFactor ?? null, symbol: e2.symbol });
  }
  toGraphic() {
    const e2 = { ObjectID: this.objectId, BarrierType: null != this.barrierType ? g.toJSON(this.barrierType) : null, Costs: null != this.costs ? JSON.stringify(s2(this.costs)) : null, Name: this.name, ScaleFactor: this.scaleFactor };
    return new d2({ geometry: this.geometry, attributes: e2, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
d4.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID" }, { name: "BarrierType", alias: "Barrier Type", type: "esriFieldTypeInteger" }, { name: "Costs", alias: "Costs", type: "esriFieldTypeString" }, { name: "Name", alias: "Name", type: "esriFieldTypeString" }, { name: "ScaleFactor", alias: "Scale Factor", type: "esriFieldTypeDouble" }], r([m({ type: g.apiValues, json: { read: { source: "attributes.BarrierType", reader: g.read } } })], d4.prototype, "barrierType", void 0), r([m()], d4.prototype, "costs", void 0), r([o("costs", ["attributes"])], d4.prototype, "readCosts", null), r([m({ type: d, json: { write: true } })], d4.prototype, "geometry", void 0), r([m({ json: { name: "attributes.Name" } })], d4.prototype, "name", void 0), r([m({ json: { name: "attributes.ObjectID" } })], d4.prototype, "objectId", void 0), r([m({ type: q })], d4.prototype, "popupTemplate", void 0), r([m()], d4.prototype, "scaleFactor", void 0), r([m({ types: j2 })], d4.prototype, "symbol", void 0), r([m({ readOnly: true, json: { read: false } })], d4.prototype, "type", void 0), d4 = b2 = r([a("esri.rest.support.PolylineBarrier")], d4);
var j4 = d4;

// node_modules/@arcgis/core/rest/support/TravelMode.js
var b3 = class extends i2(f) {
  constructor(t2) {
    super(t2), this.attributeParameterValues = null, this.description = null, this.distanceAttributeName = null, this.id = null, this.impedanceAttributeName = null, this.name = null, this.restrictionAttributeNames = null, this.simplificationTolerance = null, this.simplificationToleranceUnits = null, this.timeAttributeName = null, this.type = null, this.useHierarchy = null, this.uturnAtJunctions = null;
  }
  readId(t2, r6) {
    return r6.id ?? r6.itemId ?? null;
  }
  readRestrictionAttributes(t2, r6) {
    const { restrictionAttributeNames: e2 } = r6;
    return null == e2 ? null : e2.map((t3) => M.fromJSON(t3));
  }
  writeRestrictionAttributes(t2, r6, e2) {
    null != t2 && (r6[e2] = t2.map((t3) => M.toJSON(t3)));
  }
};
r([m({ type: [Object], json: { write: true } })], b3.prototype, "attributeParameterValues", void 0), r([m({ type: String, json: { write: true } })], b3.prototype, "description", void 0), r([r3(y, { ignoreUnknown: false })], b3.prototype, "distanceAttributeName", void 0), r([m({ type: String, json: { write: true } })], b3.prototype, "id", void 0), r([o("id", ["id", "itemId"])], b3.prototype, "readId", null), r([r3(w, { ignoreUnknown: false })], b3.prototype, "impedanceAttributeName", void 0), r([m({ type: String, json: { write: true } })], b3.prototype, "name", void 0), r([m({ type: [String], json: { write: true } })], b3.prototype, "restrictionAttributeNames", void 0), r([o("restrictionAttributeNames")], b3.prototype, "readRestrictionAttributes", null), r([r2("restrictionAttributeNames")], b3.prototype, "writeRestrictionAttributes", null), r([m({ type: Number, json: { write: { allowNull: true } } })], b3.prototype, "simplificationTolerance", void 0), r([r3(r4)], b3.prototype, "simplificationToleranceUnits", void 0), r([r3(D, { ignoreUnknown: false })], b3.prototype, "timeAttributeName", void 0), r([r3(A)], b3.prototype, "type", void 0), r([m({ type: Boolean, json: { write: true } })], b3.prototype, "useHierarchy", void 0), r([r3(m2)], b3.prototype, "uturnAtJunctions", void 0), b3 = r([a("esri.rest.support.TravelMode")], b3);
var j5 = b3;

// node_modules/@arcgis/core/rest/support/RouteSettings.js
var a3 = class extends f {
  constructor(t2) {
    super(t2), this.accumulateAttributes = null, this.directionsLanguage = null, this.findBestSequence = null, this.preserveFirstStop = null, this.preserveLastStop = null, this.startTimeIsUTC = null, this.timeWindowsAreUTC = null, this.travelMode = null;
  }
  readAccumulateAttributes(t2) {
    return null == t2 ? null : t2.map((t3) => w.fromJSON(t3));
  }
  writeAccumulateAttributes(t2, e2, r6) {
    (t2 == null ? void 0 : t2.length) && (e2[r6] = t2.map((t3) => w.toJSON(t3)));
  }
};
r([m({ type: [String], json: { name: "accumulateAttributeNames", write: true } })], a3.prototype, "accumulateAttributes", void 0), r([o("accumulateAttributes")], a3.prototype, "readAccumulateAttributes", null), r([r2("accumulateAttributes")], a3.prototype, "writeAccumulateAttributes", null), r([m({ type: String, json: { write: true } })], a3.prototype, "directionsLanguage", void 0), r([m({ type: Boolean, json: { write: true } })], a3.prototype, "findBestSequence", void 0), r([m({ type: Boolean, json: { write: true } })], a3.prototype, "preserveFirstStop", void 0), r([m({ type: Boolean, json: { write: true } })], a3.prototype, "preserveLastStop", void 0), r([m({ type: Boolean, json: { write: true } })], a3.prototype, "startTimeIsUTC", void 0), r([m({ type: Boolean, json: { write: true } })], a3.prototype, "timeWindowsAreUTC", void 0), r([m({ type: j5, json: { write: true } })], a3.prototype, "travelMode", void 0), a3 = r([a("esri.rest.support.RouteSettings")], a3);
var c4 = a3;

// node_modules/@arcgis/core/rest/support/RouteInfo.js
var b4;
var f3 = b4 = class extends i2(f) {
  constructor(t2) {
    super(t2), this.analysisSettings = null, this.endTime = null, this.endTimeOffset = null, this.firstStopId = null, this.geometry = null, this.lastStopId = null, this.messages = null, this.name = null, this.objectId = null, this.popupTemplate = null, this.startTime = null, this.startTimeOffset = null, this.stopCount = null, this.symbol = null, this.totalCosts = null, this.totalDistance = null, this.totalDuration = null, this.totalLateDuration = null, this.totalViolations = null, this.totalWait = null, this.totalWaitDuration = null, this.type = "route-info", this.version = "1.0.0";
  }
  readEndTime(t2, e2) {
    return null != e2.attributes.EndTimeUTC ? new Date(e2.attributes.EndTimeUTC) : null;
  }
  readEndTimeOffset(t2, e2) {
    return n2(e2.attributes.EndTime, e2.attributes.EndTimeUTC);
  }
  readStartTime(t2, e2) {
    return null != e2.attributes.StartTimeUTC ? new Date(e2.attributes.StartTimeUTC) : null;
  }
  readStartTimeOffset(t2, e2) {
    return n2(e2.attributes.StartTime, e2.attributes.StartTimeUTC);
  }
  readTotalCosts(t2, e2) {
    return r5(e2.attributes, "Total_");
  }
  readTotalViolations(t2, e2) {
    return r5(e2.attributes, "TotalViolation_");
  }
  readTotalWait(t2, e2) {
    return r5(e2.attributes, "TotalWait_");
  }
  static fromGraphic(t2) {
    return new b4({ analysisSettings: null != t2.attributes.AnalysisSettings ? c4.fromJSON(JSON.parse(t2.attributes.AnalysisSettings)) : null, endTime: null != t2.attributes.EndTime ? new Date(t2.attributes.EndTime) : null, endTimeOffset: t2.attributes.EndUTCOffset ?? null, geometry: t2.geometry, messages: null != t2.attributes.Messages ? JSON.parse(t2.attributes.Messages) : null, name: t2.attributes.RouteName, objectId: t2.attributes.ObjectID ?? t2.attributes.__OBJECTID, popupTemplate: t2.popupTemplate, startTime: null != t2.attributes.StartTime ? new Date(t2.attributes.StartTime) : null, startTimeOffset: t2.attributes.StartUTCOffset ?? null, symbol: t2.symbol, totalCosts: null != t2.attributes.TotalCosts ? i4(JSON.parse(t2.attributes.TotalCosts)) : null, totalDistance: t2.attributes.TotalMeters ?? null, totalDuration: t2.attributes.TotalMinutes ?? null, totalLateDuration: t2.attributes.TotalLateMinutes ?? null, totalWaitDuration: t2.attributes.TotalWaitMinutes ?? null, version: t2.attributes.Version });
  }
  toGraphic() {
    const t2 = { ObjectID: this.objectId, AnalysisSettings: null != this.analysisSettings ? JSON.stringify(this.analysisSettings.toJSON()) : null, EndTime: null != this.endTime ? this.endTime.getTime() : null, EndUTCOffset: this.endTimeOffset, Messages: null != this.messages ? JSON.stringify(this.messages) : null, RouteName: this.name, StartTime: null != this.startTime ? this.startTime.getTime() : null, StartUTCOffset: this.startTimeOffset, TotalCosts: null != this.totalCosts ? JSON.stringify(s2(this.totalCosts)) : null, TotalLateMinutes: this.totalLateDuration, TotalMeters: this.totalDistance, TotalMinutes: this.totalDuration, TotalWaitMinutes: this.totalWaitDuration, Version: this.version };
    return new d2({ geometry: this.geometry, attributes: t2, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
f3.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID" }, { name: "AnalysisSettings", alias: "Analysis Settings", type: "esriFieldTypeString" }, { name: "EndTime", alias: "End Time", type: "esriFieldTypeDate" }, { name: "EndUTCOffset", alias: "End Time Offset", type: "esriFieldTypeInteger" }, { name: "Messages", alias: "Messages", type: "esriFieldTypeString" }, { name: "RouteName", alias: "Route Name", type: "esriFieldTypeString" }, { name: "StartTime", alias: "Start Time", type: "esriFieldTypeDate" }, { name: "StartUTCOffset", alias: "Start Time Offset", type: "esriFieldTypeInteger" }, { name: "TotalCosts", alias: "Total Costs", type: "esriFieldTypeString" }, { name: "TotalLateMinutes", alias: "Total Late Minutes", type: "esriFieldTypeDouble" }, { name: "TotalMeters", alias: "Total Meters", type: "esriFieldTypeDouble" }, { name: "TotalMinutes", alias: "Total Minutes", type: "esriFieldTypeDouble" }, { name: "TotalWaitMinutes", alias: "Total Wait Minutes", type: "esriFieldTypeDouble" }, { name: "Version", alias: "Version", type: "esriFieldTypeString" }], r([m()], f3.prototype, "analysisSettings", void 0), r([m()], f3.prototype, "endTime", void 0), r([o("endTime", ["attributes.EndTimeUTC"])], f3.prototype, "readEndTime", null), r([m()], f3.prototype, "endTimeOffset", void 0), r([o("endTimeOffset", ["attributes.EndTime", "attributes.EndTimeUTC"])], f3.prototype, "readEndTimeOffset", null), r([m({ json: { read: { source: "attributes.FirstStopID" } } })], f3.prototype, "firstStopId", void 0), r([m({ type: d })], f3.prototype, "geometry", void 0), r([m({ json: { read: { source: "attributes.LastStopID" } } })], f3.prototype, "lastStopId", void 0), r([m()], f3.prototype, "messages", void 0), r([m({ json: { read: { source: "attributes.Name" } } })], f3.prototype, "name", void 0), r([m({ json: { read: { source: "attributes.ObjectID" } } })], f3.prototype, "objectId", void 0), r([m({ type: q })], f3.prototype, "popupTemplate", void 0), r([m()], f3.prototype, "startTime", void 0), r([o("startTime", ["attributes.StartTimeUTC"])], f3.prototype, "readStartTime", null), r([m()], f3.prototype, "startTimeOffset", void 0), r([o("startTimeOffset", ["attributes.StartTime", "attributes.StartTimeUTC"])], f3.prototype, "readStartTimeOffset", null), r([m({ json: { read: { source: "attributes.StopCount" } } })], f3.prototype, "stopCount", void 0), r([m({ types: j2 })], f3.prototype, "symbol", void 0), r([m()], f3.prototype, "totalCosts", void 0), r([o("totalCosts", ["attributes"])], f3.prototype, "readTotalCosts", null), r([m()], f3.prototype, "totalDistance", void 0), r([m()], f3.prototype, "totalDuration", void 0), r([m()], f3.prototype, "totalLateDuration", void 0), r([m()], f3.prototype, "totalViolations", void 0), r([o("totalViolations", ["attributes"])], f3.prototype, "readTotalViolations", null), r([m()], f3.prototype, "totalWait", void 0), r([o("totalWait", ["attributes"])], f3.prototype, "readTotalWait", null), r([m()], f3.prototype, "totalWaitDuration", void 0), r([m({ readOnly: true, json: { read: false } })], f3.prototype, "type", void 0), r([m()], f3.prototype, "version", void 0), f3 = b4 = r([a("esri.rest.support.RouteInfo")], f3);
var S3 = f3;

// node_modules/@arcgis/core/rest/support/Stop.js
var C2;
var S4 = C2 = class extends i2(f) {
  constructor(e2) {
    super(e2), this.arriveCurbApproach = null, this.arriveTime = null, this.arriveTimeOffset = null, this.bearing = null, this.bearingTol = null, this.cumulativeCosts = null, this.cumulativeDistance = null, this.cumulativeDuration = null, this.curbApproach = null, this.departCurbApproach = null, this.departTime = null, this.departTimeOffset = null, this.distanceToNetworkInMeters = null, this.geometry = null, this.lateDuration = null, this.locationType = null, this.name = null, this.navLatency = null, this.objectId = null, this.popupTemplate = null, this.posAlong = null, this.routeName = null, this.serviceCosts = null, this.serviceDistance = null, this.serviceDuration = null, this.sequence = null, this.sideOfEdge = null, this.snapX = null, this.snapY = null, this.snapZ = null, this.sourceId = null, this.sourceOid = null, this.status = null, this.symbol = null, this.timeWindowEnd = null, this.timeWindowEndOffset = null, this.timeWindowStart = null, this.timeWindowStartOffset = null, this.type = "stop", this.violations = null, this.waitDuration = null, this.wait = null;
  }
  readArriveTimeOffset(e2, t2) {
    return n2(t2.attributes.ArriveTime, t2.attributes.ArriveTimeUTC);
  }
  readCumulativeCosts(e2, t2) {
    return r5(t2.attributes, "Cumul_");
  }
  readDepartTimeOffset(e2, t2) {
    return n2(t2.attributes.DepartTime, t2.attributes.DepartTimeUTC);
  }
  readServiceCosts(e2, t2) {
    return r5(t2.attributes, "Attr_");
  }
  writeServiceCosts(e2, t2) {
    e(e2, t2, "Attr_");
  }
  writeTimeWindowEnd(e2, t2) {
    null != e2 && (t2.attributes || (t2.attributes = {}), t2.attributes.TimeWindowEnd = e2.getTime());
  }
  writeTimeWindowStart(e2, t2) {
    null != e2 && (t2.attributes || (t2.attributes = {}), t2.attributes.TimeWindowStart = e2.getTime());
  }
  readViolations(e2, t2) {
    return r5(t2.attributes, "Violation_");
  }
  readWait(e2, t2) {
    return r5(t2.attributes, "Wait_");
  }
  static fromGraphic(e2) {
    return new C2({ arriveCurbApproach: null != e2.attributes.ArrivalCurbApproach ? p.fromJSON(e2.attributes.ArrivalCurbApproach) : null, arriveTime: null != e2.attributes.ArrivalTime ? new Date(e2.attributes.ArrivalTime) : null, arriveTimeOffset: e2.attributes.ArrivalUTCOffset, cumulativeCosts: null != e2.attributes.CumulativeCosts ? i4(JSON.parse(e2.attributes.CumulativeCosts)) : null, cumulativeDistance: e2.attributes.CumulativeMeters ?? null, cumulativeDuration: e2.attributes.CumulativeMinutes ?? null, curbApproach: null != e2.attributes.CurbApproach ? p.fromJSON(e2.attributes.CurbApproach) : null, departCurbApproach: null != e2.attributes.DepartureCurbApproach ? p.fromJSON(e2.attributes.DepartureCurbApproach) : null, departTime: null != e2.attributes.DepartureTime ? new Date(e2.attributes.DepartureTime) : null, departTimeOffset: e2.attributes.DepartureUTCOffset ?? null, geometry: e2.geometry, lateDuration: e2.attributes.LateMinutes ?? null, locationType: null != e2.attributes.LocationType ? v2.fromJSON(e2.attributes.LocationType) : null, name: e2.attributes.Name, objectId: e2.attributes.ObjectID ?? e2.attributes.__OBJECTID, popupTemplate: e2.popupTemplate, routeName: e2.attributes.RouteName, sequence: e2.attributes.Sequence ?? null, serviceCosts: null != e2.attributes.ServiceCosts ? i4(JSON.parse(e2.attributes.ServiceCosts)) : null, serviceDistance: e2.attributes.ServiceMeters ?? null, serviceDuration: e2.attributes.ServiceMinutes ?? null, status: null != e2.attributes.Status ? T.fromJSON(e2.attributes.Status) : null, symbol: e2.symbol, timeWindowEnd: null != e2.attributes.TimeWindowEnd ? new Date(e2.attributes.TimeWindowEnd) : null, timeWindowEndOffset: e2.attributes.TimeWindowEndUTCOffset ?? null, timeWindowStart: null != e2.attributes.TimeWindowStart ? new Date(e2.attributes.TimeWindowStart) : null, timeWindowStartOffset: e2.attributes.TimeWindowStartUTCOffset ?? null, waitDuration: e2.attributes.WaitMinutes ?? null });
  }
  toGraphic() {
    const e2 = { ObjectID: this.objectId, ArrivalCurbApproach: null != this.arriveCurbApproach ? p.toJSON(this.arriveCurbApproach) : null, ArrivalTime: null != this.arriveTime ? this.arriveTime.getTime() : null, ArrivalUTCOffset: this.arriveTimeOffset, CumulativeCosts: null != this.cumulativeCosts ? JSON.stringify(s2(this.cumulativeCosts)) : null, CumulativeMeters: this.cumulativeDistance, CumulativeMinutes: this.cumulativeDuration, CurbApproach: null != this.curbApproach ? p.toJSON(this.curbApproach) : null, DepartureCurbApproach: null != this.departCurbApproach ? p.toJSON(this.departCurbApproach) : null, DepartureTime: null != this.departTime ? this.departTime.getTime() : null, DepartureUTCOffset: this.departTimeOffset, LateMinutes: this.lateDuration, LocationType: null != this.locationType ? v2.toJSON(this.locationType) : null, Name: this.name, RouteName: this.routeName, Sequence: this.sequence, ServiceCosts: null != this.serviceCosts ? JSON.stringify(s2(this.serviceCosts)) : null, ServiceMeters: this.serviceDistance, ServiceMinutes: this.serviceDuration, Status: null != this.status ? T.toJSON(this.status) : null, TimeWindowEnd: null != this.timeWindowEnd ? this.timeWindowEnd.getTime() : null, TimeWindowEndUTCOffset: this.timeWindowEndOffset ?? this.arriveTimeOffset, TimeWindowStart: null != this.timeWindowStart ? this.timeWindowStart.getTime() : null, TimeWindowStartUTCOffset: this.timeWindowStartOffset ?? this.arriveTimeOffset, WaitMinutes: this.waitDuration };
    return new d2({ geometry: this.geometry, attributes: e2, symbol: this.symbol, popupTemplate: this.popupTemplate });
  }
};
S4.fields = [{ name: "ObjectID", alias: "ObjectID", type: "esriFieldTypeOID" }, { name: "ArrivalCurbApproach", alias: "Arrival Curb Approach", type: "esriFieldTypeInteger" }, { name: "ArrivalTime", alias: "Arrival Time", type: "esriFieldTypeDate" }, { name: "ArrivalUTCOffset", alias: "Arrival Time", type: "esriFieldTypeInteger" }, { name: "CumulativeCosts", alias: "Cumulative Costs", type: "esriFieldTypeString" }, { name: "CumulativeMeters", alias: "Cumulative Meters", type: "esriFieldTypeDouble" }, { name: "CumulativeMinutes", alias: "Cumulative Minutes", type: "esriFieldTypeDouble" }, { name: "CurbApproach", alias: "Curb Approach", type: "esriFieldTypeInteger" }, { name: "DepartureCurbApproach", alias: "Departure Curb Approach", type: "esriFieldTypeInteger" }, { name: "DepartureTime", alias: "Departure Time", type: "esriFieldTypeDate" }, { name: "DepartureUTCOffset", alias: "Departure Time", type: "esriFieldTypeInteger" }, { name: "LateMinutes", alias: "Minutes Late", type: "esriFieldTypeDouble" }, { name: "LocationType", alias: "Location Type", type: "esriFieldTypeInteger" }, { name: "Name", alias: "Name", type: "esriFieldTypeString" }, { name: "RouteName", alias: "Route Name", type: "esriFieldTypeString" }, { name: "Sequence", alias: "Sequence", type: "esriFieldTypeInteger" }, { name: "ServiceCosts", alias: "Service Costs", type: "esriFieldTypeString" }, { name: "ServiceMeters", alias: "Service Meters", type: "esriFieldTypeDouble" }, { name: "ServiceMinutes", alias: "Service Minutes", type: "esriFieldTypeDouble" }, { name: "Status", alias: "Status", type: "esriFieldTypeInteger" }, { name: "TimeWindowEnd", alias: "Time Window End", type: "esriFieldTypeDate" }, { name: "TimeWindowEndUTCOffset", alias: "Time Window End Offset", type: "esriFieldTypeInteger" }, { name: "TimeWindowStart", alias: "Time Window Start", type: "esriFieldTypeDate" }, { name: "TimeWindowStartUTCOffset", alias: "Time Window Start Offset", type: "esriFieldTypeInteger" }, { name: "WaitMinutes", alias: "Minutes Wait", type: "esriFieldTypeDouble" }], r([m({ type: p.apiValues, json: { read: { source: "attributes.ArrivalCurbApproach", reader: p.read } } })], S4.prototype, "arriveCurbApproach", void 0), r([m({ type: Date, json: { read: { source: "attributes.ArriveTimeUTC" } } })], S4.prototype, "arriveTime", void 0), r([m()], S4.prototype, "arriveTimeOffset", void 0), r([o("arriveTimeOffset", ["attributes.ArriveTime", "attributes.ArriveTimeUTC"])], S4.prototype, "readArriveTimeOffset", null), r([m({ json: { name: "attributes.Bearing", read: false, write: true } })], S4.prototype, "bearing", void 0), r([m({ json: { name: "attributes.BearingTol", read: false, write: true } })], S4.prototype, "bearingTol", void 0), r([m()], S4.prototype, "cumulativeCosts", void 0), r([o("cumulativeCosts", ["attributes"])], S4.prototype, "readCumulativeCosts", null), r([m()], S4.prototype, "cumulativeDistance", void 0), r([m()], S4.prototype, "cumulativeDuration", void 0), r([m({ type: p.apiValues, json: { name: "attributes.CurbApproach", read: { reader: p.read }, write: { writer: p.write } } })], S4.prototype, "curbApproach", void 0), r([m({ type: p.apiValues, json: { read: { source: "attributes.DepartCurbApproach", reader: p.read } } })], S4.prototype, "departCurbApproach", void 0), r([m({ type: Date, json: { read: { source: "attributes.DepartTimeUTC" } } })], S4.prototype, "departTime", void 0), r([m()], S4.prototype, "departTimeOffset", void 0), r([o("departTimeOffset", ["attributes.DepartTime", "attributes.DepartTimeUTC"])], S4.prototype, "readDepartTimeOffset", null), r([m({ json: { read: { source: "attributes.DistanceToNetworkInMeters" } } })], S4.prototype, "distanceToNetworkInMeters", void 0), r([m({ type: j, json: { write: true } })], S4.prototype, "geometry", void 0), r([m()], S4.prototype, "lateDuration", void 0), r([m({ type: v2.apiValues, json: { name: "attributes.LocationType", read: { reader: v2.read }, write: { writer: v2.write } } })], S4.prototype, "locationType", void 0), r([m({ json: { name: "attributes.Name" } })], S4.prototype, "name", void 0), r([m({ json: { name: "attributes.NavLatency", read: false, write: true } })], S4.prototype, "navLatency", void 0), r([m({ json: { name: "attributes.ObjectID" } })], S4.prototype, "objectId", void 0), r([m({ type: q })], S4.prototype, "popupTemplate", void 0), r([m({ json: { read: { source: "attributes.PosAlong" } } })], S4.prototype, "posAlong", void 0), r([m({ json: { name: "attributes.RouteName" } })], S4.prototype, "routeName", void 0), r([m()], S4.prototype, "serviceCosts", void 0), r([o("serviceCosts", ["attributes"])], S4.prototype, "readServiceCosts", null), r([r2("serviceCosts")], S4.prototype, "writeServiceCosts", null), r([m()], S4.prototype, "serviceDistance", void 0), r([m()], S4.prototype, "serviceDuration", void 0), r([m({ json: { name: "attributes.Sequence" } })], S4.prototype, "sequence", void 0), r([m({ type: N.apiValues, json: { read: { source: "attributes.SideOfEdge", reader: N.read } } })], S4.prototype, "sideOfEdge", void 0), r([m({ json: { read: { source: "attributes.SnapX" } } })], S4.prototype, "snapX", void 0), r([m({ json: { read: { source: "attributes.SnapY" } } })], S4.prototype, "snapY", void 0), r([m({ json: { read: { source: "attributes.SnapZ" } } })], S4.prototype, "snapZ", void 0), r([m({ json: { read: { source: "attributes.SourceID" } } })], S4.prototype, "sourceId", void 0), r([m({ json: { read: { source: "attributes.SourceOID" } } })], S4.prototype, "sourceOid", void 0), r([m({ type: T.apiValues, json: { read: { source: "attributes.Status", reader: T.read } } })], S4.prototype, "status", void 0), r([m({ types: j2 })], S4.prototype, "symbol", void 0), r([m({ type: Date, json: { name: "attributes.TimeWindowEnd" } })], S4.prototype, "timeWindowEnd", void 0), r([r2("timeWindowEnd")], S4.prototype, "writeTimeWindowEnd", null), r([m()], S4.prototype, "timeWindowEndOffset", void 0), r([m({ type: Date, json: { name: "attributes.TimeWindowStart" } })], S4.prototype, "timeWindowStart", void 0), r([r2("timeWindowStart")], S4.prototype, "writeTimeWindowStart", null), r([m()], S4.prototype, "timeWindowStartOffset", void 0), r([m({ readOnly: true, json: { read: false } })], S4.prototype, "type", void 0), r([m()], S4.prototype, "violations", void 0), r([o("violations", ["attributes"])], S4.prototype, "readViolations", null), r([m()], S4.prototype, "waitDuration", void 0), r([m()], S4.prototype, "wait", void 0), r([o("wait", ["attributes"])], S4.prototype, "readWait", null), S4 = C2 = r([a("esri.rest.support.Stop")], S4);
var w2 = S4;

export {
  r4 as r,
  a2 as a,
  o2 as o,
  l,
  c,
  m2 as m,
  U,
  D,
  w,
  M,
  R,
  b,
  q2 as q,
  P,
  j5 as j,
  n2 as n,
  o3 as o2,
  c2,
  y2 as y,
  C,
  T3 as T,
  j4 as j2,
  c4 as c3,
  S3 as S,
  w2
};
//# sourceMappingURL=chunk-2OJYEYNU.js.map
