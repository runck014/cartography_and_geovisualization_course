import {
  b,
  w,
  x
} from "./chunk-VWXOSXKG.js";
import "./chunk-KVWJ4FJP.js";
import {
  $,
  C,
  E,
  P,
  U,
  d,
  f,
  k,
  p
} from "./chunk-WI4GZYZR.js";
import "./chunk-M43YLXNM.js";
import "./chunk-XKMN3LJN.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-6GD5IU2W.js";
import "./chunk-XQ3CVA7I.js";
import "./chunk-UYSPJCCV.js";
import "./chunk-B5NBTUMV.js";
import "./chunk-TCZ4QHYH.js";
import "./chunk-SMFCDOAJ.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-DIKY6MBW.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-6D5XULXX.js";
import "./chunk-445IB4DS.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-Z2DWZ5IF.js";
import "./chunk-6RLUKSNK.js";
import "./chunk-UN4ISSP7.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-SIQNRYEG.js";
import "./chunk-TTDEVHSF.js";
import "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-BMGF5ELJ.js";
import "./chunk-JU6MEO4D.js";
import "./chunk-CY5MS6DC.js";
import "./chunk-C6FFJ4QS.js";
import "./chunk-Q4Q32WYV.js";
import "./chunk-A3J7W53Y.js";
import "./chunk-HLF5XJSV.js";
import "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import "./chunk-X7VTUWCX.js";
import "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import "./chunk-GD4XDYZL.js";
import "./chunk-33ECLFFF.js";
import "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/smartMapping/statistics/support/statsWorker.js
async function d2(a) {
  const { attribute: e, features: s } = a, { normalizationType: r, normalizationField: m, minValue: u, maxValue: f2, fieldType: d3, outStatisticTypes: p3 } = e, c2 = await b({ field: e.field, valueExpression: e.valueExpression, normalizationType: r, normalizationField: m, normalizationTotal: e.normalizationTotal, viewInfoParams: e.viewInfoParams, timeZone: e.timeZone, fieldInfos: e.fieldInfos }, s), v2 = d({ normalizationType: r, normalizationField: m, minValue: u, maxValue: f2 }), z2 = { value: 0.5, fieldType: d3 }, T = "esriFieldTypeString" === d3 ? f({ values: c2, supportsNullCount: v2, percentileParams: z2, outStatisticTypes: p3 }) : p({ values: c2, minValue: u, maxValue: f2, useSampleStdDev: !r, supportsNullCount: v2, percentileParams: z2, outStatisticTypes: p3 });
  return C(T, p3, "esriFieldTypeDate" === d3);
}
async function p2(a) {
  const { attribute: e, features: n } = a, t = await b({ field: e.field, field2: e.field2, field3: e.field3, fieldDelimiter: e.fieldDelimiter, valueExpression: e.valueExpression, viewInfoParams: e.viewInfoParams, timeZone: e.timeZone, fieldInfos: e.fieldInfos }, n, false), o = k(t);
  return $(o, e.domains, e.returnAllCodedValues, e.fieldDelimiter);
}
async function c(a) {
  const { attribute: e, features: n } = a, { field: t, normalizationType: o, normalizationField: l, normalizationTotal: s, classificationMethod: r } = e, f2 = await b({ field: t, valueExpression: e.valueExpression, normalizationType: o, normalizationField: l, normalizationTotal: s, viewInfoParams: e.viewInfoParams, timeZone: e.timeZone, fieldInfos: e.fieldInfos }, n), d3 = E(f2, { field: t, normalizationType: o, normalizationField: l, normalizationTotal: s, classificationMethod: r, standardDeviationInterval: e.standardDeviationInterval, numClasses: e.numClasses, minValue: e.minValue, maxValue: e.maxValue });
  return P(d3, r);
}
async function v(a) {
  const { attribute: e, features: n } = a, { field: t, normalizationType: o, normalizationField: l, normalizationTotal: s, classificationMethod: r } = e, m = await b({ field: t, valueExpression: e.valueExpression, normalizationType: o, normalizationField: l, normalizationTotal: s, viewInfoParams: e.viewInfoParams, timeZone: e.timeZone, fieldInfos: e.fieldInfos }, n);
  return U(m, { field: t, normalizationType: o, normalizationField: l, normalizationTotal: s, classificationMethod: r, standardDeviationInterval: e.standardDeviationInterval, numBins: e.numBins, minValue: e.minValue, maxValue: e.maxValue });
}
async function z(i) {
  const { attribute: n, features: t } = i, { field: o, radius: l, transform: s, spatialReference: r } = n, m = n.size ?? [0, 0], u = x(t ?? [], s, r, m);
  return w(u, l ?? void 0, o, m[0], m[1]);
}
export {
  c as classBreaks,
  z as heatmapStatistics,
  v as histogram,
  d2 as summaryStatistics,
  p2 as uniqueValues
};
//# sourceMappingURL=statsWorker-N2PA5VLK.js.map
