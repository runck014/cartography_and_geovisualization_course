import {
  d as d3,
  d2 as d4,
  f as f2
} from "./chunk-FNKIV35S.js";
import {
  h
} from "./chunk-LF6ABEJF.js";
import "./chunk-GYMOXI76.js";
import {
  F
} from "./chunk-LH2VBN6X.js";
import {
  i as i2
} from "./chunk-JCJSNEEC.js";
import "./chunk-5ZJ2MCRU.js";
import "./chunk-OBWNWUWS.js";
import "./chunk-2JZHLJXP.js";
import {
  _
} from "./chunk-6MGQFUK2.js";
import {
  a as a2
} from "./chunk-LXHP4EAG.js";
import {
  l
} from "./chunk-XSZGPGLB.js";
import {
  i
} from "./chunk-Y4I3KFRX.js";
import {
  n4 as n3
} from "./chunk-CGJR3XCF.js";
import {
  j as j2,
  y
} from "./chunk-KVO35ODJ.js";
import {
  n as n2
} from "./chunk-O2HBAYVG.js";
import "./chunk-FKL5AVF4.js";
import "./chunk-CKPBZSTT.js";
import "./chunk-3T3LUDWR.js";
import "./chunk-SZ3BUBIG.js";
import "./chunk-JI3JMSDL.js";
import "./chunk-J3GKRP7Y.js";
import "./chunk-Q3K5MAUZ.js";
import "./chunk-KJNFPIQW.js";
import "./chunk-2XVRGGEF.js";
import "./chunk-DPVSO6BH.js";
import "./chunk-6TRZLPPJ.js";
import "./chunk-U6IFI7EK.js";
import "./chunk-MCHNAU6L.js";
import "./chunk-MYNRH67A.js";
import "./chunk-JMY2H33H.js";
import "./chunk-VBS2Y7KE.js";
import "./chunk-HCAIFU2M.js";
import "./chunk-AHZHHHCW.js";
import "./chunk-O75V7CSP.js";
import "./chunk-RSF7AFW5.js";
import {
  K
} from "./chunk-QOUKS7KN.js";
import {
  M,
  f2 as f,
  m as m2
} from "./chunk-OIUY22MH.js";
import "./chunk-C2RS46RL.js";
import {
  p
} from "./chunk-NML2U2OQ.js";
import "./chunk-HB2JTNV2.js";
import "./chunk-N42IF4WX.js";
import "./chunk-BLBULF2O.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-XJHQ5ZJ7.js";
import "./chunk-BXIXSFGX.js";
import "./chunk-HACIIBEF.js";
import "./chunk-ARQ76THZ.js";
import "./chunk-MBR7IVUG.js";
import "./chunk-TRMW5XQP.js";
import "./chunk-HBU7EMDX.js";
import {
  E
} from "./chunk-JRUJALSE.js";
import "./chunk-KDUYQUT4.js";
import "./chunk-O67P2KE3.js";
import "./chunk-73FHIZIF.js";
import "./chunk-ICIPRMPO.js";
import "./chunk-NEDBRPQY.js";
import "./chunk-EZCH3ZAJ.js";
import "./chunk-QLRZN73K.js";
import "./chunk-CGJUTDVJ.js";
import {
  c as c2
} from "./chunk-JMJOGITH.js";
import "./chunk-QEJMJI2R.js";
import "./chunk-EHD5KM2T.js";
import "./chunk-AEKV7TWM.js";
import "./chunk-QJXYURT2.js";
import "./chunk-JUN5XSQC.js";
import "./chunk-MCZMPI2A.js";
import "./chunk-KV3S4QI2.js";
import "./chunk-ECMDQ4LS.js";
import "./chunk-D6FJTDNK.js";
import "./chunk-LP6TMAPE.js";
import "./chunk-RENLZYKC.js";
import "./chunk-5PCP47ZJ.js";
import "./chunk-IYJHGZBJ.js";
import "./chunk-IJO7BOFI.js";
import "./chunk-NGQEHRBA.js";
import "./chunk-QYSQ6XPQ.js";
import "./chunk-HZRXUNDJ.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-GGPPKSP2.js";
import "./chunk-MR727DXB.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-GNY4KZ34.js";
import "./chunk-43W2AR4R.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-A66MNK5C.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-VBJTBJYL.js";
import "./chunk-GZFJKWTS.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-HFPXZJAJ.js";
import "./chunk-6TU4HBID.js";
import {
  b as b3
} from "./chunk-WGIZLWW7.js";
import "./chunk-PUOCGOJB.js";
import "./chunk-XQH2QDB2.js";
import "./chunk-DBQLTBDH.js";
import "./chunk-AMH7OVBF.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-LXJGKQ4D.js";
import {
  d as d2
} from "./chunk-VILGTHTP.js";
import "./chunk-ATEWWVHG.js";
import "./chunk-LEOFRCUR.js";
import "./chunk-CP4GPQHD.js";
import "./chunk-IZSNXKMJ.js";
import "./chunk-IOKAACTA.js";
import "./chunk-VFTH6C2E.js";
import "./chunk-M5RSIRGD.js";
import "./chunk-D2JPDRZZ.js";
import "./chunk-UYSPJCCV.js";
import "./chunk-SMFCDOAJ.js";
import "./chunk-5A4G4OVM.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-44C2A72D.js";
import "./chunk-DIKY6MBW.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-GGCWKF4X.js";
import "./chunk-6D5XULXX.js";
import "./chunk-445IB4DS.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import "./chunk-H4N5QOMX.js";
import "./chunk-F2LC36UV.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-Z2DWZ5IF.js";
import "./chunk-UN4ISSP7.js";
import "./chunk-E2RPCJOE.js";
import {
  A,
  C,
  d
} from "./chunk-TKY5RBM3.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import {
  V
} from "./chunk-SIQNRYEG.js";
import "./chunk-TTDEVHSF.js";
import "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-JU6MEO4D.js";
import "./chunk-CY5MS6DC.js";
import "./chunk-C6FFJ4QS.js";
import "./chunk-Q4Q32WYV.js";
import {
  j2 as j,
  w
} from "./chunk-A3J7W53Y.js";
import "./chunk-HLF5XJSV.js";
import "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-Y6AYXNMP.js";
import "./chunk-6YWQXXBX.js";
import {
  c
} from "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import {
  U
} from "./chunk-X7VTUWCX.js";
import "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import {
  b2,
  m
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import {
  b,
  e,
  k,
  s as s2
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import {
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";
import {
  has
} from "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryView2D.js
var m3 = class extends b2 {
  constructor() {
    super(...arguments), this.attached = false, this.container = new n2(), this.updateRequested = false, this.type = "imagery", this._bitmapView = new a2();
  }
  destroy() {
    this.attached && (this.detach(), this.attached = false), this.updateRequested = false;
  }
  get updating() {
    return !this.attached || this.isUpdating();
  }
  update(t2) {
    this.strategy.update(t2).catch((t3) => {
      b(t3) || n.getLogger(this).error(t3);
    });
  }
  hitTest(t2) {
    return new d2({ attributes: {}, geometry: t2.clone(), layer: this.layer });
  }
  attach() {
    this.container.addChild(this._bitmapView);
    const t2 = this.layer.version >= 10, e2 = this.layer.version >= 10.1 ? this.layer.imageMaxHeight : 2048, i3 = this.layer.version >= 10.1 ? this.layer.imageMaxWidth : 2048;
    this.strategy = new _({ container: this._bitmapView, imageNormalizationSupported: t2, imageMaxHeight: e2, imageMaxWidth: i3, fetchSource: this._fetchImage.bind(this), requestUpdate: () => this.requestUpdate() });
  }
  detach() {
    this.strategy.destroy(), this._bitmapView.removeAllChildren(), this.container.removeAllChildren(), this.updateRequested = false;
  }
  redraw() {
    this.strategy.updateExports(async (t2) => {
      const { source: e2 } = t2;
      if (!e2 || e2 instanceof ImageBitmap) return;
      const i3 = await this.layer.applyRenderer({ extent: e2.extent, pixelBlock: e2.originalPixelBlock ?? e2.pixelBlock });
      e2.filter = (t3) => this.layer.pixelFilter ? this.layer.applyFilter(t3) : { ...i3, extent: e2.extent };
    }).catch((t2) => {
      b(t2) || n.getLogger(this).error(t2);
    });
  }
  requestUpdate() {
    this.updateRequested || (this.updateRequested = true, this.view.requestUpdate());
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  getPixelData() {
    if (this.updating) return null;
    const t2 = this.strategy.bitmaps;
    if (1 === t2.length && t2[0].source) return { extent: t2[0].source.extent, pixelBlock: t2[0].source.originalPixelBlock };
    if (t2.length > 1) {
      const e2 = this.view.extent, i3 = t2.map((t3) => t3.source).filter((t3) => t3.extent && t3.extent.intersects(e2)).map((t3) => ({ extent: t3.extent, pixelBlock: t3.originalPixelBlock })), r2 = M(i3, e2);
      return null != r2 ? { extent: r2.extent, pixelBlock: r2.pixelBlock } : null;
    }
    return null;
  }
  async _fetchImage(t2, e2, i3, r2) {
    var _a;
    (r2 = r2 || {}).timeExtent = this.timeExtent, r2.requestAsImageElement = true, r2.returnImageBitmap = true;
    const s3 = await this.layer.fetchImage(t2, e2, i3, r2);
    if (s3.imageBitmap) return s3.imageBitmap;
    const a3 = await this.layer.applyRenderer(s3.pixelData, { signal: r2.signal }), o = new l(a3.pixelBlock, (_a = a3.extent) == null ? void 0 : _a.clone(), s3.pixelData.pixelBlock);
    return o.filter = (t3) => this.layer.applyFilter(t3), o;
  }
};
r([m()], m3.prototype, "attached", void 0), r([m()], m3.prototype, "container", void 0), r([m()], m3.prototype, "layer", void 0), r([m()], m3.prototype, "strategy", void 0), r([m()], m3.prototype, "timeExtent", void 0), r([m()], m3.prototype, "view", void 0), r([m()], m3.prototype, "updateRequested", void 0), r([m()], m3.prototype, "updating", null), r([m()], m3.prototype, "type", void 0), m3 = r([a("esri.views.2d.layers.imagery.ImageryView2D")], m3);
var d5 = m3;

// node_modules/@arcgis/core/views/2d/engine/imagery/RasterVFContainer.js
var t = class extends n3 {
  constructor() {
    super(...arguments), this.symbolTypes = ["triangle"];
  }
  prepareRenderPasses(s3) {
    const t2 = s3.registerRenderPass({ name: "imagery (vf)", brushes: [d4], target: () => this.children, drawPhase: E.MAP });
    return [...super.prepareRenderPasses(s3), t2];
  }
  doRender(e2) {
    this.visible && e2.drawPhase === E.MAP && this.symbolTypes.forEach((r2) => {
      e2.renderPass = r2, super.doRender(e2);
    });
  }
};

// node_modules/@arcgis/core/views/2d/layers/imagery/ImageryVFStrategy.js
var c3 = class extends b2 {
  constructor(e2) {
    super(e2), this._loading = null, this.update = k((e3, t2) => this._update(e3, t2).catch((e4) => {
      b(e4) || n.getLogger(this).error(e4);
    }));
  }
  get updating() {
    return !!this._loading;
  }
  redraw(e2) {
    if (!this.container.children.length) return;
    const t2 = this.container.children[0];
    t2.symbolizerParameters = e2, t2.invalidateVAO(), this.container.symbolTypes = "wind_speed" === e2.style ? ["scalar", "triangle"] : "simple_scalar" === e2.style ? ["scalar"] : ["triangle"], this.container.requestRender();
  }
  async _update(e2, t2, i3) {
    if (!e2.stationary) return;
    const { extent: r2, spatialReference: o } = e2.state, s3 = new w({ xmin: r2.xmin, ymin: r2.ymin, xmax: r2.xmax, ymax: r2.ymax, spatialReference: o }), [a3, l2] = e2.state.size;
    this._loading = this.fetchPixels(s3, a3, l2, i3);
    const c4 = await this._loading;
    this._addToDisplay(c4, t2, e2.state), this._loading = null;
  }
  _addToDisplay(e2, t2, i3) {
    if (null == e2.pixelBlock) return this.container.children.forEach((e3) => e3.destroy()), void this.container.removeAllChildren();
    const { extent: r2, pixelBlock: o } = e2, s3 = new f2(o);
    s3.offset = [0, 0], s3.symbolizerParameters = t2, s3.rawPixelData = e2, s3.invalidateVAO(), s3.x = r2.xmin, s3.y = r2.ymax, s3.pixelRatio = i3.pixelRatio, s3.rotation = i3.rotation, s3.resolution = i3.resolution, s3.width = o.width * t2.symbolTileSize, s3.height = o.height * t2.symbolTileSize, this.container.children.forEach((e3) => e3.destroy()), this.container.removeAllChildren(), this.container.symbolTypes = "wind_speed" === t2.style ? ["scalar", "triangle"] : "simple_scalar" === t2.style ? ["scalar"] : ["triangle"], this.container.addChild(s3);
  }
};
r([m()], c3.prototype, "fetchPixels", void 0), r([m()], c3.prototype, "container", void 0), r([m()], c3.prototype, "_loading", void 0), r([m()], c3.prototype, "updating", null), c3 = r([a("esri.views.2d.layers.imagery.ImageryVFStrategy")], c3);
var p2 = c3;

// node_modules/@arcgis/core/views/2d/layers/imagery/VectorFieldView2D.js
var f3 = class extends b2 {
  constructor() {
    super(...arguments), this.attached = false, this.container = new t(), this.type = "imageryVF", this._dataParameters = { exportParametersVersion: 0, bbox: "", symbolTileSize: 0, time: "" }, this._fetchpixels = async (t2, e2, r2, i3) => {
      const s3 = await this._projectFullExtentPromise, { symbolTileSize: a3 } = this.layer.renderer, { extent: o, width: n4, height: l2 } = m2(t2, e2, r2, a3, s3);
      if (null != s3 && !s3.intersects(t2)) return { extent: o, pixelBlock: null };
      const m5 = { bbox: `${o.xmin}, ${o.ymin}, ${o.xmax}, ${o.ymax}`, exportParametersVersion: this.layer.exportImageServiceParameters.version, symbolTileSize: a3, time: JSON.stringify(this.timeExtent || "") };
      if (this._canReuseVectorFieldData(m5)) {
        const t3 = this.getPixelData();
        if (null != t3) {
          if (`${t3.extent.xmin}, ${t3.extent.ymin}, ${t3.extent.xmax}, ${t3.extent.ymax}` === m5.bbox) return t3;
        }
      }
      const { pixelData: c4 } = await this.layer.fetchImage(o, n4, l2, { timeExtent: this.timeExtent, requestAsImageElement: false, signal: i3 });
      this._dataParameters = m5;
      const p3 = c4 == null ? void 0 : c4.pixelBlock;
      if (null == p3) return { extent: o, pixelBlock: null };
      return { extent: o, pixelBlock: "vector-uv" === this.layer.rasterInfo.dataType ? f(p3, "vector-uv") : p3 };
    };
  }
  get updating() {
    return !this.attached || this._strategy.updating;
  }
  attach() {
    this._projectFullExtentPromise = this._getProjectedFullExtent(this.view.spatialReference), this._strategy = new p2({ container: this.container, fetchPixels: this._fetchpixels }), this.addHandles(d(() => this.layer.renderer, (t2) => this._updateSymbolizerParams(t2), A), "attach");
  }
  detach() {
    this._strategy.destroy(), this.container.children.forEach((t2) => t2.destroy()), this.container.removeAllChildren(), this.removeHandles("attach"), this._strategy = this.container = this._projectFullExtentPromise = null;
  }
  getPixelData() {
    var _a;
    const t2 = (_a = this.container.children[0]) == null ? void 0 : _a.rawPixelData;
    if (this.updating || !t2) return null;
    const { extent: e2, pixelBlock: r2 } = t2;
    return { extent: e2, pixelBlock: r2 };
  }
  hitTest(t2) {
    return new d2({ attributes: {}, geometry: t2.clone(), layer: this.layer });
  }
  update(t2) {
    this._strategy.update(t2, this._symbolizerParams).catch((t3) => {
      b(t3) || n.getLogger(this).error(t3);
    });
  }
  redraw() {
    const { renderer: t2 } = this.layer;
    t2 && (this._updateSymbolizerParams(t2), this._strategy.redraw(this._symbolizerParams));
  }
  _canReuseVectorFieldData(t2) {
    const e2 = this._dataParameters.exportParametersVersion === t2.exportParametersVersion, r2 = this._dataParameters.time === t2.time, i3 = this._dataParameters.symbolTileSize === t2.symbolTileSize, s3 = this._dataParameters.bbox === t2.bbox;
    return e2 && r2 && i3 && s3;
  }
  async _getProjectedFullExtent(t2) {
    try {
      return K(this.layer.fullExtent, t2);
    } catch (e2) {
      try {
        const e3 = (await U(this.layer.url, { query: { option: "footprints", outSR: c(t2), f: "json" } })).data.featureCollection.layers[0].layerDefinition.extent;
        return e3 ? w.fromJSON(e3) : null;
      } catch {
        return null;
      }
    }
  }
  _updateSymbolizerParams(t2) {
    "vector-field" === t2.type && (this._symbolizerParams = this.layer.symbolizer.generateWebGLParameters({ pixelBlock: null }));
  }
};
r([m()], f3.prototype, "attached", void 0), r([m()], f3.prototype, "container", void 0), r([m()], f3.prototype, "layer", void 0), r([m()], f3.prototype, "timeExtent", void 0), r([m()], f3.prototype, "type", void 0), r([m()], f3.prototype, "view", void 0), r([m()], f3.prototype, "updating", null), f3 = r([a("esri.views.2d.layers.imagery.VectorFieldView2D")], f3);
var g = f3;

// node_modules/@arcgis/core/views/layers/ImageryLayerView.js
var m4 = (m5) => {
  let u = class extends m5 {
    constructor() {
      super(...arguments), this.view = null;
    }
    get timeExtent() {
      var _a;
      return i2(this.layer, (_a = this.view) == null ? void 0 : _a.timeExtent, this._get("timeExtent"));
    }
    async fetchPopupFeaturesAtLocation(e2, o) {
      const { layer: s3 } = this;
      if (!e2) throw new s("imagerylayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: s3 });
      const { popupEnabled: p3 } = s3, m6 = p(s3, o);
      if (!p3 || null == m6) return [];
      const u2 = await m6.getRequiredFields();
      s2(o);
      const c4 = new b3();
      c4.timeExtent = this.timeExtent, c4.geometry = e2, c4.outFields = u2, c4.outSpatialReference = e2.spatialReference;
      const { resolution: l2, spatialReference: y2 } = this.view, h2 = "2d" === this.view.type ? new j(l2, l2, y2) : new j(0.5 * l2, 0.5 * l2, y2), { returnTopmostRaster: d6, showNoDataRecords: f4 } = m6.layerOptions || { returnTopmostRaster: true, showNoDataRecords: false }, w2 = { returnDomainValues: true, returnTopmostRaster: d6, pixelSize: h2, showNoDataRecords: f4, signal: o == null ? void 0 : o.signal };
      return s3.queryVisibleRasters(c4, w2).then((e3) => e3);
    }
    canResume() {
      var _a;
      return !!super.canResume() && !((_a = this.timeExtent) == null ? void 0 : _a.isEmpty);
    }
  };
  return r([m()], u.prototype, "layer", void 0), r([m()], u.prototype, "suspended", void 0), r([m({ readOnly: true })], u.prototype, "timeExtent", null), r([m()], u.prototype, "view", void 0), u = r([a("esri.views.layers.ImageryLayerView")], u), u;
};

// node_modules/@arcgis/core/views/2d/layers/ImageryLayerView2D.js
var v = class extends m4(i(j2(y))) {
  constructor() {
    super(...arguments), this._exportImageVersion = -1, this._highlightGraphics = new c2(), this._highlightView = void 0, this.layer = null, this.subview = null;
  }
  get pixelData() {
    const { subview: e2 } = this;
    return this.updating || !e2 ? null : "getPixelData" in e2 ? e2.getPixelData() : null;
  }
  update(e2) {
    var _a;
    (_a = this.subview) == null ? void 0 : _a.update(e2);
  }
  attach() {
    this.layer.increaseRasterJobHandlerUsage(), this._setSubView(), this.view && (this._highlightView = new F({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new h(this.view.featuresTilingScheme) }), this.container.addChild(this._highlightView.container)), this.addAttachHandles([d(() => this.layer.exportImageServiceParameters.version, (e2) => {
      e2 && this._exportImageVersion !== e2 && (this._exportImageVersion = e2, this.requestUpdate());
    }, C), d(() => this.timeExtent, (e2) => {
      const { subview: i3 } = this;
      i3 && (i3.timeExtent = e2, "redraw" in i3 ? this.requestUpdate() : i3.redrawOrRefetch());
    }, C), this.layer.on("redraw", () => {
      const { subview: e2 } = this;
      e2 && ("redraw" in e2 ? e2.redraw() : e2.redrawOrRefetch());
    }), d(() => this.layer.renderer, () => this._setSubView())]);
  }
  detach() {
    var _a, _b;
    this.layer.decreaseRasterJobHandlerUsage(), this.container.removeAllChildren(), this._detachSubview(this.subview), (_a = this.subview) == null ? void 0 : _a.destroy(), this.subview = null, (_b = this._highlightView) == null ? void 0 : _b.destroy(), this._exportImageVersion = -1;
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  highlight(e2, s3) {
    if (!((Array.isArray(e2) ? e2[0] : V.isCollection(e2) ? e2.at(0) : e2) instanceof d2)) return e();
    let a3 = [];
    return Array.isArray(e2) || V.isCollection(e2) ? a3 = e2.map((e3) => e3.clone()) : e2 instanceof d2 && (a3 = [e2.clone()]), this._highlightGraphics.addMany(a3), e(() => this._highlightGraphics.removeMany(a3));
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    var _a, _b;
    const e2 = !this.subview || this.subview.updating || !!((_a = this._highlightView) == null ? void 0 : _a.updating);
    return has("esri-2d-log-updating") && console.log(`Updating ImageryLayerView2D (${this.layer.id}): ${e2}
-> subview ${!this.subview || this.subview.updating}
-> higlightView ${(_b = this._highlightView) == null ? void 0 : _b.updating}
`), e2;
  }
  _setSubView() {
    var _a, _b;
    if (!this.view) return;
    const e2 = (_a = this.layer.renderer) == null ? void 0 : _a.type;
    let i3 = "imagery";
    if ("vector-field" === e2 ? i3 = "imageryVF" : "flow" === e2 && (i3 = "flow"), this.subview) {
      const { type: e3 } = this.subview;
      if (e3 === i3) return this._attachSubview(this.subview), void ("flow" === e3 ? this.subview.redrawOrRefetch() : "imagery" === e3 && "lerc" === this.layer.format ? this.subview.redraw() : this.requestUpdate());
      this._detachSubview(this.subview), (_b = this.subview) == null ? void 0 : _b.destroy();
    }
    this.subview = "imagery" === i3 ? new d5({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : "imageryVF" === i3 ? new g({ layer: this.layer, view: this.view, timeExtent: this.timeExtent }) : new d3({ layer: this.layer, layerView: this }), this._attachSubview(this.subview), this.requestUpdate();
  }
  _attachSubview(e2) {
    e2 && !e2.attached && (e2.attach(), e2.attached = true, this.container.addChildAt(e2.container, 0));
  }
  _detachSubview(e2) {
    (e2 == null ? void 0 : e2.attached) && (this.container.removeChild(e2.container), e2.detach(), e2.attached = false);
  }
};
r([m()], v.prototype, "pixelData", null), r([m()], v.prototype, "subview", void 0), v = r([a("esri.views.2d.layers.ImageryLayerView2D")], v);
var b4 = v;
export {
  b4 as default
};
//# sourceMappingURL=ImageryLayerView2D-PZ6OPWZN.js.map
