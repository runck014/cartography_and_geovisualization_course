import {
  a
} from "./chunk-WVQ2KF5K.js";
import {
  t
} from "./chunk-A3GASGJZ.js";
import {
  U,
  l
} from "./chunk-X7VTUWCX.js";
import {
  S
} from "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import "./chunk-GD4XDYZL.js";
import "./chunk-33ECLFFF.js";
import "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/rest/query/operations/queryAttachments.js
function s(t2) {
  const o = t2.toJSON();
  return o.attachmentTypes && (o.attachmentTypes = o.attachmentTypes.join(",")), o.keywords && (o.keywords = o.keywords.join(",")), o.globalIds && (o.globalIds = o.globalIds.join(",")), o.objectIds && (o.objectIds = o.objectIds.join(",")), o.size && (o.size = o.size.join(",")), o;
}
function a2(o, n) {
  const s2 = {};
  for (const a3 of n) {
    const { parentObjectId: n2, parentGlobalId: c2, attachmentInfos: m2 } = a3;
    for (const a4 of m2) {
      const { id: m3 } = a4, p = S(l(`${o.path}/${n2}/attachments/${m3}`)), i = a.fromJSON(a4);
      i.set({ url: p, parentObjectId: n2, parentGlobalId: c2 }), s2[n2] ? s2[n2].push(i) : s2[n2] = [i];
    }
  }
  return s2;
}
function c(t2, e, r) {
  let a3 = { query: t({ ...t2.query, f: "json", ...s(e) }) };
  return r && (a3 = { ...r, ...a3, query: { ...r.query, ...a3.query } }), U(t2.path + "/queryAttachments", a3).then((t3) => t3.data.attachmentGroups);
}
async function m(t2, e, n) {
  const { objectIds: r } = e, s2 = [];
  for (const a3 of r) s2.push(U(t2.path + "/" + a3 + "/attachments", n));
  return Promise.all(s2).then((t3) => r.map((o, e2) => ({ parentObjectId: o, attachmentInfos: t3[e2].data.attachmentInfos })));
}
export {
  c as executeAttachmentQuery,
  m as fetchAttachments,
  a2 as processAttachmentQueryResult
};
//# sourceMappingURL=queryAttachments-6OOIQNLK.js.map
