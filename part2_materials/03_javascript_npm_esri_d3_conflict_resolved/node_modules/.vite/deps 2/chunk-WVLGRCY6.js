import {
  r as r3
} from "./chunk-MCZMPI2A.js";
import {
  P,
  d,
  p
} from "./chunk-TKY5RBM3.js";
import {
  b2 as b,
  m,
  r as r2,
  s3 as s
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  l as l2
} from "./chunk-L6CCOEVE.js";
import {
  C,
  S,
  c2 as c,
  u
} from "./chunk-GRW2QIBT.js";
import {
  l
} from "./chunk-R2PAF6JT.js";
import {
  n as n2
} from "./chunk-6WE7SNQY.js";
import {
  n2 as n
} from "./chunk-PKLD5YJF.js";

// node_modules/@arcgis/core/views/support/Yield.js
var o = Symbol("Yield");

// node_modules/@arcgis/core/layers/support/PromiseQueue.js
var i = class {
  constructor() {
    this._tasks = new Array(), this._runningTasks = r3(0);
  }
  get length() {
    return this._tasks.length;
  }
  get running() {
    return this._runningTasks.value > 0;
  }
  destroy() {
    this.cancelAll();
  }
  runTask(s2) {
    if (0 === this.length) return o;
    for (; !s2.done && this._process(s2); ) s2.madeProgress();
  }
  push(s2, t, e2) {
    return ++this._runningTasks.value, new Promise((r4, n3) => this._tasks.push(new a2(r4, n3, s2, t, e2))).finally(() => --this._runningTasks.value);
  }
  unshift(s2, t, e2) {
    return ++this._runningTasks.value, new Promise((r4, n3) => this._tasks.unshift(new a2(r4, n3, s2, t, e2))).finally(() => --this._runningTasks.value);
  }
  _process(r4) {
    var _a;
    if (0 === this._tasks.length) return false;
    const n3 = this._tasks.shift();
    try {
      const i2 = c(n3.signal);
      if (i2 && !n3.abortCallback) n3.reject(u());
      else {
        const s2 = i2 ? (_a = n3.abortCallback) == null ? void 0 : _a.call(n3, u()) : n3.callback(r4);
        S(s2) ? s2.then(n3.resolve, n3.reject) : n3.resolve(s2);
      }
    } catch (i2) {
      n3.reject(i2);
    }
    return true;
  }
  cancelAll() {
    const s2 = u();
    for (const t of this._tasks) if (t.abortCallback) {
      const e2 = t.abortCallback(s2);
      t.resolve(e2);
    } else t.reject(s2);
    this._tasks.length = 0;
  }
};
var a2 = class {
  constructor(s2, t, e2, r4 = void 0, n3 = void 0) {
    this.resolve = s2, this.reject = t, this.callback = e2, this.signal = r4, this.abortCallback = n3;
  }
};

// node_modules/@arcgis/core/views/support/debugFlags.js
var e = class extends b {
  constructor() {
    super(...arguments), this.SCHEDULER_LOG_SLOW_TASKS = false, this.FEATURE_SERVICE_SNAPPING_SOURCE_TILE_TREE_SHOW_TILES = false;
  }
};
r([m()], e.prototype, "SCHEDULER_LOG_SLOW_TASKS", void 0), r([m()], e.prototype, "FEATURE_SERVICE_SNAPPING_SOURCE_TILE_TREE_SHOW_TILES", void 0), e = r([a("esri.views.support.debugFlags")], e);
var E = new e();

// node_modules/@arcgis/core/views/support/RenderState.js
var I;
!function(I3) {
  I3[I3.ANIMATING = 0] = "ANIMATING", I3[I3.INTERACTING = 1] = "INTERACTING", I3[I3.IDLE = 2] = "IDLE";
}(I || (I = {}));

// node_modules/@arcgis/core/views/support/Scheduler.js
function I2() {
  return new U.Scheduler();
}
var g;
!function(e2) {
  e2.RESOURCE_CONTROLLER_IMMEDIATE = "immediate", e2.RESOURCE_CONTROLLER = "schedule", e2.SLIDE = "slide", e2.STREAM_DATA_LOADER = "stream loader", e2.ELEVATION_QUERY = "elevation query", e2.TERRAIN_SURFACE = "terrain", e2.SURFACE_GEOMETRY_UPDATES = "surface geometry updates", e2.LOD_RENDERER = "LoD renderer", e2.GRAPHICS_CORE = "Graphics3D", e2.I3S_CONTROLLER = "I3S", e2.POINT_CLOUD_LAYER = "point cloud", e2.FEATURE_TILE_FETCHER = "feature fetcher", e2.OVERLAY = "overlay", e2.STAGE = "stage", e2.GRAPHICS_DECONFLICTOR = "graphics deconflictor", e2.FILTER_VISIBILITY = "Graphics3D filter visibility", e2.SCALE_VISIBILITY = "Graphics3D scale visibility", e2.FRUSTUM_VISIBILITY = "Graphics3D frustum visibility", e2.POINT_OF_INTEREST_FREQUENT = "POI frequent", e2.POINT_OF_INTEREST_INFREQUENT = "POI infrequent", e2.LABELER = "labeler", e2.FEATURE_QUERY_ENGINE = "feature query", e2.FEATURE_TILE_TREE = "feature tile tree", e2.FEATURE_TILE_TREE_ACTIVE = "fast feature tile tree", e2.ELEVATION_ALIGNMENT = "elevation alignment", e2.ELEVATION_ALIGNMENT_SCENE = "elevation alignment scene", e2.TEXT_TEXTURE_ATLAS = "text texture atlas", e2.TEXTURE_UNLOAD = "texture unload", e2.LINE_OF_SIGHT_TOOL = "line of sight tool", e2.LINE_OF_SIGHT_TOOL_INTERACTIVE = "interactive line of sight tool", e2.ELEVATION_PROFILE = "elevation profile", e2.SNAPPING = "snapping", e2.SHADOW_ACCUMULATOR = "shadow accumulator", e2.CLOUDS_GENERATOR = "clouds generator", e2.MAPVIEW_FETCH_QUEUE = "mapview fetch queue", e2.MAPVIEW_LAYERVIEW_UPDATE = "mapview layerview update", e2.MAPVIEW_VECTOR_TILE_PARSING_QUEUE = "mapview vector tile parsing queue", e2[e2.NONE = 0] = "NONE", e2[e2.TEST_PRIO = 1] = "TEST_PRIO";
}(g || (g = {}));
var R = 0;
var p2 = /* @__PURE__ */ new Map([[g.RESOURCE_CONTROLLER_IMMEDIATE, R], [g.RESOURCE_CONTROLLER, 4], [g.SLIDE, R], [g.STREAM_DATA_LOADER, R], [g.ELEVATION_QUERY, R], [g.TERRAIN_SURFACE, 1], [g.SURFACE_GEOMETRY_UPDATES, 1], [g.LOD_RENDERER, 2], [g.GRAPHICS_CORE, 2], [g.I3S_CONTROLLER, 2], [g.POINT_CLOUD_LAYER, 2], [g.FEATURE_TILE_FETCHER, 2], [g.CLOUDS_GENERATOR, 2], [g.OVERLAY, 4], [g.STAGE, 4], [g.GRAPHICS_DECONFLICTOR, 4], [g.FILTER_VISIBILITY, 4], [g.SCALE_VISIBILITY, 4], [g.FRUSTUM_VISIBILITY, 4], [g.POINT_OF_INTEREST_FREQUENT, 6], [g.POINT_OF_INTEREST_INFREQUENT, 30], [g.LABELER, 8], [g.FEATURE_QUERY_ENGINE, 8], [g.FEATURE_TILE_TREE, 16], [g.FEATURE_TILE_TREE_ACTIVE, R], [g.ELEVATION_ALIGNMENT, 12], [g.ELEVATION_ALIGNMENT_SCENE, 14], [g.TEXT_TEXTURE_ATLAS, 12], [g.TEXTURE_UNLOAD, 12], [g.LINE_OF_SIGHT_TOOL, 16], [g.LINE_OF_SIGHT_TOOL_INTERACTIVE, R], [g.SNAPPING, R], [g.SHADOW_ACCUMULATOR, 30], [g.MAPVIEW_FETCH_QUEUE, R], [g.MAPVIEW_LAYERVIEW_UPDATE, 2], [g.MAPVIEW_VECTOR_TILE_PARSING_QUEUE, R]]);
function A(e2) {
  return p2.has(e2) ? p2.get(e2) : "number" == typeof e2 ? e2 : 1;
}
var f = n2(6.5);
var L = n2(1);
var N = n2(30);
var O = n2(1e3 / 30);
var S2 = n2(100);
var b2 = 0.9;
var U;
var k;
!function(a3) {
  class n3 {
    get updating() {
      return this._updating.value;
    }
    _updatingChanged() {
      this._updating.value = this._tasks.some((e2) => e2.needsUpdate);
    }
    constructor() {
      this._updating = r3(true), this._microTaskQueued = false, this._frameNumber = 0, this.performanceInfo = { total: new s("total"), tasks: /* @__PURE__ */ new Map() }, this._frameTaskTimes = /* @__PURE__ */ new Map(), this._budget = new I3(), this._state = I.INTERACTING, this._tasks = new l2(), this._runQueue = new l2(), this._load = 0, this._idleStateCallbacks = new l2(), this._idleUpdatesStartFired = false, this._forceTask = false, this._debug = false, this._debugHandle = d(() => E.SCHEDULER_LOG_SLOW_TASKS, (e2) => this._debug = e2, P);
      for (const e2 of Object.keys(g)) this.performanceInfo.tasks.set(g[e2], new s(g[e2]));
    }
    destroy() {
      this._tasks.toArray().forEach((e2) => e2.remove()), this._tasks.clear(), l(this._debugHandle), this._microTaskQueued = false, this._updatingChanged();
    }
    taskRunningChanged(e2) {
      this._updatingChanged(), e2 && this._budget.remaining > 0 && !this._microTaskQueued && (this._microTaskQueued = true, queueMicrotask(() => {
        this._microTaskQueued && (this._microTaskQueued = false, this._budget.remaining > 0 && this._schedule() && this.frame());
      }));
    }
    registerTask(e2, t) {
      const s2 = new _(this, e2, t);
      return this._tasks.push(s2), this._updatingChanged(), this.performanceInfo.tasks.has(e2) || this.performanceInfo.tasks.set(e2, new s(e2)), s2;
    }
    registerIdleStateCallbacks(e2, t) {
      const s2 = { idleBegin: e2, idleEnd: t };
      this._idleStateCallbacks.push(s2), this.state === I.IDLE && this._idleUpdatesStartFired && s2.idleBegin();
      const r4 = this;
      return { remove: () => this._removeIdleStateCallbacks(s2), set idleBegin(e3) {
        r4._idleUpdatesStartFired && (s2.idleEnd(), r4._state === I.IDLE && e3()), s2.idleBegin = e3;
      }, set idleEnd(e3) {
        s2.idleEnd = e3;
      } };
    }
    get load() {
      return this._load;
    }
    set state(e2) {
      this._state !== e2 && (this._state = e2, this.state !== I.IDLE && this._idleUpdatesStartFired && (this._idleUpdatesStartFired = false, this._idleStateCallbacks.forAll((e3) => e3.idleEnd())));
    }
    get state() {
      return this._state;
    }
    updateBudget(e2) {
      this._test && (this._test.usedBudget = 0), ++this._frameNumber;
      let t = f, s2 = e2.frameDuration, r4 = L;
      switch (this.state) {
        case I.IDLE:
          t = n2(0), s2 = n2(Math.max(S2, e2.frameDuration)), r4 = N;
          break;
        case I.INTERACTING:
          s2 = n2(Math.max(O, e2.frameDuration));
        case I.ANIMATING:
      }
      return s2 = n2(s2 - e2.elapsedFrameTime - t), this.state !== I.IDLE && s2 < L && !this._forceTask ? (this._forceTask = true, false) : (s2 = n2(Math.max(s2, r4)), this._budget.reset(s2, this.state), this._updateLoad(), this._schedule());
    }
    frame() {
      switch (this._forceTask = false, this._microTaskQueued = false, this.state) {
        case I.IDLE:
          this._idleUpdatesStartFired || (this._idleUpdatesStartFired = true, this._idleStateCallbacks.forAll((e2) => e2.idleBegin())), this._runIdle();
          break;
        case I.INTERACTING:
          this._runInteracting();
          break;
        default:
          this._runAnimating();
      }
      this._test && (this._test.usedBudget = this._budget.elapsed);
    }
    stopFrame() {
      this._budget.reset(n2(0), this._state), this._budget.madeProgress();
    }
    _removeIdleStateCallbacks(e2) {
      this._idleUpdatesStartFired && e2.idleEnd(), this._idleStateCallbacks.removeUnordered(e2);
    }
    removeTask(e2) {
      this._tasks.removeUnordered(e2), this._runQueue.removeUnordered(e2), this._updatingChanged();
    }
    _updateTask(e2) {
      this._tasks.forAll((t) => {
        t.name === e2 && t.setPriority(e2);
      });
    }
    _getState(e2) {
      if (this._runQueue.some((t2) => t2.name === e2)) return k.SCHEDULED;
      let t = k.IDLE;
      return this._tasks.forAll((s2) => {
        s2.name === e2 && s2.needsUpdate && (s2.schedulePriority <= 1 ? t = k.READY : t !== k.READY && (t = k.WAITING));
      }), t;
    }
    _getRuntime(e2) {
      let t = 0;
      return this._tasks.forAll((s2) => {
        s2.name === e2 && (t += s2.runtime);
      }), t;
    }
    _resetRuntimes() {
      this._tasks.forAll((e2) => e2.runtime = 0);
    }
    _getRunning() {
      const e2 = /* @__PURE__ */ new Map();
      if (this._tasks.forAll((t2) => {
        t2.needsUpdate && e2.set(t2.name, (e2.get(t2.name) || 0) + 1);
      }), 0 === e2.size) return null;
      let t = "";
      return e2.forEach((e3, s2) => {
        t += e3 > 1 ? ` ${e3}x ${s2}` : ` ${s2}`;
      }), t;
    }
    _runIdle() {
      this._run();
    }
    _runInteracting() {
      this._run();
    }
    _runAnimating() {
      this._run();
    }
    _updateLoad() {
      const e2 = this._tasks.reduce((e3, t) => t.needsUpdate ? ++e3 : e3, 0);
      this._load = this._load * b2 + e2 * (1 - b2);
    }
    _schedule() {
      for (this._runQueue.filterInPlace((e2) => !!e2.needsUpdate || (e2.schedulePriority = e2.basePriority, false)), this._tasks.forAll((e2) => {
        e2.basePriority === R && e2.needsUpdate && !this._runQueue.includes(e2) && e2.blockFrame !== this._frameNumber && this._runQueue.unshift(e2);
      }); 0 === this._runQueue.length; ) {
        let e2 = false, t = 0;
        if (this._tasks.forAll((s2) => {
          if (s2.needsUpdate && 0 !== s2.schedulePriority && s2.basePriority !== R && s2.blockFrame !== this._frameNumber) if (e2 = true, t = Math.max(t, s2.basePriority), 1 === s2.schedulePriority) s2.schedulePriority = 0, this._runQueue.push(s2);
          else --s2.schedulePriority;
        }), !e2) return this._updatingChanged(), false;
      }
      return this._updatingChanged(), true;
    }
    _run() {
      const e2 = this._budget.now();
      this._startFrameTaskTimes();
      do {
        for (; this._runQueue.length > 0; ) {
          const r4 = this._budget.now(), i2 = this._runQueue.pop();
          this._budget.resetProgress();
          try {
            i2.task.runTask(this._budget) === o && (i2.blockFrame = this._frameNumber);
          } catch (s2) {
            n.getLogger("esri.views.support.Scheduler").error(`Exception in task "${i2.name}"`, s2), i2.blockFrame = this._frameNumber;
          }
          !this._budget.hasProgressed && i2.blockFrame !== this._frameNumber && i2.needsUpdate && (i2.name, g.I3S_CONTROLLER, i2.blockFrame = this._frameNumber), i2.schedulePriority = i2.basePriority;
          const a4 = this._budget.now() - r4;
          if (i2.runtime += a4, this._frameTaskTimes.set(i2.priority, this._frameTaskTimes.get(i2.priority) + a4), this._budget.remaining <= 0) return this._updatingChanged(), void this._recordFrameTaskTimes(this._budget.now() - e2);
        }
      } while (this._schedule());
      this._updatingChanged(), this._recordFrameTaskTimes(this._budget.now() - e2);
    }
    _startFrameTaskTimes() {
      for (const e2 of Object.keys(g)) this._frameTaskTimes.set(g[e2], 0);
    }
    _recordFrameTaskTimes(e2) {
      this._frameTaskTimes.forEach((e3, t) => this.performanceInfo.tasks.get(t).push(e3)), this.performanceInfo.total.push(e2);
    }
    get test() {
      return this._test;
    }
  }
  a3.Scheduler = n3;
  class _ {
    get task() {
      return this._task.value;
    }
    get updating() {
      return this._queue.running;
    }
    constructor(t, s2, r4) {
      this._scheduler = t, this.name = s2, this.blockFrame = 0, this.runtime = 0, this._queue = new i(), this._handles = new r2(), this._basePriority = A(s2), this.schedulePriority = this._basePriority, this._task = r3(null != r4 ? r4 : this._queue), this._handles.add(p(() => this.task.running, (e2) => t.taskRunningChanged(e2)));
    }
    remove() {
      this.processQueue(C2), this._scheduler.removeTask(this), this.schedule = F.schedule, this.reschedule = F.reschedule, this._handles.destroy();
    }
    get basePriority() {
      return this._basePriority;
    }
    setPriority(e2) {
      if (this.name === e2) return;
      this.name = e2;
      const t = A(e2);
      this._basePriority !== R && 0 === this.schedulePriority || (this.schedulePriority = t), this._basePriority = t;
    }
    get priority() {
      return this.name;
    }
    set priority(e2) {
      this.setPriority(e2);
    }
    get needsUpdate() {
      return this.updating || this.task.running;
    }
    schedule(e2, t, s2) {
      return this._queue.push(e2, t, s2);
    }
    reschedule(e2, t, s2) {
      return this._queue.unshift(e2, t, s2);
    }
    processQueue(e2) {
      return this._queue.runTask(e2);
    }
  }
  class I3 {
    constructor() {
      this._begin = "undefined" != typeof performance ? performance.now() : 0, this._budget = 0, this._state = I.IDLE, this._done = false, this._progressed = false, this._enabled = true;
    }
    run(e2) {
      return !this.done && (true === e2() && this.madeProgress(), true);
    }
    get done() {
      return this._done;
    }
    get budget() {
      return this._budget;
    }
    madeProgress() {
      return this._progressed = true, this._done = this.elapsed >= this._budget && this._enabled, this._done;
    }
    get state() {
      return this._state;
    }
    get enabled() {
      return this._enabled;
    }
    set enabled(e2) {
      this._enabled = e2;
    }
    reset(e2, t) {
      this._begin = this.now(), this._budget = e2, this._state = t, this.resetProgress();
    }
    get remaining() {
      return Math.max(this._budget - this.elapsed, 0);
    }
    now() {
      return performance.now();
    }
    get elapsed() {
      return this.now() - this._begin;
    }
    resetProgress() {
      this._progressed = false, this._done = false;
    }
    get hasProgressed() {
      return this._progressed;
    }
  }
  a3.Budget = I3;
}(U || (U = {})), function(e2) {
  e2.SCHEDULED = "s", e2.READY = "r", e2.WAITING = "w", e2.IDLE = "i";
}(k || (k = {}));
var C2 = (() => {
  const e2 = new U.Budget();
  return e2.enabled = false, e2;
})();
var P2 = class {
  remove() {
  }
  processQueue() {
  }
  schedule(e2, t, s2) {
    try {
      if (c(t)) {
        const e3 = u();
        return s2 ? Promise.resolve(s2(e3)) : Promise.reject(e3);
      }
      return C(e2(C2));
    } catch (r4) {
      return Promise.reject(r4);
    }
  }
  reschedule(e2, t, s2) {
    return this.schedule(e2, t, s2);
  }
};
var F = new P2();

export {
  I,
  I2,
  g,
  C2 as C,
  F
};
//# sourceMappingURL=chunk-WVLGRCY6.js.map
