import {
  S as S2,
  d as d2,
  g as g2,
  j as j2
} from "./chunk-R7P3RPT7.js";
import "./chunk-YYZ2CTYE.js";
import "./chunk-HZRXUNDJ.js";
import "./chunk-XKMN3LJN.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-GGPPKSP2.js";
import "./chunk-JHXGQ3AW.js";
import "./chunk-MR727DXB.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-GNY4KZ34.js";
import "./chunk-WPERPIJF.js";
import "./chunk-QKS6PIY6.js";
import "./chunk-R5BTSPWT.js";
import "./chunk-Z2L6EED4.js";
import "./chunk-43W2AR4R.js";
import "./chunk-X5EOLPIE.js";
import "./chunk-VNPGSD2C.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-CE7WVJQV.js";
import {
  f as f2
} from "./chunk-LCFK6PEB.js";
import "./chunk-GJTB7YCT.js";
import "./chunk-LQEYS467.js";
import "./chunk-A66MNK5C.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-RCGJPJRB.js";
import "./chunk-5CRXWQ3Y.js";
import {
  j
} from "./chunk-F3W2DG3D.js";
import {
  l
} from "./chunk-YMJZWW2N.js";
import "./chunk-7Q4JSL7R.js";
import "./chunk-VBJTBJYL.js";
import {
  t
} from "./chunk-ES2OYM5K.js";
import {
  b
} from "./chunk-JXPOROPE.js";
import {
  y
} from "./chunk-OPBXQTOC.js";
import "./chunk-DKMSVKV3.js";
import "./chunk-YIIXBP6I.js";
import {
  S
} from "./chunk-LN6VH2LB.js";
import "./chunk-GZFJKWTS.js";
import "./chunk-2DHZIDQK.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-XQH2QDB2.js";
import "./chunk-LPNAPHOF.js";
import "./chunk-AMH7OVBF.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-VILGTHTP.js";
import "./chunk-ATEWWVHG.js";
import "./chunk-LEOFRCUR.js";
import "./chunk-CP4GPQHD.js";
import "./chunk-IZSNXKMJ.js";
import "./chunk-IOKAACTA.js";
import "./chunk-VFTH6C2E.js";
import "./chunk-M5RSIRGD.js";
import "./chunk-UYSPJCCV.js";
import {
  n
} from "./chunk-BB6L755V.js";
import "./chunk-SMFCDOAJ.js";
import {
  f
} from "./chunk-2HEBE37N.js";
import "./chunk-5A4G4OVM.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-44C2A72D.js";
import "./chunk-DIKY6MBW.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-GGCWKF4X.js";
import "./chunk-6D5XULXX.js";
import "./chunk-445IB4DS.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import "./chunk-H4N5QOMX.js";
import "./chunk-F2LC36UV.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-Z2DWZ5IF.js";
import "./chunk-6RLUKSNK.js";
import "./chunk-UN4ISSP7.js";
import "./chunk-E2RPCJOE.js";
import {
  C,
  d,
  v,
  w as w2
} from "./chunk-TKY5RBM3.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import {
  V
} from "./chunk-SIQNRYEG.js";
import {
  o as o2
} from "./chunk-TTDEVHSF.js";
import "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-BMGF5ELJ.js";
import "./chunk-JU6MEO4D.js";
import {
  m as m2
} from "./chunk-CY5MS6DC.js";
import "./chunk-C6FFJ4QS.js";
import "./chunk-Q4Q32WYV.js";
import {
  w as w3
} from "./chunk-A3J7W53Y.js";
import {
  o
} from "./chunk-HLF5XJSV.js";
import {
  g,
  r as r2
} from "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-Y6AYXNMP.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import "./chunk-X7VTUWCX.js";
import {
  qt
} from "./chunk-QS62R4CH.js";
import {
  u2 as u
} from "./chunk-VU6O6TFT.js";
import {
  m
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a,
  w
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import {
  a as a2
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import {
  c
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/layers/support/KMLSublayer.js
var j3;
var S3 = j3 = class extends o2.EventedMixin(u(m2)) {
  constructor(...e) {
    super(...e), this.description = null, this.fullExtent = null, this.id = null, this.networkLink = null, this.parent = null, this.sublayers = null, this.title = null, this.sourceJSON = null, this.layer = null, this.addHandles([v(() => this.sublayers, "after-add", ({ item: e2 }) => {
      e2.parent = this, e2.layer = this.layer;
    }, C), v(() => this.sublayers, "after-remove", ({ item: e2 }) => {
      e2.layer = e2.parent = null;
    }, C), d(() => this.sublayers, (e2, t2) => {
      if (t2) for (const r3 of t2) r3.layer = r3.parent = null;
      if (e2) for (const r3 of e2) r3.parent = this, r3.layer = this.layer;
    }, C), d(() => this.layer, (e2) => {
      if (this.sublayers) for (const t2 of this.sublayers) t2.layer = e2;
    }, C)]);
  }
  initialize() {
    w2(() => this.networkLink).then(() => w2(() => true === this.visible)).then(() => this.load());
  }
  load(e) {
    var _a;
    if (!this.networkLink) return;
    if (this.networkLink.viewFormat) return;
    const r3 = null != e ? e.signal : null, s = this._fetchService(((_a = this._get("networkLink")) == null ? void 0 : _a.href) ?? "", r3).then((e2) => {
      var _a2;
      const r4 = j2(e2.sublayers);
      this.fullExtent = w3.fromJSON(r4), this.sourceJSON = e2;
      const s2 = w(V.ofType(j3), S2(j3, e2));
      this.sublayers ? this.sublayers.addMany(s2) : this.sublayers = s2, (_a2 = this.layer) == null ? void 0 : _a2.emit("sublayer-update"), this.layer && this.layer.notifyChange("visibleSublayers");
    });
    return this.addResolvingPromise(s), Promise.resolve(this);
  }
  get visible() {
    return this._get("visible");
  }
  set visible(e) {
    this._get("visible") !== e && (this._set("visible", e), this.layer && this.layer.notifyChange("visibleSublayers"));
  }
  readVisible(e, t2) {
    return !!t2.visibility;
  }
  _fetchService(e, t2) {
    return g2(e, this.layer.outSpatialReference, this.layer.refreshInterval, t2).then((e2) => d2(e2.data));
  }
};
r([m()], S3.prototype, "description", void 0), r([m({ type: w3 })], S3.prototype, "fullExtent", void 0), r([m()], S3.prototype, "id", void 0), r([m({ readOnly: true, value: null })], S3.prototype, "networkLink", void 0), r([m({ json: { write: { allowNull: true } } })], S3.prototype, "parent", void 0), r([m({ type: V.ofType(S3), json: { write: { allowNull: true } } })], S3.prototype, "sublayers", void 0), r([m({ value: null, json: { read: { source: "name", reader: (e) => c(e) } } })], S3.prototype, "title", void 0), r([m({ value: true })], S3.prototype, "visible", null), r([o("visible", ["visibility"])], S3.prototype, "readVisible", null), r([m()], S3.prototype, "sourceJSON", void 0), r([m()], S3.prototype, "layer", void 0), S3 = j3 = r([a("esri.layers.support.KMLSublayer")], S3);
var k = S3;

// node_modules/@arcgis/core/layers/KMLLayer.js
var w4 = ["kml", "xml"];
var F = class extends l(f2(t(b(j(S(f)))))) {
  constructor(...e) {
    super(...e), this._visibleFolders = [], this.allSublayers = new n({ getCollections: () => [this.sublayers], getChildrenFunction: (e2) => e2.sublayers }), this.outSpatialReference = g.WGS84, this.path = null, this.legendEnabled = false, this.operationalLayerType = "KML", this.sublayers = null, this.type = "kml", this.url = null;
  }
  initialize() {
    this.addHandles([d(() => this.sublayers, (e, r3) => {
      r3 && r3.forEach((e2) => {
        e2.parent = null, e2.layer = null;
      }), e && e.forEach((e2) => {
        e2.parent = this, e2.layer = this;
      });
    }, C), this.on("sublayer-update", () => this.notifyChange("fullExtent"))]);
  }
  normalizeCtorArgs(e, r3) {
    return "string" == typeof e ? { url: e, ...r3 } : e;
  }
  readSublayersFromItemOrWebMap(e, r3) {
    this._visibleFolders = r3.visibleFolders;
  }
  readSublayers(e, r3, t2) {
    return S2(k, r3, t2, this._visibleFolders);
  }
  writeSublayers(e, r3) {
    const t2 = [], o3 = e.toArray();
    for (; o3.length; ) {
      const e2 = o3[0];
      e2.networkLink || (e2.visible && t2.push(e2.id), e2.sublayers && o3.push(...e2.sublayers.toArray())), o3.shift();
    }
    r3.visibleFolders = t2;
  }
  get title() {
    const e = this._get("title");
    return e && "defaults" !== this.originOf("title") ? e : this.url ? qt(this.url, w4) || "KML" : e;
  }
  set title(e) {
    this._set("title", e);
  }
  get visibleSublayers() {
    const e = this.sublayers, r3 = [], t2 = (e2) => {
      e2.visible && (r3.push(e2), e2.sublayers && e2.sublayers.forEach(t2));
    };
    return e && e.forEach(t2), r3;
  }
  get fullExtent() {
    return this._recomputeFullExtent();
  }
  load(e) {
    const r3 = null != e ? e.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["KML"], supportsData: false }, e).catch(a2).then(() => this._fetchService(r3))), Promise.resolve(this);
  }
  destroy() {
    super.destroy(), this.allSublayers.destroy();
  }
  async _fetchService(e) {
    const r3 = await Promise.resolve().then(() => this.resourceInfo ? { ssl: false, data: this.resourceInfo } : g2(this.url ?? "", this.outSpatialReference, this.refreshInterval, e)), t2 = d2(r3.data);
    t2 && this.read(t2, { origin: "service" });
  }
  _recomputeFullExtent() {
    let e = null;
    null != this.extent && (e = this.extent.clone());
    const r3 = (t2) => {
      if (t2.sublayers) for (const o3 of t2.sublayers.items) r3(o3), o3.visible && o3.fullExtent && (null != e ? e.union(o3.fullExtent) : e = o3.fullExtent.clone());
    };
    return r3(this), e;
  }
};
r([m({ readOnly: true })], F.prototype, "allSublayers", void 0), r([m({ type: g })], F.prototype, "outSpatialReference", void 0), r([m({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], F.prototype, "path", void 0), r([m({ readOnly: true, json: { read: false, write: false } })], F.prototype, "legendEnabled", void 0), r([m({ type: ["show", "hide", "hide-children"] })], F.prototype, "listMode", void 0), r([m({ type: ["KML"] })], F.prototype, "operationalLayerType", void 0), r([m({})], F.prototype, "resourceInfo", void 0), r([m({ type: V.ofType(k), json: { write: { ignoreOrigin: true } } })], F.prototype, "sublayers", void 0), r([o(["web-map", "portal-item"], "sublayers", ["visibleFolders"])], F.prototype, "readSublayersFromItemOrWebMap", null), r([o("service", "sublayers", ["sublayers"])], F.prototype, "readSublayers", null), r([r2("sublayers")], F.prototype, "writeSublayers", null), r([m({ readOnly: true, json: { read: false } })], F.prototype, "type", void 0), r([m({ json: { origins: { "web-map": { read: { source: "title" } } }, write: { ignoreOrigin: true } } })], F.prototype, "title", null), r([m(y)], F.prototype, "url", void 0), r([m({ readOnly: true })], F.prototype, "visibleSublayers", null), r([m({ type: w3 })], F.prototype, "extent", void 0), r([m()], F.prototype, "fullExtent", null), F = r([a("esri.layers.KMLLayer")], F);
var O = F;
export {
  O as default
};
//# sourceMappingURL=KMLLayer-YX2XC4RE.js.map
