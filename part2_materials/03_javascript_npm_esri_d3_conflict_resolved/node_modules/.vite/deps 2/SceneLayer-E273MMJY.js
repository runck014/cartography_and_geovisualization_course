import {
  j as j3
} from "./chunk-D5SRU7QZ.js";
import "./chunk-USAAGK2Q.js";
import {
  i as i3,
  m as m2,
  t2 as t6
} from "./chunk-MEML4RN7.js";
import {
  n as n4,
  p as p8
} from "./chunk-NML2U2OQ.js";
import {
  V as V3
} from "./chunk-H2HEE74G.js";
import "./chunk-HB2JTNV2.js";
import "./chunk-R7BLUDCP.js";
import "./chunk-DLJHW32W.js";
import "./chunk-IWXHREP5.js";
import "./chunk-57M37V54.js";
import {
  a as a4,
  m as m3,
  p as p7,
  y
} from "./chunk-FSFFMQ4X.js";
import {
  R,
  V as V4
} from "./chunk-UFLCSFX7.js";
import {
  $ as $2,
  P,
  w as w2
} from "./chunk-3ZPRTR7X.js";
import "./chunk-CQ5ECUDF.js";
import "./chunk-374X2AXO.js";
import "./chunk-W3O5CFJ6.js";
import "./chunk-HRP7POO2.js";
import "./chunk-JVGNMUKK.js";
import "./chunk-X2UYZD2B.js";
import "./chunk-JQJITHTO.js";
import "./chunk-6LGJYARD.js";
import "./chunk-N42IF4WX.js";
import "./chunk-L7OHH2HW.js";
import {
  t as t5
} from "./chunk-E6IUAXXM.js";
import {
  $
} from "./chunk-TDSOUSBJ.js";
import "./chunk-BXIXSFGX.js";
import "./chunk-K6ALWBKT.js";
import "./chunk-I2OLSNCI.js";
import "./chunk-POHVYJFI.js";
import "./chunk-G5RWJWRO.js";
import "./chunk-UHMJZXQV.js";
import "./chunk-2KYWMOKS.js";
import "./chunk-FWIRGELF.js";
import "./chunk-YJREYHES.js";
import "./chunk-RMNZGRHI.js";
import "./chunk-U5TYWISK.js";
import "./chunk-QYBCLVRN.js";
import "./chunk-U7ZFK3X2.js";
import "./chunk-VMQKPMJK.js";
import "./chunk-A7PB2PTS.js";
import "./chunk-7QP2TGTK.js";
import "./chunk-D67YPTQ2.js";
import "./chunk-RFXYK5PV.js";
import "./chunk-LTCEJX6G.js";
import "./chunk-L6HI4BLZ.js";
import "./chunk-5FROWG6B.js";
import "./chunk-NW7VXBHZ.js";
import {
  n as n2,
  r as r3
} from "./chunk-F3IC5LHL.js";
import "./chunk-RIQUDAW6.js";
import "./chunk-JEA2CH67.js";
import "./chunk-FDS5NNQY.js";
import "./chunk-ACRZEGQW.js";
import {
  s as s3
} from "./chunk-7W7WBJSE.js";
import {
  a as a5
} from "./chunk-7HWB7LKO.js";
import "./chunk-OVCHDXLS.js";
import "./chunk-BOSRS73G.js";
import "./chunk-ECMDQ4LS.js";
import "./chunk-MM4IGEXG.js";
import "./chunk-D6FJTDNK.js";
import "./chunk-LP6TMAPE.js";
import "./chunk-RENLZYKC.js";
import {
  p as p5,
  t as t4
} from "./chunk-BF46TBV5.js";
import "./chunk-H4E2VVPD.js";
import {
  p as p4
} from "./chunk-LKSPV4ZE.js";
import {
  i as i2
} from "./chunk-TKIFUSBT.js";
import {
  l as l2
} from "./chunk-5OE5J4F6.js";
import {
  s as s5
} from "./chunk-EYETIQ6R.js";
import {
  C as C2,
  n as n3
} from "./chunk-DFLI5RC4.js";
import "./chunk-QYSQ6XPQ.js";
import {
  u as u3
} from "./chunk-YYZ2CTYE.js";
import "./chunk-HZRXUNDJ.js";
import "./chunk-XKMN3LJN.js";
import "./chunk-2U5JYYSG.js";
import {
  Z
} from "./chunk-GGPPKSP2.js";
import {
  f as f3
} from "./chunk-EA7CPLTC.js";
import {
  d as d3,
  l as l3
} from "./chunk-SI5IJ3AZ.js";
import {
  p as p6
} from "./chunk-7ZA6GWGF.js";
import {
  e as e2
} from "./chunk-JU4Z6UVP.js";
import "./chunk-JHXGQ3AW.js";
import "./chunk-MR727DXB.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-GNY4KZ34.js";
import "./chunk-WPERPIJF.js";
import {
  K,
  Z as Z2
} from "./chunk-5IA763KB.js";
import "./chunk-QKS6PIY6.js";
import "./chunk-R5BTSPWT.js";
import "./chunk-Z2L6EED4.js";
import "./chunk-43W2AR4R.js";
import "./chunk-X5EOLPIE.js";
import "./chunk-VNPGSD2C.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-GJTB7YCT.js";
import "./chunk-LQEYS467.js";
import "./chunk-A66MNK5C.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-RCGJPJRB.js";
import "./chunk-5CRXWQ3Y.js";
import "./chunk-G54IOEGF.js";
import {
  F
} from "./chunk-EP5G3AVD.js";
import {
  t as t2
} from "./chunk-VH245UJV.js";
import "./chunk-HJ7SKBLO.js";
import {
  j as j2
} from "./chunk-F3W2DG3D.js";
import {
  t as t3
} from "./chunk-ES2OYM5K.js";
import {
  b as b3
} from "./chunk-JXPOROPE.js";
import {
  c,
  d,
  l,
  p as p3,
  s as s4
} from "./chunk-OPBXQTOC.js";
import "./chunk-DKMSVKV3.js";
import "./chunk-YIIXBP6I.js";
import {
  S
} from "./chunk-LN6VH2LB.js";
import "./chunk-GZFJKWTS.js";
import "./chunk-2DHZIDQK.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-SX2OLFE7.js";
import {
  b as b2
} from "./chunk-WGIZLWW7.js";
import "./chunk-PUOCGOJB.js";
import "./chunk-XQH2QDB2.js";
import "./chunk-LPNAPHOF.js";
import "./chunk-DBQLTBDH.js";
import "./chunk-AMH7OVBF.js";
import "./chunk-SUZN3TAH.js";
import {
  d as d2
} from "./chunk-VILGTHTP.js";
import {
  q
} from "./chunk-ATEWWVHG.js";
import "./chunk-LEOFRCUR.js";
import "./chunk-CP4GPQHD.js";
import "./chunk-IZSNXKMJ.js";
import "./chunk-IOKAACTA.js";
import "./chunk-VFTH6C2E.js";
import {
  i
} from "./chunk-M5RSIRGD.js";
import "./chunk-UYSPJCCV.js";
import {
  f as f2
} from "./chunk-2HEBE37N.js";
import {
  p
} from "./chunk-5A4G4OVM.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-44C2A72D.js";
import "./chunk-DIKY6MBW.js";
import "./chunk-YVSEBNS4.js";
import {
  r as r2
} from "./chunk-GGCWKF4X.js";
import {
  g as g2,
  p as p9,
  x
} from "./chunk-6D5XULXX.js";
import "./chunk-445IB4DS.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import {
  J,
  on
} from "./chunk-H4N5QOMX.js";
import "./chunk-F2LC36UV.js";
import "./chunk-6Y2LNRVP.js";
import {
  v2
} from "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-Z2DWZ5IF.js";
import {
  g
} from "./chunk-TDZ623HP.js";
import "./chunk-6RLUKSNK.js";
import "./chunk-VEUN2EF3.js";
import "./chunk-UN4ISSP7.js";
import "./chunk-E2RPCJOE.js";
import {
  C,
  v,
  w
} from "./chunk-TKY5RBM3.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import {
  V as V2
} from "./chunk-SIQNRYEG.js";
import "./chunk-TTDEVHSF.js";
import "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-BMGF5ELJ.js";
import "./chunk-JU6MEO4D.js";
import "./chunk-CY5MS6DC.js";
import {
  p as p2
} from "./chunk-C6FFJ4QS.js";
import "./chunk-Q4Q32WYV.js";
import {
  j2 as j
} from "./chunk-A3J7W53Y.js";
import {
  o
} from "./chunk-HLF5XJSV.js";
import "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-Y6AYXNMP.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import {
  U
} from "./chunk-X7VTUWCX.js";
import {
  V
} from "./chunk-QS62R4CH.js";
import {
  f,
  u2
} from "./chunk-VU6O6TFT.js";
import {
  e,
  m
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a2,
  s4 as s2,
  t
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import {
  a as a3,
  b
} from "./chunk-GRW2QIBT.js";
import {
  u
} from "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import {
  a,
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/layers/support/sceneLayerCacheUtils.js
function e3({ associatedLayer: e5, serviceUpdateTimeStamp: t8 }) {
  var _a;
  const n5 = (_a = e5 == null ? void 0 : e5.editingInfo) == null ? void 0 : _a.lastEditDate, r4 = e5 == null ? void 0 : e5.serverGens, a7 = null != n5, i5 = null != t8, s7 = a7 && i5 && t8.lastUpdate !== n5.getTime();
  return a7 && (s7 || !i5 && (r4 == null ? void 0 : r4.minServerGen) !== (r4 == null ? void 0 : r4.serverGen));
}

// node_modules/@arcgis/core/layers/mixins/TemporalSceneLayer.js
var a6 = (t8) => {
  let a7 = class extends t8 {
    constructor() {
      super(...arguments), this.serviceTimeInfo = null;
    }
    get timeInfo() {
      var _a;
      const e5 = (_a = this.associatedLayer) == null ? void 0 : _a.timeInfo;
      if (null == e5) return null;
      const t9 = e5.clone();
      return g2(t9, this.fieldsIndex), t9;
    }
    set timeInfo(e5) {
      g2(e5, this.fieldsIndex), this._override("timeInfo", e5);
    }
    get timeExtent() {
      var _a;
      return (_a = this.associatedLayer) == null ? void 0 : _a.timeExtent;
    }
    set timeExtent(e5) {
      this._override("timeExtent", e5);
    }
    get timeOffset() {
      var _a;
      return (_a = this.associatedLayer) == null ? void 0 : _a.timeOffset;
    }
    set timeOffset(e5) {
      this._override("timeOffset", e5);
    }
    get datesInUnknownTimezone() {
      var _a;
      return ((_a = this.associatedLayer) == null ? void 0 : _a.datesInUnknownTimezone) ?? false;
    }
    set datesInUnknownTimezone(e5) {
      this._override("datesInUnknownTimezone", e5);
    }
    async loadTimeInfoFromService(e5) {
      const { serviceTimeInfo: t9 } = this;
      if (null == t9) return;
      const { startTimeField: r4, endTimeField: i5 } = t9;
      if (null == r4 && null == i5) return;
      if (e3({ associatedLayer: this.associatedLayer, serviceUpdateTimeStamp: this.serviceUpdateTimeStamp })) return;
      const s7 = async (t10) => {
        var _a;
        let i6 = null;
        try {
          const r5 = await ((_a = this.fetchStatistics) == null ? void 0 : _a.call(this, t10, e5));
          i6 = r5 == null ? void 0 : r5.stats;
        } catch {
        }
        if (null == i6) return null;
        const { minTimeStr: s8, min: n5, maxTimeStr: o2, max: l5 } = i6, m5 = t10 === r4 ? s8 ?? n5 : o2 ?? l5;
        return null != m5 ? new Date(m5) : null;
      }, [m4, a8] = await Promise.all([s7(r4), s7(i5)]);
      if (null != r4 && null == m4 || null != i5 && null == a8) return;
      const c4 = new p({ start: m4, end: a8 });
      this.setAtOrigin("timeInfo", new d3({ endField: i5, startField: r4, fullTimeExtent: c4 }), "service");
    }
  };
  return r([m({ type: d3, json: { read: false, write: false } })], a7.prototype, "timeInfo", null), r([m({ type: p, json: { read: false, write: false } })], a7.prototype, "timeExtent", null), r([m({ type: l3, json: { read: false, write: false } })], a7.prototype, "timeOffset", null), r([m({ type: Boolean, nonNullable: true, json: { read: false, write: false } })], a7.prototype, "datesInUnknownTimezone", null), r([m({ type: c2, readOnly: true, json: { read: { source: "timeInfo" } } })], a7.prototype, "serviceTimeInfo", void 0), a7 = r([a2("esri.layers.mixins.TemporalSceneLayer")], a7), a7;
};
var c2 = class extends f {
  constructor() {
    super(...arguments), this.endTimeField = null, this.startTimeField = null;
  }
};
r([m({ type: String })], c2.prototype, "endTimeField", void 0), r([m({ type: String })], c2.prototype, "startTimeField", void 0), c2 = r([a2("esri.layers.mixins.TemporalSceneLayer.SceneServiceTimeInfo")], c2);

// node_modules/@arcgis/core/layers/support/RangeInfo.js
var s6 = class extends f {
  constructor() {
    super(...arguments), this.name = null, this.field = null, this.currentRangeExtent = null, this.fullRangeExtent = null, this.type = "rangeInfo";
  }
};
r([m({ type: String, json: { read: true, write: true } })], s6.prototype, "name", void 0), r([m({ type: String, json: { read: true, write: true } })], s6.prototype, "field", void 0), r([m({ type: [Number], json: { read: true, write: true } })], s6.prototype, "currentRangeExtent", void 0), r([m({ type: [Number], json: { read: true, write: true } })], s6.prototype, "fullRangeExtent", void 0), r([m({ type: ["rangeInfo"], readOnly: true, json: { read: false, write: true } })], s6.prototype, "type", void 0), s6 = r([a2("esri.layers.support.RangeInfo")], s6);

// node_modules/@arcgis/core/layers/support/PolygonCollection.js
var c3;
var p10 = c3 = class extends u2(V2.ofType(v2)) {
  constructor(e5) {
    super(e5);
  }
  clone() {
    return new c3(this.items.map((e5) => e5.clone()));
  }
  write(e5, r4) {
    return this.toJSON(r4);
  }
  toJSON(e5) {
    var _a, _b;
    const r4 = (_a = e5 == null ? void 0 : e5.layer) == null ? void 0 : _a.spatialReference;
    return r4 ? this.toArray().map((t8) => {
      var _a2;
      if (!r4.equals(t8.spatialReference)) {
        if (!J(t8.spatialReference, r4)) return (_a2 = e5 == null ? void 0 : e5.messages) == null ? void 0 : _a2.push(new s2("scenefilter:unsupported", "Scene filters with incompatible spatial references are not supported", { modification: this, spatialReference: e5.layer.spatialReference, context: e5 })), null;
        const s8 = new v2();
        on(t8, s8, r4), t8 = s8;
      }
      const s7 = t8.toJSON(e5);
      return delete s7.spatialReference, s7;
    }).filter((e6) => null != e6) : ((_b = e5 == null ? void 0 : e5.messages) == null ? void 0 : _b.push(new s2("scenefilter:unsupported", "Writing Scene filters without context layer is not supported", { modification: this, spatialReference: e5.layer.spatialReference, context: e5 })), this.toArray().map((r5) => r5.toJSON(e5)));
  }
  static fromJSON(e5, r4) {
    const t8 = new c3();
    return e5.forEach((e6) => t8.add(v2.fromJSON(e6, r4))), t8;
  }
};
p10 = c3 = r([a2("esri.layers.support.PolygonCollection")], p10);
var l4 = p10;

// node_modules/@arcgis/core/layers/support/SceneFilter.js
var u4;
var g3 = u4 = class extends f {
  constructor(e5) {
    super(e5), this.spatialRelationship = "disjoint", this.geometries = new l4(), this._geometriesSource = null;
  }
  initialize() {
    this.addHandles(v(() => this.geometries, "after-changes", () => this.geometries = this.geometries, C));
  }
  readGeometries(e5, r4, o2) {
    Array.isArray(e5) ? this.geometries = l4.fromJSON(e5, o2) : this._geometriesSource = { url: p2(e5, o2), context: o2 };
  }
  async loadGeometries(e5, o2) {
    if (null == this._geometriesSource) return;
    const { url: s7, context: t8 } = this._geometriesSource, i5 = await U(s7, { responseType: "json", signal: o2 == null ? void 0 : o2.signal }), a7 = e5.toJSON(), p11 = i5.data.map((e6) => ({ ...e6, spatialReference: a7 }));
    this.geometries = l4.fromJSON(p11, t8), this._geometriesSource = null;
  }
  clone() {
    const e5 = new u4({ geometries: a(this.geometries), spatialRelationship: this.spatialRelationship });
    return e5._geometriesSource = this._geometriesSource, e5;
  }
};
r([m({ type: ["disjoint", "contains"], nonNullable: true, json: { write: true } })], g3.prototype, "spatialRelationship", void 0), r([m({ type: l4, nonNullable: true, json: { write: true } }), j3({ origins: ["web-scene", "portal-item"], type: "resource", prefix: "geometries", contentAddressed: true })], g3.prototype, "geometries", void 0), r([o(["web-scene", "portal-item"], "geometries")], g3.prototype, "readGeometries", null), g3 = u4 = r([a2("esri.layers.support.SceneFilter")], g3);
var h = g3;

// node_modules/@arcgis/core/layers/support/sceneLayerStatistics.js
async function i4({ fieldName: i5, statisticsInfo: a7, errorContext: o2, fieldsIndex: r4, path: n5, customParameters: l5, apiKey: c4, signal: f4 }) {
  if (null == a7) throw new s(`${o2}:no-cached-statistics`, "Cached statistics are not available for this layer");
  const d4 = r4.get(i5);
  if (null == d4) throw new s(`${o2}:field-unexisting`, `Field '${i5}' does not exist on the layer`);
  const h2 = a7.find((t8) => t8.name === d4.name);
  if (null == h2) throw new s(`${o2}:no-cached-statistics`, "Cached statistics for this attribute are not available");
  const m4 = V(n5, h2.href), { data: u5 } = await U(m4, { query: { f: "json", ...l5, token: c4 }, responseType: "json", signal: f4 });
  return u5;
}

// node_modules/@arcgis/core/support/zipUtils.js
async function e4(e5) {
  const r4 = [];
  for (const n5 of e5) n5.name.toLowerCase().endsWith(".zip") ? r4.push(t7(n5)) : r4.push(Promise.resolve(n5));
  return (await Promise.all(r4)).flat();
}
async function t7(e5) {
  const { BlobReader: t8, ZipReader: r4, BlobWriter: n5 } = await import("./zipjs-wrapper-L6EVOS4A.js"), a7 = [], i5 = new r4(new t8(e5));
  return (await i5.getEntries()).forEach((e6) => {
    var _a;
    if (e6.directory || /^__MACOS/i.test(e6.filename)) return;
    const t9 = new n5(), r5 = (_a = e6.getData) == null ? void 0 : _a.call(e6, t9).then((t10) => new File([t10], e6.filename));
    r5 && a7.push(r5);
  }), Promise.all(a7);
}

// node_modules/@arcgis/core/layers/SceneLayer.js
var Le = /* @__PURE__ */ new Set(["3DObject", "Point"]);
var je = s5();
var Fe = class extends a6(F(R(l2(b3(j2(t3(S(e2(i2(i(f2))))))))))) {
  constructor(...e5) {
    super(...e5), this.featureReduction = null, this.rangeInfos = null, this.operationalLayerType = "ArcGISSceneServiceLayer", this.type = "scene", this.fields = null, this.floorInfo = null, this.outFields = null, this.nodePages = null, this.materialDefinitions = null, this.textureSetDefinitions = null, this.geometryDefinitions = null, this.serviceUpdateTimeStamp = null, this.excludeObjectIds = new V2(), this.definitionExpression = null, this.filter = null, this.path = null, this.labelsVisible = true, this.labelingInfo = null, this.legendEnabled = true, this.priority = null, this.semantic = null, this.cachedDrawingInfo = { color: false }, this.popupEnabled = true, this.popupTemplate = null, this.objectIdField = null, this.globalIdField = null, this._fieldUsageInfo = {}, this.screenSizePerspectiveEnabled = true, this.serviceItemId = void 0;
  }
  normalizeCtorArgs(e5, t8) {
    return "string" == typeof e5 ? { url: e5, ...t8 } : e5;
  }
  destroy() {
    this._set("renderer", null), this.associatedLayer = u(this.associatedLayer);
  }
  getField(e5) {
    return this.fieldsIndex.get(e5);
  }
  getFieldDomain(e5, t8) {
    var _a, _b, _c;
    const r4 = (_b = (_a = this.getFeatureType(t8 == null ? void 0 : t8.feature)) == null ? void 0 : _a.domains) == null ? void 0 : _b[e5];
    return r4 && "inherited" !== r4.type ? r4 : ((_c = this.getField(e5)) == null ? void 0 : _c.domain) ?? null;
  }
  getFeatureType(e5) {
    return e5 && this.associatedLayer ? this.associatedLayer.getFeatureType(e5) : null;
  }
  get types() {
    var _a;
    return ((_a = this.associatedLayer) == null ? void 0 : _a.types) ?? [];
  }
  get typeIdField() {
    var _a;
    return ((_a = this.associatedLayer) == null ? void 0 : _a.typeIdField) ?? null;
  }
  get templates() {
    var _a;
    return ((_a = this.associatedLayer) == null ? void 0 : _a.templates) ?? null;
  }
  get formTemplate() {
    var _a;
    return ((_a = this.associatedLayer) == null ? void 0 : _a.formTemplate) ?? null;
  }
  get attributeTableTemplate() {
    var _a;
    return ((_a = this.associatedLayer) == null ? void 0 : _a.attributeTableTemplate) ?? null;
  }
  get fieldsIndex() {
    return new Z(this.fields);
  }
  readNodePages(e5, t8, r4) {
    return "Point" === t8.layerType && (e5 = t8.pointNodePages), null == e5 || "object" != typeof e5 ? null : p7.fromJSON(e5, r4);
  }
  set elevationInfo(e5) {
    this._set("elevationInfo", e5), this.loaded && this._validateElevationInfo();
  }
  get effectiveCapabilities() {
    var _a;
    return this._capabilitiesFromAssociatedFeatureLayer((_a = this.associatedLayer) == null ? void 0 : _a.effectiveCapabilities);
  }
  get effectiveEditingEnabled() {
    return null != this.associatedLayer && Z2(this.associatedLayer);
  }
  get geometryType() {
    return _e[this.profile] || "mesh";
  }
  set renderer(e5) {
    p9(e5, this.fieldsIndex), this._set("renderer", e5);
  }
  readCachedDrawingInfo(e5) {
    return null != e5 && "object" == typeof e5 || (e5 = {}), null == e5.color && (e5.color = false), e5;
  }
  get capabilities() {
    var _a;
    return this._capabilitiesFromAssociatedFeatureLayer((_a = this.associatedLayer) == null ? void 0 : _a.capabilities);
  }
  _capabilitiesFromAssociatedFeatureLayer(e5) {
    var _a;
    e5 = null != e5 ? e5 : t5;
    const { query: t8, queryRelated: r4, editing: { supportsGlobalId: i5, supportsRollbackOnFailure: s7, supportsUploadWithItemId: o2, supportsGeometryUpdate: a7, supportsReturnServiceEditsInSourceSpatialReference: n5 }, data: { supportsZ: l5, supportsM: p11, isVersioned: d4, supportsAttachment: u5 }, operations: { supportsEditing: y2, supportsAdd: c4, supportsUpdate: h2, supportsDelete: m4, supportsQuery: f4, supportsQueryAttachments: g4, supportsAsyncConvert3D: v3 } } = e5, b4 = e5.operations.supportsChangeTracking, w3 = !!((_a = this.associatedLayer) == null ? void 0 : _a.infoFor3D);
    return { query: t8, queryRelated: r4, editing: { supportsGlobalId: i5, supportsReturnServiceEditsInSourceSpatialReference: n5, supportsRollbackOnFailure: s7, supportsGeometryUpdate: w3 && a7, supportsUploadWithItemId: o2 }, data: { supportsAttachment: u5, supportsZ: l5, supportsM: p11, isVersioned: d4 }, operations: { supportsQuery: f4, supportsQueryAttachments: g4, supportsEditing: y2 && b4, supportsAdd: w3 && c4 && b4, supportsDelete: w3 && m4 && b4, supportsUpdate: h2 && b4, supportsAsyncConvert3D: v3 } };
  }
  get editingEnabled() {
    var _a;
    return this._isOverridden("editingEnabled") ? this._get("editingEnabled") : ((_a = this.associatedLayer) == null ? void 0 : _a.editingEnabled) ?? false;
  }
  set editingEnabled(e5) {
    this._overrideIfSome("editingEnabled", e5);
  }
  get infoFor3D() {
    var _a;
    return ((_a = this.associatedLayer) == null ? void 0 : _a.infoFor3D) ?? null;
  }
  get relationships() {
    var _a;
    return (_a = this.associatedLayer) == null ? void 0 : _a.relationships;
  }
  get defaultPopupTemplate() {
    return this.associatedLayer || this.attributeStorageInfo ? this.createPopupTemplate() : null;
  }
  readObjectIdField(e5, t8) {
    return !e5 && t8.fields && t8.fields.some((t9) => ("esriFieldTypeOID" === t9.type && (e5 = t9.name), !!e5)), e5 || void 0;
  }
  readGlobalIdField(e5, t8) {
    return !e5 && t8.fields && t8.fields.some((t9) => ("esriFieldTypeGlobalID" === t9.type && (e5 = t9.name), !!e5)), e5 || void 0;
  }
  get displayField() {
    var _a;
    return ((_a = this.associatedLayer) == null ? void 0 : _a.displayField) ?? null;
  }
  readProfile(e5, t8) {
    const r4 = t8.store.profile;
    return null != r4 && Se[r4] ? Se[r4] : (n.getLogger(this).error("Unknown or missing profile", { profile: r4, layer: this }), "mesh-pyramids");
  }
  get useViewTime() {
    var _a;
    return ((_a = this.associatedLayer) == null ? void 0 : _a.useViewTime) ?? true;
  }
  set useViewTime(e5) {
    this._override("useViewTime", e5);
  }
  load(e5) {
    return this.addResolvingPromise(this._load(e5)), Promise.resolve(this);
  }
  async _load(e5) {
    const t8 = null != e5 ? e5.signal : null;
    await this.loadFromPortal({ supportedTypes: ["Scene Service"] }, e5).catch(a3), await this._fetchService(t8), await Promise.all([this._fetchIndexAndUpdateExtent(this.nodePages, t8), this._setAssociatedFeatureLayer(t8), this._loadFilterGeometries()]), this._validateElevationInfo(), this._applyAssociatedLayerOverrides(), this._populateFieldUsageInfo(), await this.loadTimeInfoFromService(e5), await t2(this, { origin: "service" }, t8), p9(this.renderer, this.fieldsIndex), await this.finishLoadEditablePortalLayer(e5);
  }
  async beforeSave() {
    null != this.filter && (this.filter = this.filter.clone(), await this.load());
  }
  async _loadFilterGeometries() {
    if (this.filter) try {
      await this.filter.loadGeometries(this.spatialReference);
    } catch (e5) {
      n.getLogger(this).error("#_loadFilterGeometries()", this, "Failed to load filter geometries. Geometry filter will not be applied for this layer.", { error: e5 }), this.filter = null;
    }
  }
  createQuery() {
    var _a;
    const e5 = new b2();
    return "mesh" === this.geometryType ? ((_a = this.associatedLayer) == null ? void 0 : _a.infoFor3D) && (e5.returnGeometry = true) : (e5.returnGeometry = true, e5.returnZ = true), e5.where = this.definitionExpression || "1=1", e5.sqlFormat = "standard", e5.outFields = ["*"], e5;
  }
  queryExtent(e5, t8) {
    return this._getAssociatedLayerForQuery().then((r4) => r4.queryExtent(e5 || this.createQuery(), t8));
  }
  queryFeatureCount(e5, t8) {
    return this._getAssociatedLayerForQuery().then((r4) => r4.queryFeatureCount(e5 || this.createQuery(), t8));
  }
  queryFeatures(e5, t8) {
    return this._getAssociatedLayerForQuery().then((r4) => r4.queryFeatures(e5 || this.createQuery(), t8)).then((e6) => {
      if (e6 == null ? void 0 : e6.features) for (const t9 of e6.features) t9.layer = this, t9.sourceLayer = this;
      return e6;
    });
  }
  async queryRelatedFeatures(e5, t8) {
    if (await this.load(), !this.associatedLayer) throw new s("scenelayer:query-not-available", "SceneLayer queries are not available without an associated feature layer", { layer: this });
    return this.associatedLayer.queryRelatedFeatures(e5, t8);
  }
  async queryRelatedFeaturesCount(e5, t8) {
    if (await this.load(), !this.associatedLayer) throw new s("scenelayer:query-not-available", "SceneLayer queries are not available without an associated feature layer", { layer: this });
    return this.associatedLayer.queryRelatedFeaturesCount(e5, t8);
  }
  async queryCachedAttributes(e5, t8) {
    var _a;
    const r4 = x(this.fieldsIndex, await n4(this, p8(this)));
    return V3(((_a = this.parsedUrl) == null ? void 0 : _a.path) ?? "", this.attributeStorageInfo ?? [], e5, t8, r4, this.apiKey, this.customParameters);
  }
  async queryCachedFeature(e5, r4) {
    const i5 = await this.queryCachedAttributes(e5, [r4]);
    if (!i5 || 0 === i5.length) throw new s("scenelayer:feature-not-in-cached-data", "Feature not found in cached data");
    const s7 = new d2();
    return s7.attributes = i5[0], s7.layer = this, s7.sourceLayer = this, s7;
  }
  queryObjectIds(e5, t8) {
    return this._getAssociatedLayerForQuery().then((r4) => r4.queryObjectIds(e5 || this.createQuery(), t8));
  }
  queryAttachments(e5, t8) {
    return this._getAssociatedLayerForQuery().then((r4) => r4.queryAttachments(e5, t8));
  }
  getFieldUsageInfo(e5) {
    const t8 = { supportsLabelingInfo: false, supportsRenderer: false, supportsPopupTemplate: false, supportsLayerQuery: false };
    return this.loaded ? this._fieldUsageInfo[e5] || t8 : (n.getLogger(this).error("#getFieldUsageInfo()", "Unavailable until layer is loaded"), t8);
  }
  createPopupTemplate(e5) {
    return p6(this, e5);
  }
  _getAssociatedLayerForQuery() {
    const e5 = this.associatedLayer;
    return (e5 == null ? void 0 : e5.loaded) ? Promise.resolve(e5) : this._loadAssociatedLayerForQuery();
  }
  async _loadAssociatedLayerForQuery() {
    if (await this.load(), !this.associatedLayer) throw new s("scenelayer:query-not-available", "SceneLayer queries are not available without an associated feature layer", { layer: this });
    try {
      await this.associatedLayer.load();
    } catch (e5) {
      throw new s("scenelayer:query-not-available", "SceneLayer associated feature layer could not be loaded", { layer: this, error: e5 });
    }
    return this.associatedLayer;
  }
  hasCachedStatistics(e5) {
    return null != this.statisticsInfo && this.statisticsInfo.some((t8) => t8.name === e5);
  }
  async queryCachedStatistics(e5, t8) {
    return await this.load(t8), await this.fetchStatistics(e5, t8);
  }
  async saveAs(e5, t8) {
    return this._debouncedSaveOperations(V4.SAVE_AS, { ...t8, getTypeKeywords: () => this._getTypeKeywords(), portalItemLayerType: "scene" }, e5);
  }
  async save() {
    const e5 = { getTypeKeywords: () => this._getTypeKeywords(), portalItemLayerType: "scene" };
    return this._debouncedSaveOperations(V4.SAVE, e5);
  }
  async applyEdits(e5, t8) {
    const { applyEdits: r4 } = await import("./editingSupport-BHLOAWIR.js");
    let i5 = t8;
    await this.load();
    const s7 = this.associatedLayer;
    if (!s7) throw new s(`${this.type}-layer:not-editable`, "Service is not editable");
    await s7.load();
    const { globalIdField: o2 } = s7, n5 = !!s7.infoFor3D, l5 = (i5 == null ? void 0 : i5.globalIdUsed) ?? true;
    if (n5 && null == o2) throw new s(`${this.type}-layer:not-editable`, "Valid globalIdField expected on editable SceneLayer");
    if (n5 && !l5) throw new s(`${this.type}-layer:globalid-required`, "globalIdUsed must not be false for SceneLayer editing as globalIds are required.");
    return g(s7.url) && n5 && null != e5.deleteFeatures && null != o2 && (i5 = { ...i5, globalIdToObjectId: await K(s7, e5.deleteFeatures, o2) }), r4(this, s7.source, e5, i5);
  }
  async uploadAssets(e5, t8) {
    if (await this.load(), null == this.associatedLayer) throw new s(`${this.type}-layer:not-editable`, "Service is not editable");
    return await this.associatedLayer.load(), this.associatedLayer.uploadAssets(e5, t8);
  }
  on(e5, t8) {
    return super.on(e5, t8);
  }
  async convertMesh(e5, t8) {
    t8 ?? (t8 = {});
    const r4 = (e6) => {
      throw n.getLogger(this).error(".convertMesh()", e6.message), e6;
    };
    await this.load(), this.infoFor3D || r4(new s("invalid:layer", "SceneLayer has no capability for mesh conversion"));
    const i5 = await this.extractAndFilterFiles(e5), s7 = i5.reduce((e6, t9) => r3(this.infoFor3D, t9) ? e6 + 1 : e6, 0);
    0 === s7 && r4(new i3()), s7 > 1 && r4(new m2());
    const o2 = this.spatialReference, l5 = t8.location ?? new j({ x: 0, y: 0, z: 0, spatialReference: o2 }), p11 = l5.spatialReference.isGeographic ? "local" : "georeferenced", d4 = $.createWithExternalSource(l5, i5, { vertexSpace: p11, transform: t6(l5.spatialReference), unitConversionDisabled: true }), [u5] = await this.uploadAssets([d4], { ...t8, useAssetOrigin: !t8.location });
    return u5;
  }
  async extractAndFilterFiles(e5) {
    await this.load();
    const t8 = this.infoFor3D;
    if (!t8) return e5;
    return (await e4(e5)).filter((e6) => n2(t8, e6));
  }
  validateLayer(e5) {
    if (e5.layerType && !Le.has(e5.layerType)) throw new s("scenelayer:layer-type-not-supported", "SceneLayer does not support this layer type", { layerType: e5.layerType });
    if (isNaN(this.version.major) || isNaN(this.version.minor)) throw new s("layer:service-version-not-supported", "Service version is not supported.", { serviceVersion: this.version.versionString, supportedVersions: "1.x, 2.x" });
    if (this.version.major > 2) throw new s("layer:service-version-too-new", "Service version is too new.", { serviceVersion: this.version.versionString, supportedVersions: "1.x, 2.x" });
    function t8(e6, t9) {
      let r4 = false, i5 = false;
      if (null == e6) r4 = true, i5 = true;
      else {
        const s7 = t9 && t9.isGeographic;
        switch (e6) {
          case "east-north-up":
          case "earth-centered":
            r4 = true, i5 = s7;
            break;
          case "vertex-reference-frame":
            r4 = true, i5 = !s7;
            break;
          default:
            r4 = false;
        }
      }
      if (!r4) throw new s("scenelayer:unsupported-normal-reference-frame", "Normal reference frame is invalid.");
      if (!i5) throw new s("scenelayer:incompatible-normal-reference-frame", "Normal reference frame is incompatible with layer spatial reference.");
    }
    t8(this.normalReferenceFrame, this.spatialReference);
  }
  _getTypeKeywords() {
    const e5 = [];
    if ("points" === this.profile) e5.push("Point");
    else {
      if ("mesh-pyramids" !== this.profile) throw new s("scenelayer:unknown-profile", "SceneLayer:save() encountered an unknown SceneLayer profile: " + this.profile);
      e5.push("3DObject");
    }
    return e5;
  }
  _populateFieldUsageInfo() {
    var _a, _b, _c;
    if (this._fieldUsageInfo = {}, this.fields) for (const e5 of this.fields) {
      const t8 = !!((_a = this.attributeStorageInfo) == null ? void 0 : _a.some((t9) => t9.name === e5.name)), r4 = !!((_c = (_b = this.associatedLayer) == null ? void 0 : _b.fields) == null ? void 0 : _c.some((t9) => t9 && e5.name === t9.name)), i5 = { supportsLabelingInfo: t8, supportsRenderer: t8, supportsPopupTemplate: t8 || r4, supportsLayerQuery: r4 };
      this._fieldUsageInfo[e5.name] = i5;
    }
  }
  _applyAssociatedLayerOverrides() {
    this._applyAssociatedLayerFieldsOverrides(), this._applyAssociatedLayerPopupOverrides(), this._applyAssociatedLayerExtentOverride(), this._applyAssociatedLayerPrivileges();
  }
  _applyAssociatedLayerFieldsOverrides() {
    var _a;
    if (!((_a = this.associatedLayer) == null ? void 0 : _a.fields)) return;
    let e5 = null;
    for (const t8 of this.associatedLayer.fields) {
      const r4 = this.getField(t8.name);
      r4 ? (!r4.domain && t8.domain && (r4.domain = t8.domain.clone()), r4.editable = t8.editable, r4.nullable = t8.nullable, r4.length = t8.length) : (e5 || (e5 = this.fields ? this.fields.slice() : []), e5.push(t8.clone()));
    }
    e5 && this._set("fields", e5);
  }
  _applyAssociatedLayerPopupOverrides() {
    if (!this.associatedLayer) return;
    const e5 = ["popupTemplate", "popupEnabled"], t8 = t(this);
    for (let r4 = 0; r4 < e5.length; r4++) {
      const i5 = e5[r4], s7 = this.originIdOf(i5), o2 = this.associatedLayer.originIdOf(i5);
      s7 < o2 && (o2 === e.SERVICE || o2 === e.PORTAL_ITEM) && t8.setAtOrigin(i5, this.associatedLayer[i5], o2);
    }
  }
  _applyAssociatedLayerExtentOverride() {
    var _a, _b, _c;
    const e5 = (_a = this.associatedLayer) == null ? void 0 : _a.getAtOrigin("fullExtent", "service");
    if (null == ((_b = this.associatedLayer) == null ? void 0 : _b.infoFor3D) || !e5 || !g((_c = this.associatedLayer) == null ? void 0 : _c.url) || !e3(this)) return;
    t(this).setAtOrigin("fullExtent", e5.clone(), e.SERVICE);
  }
  _applyAssociatedLayerPrivileges() {
    const e5 = this.associatedLayer;
    e5 && (this._set("userHasEditingPrivileges", e5.userHasEditingPrivileges), this._set("userHasFullEditingPrivileges", e5.userHasFullEditingPrivileges), this._set("userHasUpdateItemPrivileges", e5.userHasUpdateItemPrivileges));
  }
  async _setAssociatedFeatureLayer(e5) {
    if (["mesh-pyramids", "points"].includes(this.profile)) try {
      const { serverUrl: t8, layerId: r4, portalItem: i5 } = await s3(`${this.url}/layers/${this.layerId}`, { sceneLayerItem: this.portalItem, customParameters: this.customParameters, apiKey: this.apiKey, signal: e5 }), s7 = await a5.FeatureLayer();
      this.associatedLayer = new s7({ url: t8, customParameters: this.customParameters, layerId: r4, portalItem: i5 }), await this.associatedLayer.load();
    } catch (t8) {
      b(t8) || this._logWarningOnPopupEnabled();
    }
  }
  async _logWarningOnPopupEnabled() {
    await w(() => this.popupEnabled && null != this.popupTemplate);
    const e5 = `this SceneLayer: ${this.title}`;
    null == this.attributeStorageInfo ? n.getLogger(this).warn(`Associated FeatureLayer could not be loaded and no binary attributes found. Popups will not work on ${e5}`) : n.getLogger(this).info(`Associated FeatureLayer could not be loaded. Falling back to binary attributes for Popups on ${e5}`);
  }
  _validateElevationInfo() {
    const e5 = this.elevationInfo;
    "mesh-pyramids" === this.profile && $2(n.getLogger(this), P("Mesh scene layers", "relative-to-scene", e5)), $2(n.getLogger(this), w2("Scene layers", e5));
  }
  async fetchStatistics(e5, t8) {
    var _a;
    return await i4({ fieldName: e5, statisticsInfo: this.statisticsInfo, errorContext: "scenelayer", fieldsIndex: this.fieldsIndex, path: ((_a = this.parsedUrl) == null ? void 0 : _a.path) ?? "", customParameters: this.customParameters, apiKey: this.apiKey, signal: t8 == null ? void 0 : t8.signal });
  }
};
r([m({ types: { key: "type", base: t4, typeMap: { selection: p5 } }, json: { origins: { "web-scene": { name: "layerDefinition.featureReduction", write: true }, "portal-item": { name: "layerDefinition.featureReduction", write: true } } } })], Fe.prototype, "featureReduction", void 0), r([m({ type: [s6], json: { read: false, origins: { "web-scene": { name: "layerDefinition.rangeInfos", write: true }, "portal-item": { name: "layerDefinition.rangeInfos", write: true } } } })], Fe.prototype, "rangeInfos", void 0), r([m({ json: { read: false } })], Fe.prototype, "associatedLayer", void 0), r([m({ type: ["show", "hide"] })], Fe.prototype, "listMode", void 0), r([m({ type: ["ArcGISSceneServiceLayer"] })], Fe.prototype, "operationalLayerType", void 0), r([m({ json: { read: false }, readOnly: true })], Fe.prototype, "type", void 0), r([m({ ...je.fields, readOnly: true, json: { read: false, origins: { service: { read: true } } } })], Fe.prototype, "fields", void 0), r([m()], Fe.prototype, "types", null), r([m()], Fe.prototype, "typeIdField", null), r([m()], Fe.prototype, "templates", null), r([m()], Fe.prototype, "formTemplate", null), r([m()], Fe.prototype, "attributeTableTemplate", null), r([m({ readOnly: true, clonable: false })], Fe.prototype, "fieldsIndex", null), r([m({ type: p4, json: { read: { source: "layerDefinition.floorInfo" }, write: { target: "layerDefinition.floorInfo" } } })], Fe.prototype, "floorInfo", void 0), r([m(je.outFields)], Fe.prototype, "outFields", void 0), r([m({ type: p7, readOnly: true, json: { read: false } })], Fe.prototype, "nodePages", void 0), r([o("service", "nodePages", ["nodePages", "pointNodePages"])], Fe.prototype, "readNodePages", null), r([m({ type: [a4], readOnly: true })], Fe.prototype, "materialDefinitions", void 0), r([m({ type: [y], readOnly: true })], Fe.prototype, "textureSetDefinitions", void 0), r([m({ type: [m3], readOnly: true })], Fe.prototype, "geometryDefinitions", void 0), r([m({ readOnly: true })], Fe.prototype, "serviceUpdateTimeStamp", void 0), r([m({ readOnly: true })], Fe.prototype, "attributeStorageInfo", void 0), r([m({ readOnly: true })], Fe.prototype, "statisticsInfo", void 0), r([m({ type: V2.ofType(Number), nonNullable: true, json: { origins: { service: { read: false, write: false } }, name: "layerDefinition.excludeObjectIds", write: { enabled: true } } })], Fe.prototype, "excludeObjectIds", void 0), r([m({ type: String, json: { origins: { service: { read: false, write: false } }, name: "layerDefinition.definitionExpression", write: { enabled: true, allowNull: true } } })], Fe.prototype, "definitionExpression", void 0), r([m({ type: h, json: { name: "layerDefinition.polygonFilter", write: { enabled: true, allowNull: true }, origins: { service: { read: false, write: false } } } })], Fe.prototype, "filter", void 0), r([m({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], Fe.prototype, "path", void 0), r([m(c)], Fe.prototype, "elevationInfo", null), r([m({ readOnly: true, json: { read: false } })], Fe.prototype, "effectiveCapabilities", null), r([m({ readOnly: true })], Fe.prototype, "effectiveEditingEnabled", null), r([m({ type: String })], Fe.prototype, "geometryType", null), r([m(p3)], Fe.prototype, "labelsVisible", void 0), r([m({ type: [C2], json: { origins: { service: { name: "drawingInfo.labelingInfo", read: { reader: n3 }, write: false } }, name: "layerDefinition.drawingInfo.labelingInfo", read: { reader: n3 }, write: true } })], Fe.prototype, "labelingInfo", void 0), r([m(d)], Fe.prototype, "legendEnabled", void 0), r([m({ type: Number, json: { origins: { "web-document": { default: 1, write: { enabled: true, target: { opacity: { type: Number }, "layerDefinition.drawingInfo.transparency": { type: Number } } }, read: { source: ["opacity", "layerDefinition.drawingInfo.transparency"], reader(e5, t8) {
  var _a, _b;
  if ("number" == typeof e5 && e5 >= 0 && e5 <= 1) return e5;
  const r4 = (_b = (_a = t8.layerDefinition) == null ? void 0 : _a.drawingInfo) == null ? void 0 : _b.transparency;
  return void 0 !== r4 ? r2(r4) : void 0;
} } }, "portal-item": { write: true }, service: { read: false } } } })], Fe.prototype, "opacity", void 0), r([m({ type: ["Low", "High"], readOnly: true, json: { read: false, origins: { service: { read: true } } } })], Fe.prototype, "priority", void 0), r([m({ type: ["Labels"], readOnly: true, json: { read: false, origins: { service: { read: true } } } })], Fe.prototype, "semantic", void 0), r([m({ types: u3, json: { origins: { service: { read: { source: "drawingInfo.renderer" } } }, name: "layerDefinition.drawingInfo.renderer", write: true }, value: null })], Fe.prototype, "renderer", null), r([m({ json: { read: false } })], Fe.prototype, "cachedDrawingInfo", void 0), r([o("service", "cachedDrawingInfo")], Fe.prototype, "readCachedDrawingInfo", null), r([m({ readOnly: true, json: { read: false } })], Fe.prototype, "capabilities", null), r([m({ type: Boolean, json: { read: false } })], Fe.prototype, "editingEnabled", null), r([m({ readOnly: true, json: { write: false, read: false } })], Fe.prototype, "infoFor3D", null), r([m({ readOnly: true, json: { write: false, read: false } })], Fe.prototype, "relationships", null), r([m(l)], Fe.prototype, "popupEnabled", void 0), r([m({ type: q, json: { name: "popupInfo", write: true } })], Fe.prototype, "popupTemplate", void 0), r([m({ readOnly: true, json: { read: false } })], Fe.prototype, "defaultPopupTemplate", null), r([m({ type: String, json: { read: false } })], Fe.prototype, "objectIdField", void 0), r([o("service", "objectIdField", ["objectIdField", "fields"])], Fe.prototype, "readObjectIdField", null), r([m({ type: String, json: { read: false } })], Fe.prototype, "globalIdField", void 0), r([o("service", "globalIdField", ["globalIdField", "fields"])], Fe.prototype, "readGlobalIdField", null), r([m({ readOnly: true, type: String, json: { read: false } })], Fe.prototype, "displayField", null), r([m({ type: String, json: { read: false } })], Fe.prototype, "profile", void 0), r([o("service", "profile", ["store.profile"])], Fe.prototype, "readProfile", null), r([m({ readOnly: true, type: String, json: { origins: { service: { read: { source: "store.normalReferenceFrame" } } }, read: false } })], Fe.prototype, "normalReferenceFrame", void 0), r([m(s4)], Fe.prototype, "screenSizePerspectiveEnabled", void 0), r([m({ json: { read: false, origins: { service: { read: true } } } })], Fe.prototype, "serviceItemId", void 0), r([m(f3)], Fe.prototype, "useViewTime", null), Fe = r([a2("esri.layers.SceneLayer")], Fe);
var Se = { "mesh-pyramids": "mesh-pyramids", meshpyramids: "mesh-pyramids", "features-meshes": "mesh-pyramids", points: "points", "features-points": "points", lines: "lines", "features-lines": "lines", polygons: "polygons", "features-polygons": "polygons" };
var _e = { "mesh-pyramids": "mesh", points: "point" };
var Pe = Fe;
export {
  Pe as default
};
//# sourceMappingURL=SceneLayer-E273MMJY.js.map
