import {
  t
} from "./chunk-Q4J5AN2X.js";
import {
  m,
  n,
  n2
} from "./chunk-MBR7IVUG.js";
import {
  Xe
} from "./chunk-ER5KJVHG.js";
import "./chunk-Y24KYRDB.js";
import "./chunk-BF46TBV5.js";
import "./chunk-H4E2VVPD.js";
import "./chunk-CTU2XDPA.js";
import "./chunk-LZ4VG2QF.js";
import "./chunk-GT4YOV7H.js";
import "./chunk-3GYJQZ7U.js";
import "./chunk-LKSPV4ZE.js";
import "./chunk-QB7C6VGC.js";
import "./chunk-TKIFUSBT.js";
import "./chunk-BIXTRT5D.js";
import "./chunk-5OE5J4F6.js";
import "./chunk-RON7HSX6.js";
import "./chunk-3SYUQL4E.js";
import "./chunk-XWTALKKJ.js";
import "./chunk-JWQMRQX4.js";
import "./chunk-24OTECJ5.js";
import "./chunk-EYETIQ6R.js";
import "./chunk-DFLI5RC4.js";
import "./chunk-QYSQ6XPQ.js";
import "./chunk-YYZ2CTYE.js";
import "./chunk-HZRXUNDJ.js";
import "./chunk-XKMN3LJN.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-GGPPKSP2.js";
import "./chunk-EA7CPLTC.js";
import "./chunk-SI5IJ3AZ.js";
import "./chunk-7ZA6GWGF.js";
import "./chunk-JU4Z6UVP.js";
import "./chunk-JHXGQ3AW.js";
import "./chunk-MR727DXB.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-GNY4KZ34.js";
import "./chunk-WPERPIJF.js";
import "./chunk-Q3BBONW3.js";
import "./chunk-5IA763KB.js";
import "./chunk-QKS6PIY6.js";
import "./chunk-R5BTSPWT.js";
import "./chunk-Z2L6EED4.js";
import "./chunk-43W2AR4R.js";
import "./chunk-X5EOLPIE.js";
import "./chunk-VNPGSD2C.js";
import "./chunk-PJALR7VA.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import {
  d as d2
} from "./chunk-CE7WVJQV.js";
import "./chunk-LCFK6PEB.js";
import "./chunk-GJTB7YCT.js";
import "./chunk-LQEYS467.js";
import "./chunk-A66MNK5C.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-RCGJPJRB.js";
import "./chunk-5CRXWQ3Y.js";
import "./chunk-G54IOEGF.js";
import "./chunk-EP5G3AVD.js";
import "./chunk-VH245UJV.js";
import "./chunk-WH2FR6UE.js";
import "./chunk-F3W2DG3D.js";
import "./chunk-YMJZWW2N.js";
import "./chunk-7Q4JSL7R.js";
import "./chunk-VBJTBJYL.js";
import "./chunk-ES2OYM5K.js";
import "./chunk-JXPOROPE.js";
import "./chunk-OPBXQTOC.js";
import "./chunk-DKMSVKV3.js";
import "./chunk-YIIXBP6I.js";
import "./chunk-LN6VH2LB.js";
import "./chunk-GZFJKWTS.js";
import "./chunk-2DHZIDQK.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-SW3IBIJ7.js";
import "./chunk-E54MA7AH.js";
import "./chunk-6TU4HBID.js";
import "./chunk-SX2OLFE7.js";
import "./chunk-WGIZLWW7.js";
import "./chunk-PUOCGOJB.js";
import "./chunk-XQH2QDB2.js";
import "./chunk-LPNAPHOF.js";
import "./chunk-DBQLTBDH.js";
import "./chunk-AMH7OVBF.js";
import "./chunk-SUZN3TAH.js";
import {
  d
} from "./chunk-VILGTHTP.js";
import "./chunk-ATEWWVHG.js";
import "./chunk-LEOFRCUR.js";
import "./chunk-CP4GPQHD.js";
import "./chunk-IZSNXKMJ.js";
import "./chunk-IOKAACTA.js";
import "./chunk-VFTH6C2E.js";
import "./chunk-M5RSIRGD.js";
import "./chunk-UYSPJCCV.js";
import "./chunk-SMFCDOAJ.js";
import "./chunk-2HEBE37N.js";
import "./chunk-5A4G4OVM.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-44C2A72D.js";
import "./chunk-DIKY6MBW.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-GGCWKF4X.js";
import {
  i
} from "./chunk-6D5XULXX.js";
import "./chunk-445IB4DS.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import "./chunk-H4N5QOMX.js";
import "./chunk-F2LC36UV.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-Z2DWZ5IF.js";
import "./chunk-TDZ623HP.js";
import "./chunk-6RLUKSNK.js";
import "./chunk-VEUN2EF3.js";
import "./chunk-UN4ISSP7.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-TKY5RBM3.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-SIQNRYEG.js";
import "./chunk-TTDEVHSF.js";
import "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-BMGF5ELJ.js";
import {
  b
} from "./chunk-JU6MEO4D.js";
import "./chunk-CY5MS6DC.js";
import "./chunk-C6FFJ4QS.js";
import "./chunk-Q4Q32WYV.js";
import "./chunk-A3J7W53Y.js";
import "./chunk-HLF5XJSV.js";
import "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-Y6AYXNMP.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import "./chunk-X7VTUWCX.js";
import "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import "./chunk-GD4XDYZL.js";
import "./chunk-33ECLFFF.js";
import "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import {
  a,
  s2 as s
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/arcade.js
var p = null;
function f(e, t2, a2, n3 = {}) {
  const o = t2.elementType, s2 = "value", c = "array" === o.type ? [{ name: s2, type: o.type, elementType: o.elementType }] : "dictionary" === o.type ? [{ name: s2, type: o.type, properties: o.properties }] : [{ name: s2, type: o.type }];
  return new t(e.map((e2) => {
    const t3 = {};
    return b2(t3, c, { [s2]: e2 }, a2, n3), t3[s2];
  }));
}
function m2(e, t2, r = {}) {
  const a2 = e instanceof d2 ? new Xe({ source: e.features, geometryType: e.geometryType, fields: e.fields, spatialReference: e.spatialReference }) : e;
  return t2.constructFeatureSet(a2, r.spatialReference, null, true, r.lruCache, r.interceptor);
}
function y(e, t2, r = {}) {
  const { spatialReference: a2, interceptor: n3, lruCache: o } = r;
  return "string" == typeof e ? t2.createFeatureSetCollectionFromService(e, a2, o, n3) : t2.createFeatureSetCollectionFromMap(e, a2, o, n3);
}
function d3(e, t2, r, a2 = {}) {
  const n3 = {};
  return b2(n3, t2.properties, e, r, a2), new p.Dictionary(n3);
}
function b2(e, r, a2, n3, c = {}) {
  const i2 = {};
  for (const t2 of Object.keys(a2)) i2[t2.toLowerCase()] = a2[t2];
  for (const l of r) {
    const r2 = l.name.toLowerCase();
    if (c.variablesPreProcessed) e[r2] = i2[r2];
    else switch (l.type) {
      case "array": {
        const t2 = i2[r2];
        e[r2] = null == t2 ? null : f(t2, l, n3, c);
        break;
      }
      case "feature": {
        const t2 = i2[r2];
        e[r2] = null == t2 ? null : p.Feature.createFromGraphic(t2, c == null ? void 0 : c.timeZone);
        break;
      }
      case "featureSet": {
        const t2 = i2[r2];
        e[r2] = null == t2 ? null : n3 ? m2(t2, n3, c) : null;
        break;
      }
      case "featureSetCollection": {
        const t2 = i2[r2];
        e[r2] = null == t2 ? null : n3 ? y(t2, n3, c) : null;
        break;
      }
      case "dictionary": {
        const t2 = i2[r2];
        e[r2] = null == t2 ? null : d3(t2, l, n3, c);
        break;
      }
      case "date": {
        const a3 = i2[r2];
        e[r2] = a3 ? a3 instanceof m ? a3 : (c == null ? void 0 : c.timeZone) ? m.dateJSAndZoneToArcadeDate(a3, c == null ? void 0 : c.timeZone) : m.dateJSToArcadeDate(a3) : null;
        break;
      }
      case "dateOnly": {
        const t2 = i2[r2];
        e[r2] = t2 ? t2 instanceof n ? t2 : n.fromReader(t2) : null;
        break;
      }
      case "time": {
        const t2 = i2[r2];
        e[r2] = t2 ? t2 instanceof n2 ? t2 : n2.fromReader(t2) : null;
        break;
      }
      case "knowledgeGraph":
      case "geometry":
      case "boolean":
      case "text":
      case "number":
        e[r2] = i2[r2];
    }
  }
}
function v(e, t2) {
  for (const r of e) t2.push(r), "dictionary" === r.type && v(r.properties, t2);
  return t2;
}
function S(e, t2, r, a2, n3) {
  const { spatialReference: o, interceptor: s2, lruCache: c, console: l, abortSignal: u, timeZone: p2, services: f2 = { portal: b.getDefault() } } = r, m3 = { vars: {}, spatialReference: o, interceptor: s2, timeZone: p2, lrucache: c, useAsync: n3, services: f2, console: l, abortSignal: u };
  return t2 ? (b2(m3.vars, e.variables, t2, a2, r), m3) : m3;
}
function g(t2, r) {
  switch (r.getArcadeType(t2)) {
    case "number":
    case "text":
    case "boolean":
    case "point":
    case "polygon":
    case "polyline":
    case "multipoint":
    case "extent":
      return t2;
    case "date":
      return t2.toJSDate();
    case "time":
    case "dateOnly":
      return t2.toString();
    case "feature": {
      const r2 = (t2.type, t2), a2 = "geometry" in r2 ? r2.geometry() : null, n3 = "readAttributes" in r2 ? r2.readAttributes() : r2.attributes;
      return new d({ geometry: a2, attributes: n3 });
    }
    case "dictionary": {
      const e = t2, a2 = e.attributes, n3 = {};
      for (const t3 of Object.keys(a2)) n3[t3] = g(e.field(t3), r);
      return n3;
    }
    case "array":
      return ("toArray" in t2 ? t2.toArray() : t2).map((e) => g(e, r));
  }
  return t2;
}
var w = { variables: [{ name: "$feature", type: "feature" }, { name: "$layer", type: "featureSet" }, { name: "$datastore", type: "featureSetCollection" }, { name: "$map", type: "featureSetCollection" }, { name: "$userInput", type: "geometry" }, { name: "$graph", type: "knowledgeGraph" }] };
var $ = { variables: [{ name: "$feature", type: "feature" }, { name: "$aggregatedFeatures", type: "featureSet" }] };
var h = /* @__PURE__ */ new Map([["aggregate-field", { variables: [{ name: "$feature", type: "feature" }] }], ["form-constraint", { variables: [{ name: "$feature", type: "feature" }] }], ["feature-z", { variables: [{ name: "$feature", type: "feature" }] }], ["field-calculation", { variables: [{ name: "$feature", type: "feature" }, { name: "$datastore", type: "featureSetCollection" }] }], ["form-calculation", { variables: [{ name: "$feature", type: "feature" }, { name: "$originalFeature", type: "feature" }, { name: "$layer", type: "featureSet" }, { name: "$featureSet", type: "featureSet" }, { name: "$datastore", type: "featureSetCollection" }, { name: "$map", type: "featureSetCollection" }, { name: "$editContext", type: "dictionary", properties: [{ name: "editType", type: "text" }] }] }], ["labeling", { variables: [{ name: "$feature", type: "feature" }] }], ["popup", w], ["popup-element", w], ["feature-reduction-popup", $], ["feature-reduction-popup-element", $], ["visualization", { variables: [{ name: "$feature", type: "feature" }, { name: "$view", type: "dictionary", properties: [{ name: "scale", type: "number" }] }] }]]);
function C(e) {
  const t2 = h.get(e);
  if (!t2) {
    const t3 = Array.from(h.keys()).map((e2) => `'${e2}'`).join(", ");
    throw new s("createArcadeProfile:invalid-profile-name", `Invalid profile name '${e}'. You must specify one of the following values: ${t3}`);
  }
  return a(t2);
}
async function A(e, t2, r = {}) {
  p || (p = await i());
  const { arcade: n3, arcadeUtils: o } = p, { loadScriptDependencies: s2, referencesMember: c, scriptIsAsync: i2 } = n3, l = v(t2.variables, []), f2 = l.filter((e2) => "featureSet" === e2.type || "featureSetCollection" === e2.type).map((e2) => e2.name.toLowerCase()), m3 = n3.parseScript(e, f2);
  if (!m3) throw new s("arcade:invalid-script", "Unable to create SyntaxTree");
  const y2 = o.extractFieldNames(m3), d4 = n3.scriptTouchesGeometry(m3), b3 = l.map((e2) => e2.name.toLowerCase()).filter((e2) => c(m3, e2)), w2 = i2(m3, f2);
  await s2(m3, w2, f2);
  const $2 = { vars: {}, spatialReference: null, useAsync: w2 };
  for (const a2 of b3) $2.vars[a2] = "any";
  const { lruCache: h2 } = r, C2 = n3.compileScript(m3, $2), A2 = n3.featureSetUtils(), { services: j } = r;
  return { execute: (e2, r2 = {}) => {
    if (w2) throw new s("arcade:invalid-execution-mode", "Cannot execute the script in synchronous mode");
    const n4 = C2(S(t2, e2, { lruCache: h2, ...r2 }, A2, w2));
    return r2.rawOutput ? n4 : g(n4, o);
  }, executeAsync: async (e2, r2 = {}) => {
    const a2 = await C2(S(t2, e2, { lruCache: h2, services: j, ...r2 }, A2, w2));
    return r2.rawOutput ? a2 : g(a2, o);
  }, isAsync: w2, variablesUsed: b3, fieldsUsed: y2, geometryUsed: d4, syntaxTree: m3 };
}
export {
  A as createArcadeExecutor,
  C as createArcadeProfile
};
//# sourceMappingURL=arcade-XEFROZXY.js.map
