import {
  m,
  n,
  n2
} from "./chunk-MBR7IVUG.js";
import {
  y
} from "./chunk-AMH7OVBF.js";
import {
  DateTime
} from "./chunk-Q7TEBZSN.js";
import {
  w
} from "./chunk-A3J7W53Y.js";

// node_modules/@arcgis/core/arcade/featureset/support/shared.js
var l;
var s;
function y2(e) {
  return y.fromJSON(e.toJSON());
}
function u(e) {
  return e.toJSON ? e.toJSON() : e;
}
function f(e) {
  return e instanceof Date;
}
function d(e) {
  return e instanceof DateTime;
}
function g(r) {
  return r instanceof m;
}
function T(e) {
  return e instanceof n;
}
function F(e) {
  return e instanceof n2;
}
function O(e) {
  if (null == e) return null;
  if ("number" == typeof e) return e;
  switch (e.toLowerCase()) {
    case "meters":
    case "meter":
      return 109404;
    case "miles":
    case "mile":
      return 109439;
    case "kilometers":
    case "kilometer":
    case "km":
      return 109414;
  }
  return null;
}
function v(e) {
  if (null == e) return null;
  switch (e.type) {
    case "polygon":
    case "multipoint":
    case "polyline":
      return e.extent;
    case "point":
      return new w({ xmin: e.x, ymin: e.y, xmax: e.x, ymax: e.y, spatialReference: e.spatialReference });
    case "extent":
      return e;
  }
  return null;
}
function b(e) {
  if (null == e) return null;
  if ("number" == typeof e) return e;
  if ("number" == typeof e) return e;
  switch (e.toLowerCase()) {
    case "meters":
    case "meter":
      return 9001;
    case "miles":
    case "mile":
      return 9093;
    case "kilometers":
    case "kilometer":
    case "km":
      return 9036;
  }
  return null;
}
!function(e) {
  e[e.Standardised = 0] = "Standardised", e[e.StandardisedNoInterval = 1] = "StandardisedNoInterval", e[e.SqlServer = 2] = "SqlServer", e[e.Oracle = 3] = "Oracle", e[e.Postgres = 4] = "Postgres", e[e.PGDB = 5] = "PGDB", e[e.FILEGDB = 6] = "FILEGDB", e[e.NotEvaluated = 7] = "NotEvaluated";
}(l || (l = {})), function(e) {
  e[e.InFeatureSet = 0] = "InFeatureSet", e[e.NotInFeatureSet = 1] = "NotInFeatureSet", e[e.Unknown = 2] = "Unknown";
}(s || (s = {}));
var D = 1e3;
var N = { point: "point", polygon: "polygon", polyline: "polyline", multipoint: "multipoint", extent: "extent", esriGeometryPoint: "point", esriGeometryPolygon: "polygon", esriGeometryPolyline: "polyline", esriGeometryMultipoint: "multipoint", esriGeometryEnvelope: "extent", envelope: "extent" };
var w2 = { point: "esriGeometryPoint", polygon: "esriGeometryPolygon", polyline: "esriGeometryPolyline", multipoint: "esriGeometryMultipoint", extent: "esriGeometryEnvelope", esriGeometryPoint: "esriGeometryPoint", esriGeometryPolygon: "esriGeometryPolygon", esriGeometryPolyline: "esriGeometryPolyline", esriGeometryMultipoint: "esriGeometryMultipoint", esriGeometryEnvelope: "esriGeometryEnvelope", envelope: "esriGeometryEnvelope" };
var E = { "small-integer": "esriFieldTypeSmallInteger", integer: "esriFieldTypeInteger", long: "esriFieldTypeLong", single: "esriFieldTypeSingle", double: "esriFieldTypeDouble", string: "esriFieldTypeString", date: "esriFieldTypeDate", "date-only": "esriFieldTypeDateOnly", "time-only": "esriFieldTypeTimeOnly", "timestamp-offset": "esriFieldTypeTimestampOffset", oid: "esriFieldTypeOID", geometry: "esriFieldTypeGeometry", blob: "esriFieldTypeBlob", raster: "esriFieldTypeRaster", guid: "esriFieldTypeGUID", "global-id": "esriFieldTypeGlobalID", xml: "esriFieldTypeXML", "big-integer": "esriFieldTypeBigInteger", esriFieldTypeSmallInteger: "esriFieldTypeSmallInteger", esriFieldTypeInteger: "esriFieldTypeInteger", esriFieldTypeLong: "esriFieldTypeLong", esriFieldTypeSingle: "esriFieldTypeSingle", esriFieldTypeDouble: "esriFieldTypeDouble", esriFieldTypeString: "esriFieldTypeString", esriFieldTypeDate: "esriFieldTypeDate", esriFieldTypeDateOnly: "esriFieldTypeDateOnly", esriFieldTypeTimeOnly: "esriFieldTypeTimeOnly", esriFieldTypeTimestampOffset: "esriFieldTypeTimestampOffset", esriFieldTypeOID: "esriFieldTypeOID", esriFieldTypeGeometry: "esriFieldTypeGeometry", esriFieldTypeBlob: "esriFieldTypeBlob", esriFieldTypeRaster: "esriFieldTypeRaster", esriFieldTypeGUID: "esriFieldTypeGUID", esriFieldTypeGlobalID: "esriFieldTypeGlobalID", esriFieldTypeXML: "esriFieldTypeXML", esriFieldTypeBigInteger: "esriFieldTypeBigInteger" };
function k(e) {
  return void 0 === e ? "" : e = (e = (e = e.replace(/\/featureserver\/[0-9]*/i, "/FeatureServer")).replace(/\/mapserver\/[0-9]*/i, "/MapServer")).split("?")[0];
}
function J(e, r) {
  r || (r = {}), "function" == typeof r && (r = { cmp: r });
  const t = "boolean" == typeof r.cycles && r.cycles, i = r.cmp && (n3 = r.cmp, function(e2) {
    return function(r2, t2) {
      const i2 = { key: r2, value: e2[r2] }, o2 = { key: t2, value: e2[t2] };
      return n3(i2, o2);
    };
  });
  var n3;
  const o = [];
  return function e2(r2) {
    if ((r2 == null ? void 0 : r2.toJSON) && "function" == typeof r2.toJSON && (r2 = r2.toJSON()), void 0 === r2) return;
    if ("number" == typeof r2) return isFinite(r2) ? "" + r2 : "null";
    if ("object" != typeof r2) return JSON.stringify(r2);
    let n4, l2;
    if (Array.isArray(r2)) {
      for (l2 = "[", n4 = 0; n4 < r2.length; n4++) n4 && (l2 += ","), l2 += e2(r2[n4]) || "null";
      return l2 + "]";
    }
    if (null === r2) return "null";
    if (o.includes(r2)) {
      if (t) return JSON.stringify("__cycle__");
      throw new TypeError("Converting circular structure to JSON");
    }
    const s2 = o.push(r2) - 1, y3 = Object.keys(r2).sort(i == null ? void 0 : i(r2));
    for (l2 = "", n4 = 0; n4 < y3.length; n4++) {
      const t2 = y3[n4], i2 = e2(r2[t2]);
      i2 && (l2 && (l2 += ","), l2 += JSON.stringify(t2) + ":" + i2);
    }
    return o.splice(s2, 1), "{" + l2 + "}";
  }(e);
}
function M(e) {
  switch (e.type) {
    case "catalog":
    case "csv":
    case "feature":
    case "geojson":
    case "oriented-imagery":
    case "subtype-group":
    case "wfs":
      return true;
    default:
      return false;
  }
}
function j(e) {
  switch (e.type) {
    case "catalog-footprint":
    case "subtype-sublayer":
      return true;
    default:
      return M(e);
  }
}

export {
  l,
  s,
  y2 as y,
  u,
  f,
  d,
  g,
  T,
  F,
  O,
  v,
  b,
  D,
  N,
  w2 as w,
  E,
  k,
  J,
  M,
  j
};
//# sourceMappingURL=chunk-ZFCZ2Q23.js.map
