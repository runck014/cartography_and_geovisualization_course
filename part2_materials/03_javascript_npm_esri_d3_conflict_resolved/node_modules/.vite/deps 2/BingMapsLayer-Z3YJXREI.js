import {
  o
} from "./chunk-LFMMBYIR.js";
import {
  p,
  z
} from "./chunk-5PCP47ZJ.js";
import {
  t as t2
} from "./chunk-IYJHGZBJ.js";
import {
  f as f2
} from "./chunk-LCFK6PEB.js";
import {
  l
} from "./chunk-YMJZWW2N.js";
import "./chunk-7Q4JSL7R.js";
import "./chunk-VBJTBJYL.js";
import {
  t
} from "./chunk-ES2OYM5K.js";
import {
  b
} from "./chunk-JXPOROPE.js";
import "./chunk-OPBXQTOC.js";
import "./chunk-DKMSVKV3.js";
import "./chunk-YIIXBP6I.js";
import {
  S
} from "./chunk-LN6VH2LB.js";
import "./chunk-GZFJKWTS.js";
import "./chunk-SMFCDOAJ.js";
import {
  f
} from "./chunk-2HEBE37N.js";
import "./chunk-5A4G4OVM.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-44C2A72D.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-GGCWKF4X.js";
import "./chunk-6D5XULXX.js";
import "./chunk-445IB4DS.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import {
  u
} from "./chunk-Z2DWZ5IF.js";
import "./chunk-UN4ISSP7.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-TKY5RBM3.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-SIQNRYEG.js";
import "./chunk-TTDEVHSF.js";
import "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-CY5MS6DC.js";
import "./chunk-C6FFJ4QS.js";
import "./chunk-Q4Q32WYV.js";
import {
  j2 as j,
  w
} from "./chunk-A3J7W53Y.js";
import "./chunk-HLF5XJSV.js";
import {
  g
} from "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-DRBJFCLQ.js";
import {
  n
} from "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import {
  U
} from "./chunk-X7VTUWCX.js";
import "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import {
  m
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import {
  s2 as s
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/layers/BaseTileLayer.js
var h;
var d = new t2("0/0/0", 0, 0, 0, void 0);
var g2 = h = class extends l(t(f2(f))) {
  constructor() {
    super(...arguments), this.tileInfo = z.create({ spatialReference: g.WebMercator, size: 256 }), this.type = "base-tile", this.fullExtent = new w(-20037508342787e-6, -2003750834278e-5, 2003750834278e-5, 20037508342787e-6, g.WebMercator), this.spatialReference = g.WebMercator;
  }
  getTileBounds(e, t3, r2, o2) {
    const s2 = o2 || u();
    return d.level = e, d.row = t3, d.col = r2, d.extent = s2, this.tileInfo.updateTileInfo(d), d.extent = void 0, s2;
  }
  fetchTile(e, r2, o2, s2 = {}) {
    const { signal: i } = s2, a2 = this.getTileUrl(e, r2, o2), p2 = { responseType: "image", signal: i, query: { ...this.refreshParameters } };
    return U(a2 ?? "", p2).then((e2) => e2.data);
  }
  async fetchImageBitmapTile(e, r2, o2, s2 = {}) {
    const { signal: i } = s2;
    if (this.fetchTile !== h.prototype.fetchTile) {
      const t3 = await this.fetchTile(e, r2, o2, s2);
      return o(t3, e, r2, o2, i);
    }
    const a2 = this.getTileUrl(e, r2, o2) ?? "", p2 = { responseType: "blob", signal: i, query: { ...this.refreshParameters } }, { data: l2 } = await U(a2, p2);
    return o(l2, e, r2, o2, i);
  }
  getTileUrl() {
    throw new s("basetilelayer:gettileurl-not-implemented", "getTileUrl() is not implemented");
  }
};
r([m({ type: z })], g2.prototype, "tileInfo", void 0), r([m({ type: ["show", "hide"] })], g2.prototype, "listMode", void 0), r([m({ readOnly: true, value: "base-tile" })], g2.prototype, "type", void 0), r([m({ nonNullable: true })], g2.prototype, "fullExtent", void 0), r([m()], g2.prototype, "spatialReference", void 0), g2 = h = r([a("esri.layers.BaseTileLayer")], g2);
var j2 = g2;

// node_modules/@arcgis/core/layers/BingMapsLayer.js
var c = new n({ BingMapsAerial: "aerial", BingMapsRoad: "road", BingMapsHybrid: "hybrid" });
var m2 = "https://dev.virtualearth.net";
var h2 = class extends l(b(S(j2))) {
  constructor(e) {
    super(e), this.type = "bing-maps", this.tileInfo = new z({ size: [256, 256], dpi: 96, origin: new j({ x: -20037508342787e-6, y: 20037508342787e-6, spatialReference: g.WebMercator }), spatialReference: g.WebMercator, lods: [new p({ level: 1, resolution: 78271.5169639999, scale: 295828763795777e-6 }), new p({ level: 2, resolution: 39135.7584820001, scale: 147914381897889e-6 }), new p({ level: 3, resolution: 19567.8792409999, scale: 73957190948944e-6 }), new p({ level: 4, resolution: 9783.93962049996, scale: 36978595474472e-6 }), new p({ level: 5, resolution: 4891.96981024998, scale: 18489297737236e-6 }), new p({ level: 6, resolution: 2445.98490512499, scale: 9244648868618e-6 }), new p({ level: 7, resolution: 1222.99245256249, scale: 4622324434309e-6 }), new p({ level: 8, resolution: 611.49622628138, scale: 2311162217155e-6 }), new p({ level: 9, resolution: 305.748113140558, scale: 1155581108577e-6 }), new p({ level: 10, resolution: 152.874056570411, scale: 577790.554289 }), new p({ level: 11, resolution: 76.4370282850732, scale: 288895.277144 }), new p({ level: 12, resolution: 38.2185141425366, scale: 144447.638572 }), new p({ level: 13, resolution: 19.1092570712683, scale: 72223.819286 }), new p({ level: 14, resolution: 9.55462853563415, scale: 36111.909643 }), new p({ level: 15, resolution: 4.77731426794937, scale: 18055.954822 }), new p({ level: 16, resolution: 2.38865713397468, scale: 9027.977411 }), new p({ level: 17, resolution: 1.19432856685505, scale: 4513.988705 }), new p({ level: 18, resolution: 0.597164283559817, scale: 2256.994353 }), new p({ level: 19, resolution: 0.298582141647617, scale: 1128.497176 }), new p({ level: 20, resolution: 0.1492910708238085, scale: 564.248588 })] }), this.key = null, this.style = "road", this.culture = "en-US", this.region = null, this.portalUrl = null, this.hasAttributionData = true;
  }
  get bingMetadata() {
    return this._get("bingMetadata");
  }
  set bingMetadata(e) {
    this._set("bingMetadata", e);
  }
  get copyright() {
    return null != this.bingMetadata ? this.bingMetadata.copyright : null;
  }
  get operationalLayerType() {
    return c.toJSON(this.style);
  }
  get bingLogo() {
    return null != this.bingMetadata ? this.bingMetadata.brandLogoUri : null;
  }
  load(e) {
    return this.key ? this.addResolvingPromise(this._getMetadata()) : this.portalUrl ? this.addResolvingPromise(this._getPortalBingKey().then(() => this._getMetadata())) : this.addResolvingPromise(Promise.reject(new s("bingmapslayer:load", "Bing layer must have bing key."))), Promise.resolve(this);
  }
  getTileUrl(e, t3, r2) {
    if (!this.loaded || null == this.bingMetadata) return null;
    const o2 = this.bingMetadata.resourceSets[0].resources[0], a2 = o2.imageUrlSubdomains[t3 % o2.imageUrlSubdomains.length], s2 = this._getQuadKey(e, t3, r2);
    return o2.imageUrl.replace("{subdomain}", a2).replace("{quadkey}", s2);
  }
  async fetchAttributionData() {
    return this.load().then(() => {
      if (null == this.bingMetadata) return null;
      return { contributors: this.bingMetadata.resourceSets[0].resources[0].imageryProviders.map((e) => ({ attribution: e.attribution, coverageAreas: e.coverageAreas.map((e2) => ({ zoomMin: e2.zoomMin, zoomMax: e2.zoomMax, score: 1, bbox: [e2.bbox[0], e2.bbox[1], e2.bbox[2], e2.bbox[3]] })) })) };
    });
  }
  _getMetadata() {
    const e = { road: "roadOnDemand", aerial: "aerial", hybrid: "aerialWithLabelsOnDemand" }[this.style];
    return U(`${m2}/REST/v1/Imagery/Metadata/${e}`, { responseType: "json", query: { include: "ImageryProviders", uriScheme: "https", key: this.key, suppressStatus: true, output: "json", culture: this.culture, userRegion: this.region } }).then((e2) => {
      const t3 = e2.data;
      if (200 !== t3.statusCode) throw new s("bingmapslayer:getmetadata", t3.statusDescription);
      if (this.bingMetadata = t3, 0 === this.bingMetadata.resourceSets.length) throw new s("bingmapslayer:getmetadata", "no bing resourcesets");
      if (0 === this.bingMetadata.resourceSets[0].resources.length) throw new s("bingmapslayer:getmetadata", "no bing resources");
    }).catch((e2) => {
      throw new s("bingmapslayer:getmetadata", e2.message);
    });
  }
  _getPortalBingKey() {
    return U(this.portalUrl ?? "", { responseType: "json", authMode: "no-prompt", query: { f: "json" } }).then((e) => {
      if (!e.data.bingKey) throw new s("bingmapslayer:getportalbingkey", "The referenced Portal does not contain a valid bing key");
      this.key = e.data.bingKey;
    }).catch((e) => {
      throw new s("bingmapslayer:getportalbingkey", e.message);
    });
  }
  _getQuadKey(e, t3, r2) {
    let o2 = "";
    for (let a2 = e; a2 > 0; a2--) {
      let e2 = 0;
      const s2 = 1 << a2 - 1;
      r2 & s2 && (e2 += 1), t3 & s2 && (e2 += 2), o2 += e2.toString();
    }
    return o2;
  }
};
r([m({ json: { read: false, write: false }, value: null })], h2.prototype, "bingMetadata", null), r([m({ json: { read: false, write: false }, value: "bing-maps", readOnly: true })], h2.prototype, "type", void 0), r([m({ type: z })], h2.prototype, "tileInfo", void 0), r([m({ type: String, readOnly: true, json: { read: false, write: false } })], h2.prototype, "copyright", null), r([m({ type: String, json: { write: false, read: false } })], h2.prototype, "key", void 0), r([m({ type: c.apiValues, nonNullable: true, json: { read: { source: "layerType", reader: c.read } } })], h2.prototype, "style", void 0), r([m({ type: ["BingMapsAerial", "BingMapsHybrid", "BingMapsRoad"] })], h2.prototype, "operationalLayerType", null), r([m({ type: String, json: { write: false, read: false } })], h2.prototype, "culture", void 0), r([m({ type: String, json: { write: false, read: false } })], h2.prototype, "region", void 0), r([m({ type: String, json: { write: true, read: true } })], h2.prototype, "portalUrl", void 0), r([m({ type: Boolean, json: { write: false, read: false } })], h2.prototype, "hasAttributionData", void 0), r([m({ type: String, readOnly: true })], h2.prototype, "bingLogo", null), h2 = r([a("esri.layers.BingMapsLayer")], h2);
var b2 = h2;
export {
  b2 as default
};
//# sourceMappingURL=BingMapsLayer-Z3YJXREI.js.map
