import {
  e
} from "./chunk-7DJDQMBH.js";
import {
  r
} from "./chunk-6OGF6BAB.js";
import {
  g
} from "./chunk-L6D73M4D.js";
import {
  h
} from "./chunk-33ECLFFF.js";

// node_modules/@arcgis/core/geometry/geometryEngine.js
function u(e2) {
  const r2 = Array.isArray(e2) ? e2[0].spatialReference : e2.spatialReference;
  return r2 ? h(g, r2) : g.WGS84;
}
function i(n) {
  return e.extendedSpatialReferenceInfo(n);
}
function o(n, t) {
  return e.clip(r, u(n), n, t);
}
function c(n, t) {
  return e.cut(r, u(n), n, t);
}
function f(n, t) {
  return e.contains(r, u(n), n, t);
}
function s(n, t) {
  return e.crosses(r, u(n), n, t);
}
function a(n, t, i2) {
  return e.distance(r, u(n), n, t, i2);
}
function l(n, t) {
  return e.equals(r, u(n), n, t);
}
function p(n, t) {
  return e.intersects(r, u(n), n, t);
}
function m(n, t) {
  return e.touches(r, u(n), n, t);
}
function d(n, t) {
  return e.within(r, u(n), n, t);
}
function g2(n, t) {
  return e.disjoint(r, u(n), n, t);
}
function h2(n, t) {
  return e.overlaps(r, u(n), n, t);
}
function w(n, t, i2) {
  return e.relate(r, u(n), n, t, i2);
}
function R(n) {
  return e.isSimple(r, u(n), n);
}
function y(n) {
  return e.simplify(r, u(n), n);
}
function x(n, t = false) {
  return e.convexHull(r, u(n), n, t);
}
function S(n, t) {
  return e.difference(r, u(n), n, t);
}
function j(n, t) {
  return e.symmetricDifference(r, u(n), n, t);
}
function A(n, t) {
  return e.intersect(r, u(n), n, t);
}
function D(n, t = null) {
  return e.union(r, u(n), n, t);
}
function T(n, t, i2, o2, c2, f2) {
  return e.offset(r, u(n), n, t, i2, o2, c2, f2);
}
function E(n, t, i2, o2 = false) {
  return e.buffer(r, u(n), n, t, i2, o2);
}
function J(n, t, i2, o2, c2, f2) {
  return e.geodesicBuffer(r, u(n), n, t, i2, o2, c2, f2);
}
function L(n, t, i2 = true) {
  return e.nearestCoordinate(r, u(n), n, t, i2);
}
function N(n, t) {
  return e.nearestVertex(r, u(n), n, t);
}
function O(n, t, i2, o2) {
  return e.nearestVertices(r, u(n), n, t, i2, o2);
}
function V(n) {
  var _a;
  return "xmin" in n ? "center" in n ? n.center : null : "x" in n ? n : "extent" in n ? ((_a = n.extent) == null ? void 0 : _a.center) ?? null : null;
}
function v(n, r2, t) {
  if (null == n) throw new K();
  const u2 = n.spatialReference;
  if (null == (t = t ?? V(n))) throw new K();
  const i2 = n.constructor.fromJSON(e.rotate(n, r2, t));
  return i2.spatialReference = u2, i2;
}
function z(n, r2) {
  if (null == n) throw new K();
  const t = n.spatialReference;
  if (null == (r2 = r2 ?? V(n))) throw new K();
  const u2 = n.constructor.fromJSON(e.flipHorizontal(n, r2));
  return u2.spatialReference = t, u2;
}
function B(n, r2) {
  if (null == n) throw new K();
  const t = n.spatialReference;
  if (null == (r2 = r2 ?? V(n))) throw new K();
  const u2 = n.constructor.fromJSON(e.flipVertical(n, r2));
  return u2.spatialReference = t, u2;
}
function G(n, t, i2, o2) {
  return e.generalize(r, u(n), n, t, i2, o2);
}
function H(n, t, i2) {
  return e.densify(r, u(n), n, t, i2);
}
function I(n, t, i2, o2 = 0) {
  return e.geodesicDensify(r, u(n), n, t, i2, o2);
}
function b(n, t) {
  return e.planarArea(r, u(n), n, t);
}
function k(n, t) {
  return e.planarLength(r, u(n), n, t);
}
function q(n, t, i2) {
  return e.geodesicArea(r, u(n), n, t, i2);
}
function C(n, t, i2) {
  return e.geodesicLength(r, u(n), n, t, i2);
}
function P(n, t) {
  return e.intersectLinesToPoints(r, u(n), n, t);
}
function W(n, r2) {
  e.changeDefaultSpatialReferenceTolerance(n, r2);
}
function F(n) {
  e.clearDefaultSpatialReferenceTolerance(n);
}
var K = class extends Error {
  constructor() {
    super("Illegal Argument Exception");
  }
};

export {
  i,
  o,
  c,
  f,
  s,
  a,
  l,
  p,
  m,
  d,
  g2 as g,
  h2 as h,
  w,
  R,
  y,
  x,
  S,
  j,
  A,
  D,
  T,
  E,
  J,
  L,
  N,
  O,
  v,
  z,
  B,
  G,
  H,
  I,
  b,
  k,
  q,
  C,
  P,
  W,
  F
};
//# sourceMappingURL=chunk-OGTKWQYH.js.map
