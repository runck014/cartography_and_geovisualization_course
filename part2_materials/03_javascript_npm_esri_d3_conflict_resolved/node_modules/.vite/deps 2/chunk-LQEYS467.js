import {
  S as S2,
  c as c2,
  u
} from "./chunk-A66MNK5C.js";
import {
  e as e2,
  i as i2
} from "./chunk-EPAKCM4A.js";
import {
  C,
  b as b2,
  b2 as b3,
  c2 as c,
  h,
  h2,
  h3,
  h4,
  i,
  k,
  n,
  w,
  x
} from "./chunk-LEOFRCUR.js";
import {
  S,
  d,
  m3 as m,
  y
} from "./chunk-CP4GPQHD.js";
import {
  l
} from "./chunk-VFTH6C2E.js";
import {
  e
} from "./chunk-YVSEBNS4.js";
import {
  b
} from "./chunk-6RLUKSNK.js";
import {
  V
} from "./chunk-SIQNRYEG.js";
import {
  s2 as s
} from "./chunk-PKLD5YJF.js";

// node_modules/@arcgis/core/symbols/support/defaults3D.js
var u2 = w.fromSimpleMarkerSymbol(S2);
var w2 = b3.fromSimpleLineSymbol(u);
var S3 = h3.fromSimpleFillSymbol(c2);
var b4 = new c({ symbolLayers: new V([new h({ material: { color: e2 }, edges: new i({ size: e(1), color: new l(i2) }) })]) });
var L = new b3({ symbolLayers: new V([new h2({ material: { color: new l([0, 0, 0]) }, size: e(1) })]) });
var D = new h3({ symbolLayers: new V([new h({ outline: { color: new l([0, 0, 0]), size: e(1) } })]) });

// node_modules/@arcgis/core/symbols/support/symbolConversion.js
var S4 = "#useCIMFallbackSymbology()";
var g = { retainId: false, ignoreDrivers: false, hasLabelingContext: true };
function u3(u4, d2 = g) {
  var _a, _b, _c, _d;
  if (!u4) return { symbol: null };
  const { retainId: D2 = g.retainId, ignoreDrivers: M = g.ignoreDrivers, hasLabelingContext: j = g.hasLabelingContext, retainCIM: C2 = g.retainCIM, cimFallbackEnabled: I = g.cimFallbackEnabled } = d2;
  let k2 = null;
  if (x(u4) || u4 instanceof h4) k2 = u4.clone();
  else if ("cim" === u4.type) {
    const o = (_b = (_a = u4.data) == null ? void 0 : _a.symbol) == null ? void 0 : _b.type;
    switch (o) {
      case "CIMPointSymbol":
        k2 = C2 ? u4.clone() : w.fromCIMSymbol(u4);
        break;
      case "CIMLineSymbol":
        I && (k2 = L.clone(), (_c = d2 == null ? void 0 : d2.logWarning) == null ? void 0 : _c.call(d2, S4, "Unsupported CIM line symbology converted to fallback 3D line symbology"));
        break;
      case "CIMPolygonSymbol":
        I && (k2 = D.clone(), (_d = d2 == null ? void 0 : d2.logWarning) == null ? void 0 : _d.call(d2, S4, "Unsupported CIM polygon symbology converted to fallback 3D polygon symbology"));
    }
    if (!k2) return { error: new s("symbol-conversion:unsupported-cim-symbol", `CIM symbol of type '${o || "unknown"}' is unsupported in 3D`, { symbol: u4 }) };
  } else if (u4 instanceof d) k2 = b3.fromSimpleLineSymbol(u4);
  else if (u4 instanceof y) k2 = w.fromSimpleMarkerSymbol(u4);
  else if (u4 instanceof n) k2 = w.fromPictureMarkerSymbol(u4);
  else if (u4 instanceof S) k2 = d2.geometryType && "mesh" === d2.geometryType ? c.fromSimpleFillSymbol(u4) : h3.fromSimpleFillSymbol(u4);
  else {
    if (!(u4 instanceof m)) return { error: new s("symbol-conversion:unsupported-2d-symbol", `2D symbol of type '${u4.type || u4.declaredClass}' is unsupported in 3D`, { symbol: u4 }) };
    k2 = j ? b2.fromTextSymbol(u4) : w.fromTextSymbol(u4);
  }
  return D2 && k2 && "cim" !== k2.type && (k2.id = u4.id), M && x(k2) && k2.symbolLayers.forEach((o) => o.ignoreDrivers = true), { symbol: k2 };
}

// node_modules/@arcgis/core/symbols/support/jsonUtils.js
function l2(e3, o, n2, t) {
  const s2 = y2(e3, {}, { context: t, isLabelSymbol: false });
  null != s2 && (o[n2] = s2);
}
function i3(e3, o, n2, t) {
  const s2 = y2(e3, {}, { context: t, isLabelSymbol: true });
  null != s2 && (o[n2] = s2);
}
function m2(e3) {
  return e3 instanceof k || e3 instanceof h4;
}
function a(e3) {
  return e3 instanceof k && ("polygon-3d" === e3.type || "line-3d" === e3.type);
}
function y2(e3, t, r) {
  var _a;
  if (null == e3) return null;
  const { context: l3, isLabelSymbol: i4 } = r, y3 = l3 == null ? void 0 : l3.origin, p2 = l3 == null ? void 0 : l3.messages;
  if ("web-scene" === y3 && !m2(e3)) {
    const n2 = u3(e3, { retainCIM: true, hasLabelingContext: i4 });
    return null != n2.symbol ? n2.symbol.write(t, l3) : (p2 == null ? void 0 : p2.push(new s("symbol:unsupported", `Symbols of type '${e3.declaredClass}' are not supported in scenes. Use 3D symbology instead when working with WebScene and SceneView`, { symbol: e3, context: l3, error: n2.error })), null);
  }
  return b(l3 == null ? void 0 : l3.layer) && a(e3) ? (p2 == null ? void 0 : p2.push(new s("symbol:unsupported", `Symbols of type '${e3.declaredClass}' are not supported on layers of type '${(_a = l3 == null ? void 0 : l3.layer) == null ? void 0 : _a.declaredClass}'.`, { symbol: e3, context: l3 })), null) : ("web-map" === y3 || "portal-item" === y3 && !b(l3 == null ? void 0 : l3.layer)) && m2(e3) ? (p2 == null ? void 0 : p2.push(new s("symbol:unsupported", `Symbols of type '${e3.declaredClass}' are not supported in web maps and portal items. Use 2D symbology and CIMSymbol instead when working with MapView`, { symbol: e3, context: l3 })), null) : e3.write(t, l3);
}
function p(o, n2) {
  return C(o, null, n2);
}

export {
  l2 as l,
  i3 as i,
  p
};
//# sourceMappingURL=chunk-LQEYS467.js.map
