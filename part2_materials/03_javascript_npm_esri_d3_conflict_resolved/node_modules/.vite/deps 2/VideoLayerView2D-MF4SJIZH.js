import {
  u as u2
} from "./chunk-KJECNQ2J.js";
import {
  t
} from "./chunk-XXZFRDYH.js";
import "./chunk-GYMOXI76.js";
import {
  F
} from "./chunk-LH2VBN6X.js";
import "./chunk-5ZJ2MCRU.js";
import "./chunk-OBWNWUWS.js";
import "./chunk-2JZHLJXP.js";
import "./chunk-CGJR3XCF.js";
import {
  a as a2,
  j as j2,
  y as y2
} from "./chunk-KVO35ODJ.js";
import {
  e
} from "./chunk-O2HBAYVG.js";
import "./chunk-FKL5AVF4.js";
import "./chunk-CKPBZSTT.js";
import "./chunk-3T3LUDWR.js";
import "./chunk-SZ3BUBIG.js";
import "./chunk-JI3JMSDL.js";
import "./chunk-J3GKRP7Y.js";
import "./chunk-Q3K5MAUZ.js";
import "./chunk-KJNFPIQW.js";
import "./chunk-2XVRGGEF.js";
import "./chunk-DPVSO6BH.js";
import "./chunk-6TRZLPPJ.js";
import "./chunk-U6IFI7EK.js";
import "./chunk-MCHNAU6L.js";
import "./chunk-MYNRH67A.js";
import "./chunk-JMY2H33H.js";
import "./chunk-VBS2Y7KE.js";
import "./chunk-HCAIFU2M.js";
import "./chunk-AHZHHHCW.js";
import {
  l as l2
} from "./chunk-HOPPBFCJ.js";
import "./chunk-O75V7CSP.js";
import "./chunk-RSF7AFW5.js";
import {
  h
} from "./chunk-U4YUBCIE.js";
import "./chunk-C2RS46RL.js";
import "./chunk-HB2JTNV2.js";
import "./chunk-N42IF4WX.js";
import "./chunk-BLBULF2O.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-XJHQ5ZJ7.js";
import "./chunk-BXIXSFGX.js";
import "./chunk-HACIIBEF.js";
import "./chunk-MBR7IVUG.js";
import "./chunk-CAQ63GSR.js";
import "./chunk-256XKGQW.js";
import "./chunk-TRMW5XQP.js";
import "./chunk-HBU7EMDX.js";
import "./chunk-JRUJALSE.js";
import "./chunk-KDUYQUT4.js";
import "./chunk-73FHIZIF.js";
import "./chunk-ICIPRMPO.js";
import "./chunk-NEDBRPQY.js";
import "./chunk-EZCH3ZAJ.js";
import "./chunk-QLRZN73K.js";
import "./chunk-CGJUTDVJ.js";
import "./chunk-JMJOGITH.js";
import "./chunk-QEJMJI2R.js";
import "./chunk-EHD5KM2T.js";
import "./chunk-AEKV7TWM.js";
import {
  m as m2,
  p as p2
} from "./chunk-QJXYURT2.js";
import "./chunk-JUN5XSQC.js";
import "./chunk-MCZMPI2A.js";
import {
  D
} from "./chunk-KV3S4QI2.js";
import {
  n
} from "./chunk-ECMDQ4LS.js";
import "./chunk-D6FJTDNK.js";
import "./chunk-LP6TMAPE.js";
import "./chunk-RENLZYKC.js";
import "./chunk-IJO7BOFI.js";
import "./chunk-NGQEHRBA.js";
import "./chunk-QYSQ6XPQ.js";
import "./chunk-HZRXUNDJ.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-GGPPKSP2.js";
import "./chunk-MR727DXB.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-GNY4KZ34.js";
import "./chunk-43W2AR4R.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-A66MNK5C.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-YMJZWW2N.js";
import "./chunk-7Q4JSL7R.js";
import "./chunk-VBJTBJYL.js";
import "./chunk-ES2OYM5K.js";
import "./chunk-DKMSVKV3.js";
import "./chunk-YIIXBP6I.js";
import "./chunk-GZFJKWTS.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-5RVYVWSZ.js";
import "./chunk-6TU4HBID.js";
import "./chunk-WGIZLWW7.js";
import "./chunk-B3SR7LF7.js";
import "./chunk-PUOCGOJB.js";
import "./chunk-DBQLTBDH.js";
import "./chunk-AMH7OVBF.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-LXJGKQ4D.js";
import {
  d as d3
} from "./chunk-VILGTHTP.js";
import "./chunk-ATEWWVHG.js";
import "./chunk-LEOFRCUR.js";
import {
  S,
  d as d2,
  y
} from "./chunk-CP4GPQHD.js";
import "./chunk-IZSNXKMJ.js";
import "./chunk-IOKAACTA.js";
import {
  l
} from "./chunk-VFTH6C2E.js";
import "./chunk-M5RSIRGD.js";
import "./chunk-D2JPDRZZ.js";
import "./chunk-UYSPJCCV.js";
import "./chunk-SMFCDOAJ.js";
import "./chunk-2HEBE37N.js";
import "./chunk-5A4G4OVM.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-44C2A72D.js";
import "./chunk-DIKY6MBW.js";
import {
  c
} from "./chunk-YVSEBNS4.js";
import "./chunk-GGCWKF4X.js";
import "./chunk-6D5XULXX.js";
import "./chunk-445IB4DS.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import {
  K
} from "./chunk-H4N5QOMX.js";
import "./chunk-F2LC36UV.js";
import "./chunk-6Y2LNRVP.js";
import {
  v2 as v
} from "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-Z2DWZ5IF.js";
import "./chunk-UN4ISSP7.js";
import "./chunk-E2RPCJOE.js";
import {
  P,
  d,
  p
} from "./chunk-TKY5RBM3.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-SIQNRYEG.js";
import "./chunk-TTDEVHSF.js";
import "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-JU6MEO4D.js";
import "./chunk-CY5MS6DC.js";
import "./chunk-C6FFJ4QS.js";
import "./chunk-Q4Q32WYV.js";
import {
  j2 as j
} from "./chunk-A3J7W53Y.js";
import "./chunk-HLF5XJSV.js";
import "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-Y6AYXNMP.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import "./chunk-X7VTUWCX.js";
import "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import {
  m,
  r as r2
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import {
  o2 as o
} from "./chunk-GRW2QIBT.js";
import {
  r as r3,
  u
} from "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/OverlayMultipoint.js
var f = 2;
var x = class extends e {
  constructor(r4) {
    super(), this.element = r4, this._handles = new r2(), this.isWrapAround = false, this.perspectiveTransform = n(), this.wrapAroundShift = 0, this.clipGeometry = null, this._handles.add(p(() => this.element, () => {
      const e2 = this.element;
      this.ready(), e2 && this._handles.add(o(e2, "play", () => this.requestRender()));
    }, P));
  }
  getMesh(t2) {
    throw new Error("Method not implemented.");
  }
  destroy() {
    this._handles.destroy(), this.texture = r3(this.texture);
  }
  get textureSize() {
    if (!this.texture) return [1, 1];
    const t2 = this.texture.descriptor;
    return [t2.width, t2.height];
  }
  get dvsMat3() {
    return this.parent.dvsMat3;
  }
  beforeRender(t2) {
    const e2 = this.element;
    if (null == e2) return;
    const { context: r4 } = t2, { videoWidth: i, videoHeight: o2 } = e2;
    if (0 !== i && 0 !== o2) {
      if (this.texture) e2.paused || this.texture.setData(e2);
      else {
        const t3 = new p2();
        t3.wrapMode = D.CLAMP_TO_EDGE, t3.preMultiplyAlpha = true, t3.width = i, t3.height = o2, this.texture = new m2(r4, t3, e2);
      }
      e2.paused || (this.texture.generateMipmap(), this.requestRender()), super.beforeRender(t2);
    }
  }
  _createTransforms() {
    return null;
  }
  updateDrawCoords(t2, e2, r4, i) {
    const o2 = this.element, s = this._getFrameInfo();
    if (!o2 || !s) return;
    this._initializeData(t2, s, r4);
    const { controlPoints: n2, horizon: h2 } = s, u3 = Math.sqrt(n2.length), m3 = u3, { x: d4, y: c2 } = t2, x2 = this._vertices, y3 = n2[0], g = n2[u3 - 1], P2 = n2[(m3 - 1) * u3], w = n2[(m3 - 1) * u3 + u3 - 1], _2 = K(h2 ? h2[0].mapPoint : y3.mapPoint, r4), v3 = K(h2 ? h2[1].mapPoint : g.mapPoint, r4), j3 = K(P2.mapPoint, r4), A = K(w.mapPoint, r4);
    this.clipGeometry = h2 ? new a2({ geometry: v.fromJSON({ rings: [[[j3.x, j3.y], [A.x, A.y], [v3.x, v3.y], [_2.x, _2.y], [j3.x, j3.y]]], spatialReference: r4 }) }) : null;
    for (let l3 = 0; l3 < n2.length; l3++) {
      const t3 = n2[l3], { sourcePoint: e3, mapPoint: i2 } = t3;
      if (null == e3 || null == i2) continue;
      const o3 = K(i2, r4);
      x2[l3 * f + 0] = o3.x - d4, x2[l3 * f + 1] = o3.y - c2;
    }
    let M = e2;
    if (i) {
      const t3 = Math.min(_2.x, v3.x, j3.x, A.x), e3 = Math.max(_2.x, v3.x, j3.x, A.x), { worldWidth: r5, xBounds: o3 } = i, [s2, n3] = o3;
      t3 < s2 && e3 > s2 ? M = r5 : e3 > n3 && t3 < n3 && (M = -r5);
    }
    this.wrapAroundShift = M, this.isWrapAround = 0 !== M;
  }
  draw(t2, e2) {
    this.isReady && this._vertices && this._indices && this._texCoords ? e2.render(t2, { transform: { dvs: this.dvsMat3 }, config: { perspective: this.perspectiveTransform, texSize: this.textureSize, wrapAroundShift: this.wrapAroundShift, isWrapAround: this.isWrapAround, opacity: this.opacity, texture: { texture: this.texture, unit: 0 } }, position: this._vertices, tex: this._texCoords, index: this._indices }) : this.requestRender();
  }
  _initializeData(t2, e2, r4) {
    if (null != this._vertices && null != this._indices) return;
    const { controlPoints: i } = e2, o2 = Math.sqrt(i.length), s = o2, n2 = new Float32Array(f * i.length), h2 = new Uint16Array(2 * i.length);
    for (let m3 = 0; m3 < i.length; m3++) {
      const e3 = i[m3], { sourcePoint: o3, mapPoint: s2 } = e3;
      if (null == o3 || null == s2) continue;
      const l4 = K(s2, r4);
      n2[m3 * f + 0] = l4.x - t2.x, n2[m3 * f + 1] = l4.y - t2.y, h2[2 * m3 + 0] = o3.x, h2[2 * m3 + 1] = o3.y;
    }
    const l3 = new Uint16Array(s * o2 + (s - 2) * (o2 + 2));
    let u3 = 0;
    for (let a3 = 0; a3 < s; a3++) {
      for (let t3 = 0; t3 < o2; t3++) l3[u3++] = a3 * o2 + t3, l3[u3++] = (a3 + 1) * o2 + t3;
      a3 < s - 2 && (l3[u3++] = (a3 + 1) * o2 + (o2 - 1), l3[u3++] = (a3 + 1) * o2);
    }
    this._vertices = n2, this._texCoords = h2, this._indices = l3;
  }
  _getFrameInfo() {
    if (!this.groundControlPoints) return null;
    const t2 = this._getFrameControlPoints(), e2 = this.frameHorizonPoints;
    let r4 = null;
    if (e2) {
      const t3 = e2.startX, i = e2.startY, o2 = e2.endX, n2 = e2.endY;
      r4 = [{ sourcePoint: c(t3, i), mapPoint: new j(e2.startLongitude, e2.startLatitude) }, { sourcePoint: c(o2, n2), mapPoint: new j(e2.endLongitude, e2.endLatitude) }];
    }
    return { controlPoints: t2, horizon: r4 };
  }
  _getFrameControlPoints() {
    const t2 = this.groundControlPoints, e2 = t2 == null ? void 0 : t2.length;
    if (!e2) return [];
    const r4 = new Array(e2), i = Math.max(...t2.map(({ x: t3 }) => t3)), o2 = this.element.videoWidth / i;
    for (let n2 = 0; n2 < e2; n2++) {
      const { x: e3, y: i2, lat: a3, lon: h2 } = t2[n2];
      r4[n2] = { sourcePoint: c(e3 * o2, -i2 * o2), mapPoint: new j(h2, a3) };
    }
    return r4;
  }
};

// node_modules/@arcgis/core/views/2d/layers/VideoLayerView2D.js
var v2 = new l([255, 127, 0]);
var _ = class extends j2(y2) {
  constructor() {
    super(...arguments), this._graphicsLayer = new h(), this._frameOutlineGraphic = new d3({ symbol: new S({ outline: { type: "simple-line", color: v2 } }) }), this._sensorTrailGraphic = new d3({ symbol: new d2({ color: v2 }) }), this._lineOfSightGraphic = new d3({ symbol: new d2({ color: v2 }) }), this._sensorLocationGraphic = new d3({ symbol: new y({ color: v2 }) }), this._frameCenterGraphic = new d3({ symbol: new y({ color: v2, style: "cross" }) }), this._overlayContainer = null, this.layer = null, this.symbolColor = v2, this.visibleTelemetryElements = null;
  }
  destroy() {
    this._graphicsLayer = u(this._graphicsLayer);
  }
  initialize() {
    var _a, _b, _c, _d, _e, _f;
    this.addHandles(d(() => this.symbolColor, () => {
      this._frameOutlineGraphic.symbol.outline.color = this.symbolColor, this._sensorTrailGraphic.symbol.color = this.symbolColor, this._lineOfSightGraphic.symbol.color = this.symbolColor, this._sensorLocationGraphic.symbol.color = this.symbolColor, this._frameCenterGraphic.symbol.color = this.symbolColor;
    }, P)), this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic, this._sensorTrailGraphic, this._lineOfSightGraphic, this._sensorLocationGraphic, this._frameCenterGraphic]), this.visibleTelemetryElements = new l2({ frame: ((_a = this.layer.telemetryDisplay) == null ? void 0 : _a.frame) ?? false, frameCenter: ((_b = this.layer.telemetryDisplay) == null ? void 0 : _b.frameCenter) ?? true, frameOutline: ((_c = this.layer.telemetryDisplay) == null ? void 0 : _c.frameOutline) ?? true, lineOfSight: ((_d = this.layer.telemetryDisplay) == null ? void 0 : _d.lineOfSight) ?? true, sensorLocation: ((_e = this.layer.telemetryDisplay) == null ? void 0 : _e.sensorLocation) ?? true, sensorTrail: ((_f = this.layer.telemetryDisplay) == null ? void 0 : _f.sensorTrail) ?? true });
  }
  attach() {
    this._overlayContainer = new u2(), this.container.addChild(this._overlayContainer), this._addOverlayMultipoint(), this.graphicsView = new F({ requestUpdateCallback: () => this.requestUpdate(), view: this.view, graphics: this._graphicsLayer.graphics, container: new t(this.view.featuresTilingScheme) }), this.container.addChild(this.graphicsView.container), this.addAttachHandles(this._graphicsLayer.on("graphic-update", this.graphicsView.graphicUpdateHandler)), this.addAttachHandles([d(() => {
      var _a, _b, _c, _d, _e, _f;
      return [(_a = this.layer.telemetryDisplay) == null ? void 0 : _a.frame, (_b = this.layer.telemetryDisplay) == null ? void 0 : _b.frameCenter, (_c = this.layer.telemetryDisplay) == null ? void 0 : _c.frameOutline, (_d = this.layer.telemetryDisplay) == null ? void 0 : _d.sensorLocation, (_e = this.layer.telemetryDisplay) == null ? void 0 : _e.sensorTrail, (_f = this.layer.telemetryDisplay) == null ? void 0 : _f.lineOfSight];
    }, () => this._updateVisibleTelemetryElements(), P), d(() => {
      var _a, _b, _c, _d, _e;
      return [this.layer.telemetry, (_a = this.visibleTelemetryElements) == null ? void 0 : _a.frameCenter, (_b = this.visibleTelemetryElements) == null ? void 0 : _b.frameOutline, (_c = this.visibleTelemetryElements) == null ? void 0 : _c.sensorLocation, (_d = this.visibleTelemetryElements) == null ? void 0 : _d.sensorTrail, (_e = this.visibleTelemetryElements) == null ? void 0 : _e.lineOfSight];
    }, () => this._updateGraphicGeometries(), P)]);
  }
  detach() {
    this._overlayContainer.removeAllChildren(), this.container.removeAllChildren(), this.graphicsView = u(this.graphicsView);
  }
  supportsSpatialReference(e2) {
    return true;
  }
  moveEnd() {
  }
  viewChange() {
    this.graphicsView.viewChange();
  }
  update(e2) {
    this.graphicsView.processUpdate(e2);
  }
  isUpdating() {
    return !this.graphicsView || this.graphicsView.updating;
  }
  _updateVisibleTelemetryElements() {
    this.visibleTelemetryElements && this.layer.telemetryDisplay && (this.visibleTelemetryElements.frame = this.layer.telemetryDisplay.frame, this.visibleTelemetryElements.frameCenter = this.layer.telemetryDisplay.frameCenter, this.visibleTelemetryElements.frameOutline = this.layer.telemetryDisplay.frameOutline, this.visibleTelemetryElements.lineOfSight = this.layer.telemetryDisplay.lineOfSight, this.visibleTelemetryElements.sensorLocation = this.layer.telemetryDisplay.sensorLocation, this.visibleTelemetryElements.sensorTrail = this.layer.telemetryDisplay.sensorTrail);
  }
  _updateGraphicGeometries() {
    const { telemetry: e2 } = this.layer, { visibleTelemetryElements: i } = this;
    e2 && i && (i.frameOutline && e2.frameOutline ? this._frameOutlineGraphic.geometry = this.layer.telemetry.frameOutline : this._frameOutlineGraphic.geometry = null, i.sensorTrail && e2.sensorTrail ? this._sensorTrailGraphic.geometry = this.layer.telemetry.sensorTrail : this._sensorTrailGraphic.geometry = null, i.lineOfSight && e2.lineOfSight ? this._lineOfSightGraphic.geometry = this.layer.telemetry.lineOfSight : this._lineOfSightGraphic.geometry = null, i.sensorLocation && e2.sensorLocation ? this._sensorLocationGraphic.geometry = this.layer.telemetry.sensorLocation : this._sensorLocationGraphic.geometry = null, i.frameCenter && e2.frameCenter ? this._frameCenterGraphic.geometry = this.layer.telemetry.frameCenter : this._frameCenterGraphic.geometry = null);
  }
  async _addOverlayMultipoint() {
    if (!this.layer.videoElement) return;
    const e2 = new x(this.layer.videoElement);
    this.addAttachHandles([d(() => [this.layer.frameHorizonPoints, this.layer.groundControlPoints], () => {
      const { visibleTelemetryElements: i } = this;
      (i == null ? void 0 : i.frame) ? (e2.frameHorizonPoints = this.layer.frameHorizonPoints, e2.groundControlPoints = this.layer.groundControlPoints, e2.opacity = 1) : e2.opacity = 0;
    }, P)]), this._overlayContainer.addChild(e2), this.view.stage.requestRender();
  }
};
r([m()], _.prototype, "graphicsView", void 0), r([m()], _.prototype, "layer", void 0), r([m()], _.prototype, "symbolColor", void 0), r([m({ type: l2 })], _.prototype, "visibleTelemetryElements", void 0), _ = r([a("esri.views.2d.layers.VideoLayerView2D")], _);
var C = _;
export {
  C as default
};
//# sourceMappingURL=VideoLayerView2D-MF4SJIZH.js.map
