{
  "version": 3,
  "sources": ["../../@esri/calcite-components/dist/components/src/utils/interactive.tsx"],
  "sourcesContent": ["import { JSXAttributes } from \"@stencil/core/internal\";\nimport { FunctionalComponent, h, VNode } from \"@stencil/core\";\n\nexport interface InteractiveComponent {\n  /**\n   * The host element.\n   */\n  readonly el: InteractiveHTMLElement;\n\n  /**\n   * When true, prevents user interaction.\n   *\n   * Notes:\n   *\n   * This prop should use the @Prop decorator and reflect.\n   * The `disabled` Sass mixin must be added to the component's stylesheet.\n   */\n  disabled: boolean;\n}\n\n/**\n * Exported for testing purposes only.\n *\n * @internal\n */\nexport type InteractiveHTMLElement = HTMLElement & Pick<InteractiveComponent, \"disabled\">;\n\nfunction interceptedClick(): void {\n  const { disabled } = this as InteractiveHTMLElement;\n\n  if (!disabled) {\n    HTMLElement.prototype.click.call(this);\n  }\n}\n\nfunction onPointerDown(event: PointerEvent): void {\n  const interactiveElement = event.target as InteractiveHTMLElement;\n\n  if (interactiveElement.disabled) {\n    // prevent click from moving focus on host\n    event.preventDefault();\n  }\n}\n\nconst nonBubblingWhenDisabledMouseEvents = [\"mousedown\", \"mouseup\", \"click\"];\n\nfunction onNonBubblingWhenDisabledMouseEvent(event: MouseEvent): void {\n  const interactiveElement = event.target as InteractiveHTMLElement;\n\n  // prevent disallowed mouse events from being emitted on the disabled host (per https://github.com/whatwg/html/issues/5886)\n  // ⚠ we generally avoid stopping propagation of events, but this is needed to adhere to the intended spec changes above ⚠\n  if (interactiveElement.disabled) {\n    event.stopImmediatePropagation();\n    event.preventDefault();\n  }\n}\n\nconst captureOnlyOptions = { capture: true } as const;\n\n/**\n * This helper updates the host element to prevent keyboard interaction on its subtree and sets the appropriate aria attribute for accessibility.\n *\n * This should be used in the `componentDidRender` lifecycle hook.\n *\n * **Notes**\n *\n * this util is not needed for simple components whose root element or elements are an interactive component (custom element or native control). For those cases, set the `disabled` props on the root components instead.\n * technically, users can override `tabindex` and restore keyboard navigation, but this will be considered user error\n *\n * @param component\n */\nexport function updateHostInteraction(component: InteractiveComponent): void {\n  if (component.disabled) {\n    component.el.setAttribute(\"aria-disabled\", \"true\");\n\n    if (component.el.contains(document.activeElement)) {\n      (document.activeElement as HTMLElement).blur();\n    }\n\n    blockInteraction(component);\n\n    return;\n  }\n\n  restoreInteraction(component);\n\n  component.el.removeAttribute(\"aria-disabled\");\n}\n\nfunction blockInteraction(component: InteractiveComponent): void {\n  component.el.click = interceptedClick;\n  addInteractionListeners(component.el);\n}\n\nfunction addInteractionListeners(element: HTMLElement): void {\n  element.addEventListener(\"pointerdown\", onPointerDown, captureOnlyOptions);\n  nonBubblingWhenDisabledMouseEvents.forEach((event) =>\n    element.addEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions),\n  );\n}\n\nfunction restoreInteraction(component: InteractiveComponent): void {\n  delete component.el.click; // fallback on HTMLElement.prototype.click\n  removeInteractionListeners(component.el);\n}\n\nfunction removeInteractionListeners(element: HTMLElement): void {\n  element.removeEventListener(\"pointerdown\", onPointerDown, captureOnlyOptions);\n  nonBubblingWhenDisabledMouseEvents.forEach((event) =>\n    element.removeEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions),\n  );\n}\n\nexport interface InteractiveContainerProps extends JSXAttributes {\n  disabled: boolean;\n}\n\nexport const CSS = {\n  container: \"interaction-container\",\n};\n\nexport const InteractiveContainer: FunctionalComponent<InteractiveContainerProps> = (\n  { disabled },\n  children: VNode[],\n): VNode => (\n  <div class={CSS.container} inert={disabled}>\n    {...children}\n  </div>\n);\n"],
  "mappings": ";;;;;AA2BA,SAAS,mBAAgB;AACvB,QAAM,EAAE,SAAQ,IAAK;AAErB,MAAI,CAAC,UAAU;AACb,gBAAY,UAAU,MAAM,KAAK,IAAI;;AAEzC;AAEA,SAAS,cAAc,OAAmB;AACxC,QAAM,qBAAqB,MAAM;AAEjC,MAAI,mBAAmB,UAAU;AAE/B,UAAM,eAAc;;AAExB;AAEA,IAAM,qCAAqC,CAAC,aAAa,WAAW,OAAO;AAE3E,SAAS,oCAAoC,OAAiB;AAC5D,QAAM,qBAAqB,MAAM;AAIjC,MAAI,mBAAmB,UAAU;AAC/B,UAAM,yBAAwB;AAC9B,UAAM,eAAc;;AAExB;AAEA,IAAM,qBAAqB,EAAE,SAAS,KAAI;SAc1B,sBAAsB,WAA+B;AACnE,MAAI,UAAU,UAAU;AACtB,cAAU,GAAG,aAAa,iBAAiB,MAAM;AAEjD,QAAI,UAAU,GAAG,SAAS,SAAS,aAAa,GAAG;AAChD,eAAS,cAA8B,KAAI;;AAG9C,qBAAiB,SAAS;AAE1B;;AAGF,qBAAmB,SAAS;AAE5B,YAAU,GAAG,gBAAgB,eAAe;AAC9C;AAEA,SAAS,iBAAiB,WAA+B;AACvD,YAAU,GAAG,QAAQ;AACrB,0BAAwB,UAAU,EAAE;AACtC;AAEA,SAAS,wBAAwB,SAAoB;AACnD,UAAQ,iBAAiB,eAAe,eAAe,kBAAkB;AACzE,qCAAmC,QAAQ,CAAC,UAC1C,QAAQ,iBAAiB,OAAO,qCAAqC,kBAAkB,CAAC;AAE5F;AAEA,SAAS,mBAAmB,WAA+B;AACzD,SAAO,UAAU,GAAG;AACpB,6BAA2B,UAAU,EAAE;AACzC;AAEA,SAAS,2BAA2B,SAAoB;AACtD,UAAQ,oBAAoB,eAAe,eAAe,kBAAkB;AAC5E,qCAAmC,QAAQ,CAAC,UAC1C,QAAQ,oBAAoB,OAAO,qCAAqC,kBAAkB,CAAC;AAE/F;AAMO,IAAM,MAAM;EACjB,WAAW;;IAGA,uBAAuE,CAClF,EAAE,SAAQ,GACV,aAEA,EAAA,OAAA,EAAK,OAAO,IAAI,WAAW,OAAO,SAAQ,GAAA,GACpC,QAAQ;",
  "names": []
}
