import "./chunk-MH3T54VT.js";
import {
  pt,
  rt
} from "./chunk-BLBULF2O.js";
import {
  t
} from "./chunk-TILB77UC.js";
import "./chunk-YX36GZBB.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-2U5JYYSG.js";
import {
  n
} from "./chunk-LPNAPHOF.js";
import {
  y
} from "./chunk-AMH7OVBF.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-IOKAACTA.js";
import "./chunk-UYSPJCCV.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import {
  o
} from "./chunk-F2LC36UV.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-Z2DWZ5IF.js";
import "./chunk-A3J7W53Y.js";
import "./chunk-HLF5XJSV.js";
import {
  g
} from "./chunk-L6D73M4D.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import "./chunk-X7VTUWCX.js";
import "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import {
  e3 as e
} from "./chunk-GD4XDYZL.js";
import "./chunk-33ECLFFF.js";
import "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/layers/graphics/dehydratedFeatures.js
var f = class {
  constructor(e2, t4, s2) {
    this.uid = e2, this.geometry = t4, this.attributes = s2, this.visible = true, this.objectId = null, this.centroid = null;
  }
};
var g2 = class {
  constructor() {
    this.exceededTransferLimit = false, this.features = [], this.fields = [], this.hasM = false, this.hasZ = false, this.geometryType = null, this.objectIdFieldName = null, this.globalIdFieldName = null, this.geometryProperties = null, this.geohashFieldName = null, this.spatialReference = null, this.transform = null;
  }
};
function z(e2, t4, s2, r) {
  if ((t4 == null ? void 0 : t4.size) && null != s2 && e2) for (const n2 in e2) {
    if (!t4.has(n2)) continue;
    const i = e2[n2];
    "string" == typeof i && i.length > s2 && (r(n2), e2[n2] = "");
  }
}

// node_modules/@arcgis/core/rest/query/operations/pbfDehydratedFeatureSet.js
function u(t4, e2) {
  return e2;
}
function d(t4, e2, r, s2) {
  switch (r) {
    case 0:
      return f2(t4, e2 + s2, 0);
    case 1:
      return "lowerLeft" === t4.originPosition ? f2(t4, e2 + s2, 1) : y2(t4, e2 + s2, 1);
  }
}
function p(t4, e2, r, s2) {
  return 2 === r ? f2(t4, e2, 2) : d(t4, e2, r, s2);
}
function c(t4, e2, r, s2) {
  return 2 === r ? f2(t4, e2, 3) : d(t4, e2, r, s2);
}
function m(t4, e2, r, s2) {
  return 3 === r ? f2(t4, e2, 3) : p(t4, e2, r, s2);
}
function f2({ translate: t4, scale: e2 }, r, s2) {
  return t4[s2] + r * e2[s2];
}
function y2({ translate: t4, scale: e2 }, r, s2) {
  return t4[s2] - r * e2[s2];
}
var _ = class {
  constructor(t4) {
    this._options = t4, this.geometryTypes = ["point", "multipoint", "polyline", "polygon"], this._previousCoordinate = [0, 0], this._transform = null, this._applyTransform = u, this._lengths = [], this._currentLengthIndex = 0, this._toAddInCurrentPath = 0, this._vertexDimension = 0, this._coordinateBuffer = null, this._coordinateBufferPtr = 0, this._attributesConstructor = class {
    }, this._missingAttributes = [];
  }
  get missingAttributes() {
    return this._missingAttributes;
  }
  createFeatureResult() {
    return new g2();
  }
  finishFeatureResult(t4) {
    if (this._options.applyTransform && (t4.transform = null), this._attributesConstructor = class {
    }, this._coordinateBuffer = null, this._lengths.length = 0, !t4.hasZ) return;
    const e2 = o(t4.geometryType, this._options.sourceSpatialReference, t4.spatialReference);
    if (null != e2) for (const r of t4.features) e2(r.geometry);
  }
  createSpatialReference() {
    return new g();
  }
  addField(t4, e2) {
    t4.fields.push(y.fromJSON(e2));
    const r = t4.fields.map((t5) => t5.name);
    this._attributesConstructor = function() {
      for (const t5 of r) this[t5] = null;
    };
  }
  addFeature(t4, e2) {
    const r = this._options.maxStringAttributeLength, s2 = this._options.maxStringAttributeFields;
    z(e2.attributes, s2, r, (r2) => {
      const s3 = e2.attributes[t4.objectIdFieldName];
      null != s3 && this._missingAttributes.push({ objectId: s3, attribute: r2 });
    }), t4.features.push(e2);
  }
  addQueryGeometry(t4, e2) {
    const { queryGeometry: r, queryGeometryType: s2 } = e2, i = pt(r.clone(), r, false, false, this._transform), o3 = rt(i, s2, false, false);
    let n2 = null;
    switch (s2) {
      case "esriGeometryPoint":
        n2 = "point";
        break;
      case "esriGeometryPolygon":
        n2 = "polygon";
        break;
      case "esriGeometryPolyline":
        n2 = "polyline";
        break;
      case "esriGeometryMultipoint":
        n2 = "multipoint";
    }
    o3.type = n2, t4.queryGeometryType = s2, t4.queryGeometry = o3;
  }
  prepareFeatures(e2) {
    switch (this._transform = e2.transform ?? null, this._options.applyTransform && e2.transform && (this._applyTransform = this._deriveApplyTransform(e2)), this._vertexDimension = 2, e2.hasZ && this._vertexDimension++, e2.hasM && this._vertexDimension++, e2.geometryType) {
      case "point":
        this.addCoordinate = (t4, e3, r) => this.addCoordinatePoint(t4, e3, r), this.createGeometry = (t4) => this.createPointGeometry(t4);
        break;
      case "polygon":
        this.addCoordinate = (t4, e3, r) => this._addCoordinatePolygon(t4, e3, r), this.createGeometry = (t4) => this._createPolygonGeometry(t4);
        break;
      case "polyline":
        this.addCoordinate = (t4, e3, r) => this._addCoordinatePolyline(t4, e3, r), this.createGeometry = (t4) => this._createPolylineGeometry(t4);
        break;
      case "multipoint":
        this.addCoordinate = (t4, e3, r) => this._addCoordinateMultipoint(t4, e3, r), this.createGeometry = (t4) => this._createMultipointGeometry(t4);
        break;
      case "mesh":
      case "extent":
        break;
      default:
        n(e2.geometryType);
    }
  }
  createFeature() {
    return this._lengths.length = 0, this._currentLengthIndex = 0, this._previousCoordinate[0] = 0, this._previousCoordinate[1] = 0, new f(e(), null, new this._attributesConstructor());
  }
  allocateCoordinates() {
    const t4 = this._lengths.reduce((t5, e2) => t5 + e2, 0);
    this._coordinateBuffer = new Float64Array(t4 * this._vertexDimension), this._coordinateBufferPtr = 0;
  }
  addLength(t4, e2) {
    0 === this._lengths.length && (this._toAddInCurrentPath = e2), this._lengths.push(e2);
  }
  createPointGeometry(t4) {
    const e2 = { type: "point", x: 0, y: 0, spatialReference: t4.spatialReference, hasZ: !!t4.hasZ, hasM: !!t4.hasM };
    return e2.hasZ && (e2.z = 0), e2.hasM && (e2.m = 0), e2;
  }
  addCoordinatePoint(t4, e2, r) {
    const s2 = this._transform ? this._applyTransform(this._transform, e2, r, 0) : e2;
    if (null != s2) switch (r) {
      case 0:
        t4.x = s2;
        break;
      case 1:
        t4.y = s2;
        break;
      case 2:
        t4.hasZ ? t4.z = s2 : t4.m = s2;
        break;
      case 3:
        t4.m = s2;
    }
  }
  _transformPathLikeValue(t4, e2) {
    let r = 0;
    return e2 <= 1 && (r = this._previousCoordinate[e2], this._previousCoordinate[e2] += t4), this._transform ? this._applyTransform(this._transform, t4, e2, r) : t4;
  }
  _addCoordinatePolyline(t4, e2, r) {
    this._dehydratedAddPointsCoordinate(t4.paths, e2, r);
  }
  _addCoordinatePolygon(t4, e2, r) {
    this._dehydratedAddPointsCoordinate(t4.rings, e2, r);
  }
  _addCoordinateMultipoint(t4, e2, r) {
    0 === r && t4.points.push([]);
    const s2 = this._transformPathLikeValue(e2, r);
    t4.points[t4.points.length - 1].push(s2);
  }
  _createPolygonGeometry(t4) {
    return { type: "polygon", rings: [[]], spatialReference: t4.spatialReference, hasZ: !!t4.hasZ, hasM: !!t4.hasM };
  }
  _createPolylineGeometry(t4) {
    return { type: "polyline", paths: [[]], spatialReference: t4.spatialReference, hasZ: !!t4.hasZ, hasM: !!t4.hasM };
  }
  _createMultipointGeometry(t4) {
    return { type: "multipoint", points: [], spatialReference: t4.spatialReference, hasZ: !!t4.hasZ, hasM: !!t4.hasM };
  }
  _dehydratedAddPointsCoordinate(t4, e2, r) {
    0 === r && 0 == this._toAddInCurrentPath-- && (t4.push([]), this._toAddInCurrentPath = this._lengths[++this._currentLengthIndex] - 1, this._previousCoordinate[0] = 0, this._previousCoordinate[1] = 0);
    const s2 = this._transformPathLikeValue(e2, r), i = t4[t4.length - 1], o3 = this._coordinateBuffer;
    if (o3) {
      if (0 === r) {
        const t5 = this._coordinateBufferPtr * Float64Array.BYTES_PER_ELEMENT;
        i.push(new Float64Array(o3.buffer, t5, this._vertexDimension));
      }
      o3[this._coordinateBufferPtr++] = s2;
    }
  }
  _deriveApplyTransform(t4) {
    const { hasZ: e2, hasM: r } = t4;
    return e2 && r ? m : e2 ? p : r ? c : d;
  }
};

// node_modules/@arcgis/core/views/3d/support/PBFDecoderWorker.js
var t3 = class {
  _parseFeatureQuery(t4) {
    var _a;
    const s2 = new _(t4.options), i = t(t4.buffer, s2), o3 = { ...i, spatialReference: (_a = i.spatialReference) == null ? void 0 : _a.toJSON(), fields: i.fields ? i.fields.map((e2) => e2.toJSON()) : void 0, missingAttributes: s2.missingAttributes };
    return Promise.resolve(o3);
  }
};
function s() {
  return new t3();
}
export {
  s as default
};
//# sourceMappingURL=PBFDecoderWorker-YKSSY3Y2.js.map
