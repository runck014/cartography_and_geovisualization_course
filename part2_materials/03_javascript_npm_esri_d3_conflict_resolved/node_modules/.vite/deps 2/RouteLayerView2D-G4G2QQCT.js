import {
  t
} from "./chunk-XXZFRDYH.js";
import "./chunk-GYMOXI76.js";
import {
  F as F2
} from "./chunk-LH2VBN6X.js";
import "./chunk-5ZJ2MCRU.js";
import "./chunk-OBWNWUWS.js";
import "./chunk-2JZHLJXP.js";
import "./chunk-CGJR3XCF.js";
import {
  j as j2,
  y as y2
} from "./chunk-KVO35ODJ.js";
import "./chunk-O2HBAYVG.js";
import "./chunk-FKL5AVF4.js";
import "./chunk-CKPBZSTT.js";
import "./chunk-3T3LUDWR.js";
import "./chunk-SZ3BUBIG.js";
import "./chunk-JI3JMSDL.js";
import "./chunk-J3GKRP7Y.js";
import "./chunk-Q3K5MAUZ.js";
import "./chunk-KJNFPIQW.js";
import "./chunk-2XVRGGEF.js";
import "./chunk-DPVSO6BH.js";
import "./chunk-6TRZLPPJ.js";
import "./chunk-U6IFI7EK.js";
import "./chunk-MCHNAU6L.js";
import "./chunk-MYNRH67A.js";
import "./chunk-JMY2H33H.js";
import "./chunk-VBS2Y7KE.js";
import "./chunk-HCAIFU2M.js";
import "./chunk-AHZHHHCW.js";
import {
  C,
  S,
  T,
  c2 as c,
  j2 as j,
  w2 as w,
  y
} from "./chunk-2OJYEYNU.js";
import "./chunk-O75V7CSP.js";
import "./chunk-RSF7AFW5.js";
import "./chunk-C2RS46RL.js";
import "./chunk-HB2JTNV2.js";
import "./chunk-N42IF4WX.js";
import "./chunk-BLBULF2O.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-XJHQ5ZJ7.js";
import "./chunk-BXIXSFGX.js";
import "./chunk-HACIIBEF.js";
import "./chunk-MBR7IVUG.js";
import "./chunk-TRMW5XQP.js";
import "./chunk-HBU7EMDX.js";
import "./chunk-JRUJALSE.js";
import "./chunk-KDUYQUT4.js";
import "./chunk-73FHIZIF.js";
import "./chunk-ICIPRMPO.js";
import "./chunk-NEDBRPQY.js";
import "./chunk-EZCH3ZAJ.js";
import "./chunk-QLRZN73K.js";
import "./chunk-CGJUTDVJ.js";
import "./chunk-QEJMJI2R.js";
import "./chunk-EHD5KM2T.js";
import "./chunk-AEKV7TWM.js";
import "./chunk-QJXYURT2.js";
import "./chunk-JUN5XSQC.js";
import "./chunk-MCZMPI2A.js";
import "./chunk-KV3S4QI2.js";
import "./chunk-ECMDQ4LS.js";
import "./chunk-D6FJTDNK.js";
import "./chunk-LP6TMAPE.js";
import "./chunk-RENLZYKC.js";
import "./chunk-IJO7BOFI.js";
import "./chunk-NGQEHRBA.js";
import "./chunk-QYSQ6XPQ.js";
import "./chunk-HZRXUNDJ.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-GGPPKSP2.js";
import "./chunk-MR727DXB.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-GNY4KZ34.js";
import "./chunk-43W2AR4R.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-A66MNK5C.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-VBJTBJYL.js";
import "./chunk-GZFJKWTS.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-6TU4HBID.js";
import "./chunk-WGIZLWW7.js";
import "./chunk-PUOCGOJB.js";
import "./chunk-DBQLTBDH.js";
import "./chunk-AMH7OVBF.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-LXJGKQ4D.js";
import "./chunk-VILGTHTP.js";
import "./chunk-ATEWWVHG.js";
import "./chunk-LEOFRCUR.js";
import "./chunk-CP4GPQHD.js";
import "./chunk-IZSNXKMJ.js";
import "./chunk-IOKAACTA.js";
import "./chunk-VFTH6C2E.js";
import "./chunk-M5RSIRGD.js";
import "./chunk-D2JPDRZZ.js";
import "./chunk-UYSPJCCV.js";
import {
  n
} from "./chunk-BB6L755V.js";
import "./chunk-SMFCDOAJ.js";
import "./chunk-5A4G4OVM.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-44C2A72D.js";
import "./chunk-DIKY6MBW.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-GGCWKF4X.js";
import "./chunk-6D5XULXX.js";
import "./chunk-445IB4DS.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import "./chunk-H4N5QOMX.js";
import "./chunk-F2LC36UV.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-Z2DWZ5IF.js";
import "./chunk-UN4ISSP7.js";
import "./chunk-E2RPCJOE.js";
import {
  P,
  d
} from "./chunk-TKY5RBM3.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import {
  V
} from "./chunk-SIQNRYEG.js";
import "./chunk-TTDEVHSF.js";
import "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-JU6MEO4D.js";
import "./chunk-CY5MS6DC.js";
import "./chunk-C6FFJ4QS.js";
import "./chunk-Q4Q32WYV.js";
import "./chunk-A3J7W53Y.js";
import "./chunk-HLF5XJSV.js";
import "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-Y6AYXNMP.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import "./chunk-X7VTUWCX.js";
import "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import {
  m
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import {
  e
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-PKLD5YJF.js";
import {
  F
} from "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/views/2d/layers/RouteLayerView2D.js
var k = ["route-info", "direction-line", "direction-point", "polygon-barrier", "polyline-barrier", "point-barrier", "stop"];
var j3 = { graphic: null, property: null, oldValue: null, newValue: null };
function M(t2) {
  return t2 instanceof c || t2 instanceof y || t2 instanceof C || t2 instanceof T || t2 instanceof j || t2 instanceof S || t2 instanceof w;
}
function V2(t2) {
  return V.isCollection(t2) && t2.length && M(t2.at(0));
}
function G(t2) {
  return Array.isArray(t2) && t2.length > 0 && M(t2[0]);
}
var I = /* @__PURE__ */ new Set(["default"]);
var v = class extends j2(y2) {
  constructor() {
    super(...arguments), this._graphics = new V(), this._highlightIds = /* @__PURE__ */ new Map(), this._networkFeatureMap = /* @__PURE__ */ new Map(), this._networkGraphicMap = /* @__PURE__ */ new Map();
  }
  get _routeItems() {
    return new n({ getCollections: () => null == this.layer || this.destroyed ? [] : [null != this.layer.routeInfo ? new V([this.layer.routeInfo]) : null, this.layer.directionLines, this.layer.directionPoints, this.layer.polygonBarriers, this.layer.polylineBarriers, this.layer.pointBarriers, this.layer.stops] });
  }
  initialize() {
    this._updatingHandles.addOnCollectionChange(() => this._routeItems, (t2) => this._routeItemsChanged(t2), P);
  }
  destroy() {
    var _a;
    this._networkFeatureMap.clear(), this._networkGraphicMap.clear(), this._graphics.removeAll(), (_a = this._get("_routeItems")) == null ? void 0 : _a.destroy();
  }
  attach() {
    this._createGraphicsView();
  }
  detach() {
    this._destroyGraphicsView();
  }
  async fetchPopupFeaturesAtLocation(t2, e2) {
    return this._graphicsView.hitTest(t2).filter(({ popupTemplate: t3 }) => !!t3);
  }
  highlight(t2) {
    let r2;
    r2 = M(t2) ? [this._getNetworkFeatureUid(t2)] : G(t2) ? t2.map((t3) => this._getNetworkFeatureUid(t3)) : V2(t2) ? t2.map((t3) => this._getNetworkFeatureUid(t3)).toArray() : [t2.uid];
    const i = r2.filter(F);
    return i.length ? (this._addHighlight(i), e(() => this._removeHighlight(i))) : e();
  }
  async hitTest(t2, r2) {
    if (this.suspended) return null;
    const i = this._graphicsView.hitTest(t2).filter(F).map((t3) => this._networkGraphicMap.get(t3));
    if (!i.length) return null;
    const { layer: s } = this;
    return i.reverse().map((e2) => ({ type: "route", layer: s, mapPoint: t2, networkFeature: e2 }));
  }
  isUpdating() {
    return this._graphicsView.updating;
  }
  moveEnd() {
  }
  update(t2) {
    this._graphicsView.processUpdate(t2);
  }
  viewChange() {
    this._graphicsView.viewChange();
  }
  _addHighlight(t2) {
    for (const e2 of t2) if (this._highlightIds.has(e2)) {
      const t3 = this._highlightIds.get(e2);
      this._highlightIds.set(e2, t3 + 1);
    } else this._highlightIds.set(e2, 1);
    this._updateHighlight();
  }
  _createGraphic(t2) {
    const e2 = t2.toGraphic();
    return e2.layer = this.layer, e2.sourceLayer = this.layer, e2;
  }
  _createGraphicsView() {
    const t2 = this.view, e2 = () => this.requestUpdate(), r2 = new t(t2.featuresTilingScheme);
    this._graphicsView = new F2({ container: r2, graphics: this._graphics, requestUpdateCallback: e2, view: t2 }), this.container.addChild(r2), this._updateHighlight();
  }
  _destroyGraphicsView() {
    this.container.removeChild(this._graphicsView.container), this._graphicsView.destroy();
  }
  _getDrawOrder(t2) {
    const e2 = this._networkGraphicMap.get(t2);
    return k.indexOf(e2.type);
  }
  _getNetworkFeatureUid(t2) {
    return this._networkFeatureMap.has(t2) ? this._networkFeatureMap.get(t2).uid : null;
  }
  _removeHighlight(t2) {
    for (const e2 of t2) if (this._highlightIds.has(e2)) {
      const t3 = this._highlightIds.get(e2) - 1;
      0 === t3 ? this._highlightIds.delete(e2) : this._highlightIds.set(e2, t3);
    }
    this._updateHighlight();
  }
  _routeItemsChanged(t2) {
    if (t2.removed.length) {
      this._graphics.removeMany(t2.removed.map((t3) => {
        const e2 = this._networkFeatureMap.get(t3);
        return this._networkFeatureMap.delete(t3), this._networkGraphicMap.delete(e2), e2;
      }));
      for (const e2 of t2.removed) this.removeHandles(e2);
    }
    if (t2.added.length) {
      this._graphics.addMany(t2.added.map((t3) => {
        const e2 = this._createGraphic(t3);
        return null == e2.symbol ? null : (this._networkFeatureMap.set(t3, e2), this._networkGraphicMap.set(e2, t3), e2);
      }).filter(F));
      for (const e2 of t2.added) this.addHandles([d(() => e2.geometry, (t3, r2) => {
        this._updateGraphic(e2, "geometry", t3, r2);
      }), d(() => e2.symbol, (t3, r2) => {
        this._updateGraphic(e2, "symbol", t3, r2);
      })], e2);
      this._graphics.sort((t3, e2) => this._getDrawOrder(t3) - this._getDrawOrder(e2));
    }
  }
  _updateGraphic(t2, e2, r2, i) {
    if (!this._networkFeatureMap.has(t2)) {
      const e3 = this._createGraphic(t2);
      return this._networkFeatureMap.set(t2, e3), this._networkGraphicMap.set(e3, t2), void this._graphics.add(e3);
    }
    const s = this._networkFeatureMap.get(t2);
    s[e2] = r2, j3.graphic = s, j3.property = e2, j3.oldValue = i, j3.newValue = r2, this._graphicsView.graphicUpdateHandler(j3);
  }
  _updateHighlight() {
    const t2 = Array.from(this._highlightIds.keys()), e2 = this._getHighlightBits(I);
    this._graphicsView.setHighlight(t2.map((t3) => ({ objectId: t3, highlightFlags: e2 })));
  }
};
r([m()], v.prototype, "_graphics", void 0), r([m()], v.prototype, "_routeItems", null), v = r([a("esri.views.2d.layers.RouteLayerView2D")], v);
var F3 = v;
export {
  F3 as default
};
//# sourceMappingURL=RouteLayerView2D-G4G2QQCT.js.map
