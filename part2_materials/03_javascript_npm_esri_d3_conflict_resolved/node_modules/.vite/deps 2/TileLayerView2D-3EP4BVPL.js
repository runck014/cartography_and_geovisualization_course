import {
  n as n2,
  o,
  r as r3
} from "./chunk-IBMU3KVO.js";
import {
  R,
  _
} from "./chunk-27FUTNYZ.js";
import {
  r as r4
} from "./chunk-BURNMHZB.js";
import {
  h as h2
} from "./chunk-LF6ABEJF.js";
import "./chunk-C55OFUQT.js";
import "./chunk-RHQ4S6RG.js";
import "./chunk-GYMOXI76.js";
import {
  F
} from "./chunk-LH2VBN6X.js";
import "./chunk-5ZJ2MCRU.js";
import "./chunk-OBWNWUWS.js";
import "./chunk-2JZHLJXP.js";
import "./chunk-XSZGPGLB.js";
import {
  i
} from "./chunk-Y4I3KFRX.js";
import "./chunk-CGJR3XCF.js";
import {
  j,
  y
} from "./chunk-KVO35ODJ.js";
import "./chunk-O2HBAYVG.js";
import "./chunk-FKL5AVF4.js";
import "./chunk-CKPBZSTT.js";
import "./chunk-3T3LUDWR.js";
import "./chunk-UUYHVC5D.js";
import "./chunk-SZ3BUBIG.js";
import "./chunk-7TPUFUXO.js";
import "./chunk-JI3JMSDL.js";
import "./chunk-J3GKRP7Y.js";
import "./chunk-Q3K5MAUZ.js";
import "./chunk-KJNFPIQW.js";
import "./chunk-2XVRGGEF.js";
import "./chunk-DPVSO6BH.js";
import "./chunk-6TRZLPPJ.js";
import "./chunk-U6IFI7EK.js";
import "./chunk-C7P44RVS.js";
import "./chunk-MCHNAU6L.js";
import "./chunk-MYNRH67A.js";
import "./chunk-JMY2H33H.js";
import "./chunk-DP4BKMXB.js";
import "./chunk-ZFCZ2Q23.js";
import "./chunk-Q4J5AN2X.js";
import "./chunk-OJRG2YGM.js";
import "./chunk-CQZSH27Y.js";
import "./chunk-VBS2Y7KE.js";
import "./chunk-HCAIFU2M.js";
import "./chunk-AHZHHHCW.js";
import "./chunk-PAS43ZQC.js";
import "./chunk-DPEZCSRY.js";
import "./chunk-KBZZPZL2.js";
import "./chunk-O75V7CSP.js";
import "./chunk-RSF7AFW5.js";
import "./chunk-BOYBHWD5.js";
import "./chunk-C2RS46RL.js";
import "./chunk-NML2U2OQ.js";
import "./chunk-HB2JTNV2.js";
import "./chunk-DLJHW32W.js";
import "./chunk-6LGJYARD.js";
import "./chunk-N42IF4WX.js";
import "./chunk-BLBULF2O.js";
import "./chunk-YX36GZBB.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-XJHQ5ZJ7.js";
import "./chunk-MA2KDKKH.js";
import "./chunk-BXIXSFGX.js";
import "./chunk-HACIIBEF.js";
import "./chunk-MBR7IVUG.js";
import "./chunk-NSVZKQ66.js";
import "./chunk-FFLL3HFJ.js";
import "./chunk-CAQ63GSR.js";
import "./chunk-256XKGQW.js";
import "./chunk-TRMW5XQP.js";
import "./chunk-HBU7EMDX.js";
import "./chunk-JRUJALSE.js";
import "./chunk-KDUYQUT4.js";
import {
  p,
  r as r2
} from "./chunk-QQRGQ74V.js";
import {
  h
} from "./chunk-O67P2KE3.js";
import "./chunk-73FHIZIF.js";
import "./chunk-ICIPRMPO.js";
import "./chunk-NEDBRPQY.js";
import "./chunk-EZCH3ZAJ.js";
import {
  e as e2
} from "./chunk-QLRZN73K.js";
import "./chunk-CGJUTDVJ.js";
import {
  g
} from "./chunk-WVLGRCY6.js";
import {
  c
} from "./chunk-JMJOGITH.js";
import "./chunk-QEJMJI2R.js";
import "./chunk-EHD5KM2T.js";
import "./chunk-AEKV7TWM.js";
import "./chunk-QJXYURT2.js";
import "./chunk-JUN5XSQC.js";
import "./chunk-MCZMPI2A.js";
import "./chunk-KV3S4QI2.js";
import "./chunk-ECMDQ4LS.js";
import "./chunk-D6FJTDNK.js";
import "./chunk-LP6TMAPE.js";
import "./chunk-RENLZYKC.js";
import "./chunk-IJO7BOFI.js";
import "./chunk-NGQEHRBA.js";
import "./chunk-QYSQ6XPQ.js";
import "./chunk-HZRXUNDJ.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-GGPPKSP2.js";
import "./chunk-MR727DXB.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-GNY4KZ34.js";
import "./chunk-43W2AR4R.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-A66MNK5C.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-VBJTBJYL.js";
import "./chunk-GZFJKWTS.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-5RVYVWSZ.js";
import "./chunk-6TU4HBID.js";
import "./chunk-WGIZLWW7.js";
import "./chunk-B3SR7LF7.js";
import "./chunk-PUOCGOJB.js";
import "./chunk-DBQLTBDH.js";
import "./chunk-AMH7OVBF.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-LXJGKQ4D.js";
import "./chunk-VILGTHTP.js";
import "./chunk-ATEWWVHG.js";
import "./chunk-LEOFRCUR.js";
import "./chunk-CP4GPQHD.js";
import "./chunk-IZSNXKMJ.js";
import "./chunk-IOKAACTA.js";
import "./chunk-VFTH6C2E.js";
import "./chunk-M5RSIRGD.js";
import "./chunk-D2JPDRZZ.js";
import "./chunk-UYSPJCCV.js";
import "./chunk-SMFCDOAJ.js";
import "./chunk-5A4G4OVM.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-44C2A72D.js";
import "./chunk-DIKY6MBW.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-GGCWKF4X.js";
import "./chunk-6D5XULXX.js";
import "./chunk-445IB4DS.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import "./chunk-H4N5QOMX.js";
import "./chunk-F2LC36UV.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-Z2DWZ5IF.js";
import "./chunk-UN4ISSP7.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-TKY5RBM3.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-SIQNRYEG.js";
import "./chunk-TTDEVHSF.js";
import "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-JU6MEO4D.js";
import "./chunk-CY5MS6DC.js";
import "./chunk-C6FFJ4QS.js";
import "./chunk-Q4Q32WYV.js";
import "./chunk-A3J7W53Y.js";
import "./chunk-HLF5XJSV.js";
import "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-Y6AYXNMP.js";
import "./chunk-6YWQXXBX.js";
import {
  s3 as s
} from "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import "./chunk-X7VTUWCX.js";
import "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import {
  m
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import {
  b,
  e
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import {
  n2 as n
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/views/2d/layers/TileLayerView2D.js
var V = [0, 0];
var G = class extends i(r3(j(y))) {
  constructor() {
    super(...arguments), this._fetchQueue = null, this._highlightGraphics = new c(), this._highlightView = null, this._popupHighlightHelper = null, this._tileStrategy = null, this.layer = null;
  }
  get resampling() {
    return !("resampling" in this.layer) || false !== this.layer.resampling;
  }
  get tilemapCache() {
    return "tilemapCache" in this.layer ? this.layer.tilemapCache : null;
  }
  update(e3) {
    var _a;
    this._fetchQueue.pause(), this._fetchQueue.state = e3.state, this._tileStrategy.update(e3), this._fetchQueue.resume(), (_a = this._highlightView) == null ? void 0 : _a.processUpdate(e3);
  }
  attach() {
    const e3 = "tileServers" in this.layer ? this.layer.tileServers : null, t = this.tilemapCache;
    if (this._tileInfoView = new h(this.layer.tileInfo, this.layer.fullExtent, t == null ? void 0 : t.effectiveMinLOD, t == null ? void 0 : t.effectiveMaxLOD), this._fetchQueue = new p({ tileInfoView: this._tileInfoView, concurrency: e3 && 10 * e3.length || 10, process: (e4, t2) => this.fetchTile(e4, t2), scheduler: this.scheduler, priority: g.MAPVIEW_FETCH_QUEUE }), this._tileStrategy = new r2({ cachePolicy: "keep", resampling: this.resampling, acquireTile: (e4) => this.acquireTile(e4), releaseTile: (e4) => this.releaseTile(e4), tileInfoView: this._tileInfoView }), _(this, this.layer)) {
      const e4 = this._highlightView = new F({ view: this.view, graphics: this._highlightGraphics, requestUpdateCallback: () => this.requestUpdate(), container: new h2(this.view.featuresTilingScheme), defaultPointSymbolEnabled: false });
      this.container.addChild(this._highlightView.container), this._popupHighlightHelper = new R({ createFetchPopupFeaturesQueryGeometry: (e5, t2) => r4(e5, t2, this.view), highlightGraphics: this._highlightGraphics, highlightGraphicUpdated: (t2, i2) => {
        e4.graphicUpdateHandler({ graphic: t2, property: i2 });
      }, layerView: this, updatingHandles: this._updatingHandles });
    }
    this.requestUpdate(), this.addAttachHandles(this._updatingHandles.add(() => this.resampling, () => {
      this.doRefresh();
    })), super.attach();
  }
  detach() {
    var _a, _b;
    super.detach(), this._tileStrategy.destroy(), this._fetchQueue.clear(), this.container.removeAllChildren(), (_a = this._popupHighlightHelper) == null ? void 0 : _a.destroy(), (_b = this._highlightView) == null ? void 0 : _b.destroy(), this._fetchQueue = this._tileStrategy = this._tileInfoView = this._popupHighlightHelper = null;
  }
  async fetchPopupFeaturesAtLocation(e3, t) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.fetchPopupFeaturesAtLocation(e3, t) : [];
  }
  highlight(e3) {
    return this._popupHighlightHelper ? this._popupHighlightHelper.highlight(e3) : e();
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  supportsSpatialReference(e3) {
    var _a;
    return s((_a = this.layer.tileInfo) == null ? void 0 : _a.spatialReference, e3);
  }
  async doRefresh() {
    if (this.attached) {
      if (this.suspended) return this._tileStrategy.clear(), void this.requestUpdate();
      this._fetchQueue.reset(), this._tileStrategy.refresh((e3) => this._updatingHandles.addPromise(this._enqueueTileFetch(e3)));
    }
  }
  acquireTile(e3) {
    const t = this._bitmapView.createTile(e3), i2 = t.bitmap;
    return [i2.x, i2.y] = this._tileInfoView.getTileCoords(V, t.key), i2.resolution = this._tileInfoView.getTileResolution(t.key), [i2.width, i2.height] = this._tileInfoView.tileInfo.size, this._updatingHandles.addPromise(this._enqueueTileFetch(t)), this._bitmapView.addChild(t), this.requestUpdate(), t;
  }
  releaseTile(e3) {
    this._fetchQueue.abort(e3.key.id), this._bitmapView.removeChild(e3), e3.once("detach", () => e3.destroy()), this.requestUpdate();
  }
  async fetchTile(e3, t = {}) {
    const i2 = this.tilemapCache, { signal: r5, resamplingLevel: o2 = 0 } = t;
    if (!i2) try {
      return await this._fetchImage(e3, r5);
    } catch (n3) {
      if (!b(n3) && !this.resampling) return o(this._tileInfoView.tileInfo.size);
      if (o2 < 3) {
        const i3 = this._tileInfoView.getTileParentId(e3.id);
        if (i3) {
          const s2 = new e2(i3), r6 = await this.fetchTile(s2, { ...t, resamplingLevel: o2 + 1 });
          return n2(this._tileInfoView, r6, s2, e3);
        }
      }
      throw n3;
    }
    const l = new e2(0, 0, 0, 0);
    let p2;
    try {
      if (await i2.fetchAvailabilityUpsample(e3.level, e3.row, e3.col, l, { signal: r5 }), !this.resampling && l.level !== e3.level) return o(this._tileInfoView.tileInfo.size);
      p2 = await this._fetchImage(l, r5);
    } catch (n3) {
      if (b(n3)) throw n3;
      return o(this._tileInfoView.tileInfo.size);
    }
    return this.resampling ? n2(this._tileInfoView, p2, l, e3) : p2;
  }
  async _enqueueTileFetch(e3) {
    if (!this._fetchQueue.has(e3.key.id)) {
      try {
        const t = await this._fetchQueue.push(e3.key);
        e3.bitmap.source = t, e3.bitmap.width = this._tileInfoView.tileInfo.size[0], e3.bitmap.height = this._tileInfoView.tileInfo.size[1], e3.once("attach", () => this.requestUpdate());
      } catch (t) {
        b(t) || n.getLogger(this).error(t);
      }
      this.requestUpdate();
    }
  }
  async _fetchImage(e3, t) {
    return this.layer.fetchImageBitmapTile(e3.level, e3.row, e3.col, { signal: t });
  }
};
r([m()], G.prototype, "resampling", null), r([m()], G.prototype, "tilemapCache", null), G = r([a("esri.views.2d.layers.TileLayerView2D")], G);
var I = G;
export {
  I as default
};
//# sourceMappingURL=TileLayerView2D-3EP4BVPL.js.map
