import {
  i
} from "./chunk-4TH6XK6A.js";
import {
  a as a3,
  o as o3,
  s as s2
} from "./chunk-PVFZLQ5G.js";
import {
  s
} from "./chunk-X2UYZD2B.js";
import {
  a as a2,
  o as o2
} from "./chunk-JQJITHTO.js";
import {
  o
} from "./chunk-6LGJYARD.js";
import {
  a
} from "./chunk-N42IF4WX.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderModules/Float2DrawUniform.js
var o4 = class extends a2 {
  constructor(r, o5) {
    super(r, "vec2", a.Draw, (e, s3, t, i3) => e.setUniform2fv(r, o5(s3, t, i3)));
  }
};

// node_modules/@arcgis/core/chunks/SSAOBlur.glsl.js
var d = 4;
function i2() {
  const i3 = new o3(), f2 = i3.fragment;
  i3.include(i);
  const u = (d + 1) / 2, c = 1 / (2 * u * u);
  return f2.include(a3), f2.uniforms.add(new s2("depthMap", (e) => e.depthTexture), new s("tex", (e) => e.colorTexture), new o4("blurSize", (e) => e.blurSize), new o2("projScale", (e, r) => {
    const o5 = r.camera.distance;
    return o5 > 5e4 ? Math.max(0, e.projScale - (o5 - 5e4)) : e.projScale;
  })), f2.code.add(o`
    void blurFunction(vec2 uv, float r, float center_d, float sharpness, inout float wTotal, inout float bTotal) {
      float c = texture(tex, uv).r;
      float d = linearDepthFromTexture(depthMap, uv);

      float ddiff = d - center_d;

      float w = exp(-r * r * ${o.float(c)} - ddiff * ddiff * sharpness);
      wTotal += w;
      bTotal += w * c;
    }
  `), i3.outputs.add("fragBlur", "float"), f2.main.add(o`
    float b = 0.0;
    float w_total = 0.0;

    float center_d = linearDepthFromTexture(depthMap, uv);

    float sharpness = -0.05 * projScale / center_d;
    for (int r = -${o.int(d)}; r <= ${o.int(d)}; ++r) {
      float rf = float(r);
      vec2 uvOffset = uv + rf * blurSize;
      blurFunction(uvOffset, rf, center_d, sharpness, w_total, b);
    }
    fragBlur = b / w_total;`), i3;
}
var f = Object.freeze(Object.defineProperty({ __proto__: null, build: i2 }, Symbol.toStringTag, { value: "Module" }));

export {
  i2 as i,
  f
};
//# sourceMappingURL=chunk-ZVUCWHFM.js.map
