import {
  T
} from "./chunk-Q3K5MAUZ.js";
import {
  r as r2
} from "./chunk-DPVSO6BH.js";
import {
  s as s3
} from "./chunk-C2RS46RL.js";
import {
  a as a2
} from "./chunk-N42IF4WX.js";
import {
  h
} from "./chunk-NEDBRPQY.js";
import {
  K
} from "./chunk-CGJUTDVJ.js";
import {
  s as s2
} from "./chunk-JUN5XSQC.js";
import {
  d
} from "./chunk-TKY5RBM3.js";
import {
  b2 as b,
  m
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a
} from "./chunk-33ECLFFF.js";
import {
  e,
  r
} from "./chunk-MV5XBD6C.js";
import {
  l2 as l,
  n2 as n,
  s2 as s,
  t
} from "./chunk-PKLD5YJF.js";
import {
  has
} from "./chunk-XKQWTZMW.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/TechniqueType.js
var e2;
!function(e8) {
  e8[e8.AnimatedMarker = 0] = "AnimatedMarker", e8[e8.Blend = 1] = "Blend", e8[e8.ComplexFill = 2] = "ComplexFill", e8[e8.ComplexOutlineFill = 3] = "ComplexOutlineFill", e8[e8.DotDensity = 4] = "DotDensity", e8[e8.Fill = 5] = "Fill", e8[e8.Grid = 6] = "Grid", e8[e8.Heatmap = 7] = "Heatmap", e8[e8.Label = 8] = "Label", e8[e8.Line = 9] = "Line", e8[e8.Magnifier = 10] = "Magnifier", e8[e8.Marker = 11] = "Marker", e8[e8.OutlineFill = 12] = "OutlineFill", e8[e8.Overlay = 13] = "Overlay", e8[e8.PatternFill = 14] = "PatternFill", e8[e8.PatternOutlineFill = 15] = "PatternOutlineFill", e8[e8.PieChart = 16] = "PieChart", e8[e8.Test = 17] = "Test", e8[e8.Text = 18] = "Text", e8[e8.TexturedLine = 19] = "TexturedLine";
}(e2 || (e2 = {}));

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/constants.js
var i;
!function(i5) {
  i5[i5.Geographic = 0] = "Geographic", i5[i5.Arithmatic = 1] = "Arithmatic";
}(i || (i = {}));
var t2 = 3.14159265359 / 180;
var c = 3.14159265359 / 128;
var r3 = 180 / 3.141592654;
var a3 = 1 / 8;
var o = 1;
var h2 = 1.1;
var n2 = 1;
var p = 1 / 4;
var g = 1 / 8;
var A = 24;
var G = 8;
var s4 = 1e-5;
var u = 0.05;
var k = 1e-30;
var q = 4;
var B = 0;
var C = 2;
var D = 2;
var E = 3;
var F = 0;
var H = 3;
var I = 16777216;
var J = 1.1;

// node_modules/@arcgis/core/views/2d/engine/webgl/animations/instructions.js
var t3;
!function(t9) {
  t9.Local = "Local", t9.Global = "Global";
}(t3 || (t3 = {}));
var o2 = class {
  generateSource(t9) {
    const o8 = [];
    for (let a8 = 1; a8 < this.length; a8++) o8.push(`vec4 atom${a8} = texture(${t9.animationTexture}, (pointer + 0.5) / size);`), o8.push("pointer.x += 1.0;");
    for (let a8 = 0; a8 < this.ins; a8++) o8.push("top--;"), o8.push(`vec4 in${this.ins - a8 - 1} = stack[top];`);
    for (let a8 = 0; a8 < this.outs; a8++) o8.push(`vec4 out${a8};`);
    const { microcode: e8 } = this;
    for (const a8 of e8) o8.push(a8);
    for (let a8 = 0; a8 < this.outs; a8++) o8.push(`stack[top] = out${a8};`), o8.push("top++;"), o8.push(`if (top >= ${d2}) { top = ${d2 - 1}; }`);
    return o8;
  }
};
var e3 = 128;
var a4 = class extends o2 {
  constructor() {
    super(...arguments), this.opcode = ++e3, this.length = 1, this.ins = 0, this.outs = 0, this.microcode = ["break;"];
  }
  encode() {
    return [[this.opcode, 0, 0, 0]];
  }
};
var i2 = class extends o2 {
  constructor() {
    super(...arguments), this.opcode = ++e3, this.length = 1, this.ins = 0, this.outs = 1, this.microcode = ["out0 = vec4(atom0.y, atom0.y, atom0.y, atom0.y);"];
  }
  encode(t9) {
    return [[this.opcode, t9, 0, 0]];
  }
};
var n3 = class extends o2 {
  constructor() {
    super(...arguments), this.opcode = ++e3, this.length = 1, this.ins = 0, this.outs = 1, this.microcode = ["out0 = vec4(atom0.yzw, 0.0);"];
  }
  encode(t9) {
    return [[this.opcode, t9[0] || 0, t9[1] || 0, t9[2] || 0]];
  }
};
var r4 = class extends o2 {
  constructor() {
    super(...arguments), this.opcode = ++e3, this.length = 2, this.ins = 0, this.outs = 1, this.microcode = ["out0 = atom1;"];
  }
  encode(t9) {
    return [[this.opcode, 0, 0, 0], t9];
  }
};
function s5(t9) {
  return [`float duration = clamp(${t9.duration}, 0.05, 3600.0);`, `float startTimeOffset = ${t9.startTimeOffset};`, `float repeatDelay = ${t9.repeatDelay};`, `float timeOriginSelector = ${t9.timeOriginSelector};`, `float repeatType = ${t9.repeatType};`, `float easing = ${t9.easing};`, `float playAnimation = ${t9.playAnimation} * (1.0 - step(0.0, -${t9.duration}));`, `float reverseAnimation = ${t9.reverseAnimation};`, "float time = globalTime - (timeOriginSelector == 1.0 ? localTimeOrigin : 0.0);", "time *= playAnimation;", "time *= 1.0 - reverseAnimation * 2.0;", "float period = duration + repeatDelay;", "time += reverseAnimation == 1.0 ? (period - startTimeOffset - 0.001) : startTimeOffset + 0.001;", "float omega = time / period;", "float oi = floor(omega);", "omega = repeatType == 1.0 || repeatType == 3.0 ? omega - oi : omega;", "float of = omega * period;", "of = (clamp(of, reverseAnimation * repeatDelay, period - (1.0 - reverseAnimation) * repeatDelay) - reverseAnimation * repeatDelay) / duration;", "of = easing == 2.0 ? pow(of, 3.0) : of;", "of = easing == 3.0 ? 1.0 - pow(1.0 - of, 3.0) : of;", "of = easing == 4.0 ? of < 0.5 ? 4.0 * pow(of, 3.0) : 1.0 - pow(-2.0 * of + 2.0, 3.0) / 2.0 : of;", "bool oscillate = repeatType == 3.0 && mod(oi, 2.0) == 1.0;", `${t9.out} = oscillate ? 1.0 - of : of;`];
}
var l2 = { Linear: 1, EaseIn: 2, EaseOut: 3, EaseInOut: 4 };
var m2 = { Loop: 1, None: 2, Oscillate: 3 };
var c2 = { Local: 1, Global: 2 };
function p2(t9) {
  const o8 = l2[t9.easing], e8 = m2[t9.repeatType], a8 = c2[t9.timeOriginSelector];
  return [[t9.duration, t9.startTimeOffset, t9.repeatDelay, a8], [e8, o8, t9.playAnimation, t9.reverseAnimation]];
}
var f = class extends o2 {
  constructor() {
    super(...arguments), this.opcode = ++e3, this.length = 10, this.ins = 1, this.outs = 1, this.microcode = ["vec2 fromTranslation = atom1.xy;", "vec2 toTranslation = atom1.zw;", "float fromRotation = atom2.x;", "float toRotation = atom2.y;", "float fromScale = atom2.z;", "float toScale = atom2.w;", "bool relativeTranslation = atom9.x == 1.0;", "bool absoluteScale = atom9.y == 1.0;", "vec2 translationMultiplier = relativeTranslation ? pixelDimensions : vec2(1.0, 1.0);", "float scaleDivisor = absoluteScale ? pixelDimensions.y : 1.0;", "float fTranslation;", "{", ...s5({ duration: "atom3.x", startTimeOffset: "atom3.y", repeatDelay: "atom3.z", timeOriginSelector: "atom3.w", repeatType: "atom4.x", easing: "atom4.y", playAnimation: "atom4.z", reverseAnimation: "atom4.w", out: "fTranslation" }), "}", "float fRotation;", "{", ...s5({ duration: "atom5.x", startTimeOffset: "atom5.y", repeatDelay: "atom5.z", timeOriginSelector: "atom5.w", repeatType: "atom6.x", easing: "atom6.y", playAnimation: "atom6.z", reverseAnimation: "atom6.w", out: "fRotation" }), "}", "float fScale;", "{", ...s5({ duration: "atom7.x", startTimeOffset: "atom7.y", repeatDelay: "atom7.z", timeOriginSelector: "atom7.w", repeatType: "atom8.x", easing: "atom8.y", playAnimation: "atom8.z", reverseAnimation: "atom8.w", out: "fScale" }), "}", "vec2 aTranslation = mix(fromTranslation, toTranslation, fTranslation);", "float aRotation = mix(fromRotation, toRotation, fRotation);", "float aScale = mix(fromScale, toScale, fScale);", "vec2 pTranslation = in0.xy;", "float pRotation = in0.z;", "float pScale = in0.w;", "aTranslation *= translationMultiplier;", "aScale /= scaleDivisor;", "float rotation = pRotation + aRotation;", "float scale = pScale * aScale;", "float sin1 = sin(pRotation);", "float cos1 = cos(pRotation);", "float s1 = pScale;", "float x1 = pTranslation.x;", "float y1 = pTranslation.y;", "float x2 = aTranslation.x;", "float y2 = aTranslation.y;", "\n    vec2 translation = vec2(\n      cos1 * s1 * x2 - sin1 * s1 * y2 + x1,\n      sin1 * s1 * x2 + cos1 * s1 * y2 + y1\n    );\n    ", "out0 = vec4(translation, rotation, scale);"];
  }
  encode(t9) {
    return [[this.opcode, 0, 0, 0], [t9.translation.from[0], t9.translation.from[1], t9.translation.to[0], t9.translation.to[1]], [t9.rotation.from, t9.rotation.to, t9.scale.from, t9.scale.to], ...p2(t9.translation.timing), ...p2(t9.rotation.timing), ...p2(t9.scale.timing), [t9.relativeTranslation ? 1 : 0, t9.absoluteScale ? 1 : 0, 0, 0]];
  }
};
var u2 = class extends o2 {
  constructor() {
    super(...arguments), this.opcode = ++e3, this.length = 7, this.ins = 1, this.outs = 1, this.microcode = ["float fromOpacity = atom0.y;", "float toOpacity = atom0.z;", "vec4 fromColor = atom1;", "vec4 toColor = atom2;", "float fColor;", "{", ...s5({ duration: "atom3.x", startTimeOffset: "atom3.y", repeatDelay: "atom3.z", timeOriginSelector: "atom3.w", repeatType: "atom4.x", easing: "atom4.y", playAnimation: "atom4.z", reverseAnimation: "atom4.w", out: "fColor" }), "}", "float fOpacity;", "{", ...s5({ duration: "atom5.x", startTimeOffset: "atom5.y", repeatDelay: "atom5.z", timeOriginSelector: "atom5.w", repeatType: "atom6.x", easing: "atom6.y", playAnimation: "atom6.z", reverseAnimation: "atom6.w", out: "fOpacity" }), "}", "vec4 aColor = mix(fromColor, toColor, fColor);", "aColor.a *= mix(fromOpacity, toOpacity, fOpacity);", "vec4 pColor = in0;", "out0 = aColor * pColor;"];
  }
  encode(t9) {
    return [[this.opcode, t9.opacity.from, t9.opacity.to, 0], [t9.color.from[0], t9.color.from[1], t9.color.from[2], t9.color.from[3]], [t9.color.to[0], t9.color.to[1], t9.color.to[2], t9.color.to[3]], ...p2(t9.color.timing), ...p2(t9.opacity.timing)];
  }
};
var h3 = { scalar: new i2(), vector3: new n3(), vector4: new r4(), animatedTransform: new f(), animatedColor: new u2(), ret: new a4() };
var y = 40;
var d2 = 4;
function x(t9) {
  const o8 = [];
  o8.push(`float globalTime = ${t9.globalTime};`), o8.push(`float localTimeOrigin = ${t9.localTimeOrigin};`), o8.push(`vec2 pointer = ${t9.animationPointer};`), o8.push(`vec2 size = ${t9.animationTextureSize};`), o8.push("int top = 0;"), o8.push(`vec4 stack[${d2}];`), o8.push(`for (int counter = 0; counter < ${y}; counter++) {`), o8.push(`vec4 atom0 = texture(${t9.animationTexture}, (pointer + 0.5) / size);`), o8.push("pointer.x += 1.0;"), o8.push(`vec2 pixelDimensions = ${t9.pixelDimensions};`), o8.push("if (false) {");
  for (const e8 in h3) {
    const a8 = h3[e8];
    o8.push(`} else if (int(atom0.x) == ${a8.opcode}) {`);
    for (const e9 of a8.generateSource(t9)) o8.push(e9);
  }
  return o8.push("} // End if-else."), o8.push("} // End for."), o8.push(`${t9.out} = top > 0 ? stack[top - 1] : vec4(0.0);`), o8.join("\n");
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/markers/markerConstants.js
var o3 = { bitset: { isSDF: 0, isMapAligned: 1, scaleSymbolsProportionally: 2, overrideOutlineColor: 3, colorLocked: 4, isStroke: 5 } };

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/graph/ShaderGraphNode.js
function t4(t9) {
  return t9.split(" ").map((t10, e8) => e8 > 0 ? t10.charAt(0).toUpperCase() + t10.slice(1) : t10).join("");
}
function e4(t9, e8) {
  const s11 = [];
  for (s11.push(e8); s11.length; ) {
    const e9 = s11.pop();
    if ("object" == typeof e9 && !t9.has(e9.uid)) {
      t9.add(e9.uid);
      for (const t10 of e9.children) s11.push(t10);
    }
  }
}
var s6 = class _s {
  constructor() {
    this.uid = _s.NodeCount++, this._debugName = null, this._isMutable = false, this.isImplicit = false;
  }
  get isMutable() {
    return this._isMutable;
  }
  setMutable() {
    return this._isMutable = true, this;
  }
  setDebugName(e8) {
    return e8 = t4(e8), this._debugName = e8, this.isImplicit && this.children[0] instanceof _s && this.children[0].setDebugName(e8), this;
  }
  get debugInfo() {
    return { name: this._debugName ?? "" };
  }
  cloneInto(t9) {
    t9._debugName = this._debugName, t9._isMutable = this._isMutable, t9.isImplicit = this.isImplicit, t9.uid = this.uid;
  }
};
function i3(t9) {
  return "object" == typeof t9 ? t9.clone() : t9;
}
s6.NodeCount = 0;
var r5 = class extends s6 {
  constructor() {
    super(...arguments), this.shaderType = "primitive-node";
  }
};
var n4 = class _n extends s6 {
  constructor(t9) {
    super(), this.child = t9, this.shaderType = "scope-node";
  }
  get children() {
    return [this.child];
  }
  clone() {
    const t9 = new _n(i3(this.child));
    return this.cloneInto(t9), t9;
  }
};
var o4 = class _o extends s6 {
  constructor(t9, e8, s11) {
    super(), this.property = t9, this.target = e8, this.returnType = s11, this.shaderType = "property-access-node";
  }
  get children() {
    const t9 = [this.target];
    return "string" != typeof this.property && t9.push(this.property), t9;
  }
  clone() {
    const t9 = new _o(this.property, i3(this.target), this.returnType);
    return this.cloneInto(t9), t9;
  }
};
var c3 = class _c extends s6 {
  constructor(t9, e8, s11) {
    super(), this.condition = t9, this.ifTrue = e8, this.ifFalse = s11, this.shaderType = "condition-node";
  }
  get children() {
    return [this.condition, this.ifTrue, this.ifFalse];
  }
  clone() {
    const t9 = i3(this.ifTrue), e8 = this.ifFalse ? i3(this.ifFalse) : null, s11 = new _c(this.condition, t9, e8);
    return this.cloneInto(s11), s11;
  }
};
var u3 = class _u extends s6 {
  constructor(t9, e8, s11, i5) {
    super(), this.captureList = t9, this.returnType = e8, this.generator = i5, this.shaderType = "block-node", s11 && (this.subgraph = new n4(s11));
  }
  get children() {
    return Object.keys(this.captureList).map((t9) => this.captureList[t9]).concat(this.subgraph ?? []);
  }
  clone() {
    const t9 = {};
    for (const s11 in this.captureList) t9[s11] = i3(this.captureList[s11]);
    const e8 = new _u(t9, this.returnType, this.subgraph ? i3(this.subgraph.child) : this.subgraph, this.generator);
    return this.cloneInto(e8), e8;
  }
};
var p3 = class _p extends s6 {
  constructor(t9, e8, s11, i5, r8, n9 = false) {
    super(), this.token = t9, this._children = e8, this.isInfix = s11, this.isPropertyAccess = i5, this.returnType = r8, this.isTernary = n9, this.shaderType = "function-node";
  }
  get children() {
    return this._children;
  }
  clone() {
    const t9 = new _p(this.token, this._children.map(i3), this.isInfix, this.isPropertyAccess, this.returnType, this.isTernary);
    return this.cloneInto(t9), t9;
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/graph/glsl.js
var s7;
var l3;
var h4;
var f2;
var a5;
var p4;
var d3;
var w;
var y2;
var m3;
var v;
var b2;
var I2;
var x2;
function z(t9) {
  const n9 = [["float", "vec2", "vec3", "vec4"], ["int", "ivec2", "ivec3", "ivec4"], ["uint", "uvec2", "uvec3", "uvec4"], ["bool", "bvec2", "bvec3", "bvec4"]];
  for (const e8 of n9) if (e8.includes(t9)) return e8.map((t10) => et[t10]);
  throw new Error("Unable to find type family");
}
function N(t9) {
  return new Proxy(t9, { get(n9, e8) {
    if ("constructor" === e8) return new Proxy(n9.constructor, { construct: (t10, n10, e9) => N(new t10(...n10)) });
    if (e8 in n9) return n9[e8];
    if ("string" == typeof e8) {
      const n10 = z(t9.type);
      return ft(t9, e8, n10[e8.length - 1]);
    }
  } });
}
function D2(t9) {
  return new Proxy(t9, { construct: (t10, n9, e8) => N(new t10(...n9)) });
}
function P(t9) {
  return new Proxy(t9, { get(n9, e8) {
    if (e8 in n9) return n9[e8];
    if ("string" == typeof e8) {
      const n10 = parseInt(e8, 10);
      if (!isNaN(n10)) return ft(t9, `[${n10}]`, t9.elementType.constructor);
    }
  } });
}
function q2(t9) {
  return new Proxy(t9, { construct: (t10, n9, e8) => P(new t10(...n9)) });
}
var B2 = class extends Error {
};
var U = s7 = class extends r5 {
  constructor(t9, n9) {
    super(), this.elementType = t9, this.size = n9, this.children = [], this.type = "array";
  }
  clone() {
    const t9 = new s7(this.elementType, this.size);
    return super.cloneInto(t9), t9;
  }
  get(t9) {
    if ("number" == typeof t9) {
      const n9 = new O(t9);
      return n9.isImplicit = true, ft(this, n9, this.elementType.constructor);
    }
    return ft(this, t9, this.elementType.constructor);
  }
  last() {
    return this.get(this.size - 1);
  }
  first() {
    return this.get(0);
  }
  findIndex(t9, n9, e8) {
    return bt(this, t9, n9, e8);
  }
  glslFindIndex(t9, n9, e8) {
    return It(this, t9, n9, e8);
  }
  static ofType(t9, n9) {
    const e8 = { construct: (e9, r8) => new s7(new t9(), n9) };
    return new Proxy(s7, e8);
  }
};
U.type = "array", U = s7 = r([q2], U);
var S = class _S extends r5 {
  constructor() {
    super(...arguments), this.type = "sampler2D", this.children = [];
  }
  clone() {
    const t9 = new _S();
    return t9.children = this.children.map(i3), super.cloneInto(t9), t9;
  }
};
S.type = "sampler2D";
var j = class _j extends r5 {
  constructor(t9) {
    super(), this.type = "float", this.children = [t9];
  }
  clone() {
    const t9 = new _j(i3(this.children[0]));
    return super.cloneInto(t9), t9;
  }
  multiply(t9) {
    return Tt(this, "number" == typeof t9 ? K2(t9, _j) : t9);
  }
  divide(t9) {
    return $t(this, "number" == typeof t9 ? K2(t9, _j) : t9);
  }
  add(t9) {
    return Ft(this, "number" == typeof t9 ? K2(t9, _j) : t9);
  }
  subtract(t9) {
    return kt(this, "number" == typeof t9 ? K2(t9, _j) : t9);
  }
};
j.type = "float";
var C2 = l3 = class extends r5 {
  constructor(t9, n9) {
    super(), this.type = "vec2", this.children = [t9, n9].filter((t10) => null != t10);
  }
  clone() {
    const t9 = new l3(i3(this.children[0]), i3(this.children[1]));
    return super.cloneInto(t9), t9;
  }
  get 0() {
    return ft(this, "[0]", j);
  }
  get 1() {
    return ft(this, "[1]", j);
  }
  get 2() {
    throw new B2();
  }
  get 3() {
    throw new B2();
  }
  multiply(t9) {
    return Tt(this, "number" == typeof t9 ? K2(t9, j) : t9);
  }
  divide(t9) {
    return $t(this, "number" == typeof t9 ? K2(t9, j) : t9);
  }
  add(t9) {
    return Ft(this, "number" == typeof t9 ? K2(t9, j) : t9);
  }
  subtract(t9) {
    return kt(this, "number" == typeof t9 ? K2(t9, j) : t9);
  }
};
C2.type = "vec2", C2 = l3 = r([D2], C2);
var G2 = h4 = class extends r5 {
  constructor(t9, n9, e8) {
    super(), this.type = "vec3", this.children = [t9, n9, e8].filter((t10) => null != t10);
  }
  get 0() {
    return ft(this, "[0]", j);
  }
  get 1() {
    return ft(this, "[1]", j);
  }
  get 2() {
    return ft(this, "[2]", j);
  }
  get 3() {
    throw new B2();
  }
  clone() {
    const t9 = new h4(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]));
    return super.cloneInto(t9), t9;
  }
  multiply(t9) {
    return Tt(this, "number" == typeof t9 ? K2(t9, j) : t9);
  }
  divide(t9) {
    return $t(this, "number" == typeof t9 ? K2(t9, j) : t9);
  }
  add(t9) {
    return Ft(this, "number" == typeof t9 ? K2(t9, j) : t9);
  }
  subtract(t9) {
    return kt(this, "number" == typeof t9 ? K2(t9, j) : t9);
  }
};
G2.type = "vec3", G2 = h4 = r([D2], G2);
var H2 = f2 = class extends r5 {
  constructor(t9, n9, e8, r8) {
    super(), this.type = "vec4", this.children = [t9, n9, e8, r8].filter((t10) => null != t10);
  }
  clone() {
    const t9 = new f2(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]), i3(this.children[3]));
    return super.cloneInto(t9), t9;
  }
  get 0() {
    return ft(this, "[0]", j);
  }
  get 1() {
    return ft(this, "[1]", j);
  }
  get 2() {
    return ft(this, "[2]", j);
  }
  get 3() {
    return ft(this, "[3]", j);
  }
  multiply(t9) {
    return Tt(this, "number" == typeof t9 ? K2(t9, j) : t9);
  }
  divide(t9) {
    return $t(this, "number" == typeof t9 ? K2(t9, j) : t9);
  }
  add(t9) {
    return Ft(this, "number" == typeof t9 ? K2(t9, j) : t9);
  }
  subtract(t9) {
    return kt(this, "number" == typeof t9 ? K2(t9, j) : t9);
  }
};
H2.type = "vec4", H2 = f2 = r([D2], H2);
var M = a5 = class extends r5 {
  constructor(t9) {
    super(), this.type = "uint", this.children = [t9];
  }
  clone() {
    const t9 = new a5(i3(this.children[0]));
    return super.cloneInto(t9), t9;
  }
};
M.type = "uint", M = a5 = r([D2], M);
var R = p4 = class extends r5 {
  constructor(t9, n9) {
    super(), this.type = "uvec2", this.children = [t9, n9].filter((t10) => null != t10);
  }
  clone() {
    const t9 = new p4(i3(this.children[0]), i3(this.children[1]));
    return super.cloneInto(t9), t9;
  }
};
R.type = "uvec2", R = p4 = r([D2], R);
var A2 = d3 = class extends r5 {
  constructor(t9, n9, e8) {
    super(), this.type = "uvec3", this.children = [t9, n9, e8].filter((t10) => null != t10);
  }
  clone() {
    const t9 = new d3(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]));
    return super.cloneInto(t9), t9;
  }
};
A2.type = "uvec3", A2 = d3 = r([D2], A2);
var X = w = class extends r5 {
  constructor(t9, n9, e8, r8) {
    super(), this.type = "uvec4", this.children = [t9, n9, e8, r8].filter((t10) => null != t10);
  }
  clone() {
    const t9 = new w(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]), i3(this.children[3]));
    return super.cloneInto(t9), t9;
  }
};
X.type = "uvec4", X = w = r([D2], X);
var Y = class _Y extends r5 {
  constructor(t9) {
    super(), this.type = "bool", this.children = [t9];
  }
  and(t9) {
    return At(this, t9);
  }
  or(t9) {
    return Mt(this, t9);
  }
  clone() {
    const t9 = new _Y(i3(this.children[0]));
    return super.cloneInto(t9), t9;
  }
};
Y.type = "bool";
var _ = y2 = class extends r5 {
  constructor(t9, n9) {
    super(), this.type = "bvec2", this.children = [t9, n9].filter((t10) => null != t10);
  }
  all() {
    return Kt(this);
  }
  any() {
    return Lt(this);
  }
  clone() {
    const t9 = new y2(i3(this.children[0]), i3(this.children[1]));
    return super.cloneInto(t9), t9;
  }
};
_.type = "bvec2", _ = y2 = r([D2], _);
var J2 = m3 = class extends r5 {
  constructor(t9, n9, e8) {
    super(), this.type = "bvec3", this.children = [t9, n9, e8].filter((t10) => null != t10);
  }
  all() {
    return Kt(this);
  }
  any() {
    return Lt(this);
  }
  clone() {
    const t9 = new m3(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]));
    return super.cloneInto(t9), t9;
  }
};
function K2(t9, n9) {
  if ("number" == typeof t9) {
    return new n9(t9);
  }
  return t9;
}
J2.type = "bvec3", J2 = m3 = r([D2], J2);
var L = v = class extends r5 {
  constructor(t9, n9, e8, r8) {
    super(), this.type = "bvec4", this.children = [t9, n9, e8, r8].filter((t10) => null != t10);
  }
  all() {
    return Kt(this);
  }
  any() {
    return Lt(this);
  }
  clone() {
    const t9 = new v(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]), i3(this.children[3]));
    return super.cloneInto(t9), t9;
  }
};
L.type = "bvec4", L = v = r([D2], L);
var O = class _O extends r5 {
  constructor(t9) {
    super(), this.type = "int", this.children = [t9];
  }
  multiply(t9) {
    return Tt(this, K2(t9, _O));
  }
  add(t9) {
    return Ft(this, K2(t9, _O));
  }
  subtract(t9) {
    return kt(this, K2(t9, _O));
  }
  divide(t9) {
    return $t(this, K2(t9, _O));
  }
  clone() {
    const t9 = new _O(i3(this.children[0]));
    return super.cloneInto(t9), t9;
  }
};
O.type = "int";
var Q = b2 = class extends r5 {
  constructor(t9, n9) {
    super(), this.type = "ivec2", this.children = [t9, n9].filter((t10) => null != t10);
  }
  clone() {
    const t9 = new b2(i3(this.children[0]), i3(this.children[1]));
    return super.cloneInto(t9), t9;
  }
};
Q.type = "ivec2", Q = b2 = r([D2], Q);
var V = I2 = class extends r5 {
  constructor(t9, n9, e8) {
    super(), this.type = "ivec3", this.children = [t9, n9, e8].filter((t10) => null != t10);
  }
  clone() {
    const t9 = new I2(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]));
    return super.cloneInto(t9), t9;
  }
};
V.type = "ivec3", V = I2 = r([D2], V);
var W = x2 = class extends r5 {
  constructor(t9, n9, e8, r8) {
    super(), this.type = "ivec4", this.children = [t9, n9, e8, r8].filter((t10) => null != t10);
  }
  clone() {
    const t9 = new x2(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]), i3(this.children[3]));
    return super.cloneInto(t9), t9;
  }
};
W.type = "ivec4", W = x2 = r([D2], W);
var Z = class _Z extends r5 {
  constructor(t9, n9, e8, r8) {
    super(), this.type = "mat2", this.children = [t9, n9, e8, r8];
  }
  clone() {
    const t9 = new _Z(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]), i3(this.children[3]));
    return super.cloneInto(t9), t9;
  }
  multiply(t9) {
    return Tt(this, t9);
  }
};
Z.type = "mat2";
var tt = class _tt extends r5 {
  static identity() {
    return new _tt(1, 0, 0, 0, 1, 0, 0, 0, 1);
  }
  static fromRotation(t9) {
    const n9 = Zn(t9), e8 = nn(t9);
    return new _tt(e8, n9, 0, yt(n9), e8, 0, 0, 0, 1);
  }
  constructor(t9, n9, e8, r8, c5, i5, u6, o8, s11) {
    super(), this.type = "mat3", this.children = [t9, n9, e8, r8, c5, i5, u6, o8, s11];
  }
  add(t9) {
    return Ft(this, t9);
  }
  multiply(t9) {
    return Tt(this, t9);
  }
  clone() {
    const t9 = new _tt(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]), i3(this.children[3]), i3(this.children[4]), i3(this.children[5]), i3(this.children[6]), i3(this.children[7]), i3(this.children[8]));
    return super.cloneInto(t9), t9;
  }
};
tt.type = "mat3";
var nt = class _nt extends r5 {
  static identity() {
    return new _nt(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
  }
  constructor(t9, n9, e8, r8, c5, i5, u6, o8, s11, l7, h11, f7, a8, p8, d10, w5) {
    super(), this.type = "mat4", this.children = [t9, n9, e8, r8, c5, i5, u6, o8, s11, l7, h11, f7, a8, p8, d10, w5];
  }
  static fromColumns(t9, n9, e8, r8) {
    return new _nt(t9.x, t9.y, t9.z, t9.w, n9.x, n9.y, n9.z, n9.w, e8.x, e8.y, e8.z, e8.w, r8.x, r8.y, r8.z, r8.w);
  }
  multiply(t9) {
    return Tt(this, t9);
  }
  clone() {
    const t9 = new _nt(i3(this.children[0]), i3(this.children[1]), i3(this.children[2]), i3(this.children[3]), i3(this.children[4]), i3(this.children[5]), i3(this.children[6]), i3(this.children[7]), i3(this.children[8]), i3(this.children[9]), i3(this.children[10]), i3(this.children[11]), i3(this.children[12]), i3(this.children[13]), i3(this.children[14]), i3(this.children[15]));
    return super.cloneInto(t9), t9;
  }
};
nt.type = "mat4";
var et = { float: j, vec2: C2, vec3: G2, vec4: H2, int: O, ivec2: Q, ivec3: V, ivec4: W, uint: M, uvec2: R, uvec3: A2, uvec4: X, bool: Y, bvec2: _, bvec3: J2, bvec4: L };
var rt = (...t9) => new O(...t9);
var ct = (...t9) => new j(...t9);
var it = (...t9) => new C2(...t9);
var ut = (...t9) => new G2(...t9);
var ot = (...t9) => new H2(...t9);
var lt = (...t9) => new tt(...t9);
function ft(t9, n9, e8) {
  const c5 = new e8(new o4(n9, t9, e8));
  return c5.isImplicit = true, c5;
}
function at(t9, n9, e8, r8 = null) {
  if (r8) {
    const c6 = new r8(), i5 = new r8(new p3(t9, [n9, e8], true, false, c6));
    return i5.isImplicit = true, i5;
  }
  if ("float" === n9.type || "int" === n9.type) {
    const r9 = new e8.constructor(new p3(t9, [n9, e8], true, false, e8.constructor));
    return r9.isImplicit = true, r9;
  }
  if (("mat2" === n9.type || "mat3" === n9.type || "mat4" === n9.type) && "float" !== e8.type) {
    const r9 = new e8.constructor(new p3(t9, [n9, e8], true, false, e8.constructor));
    return r9.isImplicit = true, r9;
  }
  const c5 = new n9.constructor(new p3(t9, [n9, e8], true, false, n9.constructor));
  return c5.isImplicit = true, c5;
}
function pt(t9, n9, e8 = n9.constructor) {
  const r8 = new e8(new p3(t9, [n9], false, false, e8));
  return r8.isImplicit = true, r8;
}
function dt(t9, n9, e8, r8 = n9.constructor) {
  const c5 = new r8(new p3(t9, [n9, e8], false, false, r8));
  return c5.isImplicit = true, c5;
}
function wt(t9, n9, e8, r8, c5 = n9.constructor) {
  const i5 = new c5(new p3(t9, [n9, e8, r8], false, false, c5));
  return i5.isImplicit = true, i5;
}
function yt(t9) {
  return Tt(t9, ct(-1));
}
function mt(t9, n9, e8, r8) {
  return new n9(new u3(t9, n9, e8, r8));
}
function bt(t9, n9, e8 = 0, r8 = t9.size) {
  const c5 = new O(e8).setMutable().setDebugName("FindIndexIterator"), i5 = n9(t9.get(c5)).setDebugName("FindIndexPredicate"), u6 = mt({ iter: c5 }, O, i5, ({ out: t10, iter: n10, subgraph: e9 }) => `
${t10} = -1;

for (; ${n10} < ${r8}; ${n10}++) {

${e9.body}

  if (${e9.varName}) {
    ${t10} = ${n10};
    break;
  }

}
`).setDebugName("FindIndexBlock");
  return u6;
}
function It(t9, n9, e8 = 0, r8 = t9.size) {
  const c5 = mt({ array: t9 }, O, null, ({ out: t10, array: c6 }) => `
${t10} = -1;
for (int i = ${e8}; i < ${r8}; i++) {
  bool condition;
  ${n9({ array: c6, i: "i", out: "condition" })}
  if (condition) {
    ${t10} = i;
    break;
  }
}
`).setDebugName("GlslFindIndexBlock");
  return c5;
}
function xt(t9, n9, e8) {
  const r8 = "function" == typeof n9 ? n9() : n9, c5 = "function" == typeof e8 ? e8() : e8, i5 = new r8.constructor(new c3(t9, r8, c5));
  return i5.isImplicit = true, i5;
}
function gt(...t9) {
  const n9 = t9.map(([t10, n10]) => "function" == typeof n10 ? [t10, n10()] : [t10, n10]), e8 = n9[0][1].constructor, r8 = n9.findIndex((t10) => true === t10[0]);
  if (-1 === r8) throw new Error("A cond must have a fallthrough case with `true`/; ");
  const c5 = n9.slice(0, r8), i5 = n9[r8][1], u6 = new e8(c5.reduceRight((t10, n10) => xt(n10[0], n10[1], t10), i5));
  return u6.isImplicit = true, u6;
}
function Tt(t9, n9) {
  return at("*", t9, n9);
}
function $t(t9, n9) {
  return at("/", t9, n9);
}
function Ft(t9, n9) {
  return at("+", t9, n9);
}
function kt(t9, n9) {
  return at("-", t9, n9);
}
function zt(t9, n9) {
  return at("%", t9, n9);
}
function Dt(t9, n9) {
  return at(">>", t9, n9);
}
function Pt(t9, n9) {
  return at("&", t9, n9);
}
function Ut(t9, n9) {
  return at("==", t9, n9, Y);
}
function jt(t9, n9) {
  return at("<", t9, n9, Y);
}
function Ct(t9, n9) {
  return at("<=", t9, n9, Y);
}
function Gt(t9, n9) {
  return at(">", t9, n9, Y);
}
function Ht(t9, n9) {
  return at(">=", t9, n9, Y);
}
function Mt(...t9) {
  return t9.length <= 1 ? t9[0] : t9.slice(1).reduce((t10, n9) => Rt(t10, n9), t9[0]);
}
function Rt(t9, n9) {
  return at("||", t9, n9, Y);
}
function At(...t9) {
  return t9.length <= 1 ? t9[0] : t9.slice(1).reduce((t10, n9) => Xt(t10, n9), t9[0]);
}
function Xt(t9, n9) {
  return at("&&", t9, n9, Y);
}
function Yt(t9) {
  return pt("abs", t9);
}
function Kt(t9) {
  return pt("all", t9, Y);
}
function Lt(t9) {
  return pt("any", t9, Y);
}
function Vt(t9, n9) {
  return null == n9 ? pt("atan", t9) : dt("atan", t9, n9, t9.constructor);
}
function Zt(t9) {
  return pt("ceil", t9);
}
function tn(t9, n9, e8) {
  return wt("clamp", t9, n9, e8, t9.constructor);
}
function nn(t9) {
  return pt("cos", t9);
}
function ln(t9, n9) {
  return dt("distance", t9, n9, j);
}
function hn(t9, n9) {
  return dt("dot", t9, n9, j);
}
function bn(t9) {
  return pt("floor", t9);
}
function In(t9) {
  return pt("fract", t9);
}
function zn(t9) {
  return pt("length", t9, j);
}
function Un(t9, n9) {
  return dt("max", t9, n9);
}
function Sn(t9, n9) {
  return dt("min", t9, n9);
}
function jn(t9, n9, e8) {
  return wt("mix", t9, n9, e8);
}
function Cn(t9, n9) {
  return dt("mod", t9, n9);
}
function Hn(t9) {
  return pt("normalize", t9);
}
function Mn(t9) {
  return "bool" === t9.type ? pt("!", t9) : pt("not", t9);
}
function Jn(t9, n9) {
  return dt("pow", t9, n9);
}
function Qn(t9) {
  return pt("round", t9);
}
function Zn(t9) {
  return pt("sin", t9);
}
function ne(t9, n9, e8) {
  return wt("smoothstep", t9, n9, e8);
}
function ee(t9) {
  return pt("sqrt", t9);
}
function re(t9, n9) {
  return dt("step", t9, n9, n9.constructor);
}
function le(t9, n9) {
  return dt("texture", t9, n9, H2);
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/ShaderBuilder2D.js
var s8 = () => n.getLogger("esri.views.3d.webgl-engine.core.shaderModules.shaderBuilder");
var i4 = class {
  constructor() {
    this._includedModules = /* @__PURE__ */ new Map();
  }
  include(e8, r8) {
    this._includedModules.has(e8) ? this._includedModules.get(e8) : (this._includedModules.set(e8, r8), e8(this.builder, r8));
  }
};
var o5 = class extends i4 {
  constructor() {
    super(...arguments), this.vertex = new u4(), this.fragment = new u4(), this.attributes = new m4(), this.varyings = new h5(), this.extensions = new l4(), this.constants = new d4();
  }
  get fragmentUniforms() {
    return this.fragment.uniforms.entries;
  }
  get builder() {
    return this;
  }
  generate(e8, r8 = true) {
    const t9 = this.extensions.generateSource(e8), n9 = this.attributes.generateSource(e8), s11 = this.varyings.generateSource(e8), i5 = "vertex" === e8 ? this.vertex : this.fragment, o8 = i5.uniforms.generateSource(), a8 = i5.code.generateSource(), c5 = "vertex" === e8 ? g2 : _2(), u6 = this.constants.generateSource().concat(i5.constants.generateSource());
    return `${r8 ? "#version 300 es" : ""}
${t9.join("\n")}
${c5}
${u6.join("\n")}
${o8.join("\n")}
${n9.join("\n")}
${s11.join("\n")}
${a8.join("\n")}`;
  }
  generateBindPass(e8) {
    const r8 = /* @__PURE__ */ new Map();
    this.vertex.uniforms.entries.forEach((e9) => {
      const n10 = e9.bind[a2.Pass];
      n10 && r8.set(e9.name, n10);
    }), this.fragment.uniforms.entries.forEach((e9) => {
      const n10 = e9.bind[a2.Pass];
      n10 && r8.set(e9.name, n10);
    });
    const n9 = Array.from(r8.values()), s11 = n9.length;
    return (r9, t9) => {
      for (let i5 = 0; i5 < s11; ++i5) n9[i5](e8, r9, t9);
    };
  }
  generateBindDraw(e8) {
    const r8 = /* @__PURE__ */ new Map();
    this.vertex.uniforms.entries.forEach((e9) => {
      const n10 = e9.bind[a2.Draw];
      n10 && r8.set(e9.name, n10);
    }), this.fragment.uniforms.entries.forEach((e9) => {
      const n10 = e9.bind[a2.Draw];
      n10 && r8.set(e9.name, n10);
    });
    const n9 = Array.from(r8.values()), s11 = n9.length;
    return (r9, t9, i5) => {
      for (let o8 = 0; o8 < s11; ++o8) n9[o8](e8, i5, r9, t9);
    };
  }
};
var a6 = class {
  constructor() {
    this._entries = /* @__PURE__ */ new Map();
  }
  add(...e8) {
    for (const r8 of e8) this._add(r8);
  }
  get(e8) {
    return this._entries.get(e8);
  }
  _add(r8) {
    if (null != r8) {
      if (this._entries.has(r8.name) && !this._entries.get(r8.name).equals(r8)) throw new s(`Duplicate uniform name ${r8.name} for different uniform type`);
      this._entries.set(r8.name, r8);
    } else s8().error(`Trying to add null Uniform from ${new Error().stack}.`);
  }
  generateSource() {
    return Array.from(this._entries.values()).map((e8) => null != e8.arraySize ? `uniform ${e8.type} ${e8.name}[${e8.arraySize}];` : `uniform ${e8.type} ${e8.name};`);
  }
  get entries() {
    return Array.from(this._entries.values());
  }
};
var c4 = class {
  constructor() {
    this._entries = new Array();
  }
  add(e8) {
    this._entries.push(e8);
  }
  generateSource() {
    return this._entries;
  }
};
var u4 = class extends i4 {
  constructor() {
    super(...arguments), this.uniforms = new a6(), this.code = new c4(), this.constants = new d4();
  }
  get builder() {
    return this;
  }
};
var m4 = class {
  constructor() {
    this._entries = new Array();
  }
  add(e8, r8) {
    this._entries.push([e8, r8]);
  }
  generateSource(e8) {
    return "fragment" === e8 ? [] : this._entries.map((e9) => `in ${e9[1]} ${e9[0]};`);
  }
};
var h5 = class {
  constructor() {
    this._entries = /* @__PURE__ */ new Map();
  }
  add(e8, r8) {
    this._entries.has(e8) && s3(this._entries.get(e8) === r8), this._entries.set(e8, r8);
  }
  generateSource(e8) {
    const r8 = new Array();
    return this._entries.forEach((t9, n9) => r8.push("vertex" === e8 ? `out ${t9} ${n9};` : `in ${t9} ${n9};`)), r8;
  }
};
var l4 = class _l {
  constructor() {
    this._entries = /* @__PURE__ */ new Set();
  }
  add(e8) {
    this._entries.add(e8);
  }
  generateSource(e8) {
    const r8 = "vertex" === e8 ? _l.ALLOWLIST_VERTEX : _l.ALLOWLIST_FRAGMENT;
    return Array.from(this._entries).filter((e9) => r8.includes(e9)).map((e9) => `#extension ${e9} : enable`);
  }
};
l4.ALLOWLIST_FRAGMENT = ["GL_EXT_shader_texture_lod", "GL_OES_standard_derivatives"], l4.ALLOWLIST_VERTEX = [];
var d4 = class _d {
  constructor() {
    this._entries = /* @__PURE__ */ new Set();
  }
  add(e8, r8, t9) {
    let n9 = "ERROR_CONSTRUCTOR_STRING";
    switch (r8) {
      case "float":
        n9 = _d._numberToFloatStr(t9);
        break;
      case "int":
        n9 = _d._numberToIntStr(t9);
        break;
      case "bool":
        n9 = t9.toString();
        break;
      case "vec2":
        n9 = `vec2(${_d._numberToFloatStr(t9[0])},                            ${_d._numberToFloatStr(t9[1])})`;
        break;
      case "vec3":
        n9 = `vec3(${_d._numberToFloatStr(t9[0])},                            ${_d._numberToFloatStr(t9[1])},                            ${_d._numberToFloatStr(t9[2])})`;
        break;
      case "vec4":
        n9 = `vec4(${_d._numberToFloatStr(t9[0])},                            ${_d._numberToFloatStr(t9[1])},                            ${_d._numberToFloatStr(t9[2])},                            ${_d._numberToFloatStr(t9[3])})`;
        break;
      case "ivec2":
        n9 = `ivec2(${_d._numberToIntStr(t9[0])},                             ${_d._numberToIntStr(t9[1])})`;
        break;
      case "ivec3":
        n9 = `ivec3(${_d._numberToIntStr(t9[0])},                             ${_d._numberToIntStr(t9[1])},                             ${_d._numberToIntStr(t9[2])})`;
        break;
      case "ivec4":
        n9 = `ivec4(${_d._numberToIntStr(t9[0])},                             ${_d._numberToIntStr(t9[1])},                             ${_d._numberToIntStr(t9[2])},                             ${_d._numberToIntStr(t9[3])})`;
        break;
      case "mat2":
      case "mat3":
      case "mat4":
        n9 = `${r8}(${Array.prototype.map.call(t9, (e9) => _d._numberToFloatStr(e9)).join(", ")})`;
    }
    return this._entries.add(`const ${r8} ${e8} = ${n9};`), this;
  }
  static _numberToIntStr(e8) {
    return e8.toFixed(0);
  }
  static _numberToFloatStr(e8) {
    return Number.isInteger(e8) ? e8.toFixed(1) : e8.toString();
  }
  generateSource() {
    return Array.from(this._entries);
  }
};
function _2() {
  return "#ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n  precision highp sampler2D;\n#else\n  precision mediump float;\n  precision mediump sampler2D;\n#endif\n";
}
var g2 = "precision highp float;\nprecision highp sampler2D;";

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/graph/GlslGraphWriter.js
var e5 = 5;
function t5(e8, t9, r8) {
  const n9 = t9.split("\n");
  for (const i5 of n9) if (i5.trim().length) {
    {
      let t10 = "";
      null != r8 && (t10 += `/*id:${r8 ?? "000"}*/   `), e8.body += t10.padEnd(14);
    }
    e8.body += " ".repeat(e8.indent) + i5 + "\n";
  }
}
var r6 = class {
  write(e8) {
    for (const t9 of e8.rootOutputNodes()) e8.shouldPruneOutputNode(t9) || (t9.variableName = this._write(e8, t9.node));
    return e8;
  }
  _createVarName(e8, t9) {
    let r8 = "";
    return "boolean" != typeof t9 && "number" != typeof t9 && t9.debugInfo.name && (r8 = `${t9.debugInfo.name}_`), `${r8}v${e8.varCount++}`;
  }
  _write(e8, t9, r8 = false) {
    if ("number" == typeof t9) return t9.toString();
    if ("boolean" == typeof t9) return t9.toString();
    let n9 = e8.getEmit(t9);
    if (n9) return n9;
    switch (t9.shaderType) {
      case "scope-node":
        n9 = this._writeScopeNode(e8, t9);
        break;
      case "primitive-node":
        n9 = this._writePrimitiveNode(e8, t9, r8);
        break;
      case "function-node":
        n9 = this._writeFunctionNode(e8, t9);
        break;
      case "property-access-node":
        n9 = this._writePropertyAccessNode(e8, t9);
        break;
      case "text-node":
        n9 = t9.text;
        break;
      case "block-node":
        n9 = this._writeBlockNode(e8, t9);
        break;
      case "condition-node":
        n9 = this._writeConditionNode(e8, t9);
    }
    return e8.setEmit(t9, n9), n9;
  }
  _writeScopeNode(e8, r8) {
    const n9 = new r8.child.constructor();
    n9.setDebugName(r8.debugInfo.name);
    const i5 = this._write(e8, n9, true);
    t5(e8, `{ /*ScopeStart: ${r8.uid} ${r8.debugInfo.name}*/`), e8.indent += 2;
    return t5(e8, `${i5} = ${this._write(e8, r8.child)};`), e8.indent -= 2, t5(e8, `} /*ScopeEnd: ${r8.uid} ${r8.debugInfo.name}*/`), i5;
  }
  _writeConditionNode(e8, r8) {
    const n9 = new r8.ifTrue.constructor(), i5 = this._write(e8, n9, true);
    t5(e8, `if (${this._write(e8, r8.condition)}) {`), e8.indent += 2;
    const o8 = e8.createSubgraphContext(), d10 = this._write(o8, r8.ifTrue);
    if (e8.body += o8.body, d10 && t5(e8, `${i5} = ${d10};`), e8.indent -= 2, t5(e8, "}"), r8.ifFalse) {
      t5(e8, "else {"), e8.indent += 2;
      const n10 = e8.createSubgraphContext(), o9 = this._write(n10, r8.ifFalse);
      e8.body += n10.body, o9 && t5(e8, `${i5} = ${o9};`), e8.indent -= 2, t5(e8, "}");
    }
    return i5;
  }
  _writeBlockNode(e8, r8) {
    const { captureList: n9, generator: i5, returnType: o8 } = r8, d10 = {};
    for (const t9 in n9) {
      if (!n9[t9]) continue;
      const r9 = this._write(e8, n9[t9]);
      d10[t9] = r9;
    }
    const s11 = new o8(), c5 = this._write(e8, s11, true);
    if (d10.out = c5, r8.subgraph) {
      const t9 = e8.createSubgraphContext(), n10 = this._write(t9, r8.subgraph.child), i6 = t9.body;
      d10.subgraph = { varName: n10, body: i6 };
    }
    const a8 = i5(d10);
    return t5(e8, "{\n"), e8.indent += 2, t5(e8, a8), e8.indent -= 2, t5(e8, "}\n"), c5;
  }
  _writePropertyAccessNode(e8, t9) {
    const r8 = this._write(e8, t9.target);
    if ("string" == typeof t9.property && t9.property.includes("[")) return `${r8}${t9.property}`;
    if ("string" != typeof t9.property) {
      return `${r8}[${this._write(e8, t9.property)}]`;
    }
    return `${r8}.${t9.property}`;
  }
  _writeFunctionNode(r8, n9) {
    const i5 = n9.returnType.type;
    if (n9.isInfix) {
      const [o9, d11] = n9.children.map((e8) => this._write(r8, e8)), s11 = this._createVarName(r8, n9);
      return t5(r8, `${i5.padEnd(e5)} ${s11} = ${o9} ${n9.token} ${d11};`, n9.uid), s11;
    }
    const o8 = n9.children.map((e8) => this._write(r8, e8)).join(", "), d10 = this._createVarName(r8, n9);
    return t5(r8, `${i5.padEnd(e5)} ${d10} = ${n9.token}(${o8});`, n9.uid), d10;
  }
  _writePrimitiveNode(r8, n9, i5 = false) {
    var _a;
    const o8 = r8.getInput(n9);
    if (o8) return o8.isUsed = true, o8.variableName;
    const d10 = 1 === n9.children.length && ((_a = n9.children[0]) == null ? void 0 : _a.type) === n9.type;
    if (n9.isImplicit || d10) return this._write(r8, n9.children[0]);
    const s11 = this._createVarName(r8, n9);
    if (i5) return t5(r8, `${n9.type.padEnd(e5)} ${s11};`, n9.uid), s11;
    const c5 = !n9.debugInfo.name && !n9.isMutable;
    if (c5 && "float" === n9.type && "number" == typeof n9.children[0]) return Number.isInteger(n9.children[0]) ? n9.children[0].toFixed(1) : n9.children[0].toString();
    if (c5 && "int" === n9.type && "number" == typeof n9.children[0] && Number.isInteger(n9.children[0])) return n9.children[0].toString();
    const a8 = n9.children.map((e8) => this._write(r8, e8)).join(", ");
    return "array" === n9.type ? (t5(r8, `${n9.type.padEnd(e5)} ${s11} = [${a8}];`, n9.uid), s11) : c5 ? `${n9.type}(${a8})` : (t5(r8, `${n9.type.padEnd(e5)} ${s11} = ${n9.type}(${a8});`, n9.uid), s11);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/graph/ShaderGraphContext.js
var t6 = class _t {
  constructor(e8, t9, d10) {
    this.variableName = e8, this.variableInputType = t9, this.node = d10, this.type = "shader-input", this.isUsed = false;
  }
  clone() {
    return new _t(this.variableName, this.variableInputType, i3(this.node));
  }
};
var d5 = class _d {
  constructor(e8, t9, d10) {
    this.outVariableName = e8, this.outVariableType = t9, this.node = d10, this.type = "shader-output";
  }
  clone() {
    const t9 = new _d(this.outVariableName, this.outVariableType, i3(this.node));
    return t9.variableName = this.variableName, t9;
  }
};
var o6 = class _o {
  static createVertex(e8, n9, a8, i5, r8, s11) {
    const u6 = [];
    for (const d10 in e8) {
      const o8 = e8[d10], n10 = a8.get(d10);
      n10 ? u6.push(new t6(n10, "builtin", o8)) : u6.push(new t6("a_" + d10, "in", o8));
    }
    for (const d10 of i5) {
      const e9 = d10.uniformHydrated;
      u6.push(new t6(d10.uniformName, "uniform", e9));
    }
    const p8 = [];
    for (const t9 in n9) {
      const e9 = n9[t9];
      "glPosition" === t9 ? p8.push(new d5("gl_Position", "builtin", e9)) : "glPointSize" === t9 ? p8.push(new d5("gl_PointSize", "builtin", e9)) : p8.push(new d5("v_" + t9, "out", e9));
    }
    return new _o(u6, p8, r8, s11);
  }
  static createFragment(e8, n9, a8, i5, r8, s11) {
    const u6 = [], p8 = Array.from(r8.rootOutputNodes());
    for (const d10 in e8) {
      const o8 = e8[d10], n10 = a8.get(d10);
      if (n10) {
        u6.push(new t6(n10, "builtin", o8));
        continue;
      }
      const i6 = p8.find((e9) => e9.node === o8);
      i6 && u6.push(new t6(i6.outVariableName, "in", o8));
    }
    for (const d10 of i5) {
      const e9 = d10.uniformHydrated;
      u6.push(new t6(d10.uniformName, "uniform", e9));
    }
    const h11 = [];
    for (const t9 in n9) {
      const e9 = n9[t9], o8 = a8.get(t9);
      "discard" === t9 ? h11.push(new d5(null, "discard", e9)) : o8 ? h11.push(new d5(o8, "builtin", e9)) : h11.push(new d5(t9, "out", e9));
    }
    return new _o(u6, h11, s11);
  }
  constructor(e8, t9, d10, o8) {
    this.type = "shader-graph-context", this.indent = 0, this.body = "", this.varCount = 0, this._inputShaderTypesByNodeUid = /* @__PURE__ */ new Map(), this._nodeEmitMap = /* @__PURE__ */ new Map();
    for (const n9 of e8) this._inputShaderTypesByNodeUid.set(n9.node.uid, n9);
    this._outputShaderTypes = t9, this._transformFeedbackBindings = d10, this._transformFeedbackNames = new Set(d10.map((e9) => "v_" + e9.propertyKey)), this._usedInFragmentShader = o8;
  }
  shouldPruneOutputNode(e8) {
    return !!this._usedInFragmentShader && ("builtin" !== e8.outVariableType && (!this._transformFeedbackNames.has(e8.outVariableName) && !this._usedInFragmentShader.has(e8.node.uid)));
  }
  setEmit(e8, t9) {
    this._nodeEmitMap.set(e8.uid, t9);
  }
  getEmit(e8) {
    return this._nodeEmitMap.get(e8.uid);
  }
  inputs() {
    return this._inputShaderTypesByNodeUid.values();
  }
  getInput(e8) {
    return this._inputShaderTypesByNodeUid.get(e8.uid);
  }
  *rootOutputNodes() {
    for (const e8 of this._outputShaderTypes) yield e8;
  }
  *nodes() {
    const e8 = [];
    for (const t9 of this._outputShaderTypes.values()) e8.push(t9.node);
    for (; e8.length; ) {
      const t9 = e8.pop();
      "number" != typeof t9 && "boolean" != typeof t9 && e8.push(...t9.children.filter(Boolean)), yield t9;
    }
  }
  *nodesOfTypeOrFunction() {
    for (const e8 of this.nodes()) "number" != typeof e8 && "boolean" != typeof e8 && (yield e8);
  }
  createSubgraphContext() {
    const e8 = this.clone();
    return e8.body = "", e8.indent = this.indent + 2, e8._nodeEmitMap = new Map(this._nodeEmitMap), e8;
  }
  clone() {
    const e8 = new _o([], this._outputShaderTypes, this._transformFeedbackBindings, this._usedInFragmentShader);
    return e8._inputShaderTypesByNodeUid = this._inputShaderTypesByNodeUid, e8.indent = this.indent, e8.body = this.body, e8.varCount = this.varCount, e8._nodeEmitMap = this._nodeEmitMap, e8;
  }
  insertVertexShader(e8) {
    e8.vertex.code.add(""), this._insertInputs(e8, "vertex"), e8.vertex.code.add(""), e8.vertex.code.add("// OUTPUTS: "), e8.vertex.code.add("// --------------------------------------------------------- ");
    for (const t9 of this.rootOutputNodes()) {
      const d10 = "builtin" === t9.outVariableType;
      this.shouldPruneOutputNode(t9) || (d10 ? e8.vertex.code.add(`// ${t9.outVariableType.padEnd(7)} ${t9.node.type.padEnd(9)} ${t9.outVariableName};`) : e8.vertex.code.add(`${t9.outVariableType.padEnd(10)} ${t9.node.type.padEnd(9)} ${t9.outVariableName};`));
    }
    e8.vertex.code.add(""), e8.vertex.code.add("void main() {"), e8.vertex.code.add("  " + this.body.split("\n").join("\n  "));
    for (const t9 of this.rootOutputNodes()) this.shouldPruneOutputNode(t9) || e8.vertex.code.add(`  ${t9.outVariableName} = ${t9.variableName};`);
    e8.vertex.code.add("}");
  }
  insertFragmentShader(e8) {
    this._insertInputs(e8, "fragment"), e8.fragment.code.add(""), e8.fragment.code.add("// OUTPUTS: "), e8.fragment.code.add("// --------------------------------------------------------- ");
    for (const t9 of this.rootOutputNodes()) {
      "builtin" === t9.outVariableType ? e8.fragment.code.add(`// ${t9.outVariableType.padEnd(7)} ${t9.node.type.padEnd(9)} ${t9.outVariableName};`) : e8.fragment.code.add(`${t9.outVariableType.padEnd(10)} ${t9.node.type.padEnd(9)} ${t9.outVariableName};`);
    }
    e8.fragment.code.add(""), e8.fragment.code.add("void main() {"), e8.fragment.code.add("  " + this.body.split("\n").join("\n  "));
    for (const t9 of this.rootOutputNodes()) "discard" === t9.outVariableType ? (e8.fragment.code.add("  // TODO: Should ensure codegen for discard appears first in fragment shader"), e8.fragment.code.add(`  if (${t9.variableName}) {`), e8.fragment.code.add("    discard;"), e8.fragment.code.add("  }"), e8.fragment.code.add("  ")) : e8.fragment.code.add(`  ${t9.outVariableName} = ${t9.variableName};`);
    e8.fragment.code.add("}");
  }
  _insertInputs(e8, t9) {
    e8[t9].code.add("// INPUTS: "), e8[t9].code.add("// --------------------------------------------------------- ");
    for (const d10 of this.inputs()) d10.isUsed && "builtin" !== d10.variableInputType && ("array" === d10.node.type ? e8[t9].code.add(`${d10.variableInputType.padEnd(10)} ${d10.node.elementType.type.padEnd(9)} ${d10.variableName}[${d10.node.size}];`) : e8[t9].code.add(`${d10.variableInputType.padEnd(10)} ${d10.node.type.padEnd(9)} ${d10.variableName};`));
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/typed/TypedShaderProgram.js
var s9 = () => n.getLogger("esri.views.2d.engine.webgl.shaderGraph.typed.TypedShaderProgram");
function n5(e8, t9, o8) {
  const i5 = t9.length;
  if (i5 !== o8) {
    const n9 = new s("Invalid Uniform", `Invalid length, expected ${o8} but got ${i5}`, { uniformName: e8, values: t9 });
    s9().errorOnce(n9);
  }
}
var a7 = class {
  constructor(r8, e8, t9, o8, i5, s11) {
    this._program = null, this._vao = null, this._temporaryTextures = [], this.vertexShader = r8, this.fragmentShader = e8, this._locations = t9, this._locationInfo = o8, this._uniformBindings = i5, this._transformFeedbackBindings = s11;
  }
  destroy() {
    this._program && this._program.dispose(), this.cleanupTemporaryTextures();
  }
  get locations() {
    return this._locations;
  }
  get locationInfo() {
    return this._locationInfo;
  }
  setUniforms(r8) {
    this._uniforms = r8;
  }
  cleanupTemporaryTextures() {
    for (const r8 of this._temporaryTextures) r8.dispose();
    this._temporaryTextures = [];
  }
  bind(r8) {
    const e8 = this._uniforms;
    if (!this._program) {
      const e9 = /* @__PURE__ */ new Map();
      for (const [r9, o8] of this._locations) e9.set(r9, o8);
      const t9 = [];
      for (const r9 of this._transformFeedbackBindings ?? []) {
        const { index: e10, propertyKey: o8 } = r9;
        t9[e10] = `v_${o8}`;
      }
      this._program = new r2(r8, this.vertexShader, this.fragmentShader, e9, /* @__PURE__ */ new Map(), t9);
    }
    const s11 = this._program;
    r8.useProgram(s11);
    for (const o8 of this._uniformBindings) {
      const { shaderModulePath: a8, uniformName: f7, uniformType: m7, uniformArrayLength: c5 } = o8, p8 = t(a8, e8);
      if (null == p8) {
        if ("sampler2D" === m7) continue;
        throw new Error(`Failed to find uniform value for ${a8}`);
      }
      switch ("array" === m7 ? o8.uniformArrayElementType : m7) {
        case "sampler2D": {
          const { unit: e9, texture: t9 } = p8;
          if (s11.setUniform1i(f7, e9), "type" in t9) r8.bindTexture(t9, e9);
          else {
            const o9 = T(r8, t9.descriptor, t9.data);
            r8.bindTexture(o9, e9);
          }
          break;
        }
        case "int":
          if (!c5) {
            s11.setUniform1i(f7, p8);
            break;
          }
          n5(o8.uniformName, p8, c5), s11.setUniform1iv(f7, p8);
          break;
        case "float":
          if (!c5) {
            s11.setUniform1f(f7, p8);
            break;
          }
          n5(o8.uniformName, p8, c5), s11.setUniform1fv(f7, p8);
          break;
        case "vec2":
          if (!c5) {
            s11.setUniform2f(f7, p8[0], p8[1]);
            break;
          }
          n5(o8.uniformName, p8, c5), s11.setUniform2fv(f7, p8.flat());
          break;
        case "vec3":
          if (!c5) {
            s11.setUniform3f(f7, p8[0], p8[1], p8[2]);
            break;
          }
          n5(o8.uniformName, p8, c5), s11.setUniform3fv(f7, p8.flat());
          break;
        case "vec4":
          if (!c5) {
            s11.setUniform4f(f7, p8[0], p8[1], p8[2], p8[3]);
            break;
          }
          n5(o8.uniformName, p8, c5), s11.setUniform4fv(f7, p8.flat());
          break;
        case "mat3":
          s11.setUniformMatrix3fv(f7, p8);
          break;
        case "mat4":
          s11.setUniformMatrix4fv(f7, p8);
          break;
        default:
          throw new Error(`Unable to set uniform for type ${m7}`);
      }
    }
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/GraphShaderModule.js
function d6(t9) {
  return new t9();
}
function f3(t9, e8, r8) {
  const o8 = t9.constructor[e8] ?? [];
  t9.constructor.hasOwnProperty(e8) || Object.defineProperty(t9.constructor, e8, { value: o8.slice() }), t9.constructor[e8].push(r8);
}
function h6(t9, e8) {
  return (r8, o8) => {
    f3(r8, "locations", { typeCtor: e8, propertyKey: o8, parameterIndex: null, index: t9 });
  };
}
var m5 = (t9) => (e8, r8, o8) => {
  f3(e8, "inputs", { inputCtor: t9, propertyKey: r8, parameterIndex: o8 });
};
var g3 = (t9) => (e8, r8) => {
  f3(e8, "uniforms", { typeCtor: t9, propertyKey: r8 });
};
var _3 = (t9) => (e8, r8) => {
  f3(e8, "options", { typeCtor: t9, propertyKey: r8 });
};
var K3 = (t9, e8) => {
  f3(t9, "defines", { propertyKey: e8 });
};
var b3 = (t9, e8) => (r8, o8) => {
  r8.constructor.builtins.push({ builtin: t9, propertyKey: o8, typeCtor: e8 });
};
var I3 = class {
};
I3.builtins = [], r([b3("gl_VertexID", O)], I3.prototype, "glVertexID", void 0);
var C3 = class {
};
var v2 = class {
};
v2.builtins = [], r([b3("gl_FragCoord", H2)], v2.prototype, "glFragCoord", void 0), r([b3("gl_PointCoord", C2)], v2.prototype, "glPointCoord", void 0);
var w2 = class {
};
var P2 = class {
  constructor() {
    this.type = "uniform-group";
  }
  get _uniforms() {
    return this.constructor.uniforms ?? [];
  }
};
var j2 = class {
  constructor() {
    this.logShader = false, this.computeAttributes = {};
  }
  get vertexInput() {
    const t9 = this._shaderModuleClass.inputs.findLast((t10) => "vertex" === t10.propertyKey && 0 === t10.parameterIndex);
    if (!t9) throw new Error("Unable to find vertex input parameter");
    return t9;
  }
  get computeInput() {
    return this._shaderModuleClass.inputs.findLast((t9) => "vertex" === t9.propertyKey && 1 === t9.parameterIndex);
  }
  get fragmentInput() {
    const t9 = this._shaderModuleClass.inputs.findLast((t10) => "fragment" === t10.propertyKey);
    if (!t9) throw new Error("Unable to find fragment input parameter");
    return t9;
  }
  get transformFeedbackBindings() {
    return this.fragmentInput.inputCtor.transformFeedbackBindings ?? [];
  }
  get locations() {
    var _a;
    return [...this.vertexInput.inputCtor.locations, ...((_a = this.computeInput) == null ? void 0 : _a.inputCtor.locations) ?? []];
  }
  get locationsMap() {
    const t9 = /* @__PURE__ */ new Map(), r8 = /* @__PURE__ */ new Set();
    for (const o8 of this.locations) r8.has(o8.index) ? n.getLogger("esri.views.2d.engine.webgl.shaderGraph.GraphShaderModule").warnOnce("mapview-rendering", `Unable to assigned attribute ${o8.propertyKey} to ${o8.index}. Index already in use`, { locationsMap: t9 }) : (t9.set(o8.propertyKey, o8.index), r8.add(o8.index));
    return t9;
  }
  get locationInfo() {
    if (!this._locationInfo) {
      const t9 = this.locationsMap, e8 = Array.from(t9.entries()).map(([t10, e9]) => `${t10}.${e9}`).join("."), o8 = l(e8), n9 = this.computeAttributes;
      this._locationInfo = { hash: o8, locations: t9, computeAttributeMap: n9 };
    }
    return this._locationInfo;
  }
  get renamedLocationsMap() {
    const t9 = /* @__PURE__ */ new Map();
    for (const e8 of this.locations) t9.set("a_" + e8.propertyKey, e8.index);
    return t9;
  }
  get optionPropertyKeys() {
    if (!this._optionPropertyKeys) {
      const t9 = /* @__PURE__ */ new Set();
      for (const e8 of this._options) t9.add(e8.propertyKey);
      this._optionPropertyKeys = t9;
    }
    return this._optionPropertyKeys;
  }
  get _shaderModuleClass() {
    return this.constructor;
  }
  get _defines() {
    return this._shaderModuleClass.defines ?? [];
  }
  get _options() {
    return this._shaderModuleClass.options ?? [];
  }
  get _uniforms() {
    return this._shaderModuleClass.uniforms ?? [];
  }
  getProgram(t9, e8, r8, o8) {
    try {
      const { vertex: n9, fragment: s11, uniformBindings: i5 } = this._generateShaders(t9, e8, r8, o8);
      return new a7(n9, s11, this.renamedLocationsMap, this.locationInfo, i5, this.transformFeedbackBindings);
    } catch (n9) {
      return new a7("", "", this.renamedLocationsMap, this.locationInfo, [], this.transformFeedbackBindings);
    }
  }
  getDebugUniformClassInfo(t9) {
    const e8 = this._options.find((e9) => e9.propertyKey === t9);
    if (e8) return { type: "option", className: e8.typeCtor };
    const r8 = this._uniforms.find((e9) => e9.propertyKey === t9);
    if (!r8) throw new Error(`Unable to find uniform class type for property: ${t9}`);
    return { type: "required", className: r8.typeCtor };
  }
  getShaderKey(t9, e8, r8, o8) {
    const n9 = Object.keys(t9).map((e9) => `${e9}.${t9[e9]}`).join("."), s11 = Object.keys(r8).map((t10) => `${t10}.${r8[t10]}`).join("."), i5 = Object.keys(o8).map((t10) => `${t10}.${o8[t10]}`).join("."), p8 = Object.keys(e8).filter((t10) => this.optionPropertyKeys.has(t10) && e8[t10]).join(".");
    return `${this.constructor.name}.${n9}.${s11}.${i5}.${p8}`;
  }
  _generateShaders(t9, e8, r8, o8) {
    const n9 = [];
    this._setDefines(r8), this._setOptionalUniforms(n9, e8), this._setRequiredUniforms(n9);
    const s11 = this._hydrateVertexInput(o8), i5 = this._injectPackPrecisionFactor(s11, t9), p8 = this._hydrateComputeInput(), y4 = p8 && this._injectComputePackPrecisionFactor(p8, t9), d10 = this.vertex(i5, y4), f7 = this._hydrateFragmentInput(d10), h11 = this.fragment(f7), l7 = /* @__PURE__ */ new Set();
    for (const a8 in h11) {
      const t10 = h11[a8];
      e4(l7, t10);
    }
    const m7 = this._getVertexInputBuiltins(), g7 = o6.createVertex({ ...s11, ...p8 }, d10, m7, n9, this.transformFeedbackBindings, l7);
    new r6().write(g7);
    const _6 = this._getFragmentInputBuiltins(h11);
    _6.set("glPointCoord", "gl_PointCoord");
    const K4 = o6.createFragment(f7, h11, _6, n9, g7, this.transformFeedbackBindings);
    new r6().write(K4);
    const x5 = this._createShaderBuilder(g7, K4), b5 = x5.generate("vertex", true), I4 = x5.generate("fragment", true);
    return this.logShader && (console.log(b5), console.log(I4)), { vertex: b5, fragment: I4, uniformBindings: n9 };
  }
  _setDefines(t9) {
    for (const e8 in t9) this[e8] = t9[e8];
  }
  _setOptionalUniforms(t9, e8) {
    for (const r8 of this._options) {
      e8[r8.propertyKey] ? this[r8.propertyKey] = this._hydrateUniformGroup(t9, r8) : this[r8.propertyKey] = null;
    }
  }
  _setRequiredUniforms(t9) {
    for (const e8 of this._uniforms) this[e8.propertyKey] = this._hydrateUniformGroup(t9, e8);
  }
  _hydrateUniformGroup(t9, e8) {
    const r8 = new (0, e8.typeCtor)();
    for (const o8 of r8._uniforms ?? []) {
      const n9 = d6(o8.typeCtor), s11 = `u_${e8.propertyKey}_${o8.propertyKey}`, i5 = n9.type, p8 = [e8.propertyKey, o8.propertyKey].join(".");
      if ("type" in o8.typeCtor && "array" === o8.typeCtor.type) {
        const e9 = n9;
        t9.push({ shaderModulePath: p8, uniformName: s11, uniformType: i5, uniformArrayLength: e9.size, uniformArrayElementType: e9.elementType.type, uniformHydrated: n9 });
      } else t9.push({ shaderModulePath: p8, uniformName: s11, uniformType: i5, uniformHydrated: n9 });
      r8[o8.propertyKey] = n9;
    }
    return r8;
  }
  _hydrateVertexInput(t9) {
    const e8 = this.vertexInput.inputCtor, r8 = e8.locations.reduce((e9, r9) => false === t9[r9.propertyKey] ? e9 : { ...e9, [r9.propertyKey]: d6(r9.typeCtor) }, {});
    for (const { propertyKey: o8, typeCtor: n9 } of e8.builtins) {
      const t10 = d6(n9);
      r8[o8] = t10;
    }
    return r8;
  }
  _hydrateComputeInput() {
    if (null == this.computeInput) return null;
    return this.computeInput.inputCtor.locations.reduce((t9, e8) => ({ ...t9, [e8.propertyKey]: d6(e8.typeCtor) }), {});
  }
  _injectPackPrecisionFactor(t9, e8) {
    const r8 = {};
    for (const o8 in t9) {
      const s11 = t9[o8], i5 = e8[o8];
      if (i5) {
        if ("float" !== s11.type && "vec2" !== s11.type && "vec3" !== s11.type && "vec4" !== s11.type) throw new Error(`InternalError: packPrecisionFactor requires GenType, but found ${s11.type}`);
        r8[o8] = s11.divide(new j(i5));
      } else r8[o8] = s11;
    }
    return r8;
  }
  _injectComputePackPrecisionFactor(t9, e8) {
    const r8 = {}, o8 = /* @__PURE__ */ new Map();
    for (const n9 in this.computeAttributes) for (const t10 of this.computeAttributes[n9] ?? []) o8.set(t10, n9);
    for (const s11 in t9) {
      const i5 = t9[s11], p8 = o8.get(s11);
      if (!p8) continue;
      const a8 = e8[p8];
      if (a8) {
        if ("float" !== i5.type && "vec2" !== i5.type && "vec3" !== i5.type && "vec4" !== i5.type) throw new Error(`InternalError: packPrecisionFactor requires GenType, but found ${i5.type}`);
        r8[s11] = i5.divide(new j(a8));
      } else r8[s11] = i5;
    }
    return r8;
  }
  _hydrateFragmentInput(t9) {
    const e8 = {};
    for (const r8 in t9) e8[r8] = t9[r8];
    for (const { propertyKey: r8, typeCtor: o8 } of v2.builtins) {
      const t10 = d6(o8);
      e8[r8] = t10;
    }
    return e8;
  }
  _getVertexInputBuiltins() {
    const t9 = this.vertexInput.inputCtor, e8 = /* @__PURE__ */ new Map();
    for (const { builtin: r8, propertyKey: o8 } of t9.builtins) e8.set(o8, r8);
    return e8;
  }
  _getFragmentInputBuiltins(t9) {
    const e8 = t9.constructor, r8 = /* @__PURE__ */ new Map();
    for (const o8 of e8.builtins ?? []) r8.set(o8.propertyKey, o8.builtin);
    return r8;
  }
  _createShaderBuilder(t9, e8) {
    const r8 = new o5();
    return this._insertDebugInfo(r8), t9.insertVertexShader(r8), e8.insertFragmentShader(r8), r8;
  }
  _insertDebugInfo(t9) {
    t9.vertex.code.add("// DEFINES: "), t9.vertex.code.add("// --------------------------------------------------------- ");
    for (const e8 of this._defines) this[e8.propertyKey] ? t9.vertex.code.add(`//   ${e8.propertyKey}: true`) : t9.vertex.code.add(`//   ${e8.propertyKey}: false`);
    t9.vertex.code.add(""), t9.vertex.code.add("// OPTIONS: "), t9.vertex.code.add("// --------------------------------------------------------- ");
    for (const e8 of this._options) this[e8.propertyKey] ? t9.vertex.code.add(`//   ${e8.propertyKey}: true`) : t9.vertex.code.add(`//   ${e8.propertyKey}: false`);
  }
};

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/utils.js
function d7(t9) {
  const e8 = ct(12.9898), f7 = ct(78.233), s11 = ct(43758.5453), l7 = hn(t9, it(e8, f7)), m7 = Cn(l7, ct(3.14));
  return In(Zn(m7).multiply(s11));
}
function w3(t9) {
  return Ut(t9, ct(k));
}
function j3(t9, n9) {
  return t9.x.multiply(n9.y).subtract(n9.x.multiply(t9.y));
}
function z2(t9) {
  return t9.multiply(2).subtract(1);
}
function h7(t9, r8) {
  const u6 = ct(2 ** r8);
  return Cn(bn(t9.divide(u6)), ct(2));
}
function v3(t9, r8) {
  return Gt(h7(t9, r8), ct(0.5));
}
function k2(n9, r8) {
  return h7(n9, r8 + K);
}
function q3(t9, n9) {
  return h7(t9, n9);
}
function A3(t9) {
  const r8 = h7(t9.z, 7), u6 = ct(1).subtract(r8), i5 = t9.xyz.subtract(ut(0, 0, ct(128)));
  return u6.multiply(t9).add(r8.multiply(i5));
}
function B3(t9) {
  const n9 = ot(255 / 256, 255 / 65536, 255 / 16777216, 255 / 4294967296);
  return hn(t9, n9);
}
function C4(t9) {
  return Un(Un(Un(t9.x, t9.y), t9.z), t9.w);
}
function D3(t9) {
  return new j(1).subtract(t9);
}
function E2(t9) {
  return t9.subtract(new j(1));
}
function G3(t9, n9) {
  return t9.subtract(new j(n9));
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/EntityStorage.js
var p5 = class extends P2 {
  getVisualVariableData(t9) {
    if (!this._vvData) {
      const a8 = this.getAttributeDataCoords(t9);
      this._vvData = le(this.visualVariableData, a8).setDebugName("storage2");
    }
    return this._vvData;
  }
  getAttributeDataCoords(t9) {
    if (!this._uv) {
      const a8 = A3(t9), e8 = this.size, i5 = rt(a8.x), u6 = rt(a8.y).multiply(rt(256)), l7 = rt(a8.z).multiply(rt(256)).multiply(rt(256)), n9 = ct(i5.add(u6).add(l7)), p8 = Cn(n9, e8), d10 = n9.subtract(p8).divide(e8);
      this._uv = new C2(p8, d10).add(0.5).divide(e8);
    }
    return this._uv;
  }
  getFilterData(t9) {
    const a8 = this.getAttributeDataCoords(t9);
    return le(this.filterFlags, a8).setDebugName("storage0");
  }
  getAnimationData(t9) {
    const a8 = this.getAttributeDataCoords(t9);
    return le(this.animation, a8).setDebugName("storage1");
  }
  getVVData(t9) {
    return this.getVisualVariableData(t9);
  }
  getDataDrivenData0(t9) {
    const a8 = this.getAttributeDataCoords(t9);
    return le(this.dataDriven0, a8).setDebugName("storage30");
  }
  getDataDrivenData1(t9) {
    const a8 = this.getAttributeDataCoords(t9);
    return le(this.dataDriven1, a8).setDebugName("storage31");
  }
  getDataDrivenData2(t9) {
    const a8 = this.getAttributeDataCoords(t9);
    return le(this.dataDriven2, a8).setDebugName("storage32");
  }
  getGPGPUData(t9) {
    const a8 = this.getAttributeDataCoords(t9);
    return le(this.gpgpu, a8).setDebugName("storage4");
  }
  getLocalTimeOrigin(t9) {
    const a8 = this.getAttributeDataCoords(t9);
    return le(this.localTimeOrigin, a8).x.setDebugName("storage5");
  }
  getFilterFlags(t9) {
    return has("webgl-ignores-sampler-precision") ? Zt(this.getFilterData(t9).x.multiply(ct(255))) : this.getFilterData(t9).x.multiply(ct(255));
  }
  getLabelVisibility(t9) {
    const a8 = this.getFilterData(t9).y.multiply(255);
    return new j(1).subtract(a8);
  }
  getAnimationValue(t9) {
    return this.getAnimationData(t9).x;
  }
  getSizeValue(t9) {
    return this.getVisualVariableData(t9).x;
  }
  getColorValue(t9) {
    return this.getVisualVariableData(t9).y;
  }
  getOpacityValue(t9) {
    return this.getVisualVariableData(t9).z;
  }
  getRotationValue(t9) {
    return this.getVisualVariableData(t9).w;
  }
};
r([g3(S)], p5.prototype, "filterFlags", void 0), r([g3(S)], p5.prototype, "animation", void 0), r([g3(S)], p5.prototype, "gpgpu", void 0), r([g3(S)], p5.prototype, "localTimeOrigin", void 0), r([g3(S)], p5.prototype, "visualVariableData", void 0), r([g3(S)], p5.prototype, "dataDriven0", void 0), r([g3(S)], p5.prototype, "dataDriven1", void 0), r([g3(S)], p5.prototype, "dataDriven2", void 0), r([g3(j)], p5.prototype, "size", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/ShaderHighlight.js
var e6 = class extends P2 {
};
r([g3(j)], e6.prototype, "activeReasons", void 0), r([g3(j)], e6.prototype, "highlightAll", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/ShaderHittest.js
var e7 = class extends P2 {
};
r([g3(C2)], e7.prototype, "position", void 0), r([g3(j)], e7.prototype, "distance", void 0), r([g3(j)], e7.prototype, "smallSymbolDistance", void 0), r([g3(j)], e7.prototype, "smallSymbolSizeThreshold", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/ViewInfo.js
var d8 = class extends P2 {
};
r([g3(tt)], d8.prototype, "displayViewScreenMat3", void 0), r([g3(tt)], d8.prototype, "displayViewMat3", void 0), r([g3(tt)], d8.prototype, "displayMat3", void 0), r([g3(tt)], d8.prototype, "viewMat3", void 0), r([g3(tt)], d8.prototype, "tileMat3", void 0), r([g3(j)], d8.prototype, "displayZoomFactor", void 0), r([g3(j)], d8.prototype, "requiredZoomFactor", void 0), r([g3(C2)], d8.prototype, "tileOffset", void 0), r([g3(j)], d8.prototype, "currentScale", void 0), r([g3(j)], d8.prototype, "currentZoom", void 0), r([g3(j)], d8.prototype, "metersPerSRUnit", void 0), r([g3(j)], d8.prototype, "rotation", void 0), r([g3(j)], d8.prototype, "pixelRatio", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/AFeatureShader.js
var S2 = class extends I3 {
};
r([h6(0, G2)], S2.prototype, "id", void 0), r([h6(1, j)], S2.prototype, "bitset", void 0), r([h6(2, C2)], S2.prototype, "pos", void 0);
var q4 = class extends C3 {
};
r([h6(14, C2)], q4.prototype, "nextPos1", void 0), r([h6(15, C2)], q4.prototype, "nextPos2", void 0);
var F2 = class extends v2 {
};
var P3 = class extends j2 {
  clip(t9, i5) {
    let e8 = new j(0);
    const o8 = this.storage.getFilterFlags(t9);
    if (e8 = e8.add(ct(2).multiply(ct(1).subtract(k2(o8, 0)))), this.inside ? e8 = e8.add(ct(2).multiply(ct(1).subtract(k2(o8, 1)))) : this.outside ? e8 = e8.add(ct(2).multiply(k2(o8, 1))) : this.highlight && (e8 = e8.add(ct(2).multiply(ct(1).subtract(this._checkHighlight(o8))))), null != i5) {
      const t10 = new j(1).subtract(re(i5.x, this.view.currentZoom)), o9 = re(i5.y, this.view.currentZoom);
      e8 = e8.add(new j(2).multiply(t10.add(o9)));
    }
    return e8;
  }
  getFragmentOutput(t9, i5, e8 = new j(1 / 255)) {
    const o8 = new w2();
    return o8.glFragColor = this._maybeWriteHittest(i5) ?? this._maybeHighlight(t9, e8) ?? t9, o8;
  }
  _maybeHighlight(t9, i5) {
    return this.highlight ? new H2(t9.rgb, re(i5, t9.a)) : null;
  }
  _checkHighlight(t9) {
    let e8 = this._checkHighlightBit(t9, 0);
    for (let o8 = 1; o8 < K; o8++) e8 = e8.add(this._checkHighlightBit(t9, o8));
    return re(new j(0.1), e8.add(this.highlight.highlightAll));
  }
  _checkHighlightBit(t9, i5) {
    return q3(t9, i5).multiply(h7(this.highlight.activeReasons, i5));
  }
  maybeRunHittest(t9, i5, e8) {
    if (null == this.hittestRequest) return null;
    const o8 = this.hittest(t9, i5, e8);
    let s11 = xt(Gt(o8, this.hittestRequest.distance), new j(2), new j(0));
    const r8 = this.storage.getAttributeDataCoords(t9.id), h11 = z2(r8);
    s11 = s11.add(this.clip(t9.id, t9.zoomRange));
    const l7 = new H2(new j(1 / 255), 0, 0, 0);
    return { glPointSize: new j(1), glPosition: new H2(h11, s11, 1), color: l7 };
  }
  _maybeWriteHittest(t9) {
    return null != this.hittestRequest ? t9.color : null;
  }
};
r([K3], P3.prototype, "inside", void 0), r([K3], P3.prototype, "outside", void 0), r([_3(e6)], P3.prototype, "highlight", void 0), r([g3(p5)], P3.prototype, "storage", void 0), r([g3(d8)], P3.prototype, "view", void 0), r([_3(e7)], P3.prototype, "hittestRequest", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/hittestUtils.js
function v4(n9, r8) {
  return hn(n9, Hn(r8));
}
function j4(t9, u6, s11) {
  const l7 = s11.subtract(u6), c5 = v4(t9.subtract(u6), l7), e8 = tn(c5.divide(zn(l7)), new j(0), new j(1));
  return ln(t9, u6.add(e8.multiply(s11.subtract(u6))));
}
function g4(t9) {
  const u6 = Yt(t9);
  return re(u6.x.add(u6.y).add(u6.z), new j(1.05));
}
function h8(t9, u6, n9, i5) {
  const y4 = new tt(n9.x.multiply(i5.y).subtract(i5.x.multiply(n9.y)), i5.x.multiply(u6.y).subtract(u6.x.multiply(i5.y)), u6.x.multiply(n9.y).subtract(n9.x.multiply(u6.y)), n9.y.subtract(i5.y), i5.y.subtract(u6.y), u6.y.subtract(n9.y), i5.x.subtract(n9.x), u6.x.subtract(i5.x), n9.x.subtract(u6.x)), s11 = u6.x.multiply(n9.y.subtract(i5.y)), l7 = n9.x.multiply(i5.y.subtract(u6.y)), a8 = i5.x.multiply(u6.y.subtract(n9.y)), o8 = s11.add(l7).add(a8);
  return new j(1).divide(o8).multiply(y4.multiply(new G2(1, t9)));
}
function M2(t9, u6, n9, i5) {
  return Ut(g4(h8(t9, u6, n9, i5)), new j(1));
}
function P4(t9, u6, n9, i5) {
  const y4 = n9.subtract(u6), s11 = i5.subtract(u6), l7 = j3(y4, s11), c5 = At(jt(l7, new j(u)), Gt(l7, new j(-u)));
  return gt([At(Mn(c5), M2(t9.xy, u6, n9, i5)), new j(-1)], [true, () => {
    const r8 = j4(t9, u6, n9), y5 = j4(t9, n9, i5), s12 = j4(t9, i5, u6);
    return Sn(Sn(r8, y5), s12);
  }]);
}
function q5(t9) {
  return t9.distance.add(1);
}
function z3(t9, u6, n9) {
  const { viewMat3: r8, tileMat3: i5 } = t9.view, y4 = r8.multiply(i5), s11 = y4.multiply(new G2(u6.pos, 1)), l7 = y4.multiply(new G2(n9.nextPos1, 1)), c5 = y4.multiply(new G2(n9.nextPos2, 1));
  return P4(t9.hittestRequest.position, s11.xy, l7.xy, c5.xy);
}
function R2(t9, u6, n9) {
  return ln(t9, n9).subtract(u6);
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/VisualVariableColor.js
var f4 = class extends P2 {
  getColor(s11, t9, o8) {
    return gt([Mt(w3(s11), o8), t9], [Ct(s11, this.values.first()), this.colors.first()], [Ht(s11, this.values.last()), this.colors.last()], [true, () => {
      const t10 = this.values.findIndex((t11) => Gt(t11, s11)), o9 = this.values.get(t10), r8 = t10.subtract(1), e8 = this.values.get(r8), i5 = s11.subtract(e8).divide(o9.subtract(e8));
      return jn(this.colors.get(r8), this.colors.get(t10), i5);
    }]);
  }
};
r([g3(U.ofType(H2, 8))], f4.prototype, "colors", void 0), r([g3(U.ofType(j, 8))], f4.prototype, "values", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/VisualVariableOpacity.js
var h9 = class extends P2 {
  getOpacity(t9) {
    return gt([w3(t9), new j(1)], [Ct(t9, this.opacityValues.first()), this.opacities.first()], [Ht(t9, this.opacityValues.last()), this.opacities.last()], [true, () => {
      const s11 = this.opacityValues.findIndex((s12) => Gt(s12, t9)), i5 = this.opacityValues.get(s11), e8 = s11.subtract(1), o8 = this.opacityValues.get(e8), a8 = t9.subtract(o8).divide(i5.subtract(o8));
      return jn(this.opacities.get(e8), this.opacities.get(s11), a8);
    }]);
  }
};
r([g3(U.ofType(j, 8))], h9.prototype, "opacities", void 0), r([g3(U.ofType(j, 8))], h9.prototype, "opacityValues", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/vvUtils.js
function t7(a8) {
  return null != a8.visualVariableSizeMinMaxValue || null != a8.visualVariableSizeScaleStops || null != a8.visualVariableSizeStops || null != a8.visualVariableSizeUnitValue;
}
function l5(a8, e8, i5) {
  var _a, _b, _c, _d;
  if (t7(a8)) {
    const t9 = a8.storage.getSizeValue(e8);
    return ((_a = a8.visualVariableSizeMinMaxValue) == null ? void 0 : _a.getSize(t9, i5)) ?? ((_b = a8.visualVariableSizeScaleStops) == null ? void 0 : _b.getSizeForViewScale(a8.view.currentScale)) ?? ((_c = a8.visualVariableSizeStops) == null ? void 0 : _c.getSize(t9, i5)) ?? ((_d = a8.visualVariableSizeUnitValue) == null ? void 0 : _d.getSize(t9, i5));
  }
  return i5;
}
function r7(e8, i5, t9, l7 = new Y(false)) {
  if (null == e8.visualVariableColor) return t9;
  const r8 = e8.storage.getColorValue(i5);
  return e8.visualVariableColor.getColor(r8, t9, l7);
}
function n6(a8, i5) {
  if (null == a8.visualVariableOpacity) return new j(1);
  const t9 = a8.storage.getOpacityValue(i5);
  return a8.visualVariableOpacity.getOpacity(t9);
}
function u5(a8, e8) {
  if (null == a8.visualVariableRotation) return tt.identity();
  const t9 = a8.storage.getRotationValue(e8);
  return a8.visualVariableRotation.getVVRotationMat3(t9);
}
function o7(a8, i5) {
  if (null == a8.visualVariableRotation) return new j(0);
  const t9 = a8.storage.getRotationValue(i5);
  return a8.visualVariableRotation.getNormalizedAngle(t9);
}

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/FillShader.js
var g5 = class extends S2 {
};
r([h6(3, H2)], g5.prototype, "color", void 0), r([h6(4, C2)], g5.prototype, "zoomRange", void 0);
var x3 = class extends P3 {
  constructor() {
    super(...arguments), this.computeAttributes = { pos: ["nextPos1", "nextPos2"] };
  }
  vertex(t9, o8) {
    const r8 = n6(this, t9.id), e8 = r7(this, t9.id, t9.color).multiply(r8), i5 = this.view.displayViewScreenMat3.multiply(new G2(t9.pos.xy, 1)), p8 = this.clip(t9.id, t9.zoomRange);
    return { glPosition: new H2(i5.xy, p8, 1), color: e8, ...this.maybeRunHittest(t9, o8, null) };
  }
  fragment(t9) {
    return this.getFragmentOutput(t9.color, t9, new j(0));
  }
  hittest(t9, o8) {
    return z3(this, t9, o8);
  }
};
r([_3(f4)], x3.prototype, "visualVariableColor", void 0), r([_3(h9)], x3.prototype, "visualVariableOpacity", void 0), r([e(0, m5(g5)), e(1, m5(q4))], x3.prototype, "vertex", null), r([e(0, m5(F2))], x3.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/LocalTileOffset.js
var n7 = class extends P2 {
  getPatternOffsetAtTileOrigin(t9, i5 = new j(0), l7 = new j(1)) {
    const n9 = new C2(I).divide(t9);
    let p8 = t9.multiply(In(this.maxIntsToLocalOrigin.multiply(n9))).add(this.tileOffsetFromLocalOrigin).subtract(new j(0.5).multiply(t9));
    return p8 = new C2(p8.x.multiply(l7).subtract(p8.y.multiply(i5)), p8.x.multiply(i5).add(p8.y.multiply(l7))), Cn(p8, t9);
  }
};
r([g3(C2)], n7.prototype, "tileOffsetFromLocalOrigin", void 0), r([g3(C2)], n7.prototype, "maxIntsToLocalOrigin", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/MosaicInfo.js
var p6 = class extends P2 {
};
r([g3(C2)], p6.prototype, "size", void 0), r([g3(S)], p6.prototype, "texture", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/ComplexFillShader.js
var q6 = class extends g5 {
};
r([h6(5, H2)], q6.prototype, "tlbr", void 0), r([h6(6, j)], q6.prototype, "width", void 0), r([h6(7, j)], q6.prototype, "height", void 0), r([h6(8, C2)], q6.prototype, "offset", void 0), r([h6(9, C2)], q6.prototype, "scale", void 0), r([h6(10, j)], q6.prototype, "angle", void 0);
var G4 = class extends F2 {
};
function L2(t9, e8, o8, i5, r8) {
  const l7 = Ut(h7(r8, C), ct(1)), s11 = B3(new H2(t9, 0));
  return xt(l7, lt(i5.divide(e8.x), o8.divide(e8.y), 0, yt(o8.divide(e8.x)), i5.divide(e8.y), 0, d7(it(s11, 0)), d7(it(0, s11)), 1), lt(i5.divide(e8.x), o8.divide(e8.y), 0, yt(o8.divide(e8.x)), i5.divide(e8.y), 0, 0, 0, 1));
}
function P5(t9, e8) {
  const o8 = t9.view.requiredZoomFactor, i5 = new C2(e8.width, e8.height), r8 = i5.multiply(e8.scale).multiply(o8), m7 = e8.angle.multiply(c), u6 = Zn(m7), f7 = nn(m7), y4 = L2(e8.id, r8, u6, f7, e8.bitset), c5 = t9.localTileOffset.getPatternOffsetAtTileOrigin(i5, u6, f7), v5 = o8.multiply(e8.scale).multiply(e8.offset.subtract(c5)).divide(r8), x5 = new G2(e8.pos, 1), h11 = y4.multiply(x5).xy.subtract(v5), g7 = e8.tlbr.divide(t9.mosaicInfo.size.xyxy);
  let b5 = h7(e8.bitset, q);
  return null != t9.visualVariableColor && (b5 = xt(w3(t9.storage.getColorValue(e8.id)), new j(0), b5)), { tileTextureCoord: h11, tlbr: g7, sampleAlphaOnly: b5 };
}
function Z2(t9, e8) {
  const o8 = Cn(e8.tileTextureCoord, new j(1)), i5 = jn(e8.tlbr.xy, e8.tlbr.zw, o8);
  let r8 = le(t9.mosaicInfo.texture, i5);
  return r8 = xt(Gt(e8.sampleAlphaOnly, new j(0.5)), r8.aaaa, r8), e8.color.multiply(r8);
}
var _4 = class extends x3 {
  vertex(t9, e8) {
    return { ...super.vertex(t9, e8), ...P5(this, t9) };
  }
  fragment(t9) {
    const e8 = Z2(this, t9);
    return this.getFragmentOutput(e8, t9, new j(0));
  }
};
r([g3(p6)], _4.prototype, "mosaicInfo", void 0), r([g3(n7)], _4.prototype, "localTileOffset", void 0), r([e(0, m5(q6)), e(1, m5(q4))], _4.prototype, "vertex", null), r([e(0, m5(G4))], _4.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/VisualVariableSizeMinMaxValue.js
var m6 = class extends P2 {
  getSize(t9, e8) {
    const r8 = this.minMaxValueAndSize.xy, o8 = this.minMaxValueAndSize.zw;
    return xt(w3(t9), e8, () => {
      const e9 = t9.subtract(r8.x).divide(r8.y.subtract(r8.x)), s11 = tn(e9, new j(0), new j(1));
      return o8.x.add(s11.multiply(o8.y.subtract(o8.x)));
    });
  }
};
r([g3(H2)], m6.prototype, "minMaxValueAndSize", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/VisualVariableSizeScaleStops.js
var p7 = class extends P2 {
  getSizeForViewScale(s11) {
    return gt([Ct(s11, this.values.first()), this.sizes.first()], [Ht(s11, this.values.last()), this.sizes.last()], [true, () => {
      const t9 = this.values.findIndex((t10) => Gt(t10, s11)), e8 = this.values.get(t9), i5 = t9.subtract(1), r8 = this.values.get(i5), o8 = s11.subtract(r8).divide(e8.subtract(r8));
      return jn(this.sizes.get(i5), this.sizes.get(t9), o8);
    }]);
  }
};
r([g3(U.ofType(j, 8))], p7.prototype, "sizes", void 0), r([g3(U.ofType(j, 8))], p7.prototype, "values", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/VisualVariableSizeStops.js
var f5 = class extends P2 {
  getSize(s11, t9) {
    const e8 = gt([w3(s11), t9], [Ct(s11, this.values.first()), this.sizes.first()], [Ht(s11, this.values.last()), this.sizes.last()], [true, () => {
      const t10 = this.values.findIndex((t11) => Gt(t11, s11)), e9 = this.values.get(t10), i5 = t10.subtract(1), r8 = this.values.get(i5), o8 = s11.subtract(r8).divide(e9.subtract(r8));
      return jn(this.sizes.get(i5), this.sizes.get(t10), o8);
    }]);
    return xt(w3(e8), t9, e8);
  }
};
r([g3(U.ofType(j, 8))], f5.prototype, "sizes", void 0), r([g3(U.ofType(j, 8))], f5.prototype, "values", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/VisualVariableSizeUnitValue.js
var l6 = class extends P2 {
  getSize(t9, o8) {
    return xt(w3(t9), o8, t9.multiply(this.unitValueToPixelsRatio));
  }
};
r([g3(j)], l6.prototype, "unitValueToPixelsRatio", void 0);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/LineShader.js
var q7 = class extends S2 {
};
r([h6(3, H2)], q7.prototype, "color", void 0), r([h6(4, C2)], q7.prototype, "offset", void 0), r([h6(5, C2)], q7.prototype, "normal", void 0), r([h6(6, j)], q7.prototype, "halfWidth", void 0), r([h6(7, j)], q7.prototype, "referenceHalfWidth", void 0), r([h6(8, C2)], q7.prototype, "zoomRange", void 0);
var A4 = class extends F2 {
};
var F3 = class extends P2 {
};
function k3(t9) {
  return Un(new j(h2).multiply(re(t9, new j(n2))), new j(1));
}
function D4(t9, i5) {
  const { halfWidth: e8, normal: o8 } = t9, l7 = k3(e8), a8 = zn(o8).multiply(e8);
  return tn(l7.multiply(e8.subtract(a8)).divide(i5.add(l7).subtract(new j(1))), new j(0), new j(1));
}
function G5(t9, i5) {
  const { id: e8, halfWidth: o8, referenceHalfWidth: l7 } = i5;
  if (t7(t9)) {
    const i6 = new j(2).multiply(l7), a8 = l5(t9, e8, i6);
    return new j(0.5).multiply(o8.divide(Un(l7, new j(s4)))).multiply(a8);
  }
  return o8;
}
function T2(t9, i5) {
  const { id: e8, offset: o8, pos: l7, normal: a8, zoomRange: r8 } = i5, { displayViewScreenMat3: s11, displayViewMat3: n9 } = t9.view, c5 = r7(t9, e8, i5.color), f7 = n6(t9, e8), h11 = G5(t9, i5), v5 = new j(0.5).multiply(t9.antialiasingControls.antialiasing), w5 = Un(h11.add(v5), new j(0.45)).add(new j(0.1).multiply(v5)), V2 = k3(w5).multiply(w5).multiply(o8), b5 = n9.multiply(new G2(V2, new j(0))), S5 = s11.multiply(new G2(l7, new j(1))).add(b5), x5 = new j(2).multiply(re(h11, new j(0))).add(t9.clip(e8, r8)), g7 = new H2(S5.xy, x5, 1);
  return { color: c5, opacity: f7, halfWidth: w5, normal: a8, scaledOffset: V2, scaledHalfWidth: h11, glPosition: new H2(g7.xy, x5, 1) };
}
function _5(t9, i5) {
  const { opacity: e8, color: o8 } = t9, l7 = D4(t9, i5);
  return e8.multiply(o8).multiply(l7);
}
r([g3(j)], F3.prototype, "antialiasing", void 0), r([g3(j)], F3.prototype, "blur", void 0);
var B4 = class extends P3 {
  constructor() {
    super(...arguments), this.computeAttributes = { pos: ["nextPos1", "nextPos2"] };
  }
  vertex(t9, i5) {
    const e8 = T2(this, t9);
    return { ...e8, ...this.maybeRunHittest(t9, i5, e8.halfWidth) };
  }
  fragment(t9) {
    const i5 = _5(t9, this.antialiasingControls.blur);
    return this.getFragmentOutput(i5, t9);
  }
  hittest(t9, i5, e8) {
    const { viewMat3: o8, tileMat3: l7 } = this.view, a8 = o8.multiply(l7), r8 = a8.multiply(new G2(t9.pos, 1)), s11 = a8.multiply(new G2(i5.nextPos1, 1)), n9 = a8.multiply(new G2(i5.nextPos2, 1)), { distance: p8, smallSymbolDistance: u6, smallSymbolSizeThreshold: y4 } = this.hittestRequest, f7 = re(e8, y4.multiply(0.5)).multiply(p8.subtract(u6)), h11 = this.hittestRequest.position;
    return Sn(j4(h11, r8.xy, s11.xy), j4(h11, r8.xy, n9.xy)).subtract(e8).add(f7);
  }
};
r([g3(F3)], B4.prototype, "antialiasingControls", void 0), r([_3(f4)], B4.prototype, "visualVariableColor", void 0), r([_3(h9)], B4.prototype, "visualVariableOpacity", void 0), r([_3(m6)], B4.prototype, "visualVariableSizeMinMaxValue", void 0), r([_3(p7)], B4.prototype, "visualVariableSizeScaleStops", void 0), r([_3(f5)], B4.prototype, "visualVariableSizeStops", void 0), r([_3(l6)], B4.prototype, "visualVariableSizeUnitValue", void 0), r([e(0, m5(q7)), e(1, m5(q4))], B4.prototype, "vertex", null), r([e(0, m5(A4))], B4.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/OutlineFillShader.js
var W2 = class extends S2 {
};
r([h6(3, C2)], W2.prototype, "offset", void 0), r([h6(4, H2)], W2.prototype, "color", void 0), r([h6(5, C2)], W2.prototype, "normal", void 0), r([h6(6, j)], W2.prototype, "halfWidth", void 0), r([h6(7, j)], W2.prototype, "referenceHalfWidth", void 0), r([h6(8, C2)], W2.prototype, "zoomRange", void 0);
var R3 = class extends A4 {
};
function A5(t9, o8, i5) {
  const { id: e8, bitset: r8 } = o8, s11 = h7(r8, B), u6 = Gt(s11, new j(0.5)), d10 = T2(t9, o8), c5 = xt(u6, d10.halfWidth, new j(0)), f7 = n6(t9, e8), y4 = r7(t9, e8, o8.color), V2 = xt(u6, o8.color, y4.multiply(f7)), h11 = t9.view.displayViewScreenMat3.multiply(new G2(o8.pos.xy, 1)), b5 = t9.clip(o8.id), j6 = new H2(h11.xy, b5, 1), g7 = xt(u6, d10.glPosition, j6), w5 = i5 && t9.maybeRunHittest(o8, i5, u6);
  return { isOutline: s11, color: V2, opacity: new j(1), halfWidth: c5, normal: d10.normal, glPosition: g7, ...w5 };
}
var F4 = class extends P3 {
  constructor() {
    super(...arguments), this.computeAttributes = { pos: ["nextPos1", "nextPos2"] };
  }
};
r([g3(F3)], F4.prototype, "antialiasingControls", void 0), r([_3(f4)], F4.prototype, "visualVariableColor", void 0), r([_3(h9)], F4.prototype, "visualVariableOpacity", void 0), r([_3(m6)], F4.prototype, "visualVariableSizeMinMaxValue", void 0), r([_3(p7)], F4.prototype, "visualVariableSizeScaleStops", void 0), r([_3(f5)], F4.prototype, "visualVariableSizeStops", void 0), r([_3(l6)], F4.prototype, "visualVariableSizeUnitValue", void 0);
var H3 = class extends F4 {
  vertex(t9, o8) {
    return A5(this, t9, o8);
  }
  fragment(t9) {
    const { color: o8, isOutline: i5 } = t9, e8 = Gt(i5, new j(0.5)), r8 = _5(t9, this.antialiasingControls.blur), s11 = xt(e8, r8, o8), n9 = xt(e8, new j(1 / 255), new j(0));
    return this.getFragmentOutput(s11, t9, n9);
  }
  hittest(t9, o8, i5) {
    return xt(i5, q5(this.hittestRequest), z3(this, t9, o8));
  }
};
r([e(0, m5(W2)), e(1, m5(q4))], H3.prototype, "vertex", null), r([e(0, m5(R3))], H3.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/PatternFillShader.js
var h10 = class extends g5 {
};
r([h6(5, H2)], h10.prototype, "tlbr", void 0), r([h6(6, j)], h10.prototype, "inverseRasterizationScale", void 0);
var g6 = class extends F2 {
};
function j5(t9) {
  const e8 = new j(1), r8 = new j(0);
  return new tt(e8.divide(t9.x), r8.divide(t9.y), 0, yt(r8.divide(t9.x)), e8.divide(t9.y), 0, 0, 0, 1);
}
function O2(t9, e8) {
  const r8 = e8.tlbr.xy, o8 = e8.tlbr.zw, i5 = o8.x.subtract(r8.x), n9 = r8.y.subtract(o8.y), a8 = new C2(i5, n9).multiply(e8.inverseRasterizationScale), p8 = a8.multiply(t9.view.requiredZoomFactor), u6 = j5(p8), d10 = t9.localTileOffset.getPatternOffsetAtTileOrigin(a8).divide(p8), c5 = new G2(e8.pos, 1);
  return { tileTextureCoord: u6.multiply(c5).xy.subtract(d10), tlbr: e8.tlbr.divide(t9.mosaicInfo.size.xyxy) };
}
function T3(t9, e8) {
  const r8 = Cn(t9.tileTextureCoord, new j(1)), o8 = jn(t9.tlbr.xy, t9.tlbr.zw, r8), i5 = le(e8.texture, o8);
  return t9.color.multiply(i5);
}
var z4 = class extends x3 {
  vertex(t9, e8) {
    return { ...super.vertex(t9, e8), ...O2(this, t9) };
  }
  fragment(t9) {
    const e8 = T3(t9, this.mosaicInfo);
    return this.getFragmentOutput(e8, t9, new j(0));
  }
};
r([g3(p6)], z4.prototype, "mosaicInfo", void 0), r([g3(n7)], z4.prototype, "localTileOffset", void 0), r([e(0, m5(h10)), e(1, m5(q4))], z4.prototype, "vertex", null), r([e(0, m5(g6))], z4.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/PatternOutlineFillShader.js
var x4 = class extends W2 {
};
r([h6(9, H2)], x4.prototype, "tlbr", void 0), r([h6(10, j)], x4.prototype, "inverseRasterizationScale", void 0);
var y3 = class extends R3 {
};
var S3 = class extends H3 {
  vertex(t9, o8) {
    return { ...A5(this, t9, o8), ...O2(this, t9) };
  }
  fragment(t9) {
    const { isOutline: o8 } = t9, r8 = Gt(o8, new j(0.5)), e8 = _5(t9, this.antialiasingControls.blur), s11 = T3(t9, this.mosaicInfo), n9 = xt(r8, e8, s11), p8 = xt(r8, new j(1 / 255), new j(0));
    return this.getFragmentOutput(n9, t9, p8);
  }
};
r([g3(p6)], S3.prototype, "mosaicInfo", void 0), r([g3(n7)], S3.prototype, "localTileOffset", void 0), r([e(0, m5(x4)), e(1, m5(q4))], S3.prototype, "vertex", null), r([e(0, m5(y3))], S3.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/engine/webgl/shaderGraph/techniques/shaders/ComplexOutlineFillShader.js
var S4 = 16;
var b4 = 1 / S4;
var w4 = 128;
var F5 = class extends S2 {
};
r([h6(3, H2)], F5.prototype, "color", void 0), r([h6(4, H2)], F5.prototype, "tlbr", void 0), r([h6(5, j)], F5.prototype, "angle", void 0), r([h6(6, j)], F5.prototype, "aux1", void 0), r([h6(7, j)], F5.prototype, "aux2", void 0), r([h6(8, C2)], F5.prototype, "aux3", void 0), r([h6(9, C2)], F5.prototype, "aux4", void 0), r([h6(10, C2)], F5.prototype, "zoomRange", void 0);
var R4 = class extends y3 {
};
var C5 = class extends F4 {
  vertex(t9, o8) {
    const { aux1: e8, aux2: r8, aux3: i5, aux4: l7 } = t9, p8 = { ...t9, width: e8, height: r8, offset: i5, scale: l7.multiply(b4) }, n9 = { ...t9, halfWidth: e8, referenceHalfWidth: r8, offset: i5, normal: l7.subtract(w4).multiply(b4) }, m7 = A5(this, n9), u6 = P5(this, p8), h11 = Gt(m7.isOutline, new j(0.5));
    return { ...m7, ...u6, ...this.maybeRunHittest(t9, o8, h11) };
  }
  fragment(t9) {
    const { isOutline: o8 } = t9, e8 = Gt(o8, new j(0.5)), r8 = _5(t9, this.antialiasingControls.blur), i5 = Z2(this, t9), p8 = xt(e8, r8, i5), n9 = xt(e8, new j(1 / 255), new j(0));
    return this.getFragmentOutput(p8, t9, n9);
  }
  hittest(t9, o8, e8) {
    return xt(e8, q5(this.hittestRequest), z3(this, t9, o8));
  }
};
r([g3(p6)], C5.prototype, "mosaicInfo", void 0), r([g3(n7)], C5.prototype, "localTileOffset", void 0), r([e(0, m5(F5)), e(1, m5(q4))], C5.prototype, "vertex", null), r([e(0, m5(R4))], C5.prototype, "fragment", null);

// node_modules/@arcgis/core/views/2d/layers/support/UpdateTracking2D.js
var d9 = class extends b {
  constructor(t9) {
    super(t9), this.debugName = "", this._updatingHandles = new h(), this._idToUpdatingState = new s2();
  }
  get updating() {
    const t9 = this._updatingHandles.updating || Array.from(this._idToUpdatingState.values()).some((t10) => t10);
    if (has("esri-2d-log-updating")) {
      const r8 = Array.from(this._idToUpdatingState.entries()).map(([t10, r9]) => `-> ${t10}: ${r9}`).join("\n");
      console.log(`${this.debugName}: Updating: ${t9}
-> Handles: ${this._updatingHandles.updating}
${r8}`);
    }
    return t9;
  }
  addUpdateTracking(t9, r8) {
    const s11 = d(() => r8.updating, (r9) => this._idToUpdatingState.set(t9, r9), { sync: true });
    this.addHandles(s11);
  }
  addPromise(t9) {
    return this._updatingHandles.addPromise(t9);
  }
};
r([m({ constructOnly: true })], d9.prototype, "debugName", void 0), r([m({ readOnly: true })], d9.prototype, "updating", null), d9 = r([a("esri.views.2d.layers.support.UpdateTracking2D")], d9);

// node_modules/@arcgis/core/views/2d/engine/webgl/DisplayId.js
var n8 = 8388607;
var t8 = 8388608;
var f6 = (t9) => t9 & n8;
function s10(n9, r8) {
  return ((r8 ? t8 : 0) | n9) >>> 0;
}

export {
  e2 as e,
  o3 as o,
  i,
  t2 as t,
  c,
  o as o2,
  A,
  G,
  k,
  q,
  B,
  C,
  D,
  E,
  F,
  H,
  J,
  U,
  S,
  j,
  C2,
  G2,
  H2,
  Y,
  O,
  Z,
  tt,
  nt,
  yt,
  mt,
  xt,
  gt,
  Tt,
  zt,
  Dt,
  Pt,
  Ut,
  jt,
  Ct,
  Gt,
  Mt,
  Yt,
  Vt,
  tn,
  nn,
  ln,
  hn,
  bn,
  In,
  zn,
  Un,
  Sn,
  jn,
  Jn,
  Qn,
  Zn,
  ne,
  ee,
  re,
  le,
  a7 as a,
  h6 as h,
  m5 as m,
  g3 as g,
  _3 as _,
  K3 as K,
  I3 as I,
  C3,
  v2 as v,
  w2 as w,
  P2 as P,
  j2,
  w3 as w2,
  z2 as z,
  h7 as h2,
  v3 as v2,
  B3 as B2,
  C4,
  D3 as D2,
  E2,
  G3,
  d8 as d,
  S2,
  q4 as q2,
  F2,
  P3 as P2,
  g4 as g2,
  h8 as h3,
  P4 as P3,
  q5 as q3,
  R2 as R,
  f4 as f,
  h9 as h4,
  l5 as l,
  r7 as r,
  n6 as n,
  u5 as u,
  o7 as o3,
  x3 as x,
  p6 as p,
  _4 as _2,
  m6 as m2,
  p7 as p2,
  f5 as f2,
  l6 as l2,
  q7 as q4,
  D4 as D3,
  T2 as T,
  B4 as B3,
  H3,
  z4 as z2,
  S3,
  S4,
  w4 as w3,
  C5,
  n8 as n2,
  f6 as f3,
  s10 as s,
  t3 as t2,
  h3 as h5,
  x as x2,
  d9 as d2
};
//# sourceMappingURL=chunk-JI3JMSDL.js.map
