import {
  i as i2
} from "./chunk-JCJSNEEC.js";
import {
  _
} from "./chunk-6MGQFUK2.js";
import {
  a as a3
} from "./chunk-LXHP4EAG.js";
import "./chunk-XSZGPGLB.js";
import {
  i
} from "./chunk-Y4I3KFRX.js";
import "./chunk-CGJR3XCF.js";
import {
  j,
  y
} from "./chunk-KVO35ODJ.js";
import "./chunk-O2HBAYVG.js";
import "./chunk-FKL5AVF4.js";
import "./chunk-CKPBZSTT.js";
import "./chunk-3T3LUDWR.js";
import "./chunk-Q3K5MAUZ.js";
import "./chunk-2XVRGGEF.js";
import "./chunk-DPVSO6BH.js";
import "./chunk-U6IFI7EK.js";
import "./chunk-JMY2H33H.js";
import {
  a as a2
} from "./chunk-SIK6WC3J.js";
import "./chunk-VBS2Y7KE.js";
import "./chunk-AHZHHHCW.js";
import "./chunk-HB2JTNV2.js";
import "./chunk-BLBULF2O.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-BXIXSFGX.js";
import "./chunk-ARQ76THZ.js";
import "./chunk-TRMW5XQP.js";
import "./chunk-HBU7EMDX.js";
import "./chunk-JRUJALSE.js";
import "./chunk-O67P2KE3.js";
import "./chunk-73FHIZIF.js";
import "./chunk-ICIPRMPO.js";
import "./chunk-NEDBRPQY.js";
import "./chunk-QLRZN73K.js";
import "./chunk-CGJUTDVJ.js";
import "./chunk-EHD5KM2T.js";
import "./chunk-QJXYURT2.js";
import "./chunk-KV3S4QI2.js";
import "./chunk-ECMDQ4LS.js";
import "./chunk-D6FJTDNK.js";
import "./chunk-LP6TMAPE.js";
import "./chunk-RENLZYKC.js";
import "./chunk-5PCP47ZJ.js";
import "./chunk-IYJHGZBJ.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-VBJTBJYL.js";
import "./chunk-HFPXZJAJ.js";
import "./chunk-XQH2QDB2.js";
import "./chunk-IOKAACTA.js";
import "./chunk-VFTH6C2E.js";
import "./chunk-SMFCDOAJ.js";
import "./chunk-5A4G4OVM.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-44C2A72D.js";
import "./chunk-DIKY6MBW.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-Z2DWZ5IF.js";
import {
  d
} from "./chunk-TKY5RBM3.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-SIQNRYEG.js";
import "./chunk-TTDEVHSF.js";
import "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-Q4Q32WYV.js";
import {
  w
} from "./chunk-A3J7W53Y.js";
import "./chunk-HLF5XJSV.js";
import "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import "./chunk-X7VTUWCX.js";
import "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import {
  m
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import {
  b,
  s as s2
} from "./chunk-GRW2QIBT.js";
import {
  u
} from "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import {
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/views/layers/WMSLayerView.js
var m2 = (m3) => {
  let n2 = class extends m3 {
    initialize() {
      this.exportImageParameters = new a2({ layer: this.layer });
    }
    destroy() {
      this.exportImageParameters = u(this.exportImageParameters);
    }
    get exportImageVersion() {
      var _a;
      return (_a = this.exportImageParameters) == null ? void 0 : _a.commitProperty("version"), this.commitProperty("timeExtent"), (this._get("exportImageVersion") || 0) + 1;
    }
    get timeExtent() {
      var _a;
      return i2(this.layer, (_a = this.view) == null ? void 0 : _a.timeExtent, this._get("timeExtent"));
    }
    async fetchPopupFeaturesAtLocation(e, r2) {
      const { layer: s3 } = this;
      if (!e) throw new s("wmslayerview:fetchPopupFeatures", "Nothing to fetch without area", { layer: s3 });
      const { popupEnabled: a4 } = s3;
      if (!a4) throw new s("wmslayerview:fetchPopupFeatures", "popupEnabled should be true", { popupEnabled: a4 });
      const p = this.createFetchPopupFeaturesQuery(e);
      if (!p) return [];
      const { extent: i3, width: m4, height: n3, x: c, y: u2 } = p;
      if (!(i3 && m4 && n3)) throw new s("wmslayerview:fetchPopupFeatures", "WMSLayer does not support fetching features.", { extent: i3, width: m4, height: n3 });
      const h = await s3.fetchFeatureInfo(i3, m4, n3, c, u2);
      return s2(r2), h;
    }
  };
  return r([m()], n2.prototype, "exportImageParameters", void 0), r([m({ readOnly: true })], n2.prototype, "exportImageVersion", null), r([m()], n2.prototype, "layer", void 0), r([m({ readOnly: true })], n2.prototype, "timeExtent", null), n2 = r([a("esri.views.layers.WMSLayerView")], n2), n2;
};

// node_modules/@arcgis/core/views/2d/layers/WMSLayerView2D.js
var g = class extends m2(i(j(y))) {
  constructor() {
    super(...arguments), this.bitmapContainer = new a3();
  }
  supportsSpatialReference(e) {
    return this.layer.serviceSupportsSpatialReference(e);
  }
  update(e) {
    this.strategy.update(e).catch((e2) => {
      b(e2) || n.getLogger(this).error(e2);
    });
  }
  attach() {
    const { layer: e } = this, { imageMaxHeight: t, imageMaxWidth: r2 } = e;
    this.bitmapContainer = new a3(), this.container.addChild(this.bitmapContainer), this.strategy = new _({ container: this.bitmapContainer, fetchSource: this.fetchImage.bind(this), requestUpdate: this.requestUpdate.bind(this), imageMaxHeight: t, imageMaxWidth: r2, imageRotationSupported: false, imageNormalizationSupported: false, hidpi: false }), this.addAttachHandles(d(() => this.exportImageVersion, () => this.requestUpdate()));
  }
  detach() {
    this.strategy = u(this.strategy), this.container.removeAllChildren();
  }
  viewChange() {
  }
  moveEnd() {
    this.requestUpdate();
  }
  createFetchPopupFeaturesQuery(e) {
    const { view: t, bitmapContainer: r2 } = this, { x: i3, y: s3 } = e, { spatialReference: a4 } = t;
    let o, p = 0, m3 = 0;
    if (r2.children.some((e2) => {
      const { width: t2, height: r3, resolution: h2, x: c2, y: d3 } = e2, u2 = c2 + h2 * t2, g2 = d3 - h2 * r3;
      return i3 >= c2 && i3 <= u2 && s3 <= d3 && s3 >= g2 && (o = new w({ xmin: c2, ymin: g2, xmax: u2, ymax: d3, spatialReference: a4 }), p = t2, m3 = r3, true);
    }), !o) return null;
    const h = o.width / p, c = Math.round((i3 - o.xmin) / h), d2 = Math.round((o.ymax - s3) / h);
    return { extent: o, width: p, height: m3, x: c, y: d2 };
  }
  async doRefresh() {
    this.requestUpdate();
  }
  isUpdating() {
    return this.strategy.updating || this.updateRequested;
  }
  fetchImage(e, t, r2, i3) {
    return this.layer.fetchImageBitmap(e, t, r2, { timeExtent: this.timeExtent, ...i3 });
  }
};
r([m()], g.prototype, "strategy", void 0), r([m()], g.prototype, "updating", void 0), g = r([a("esri.views.2d.layers.WMSLayerView2D")], g);
var y2 = g;
export {
  y2 as default
};
//# sourceMappingURL=WMSLayerView2D-25UHRHXM.js.map
