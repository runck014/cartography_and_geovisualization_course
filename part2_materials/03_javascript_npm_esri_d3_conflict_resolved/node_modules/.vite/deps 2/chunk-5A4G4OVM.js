import {
  c,
  o as o3
} from "./chunk-MGMVRMXQ.js";
import {
  o as o2
} from "./chunk-JS7R723S.js";
import {
  o
} from "./chunk-HLF5XJSV.js";
import {
  r as r2
} from "./chunk-L6D73M4D.js";
import {
  f
} from "./chunk-VU6O6TFT.js";
import {
  m
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";

// node_modules/@arcgis/core/time/TimeExtent.js
var u;
var m2 = u = class extends f {
  static get allTime() {
    return d;
  }
  static get empty() {
    return c2;
  }
  static fromArray(t) {
    return new u({ start: null != t[0] ? new Date(t[0]) : t[0], end: null != t[1] ? new Date(t[1]) : t[1] });
  }
  constructor(t) {
    super(t), this.end = null, this.start = null;
  }
  readEnd(t, e) {
    return null != e.end ? new Date(e.end) : null;
  }
  writeEnd(t, e) {
    e.end = (t == null ? void 0 : t.getTime()) ?? null;
  }
  get isAllTime() {
    return this.equals(u.allTime);
  }
  get isEmpty() {
    return this.equals(u.empty);
  }
  readStart(t, e) {
    return null != e.start ? new Date(e.start) : null;
  }
  writeStart(t, e) {
    e.start = (t == null ? void 0 : t.getTime()) ?? null;
  }
  clone() {
    return new u({ end: this.end, start: this.start });
  }
  equals(t) {
    var _a, _b, _c, _d;
    if (!t) return false;
    const e = ((_a = this.start) == null ? void 0 : _a.getTime()) ?? this.start, r3 = ((_b = this.end) == null ? void 0 : _b.getTime()) ?? this.end, s = ((_c = t.start) == null ? void 0 : _c.getTime()) ?? t.start, n = ((_d = t.end) == null ? void 0 : _d.getTime()) ?? t.end;
    return e === s && r3 === n;
  }
  expandTo(t, e = o2) {
    if (this.isEmpty || this.isAllTime) return this.clone();
    let n = this.start;
    n && (n = c(n, t, e));
    let i = this.end;
    if (i) {
      const n2 = c(i, t, e);
      i = i.getTime() === n2.getTime() ? n2 : o3(n2, 1, t, e);
    }
    return new u({ start: n, end: i });
  }
  intersection(t) {
    var _a, _b, _c, _d;
    if (!t) return this.clone();
    if (this.isEmpty || t.isEmpty) return u.empty;
    if (this.isAllTime) return t.clone();
    if (t.isAllTime) return this.clone();
    const e = ((_a = this.start) == null ? void 0 : _a.getTime()) ?? -1 / 0, r3 = ((_b = this.end) == null ? void 0 : _b.getTime()) ?? 1 / 0, s = ((_c = t.start) == null ? void 0 : _c.getTime()) ?? -1 / 0, n = ((_d = t.end) == null ? void 0 : _d.getTime()) ?? 1 / 0;
    let i, l;
    return s >= e && s <= r3 ? i = s : e >= s && e <= n && (i = e), r3 >= s && r3 <= n ? l = r3 : n >= e && n <= r3 && (l = n), null == i || null == l || isNaN(i) || isNaN(l) ? u.empty : new u({ start: i === -1 / 0 ? null : new Date(i), end: l === 1 / 0 ? null : new Date(l) });
  }
  offset(t, e, r3 = o2) {
    if (this.isEmpty || this.isAllTime) return this.clone();
    const n = new u(), { start: i, end: l } = this;
    return null != i && (n.start = o3(i, t, e, r3)), null != l && (n.end = o3(l, t, e, r3)), n;
  }
  toArray() {
    var _a, _b;
    return this.isEmpty ? [void 0, void 0] : [((_a = this.start) == null ? void 0 : _a.getTime()) ?? null, ((_b = this.end) == null ? void 0 : _b.getTime()) ?? null];
  }
  union(t) {
    if (!t || t.isEmpty) return this.clone();
    if (this.isEmpty) return t.clone();
    if (this.isAllTime || t.isAllTime) return d.clone();
    const e = null != this.start && null != t.start ? new Date(Math.min(this.start.getTime(), t.start.getTime())) : null, r3 = null != this.end && null != t.end ? new Date(Math.max(this.end.getTime(), t.end.getTime())) : null;
    return new u({ start: e, end: r3 });
  }
};
r([m({ type: Date, json: { write: { allowNull: true } } })], m2.prototype, "end", void 0), r([o("end")], m2.prototype, "readEnd", null), r([r2("end")], m2.prototype, "writeEnd", null), r([m({ readOnly: true, json: { read: false } })], m2.prototype, "isAllTime", null), r([m({ readOnly: true, json: { read: false } })], m2.prototype, "isEmpty", null), r([m({ type: Date, json: { write: { allowNull: true } } })], m2.prototype, "start", void 0), r([o("start")], m2.prototype, "readStart", null), r([r2("start")], m2.prototype, "writeStart", null), m2 = u = r([a("esri.time.TimeExtent")], m2);
var p = m2;
var d = new m2();
var c2 = new m2({ start: void 0, end: void 0 });

export {
  p
};
//# sourceMappingURL=chunk-5A4G4OVM.js.map
