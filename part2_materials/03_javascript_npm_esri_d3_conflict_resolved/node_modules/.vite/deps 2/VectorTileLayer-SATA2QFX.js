import {
  l as l3
} from "./chunk-IMODYMGW.js";
import "./chunk-CQZSH27Y.js";
import "./chunk-VBS2Y7KE.js";
import "./chunk-HCAIFU2M.js";
import "./chunk-AHZHHHCW.js";
import {
  p as p2
} from "./chunk-CUAWHPHH.js";
import "./chunk-NY66IK5V.js";
import {
  T
} from "./chunk-LWH57KCM.js";
import "./chunk-VVL7KRSE.js";
import {
  t as t3
} from "./chunk-EZCH3ZAJ.js";
import "./chunk-H2FDONTV.js";
import {
  e as e4
} from "./chunk-QLRZN73K.js";
import "./chunk-CGJUTDVJ.js";
import "./chunk-KV3S4QI2.js";
import {
  p,
  z
} from "./chunk-5PCP47ZJ.js";
import "./chunk-IYJHGZBJ.js";
import {
  i
} from "./chunk-TKIFUSBT.js";
import {
  l as l2
} from "./chunk-5OE5J4F6.js";
import {
  e as e3
} from "./chunk-JU4Z6UVP.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-GNY4KZ34.js";
import "./chunk-WPERPIJF.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import {
  f as f2
} from "./chunk-LCFK6PEB.js";
import {
  e as e2
} from "./chunk-HJ7SKBLO.js";
import {
  j as j3
} from "./chunk-F3W2DG3D.js";
import {
  l
} from "./chunk-YMJZWW2N.js";
import "./chunk-7Q4JSL7R.js";
import "./chunk-VBJTBJYL.js";
import {
  t as t2
} from "./chunk-ES2OYM5K.js";
import {
  b as b2
} from "./chunk-JXPOROPE.js";
import "./chunk-OPBXQTOC.js";
import "./chunk-DKMSVKV3.js";
import "./chunk-YIIXBP6I.js";
import {
  S
} from "./chunk-LN6VH2LB.js";
import "./chunk-GZFJKWTS.js";
import "./chunk-2DHZIDQK.js";
import "./chunk-VFTH6C2E.js";
import "./chunk-SMFCDOAJ.js";
import {
  f
} from "./chunk-2HEBE37N.js";
import "./chunk-5A4G4OVM.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-44C2A72D.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-GGCWKF4X.js";
import "./chunk-6D5XULXX.js";
import "./chunk-445IB4DS.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import "./chunk-H4N5QOMX.js";
import "./chunk-F2LC36UV.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-Z2DWZ5IF.js";
import "./chunk-TDZ623HP.js";
import "./chunk-6RLUKSNK.js";
import "./chunk-UN4ISSP7.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-TKY5RBM3.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-SIQNRYEG.js";
import "./chunk-TTDEVHSF.js";
import {
  d
} from "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-BMGF5ELJ.js";
import "./chunk-JU6MEO4D.js";
import "./chunk-CY5MS6DC.js";
import {
  x
} from "./chunk-C6FFJ4QS.js";
import "./chunk-Q4Q32WYV.js";
import {
  R,
  j2,
  w
} from "./chunk-A3J7W53Y.js";
import {
  o
} from "./chunk-HLF5XJSV.js";
import {
  g,
  r as r3
} from "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-Y6AYXNMP.js";
import "./chunk-6YWQXXBX.js";
import {
  U as U2,
  h
} from "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import {
  U
} from "./chunk-X7VTUWCX.js";
import {
  Et,
  I,
  K,
  Rt,
  V,
  Y,
  j,
  jt,
  pt,
  s as s3,
  v
} from "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import {
  m
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a2,
  r as r2
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import {
  a as a3,
  b,
  c2 as c,
  m as m2,
  s as s2
} from "./chunk-GRW2QIBT.js";
import {
  u
} from "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import {
  a,
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";
import {
  e3 as e,
  t4 as t
} from "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/layers/support/imageUtils.js
var A = null;
function o2(o4) {
  if (A) return A;
  const l7 = { lossy: "UklGRiIAAABXRUJQVlA4IBYAAAAwAQCdASoBAAEADsD+JaQAA3AAAAAA", lossless: "UklGRhoAAABXRUJQVlA4TA0AAAAvAAAAEAcQERGIiP4HAA==", alpha: "UklGRkoAAABXRUJQVlA4WAoAAAAQAAAAAAAAAAAAQUxQSAwAAAARBxAR/Q9ERP8DAABWUDggGAAAABQBAJ0BKgEAAQAAAP4AAA3AAP7mtQAAAA==", animation: "UklGRlIAAABXRUJQVlA4WAoAAAASAAAAAAAAAAAAQU5JTQYAAAD/////AABBTk1GJgAAAAAAAAAAAAAAAAAAAGQAAABWUDhMDQAAAC8AAAAQBxAREYiI/gcA" };
  return A = new Promise((A3) => {
    const n3 = new Image();
    n3.onload = () => {
      n3.onload = n3.onerror = null, A3(n3.width > 0 && n3.height > 0);
    }, n3.onerror = () => {
      n3.onload = n3.onerror = null, A3(false);
    }, n3.src = "data:image/webp;base64," + l7[o4];
  }), A;
}

// node_modules/@arcgis/core/layers/support/SpriteSource.js
var h2 = 1.15;
var n2 = class {
  constructor(t4, e5) {
    this._spriteSource = t4, this._maxTextureSize = e5, this.devicePixelRatio = 1, this._spriteImageFormat = "png", this._isRetina = false, this._spritesData = {}, this.image = null, this.width = null, this.height = null, this.loadStatus = "not-loaded", "url" === t4.type && t4.spriteFormat && (this._spriteImageFormat = t4.spriteFormat), t4.pixelRatio && (this.devicePixelRatio = t4.pixelRatio), this.baseURL = t4.spriteUrl;
  }
  get spriteNames() {
    const t4 = [];
    for (const e5 in this._spritesData) t4.push(e5);
    return t4.sort(), t4;
  }
  getSpriteInfo(t4) {
    return this._spritesData ? this._spritesData[t4] : null;
  }
  async load(t4) {
    if (this.baseURL) {
      this.loadStatus = "loading";
      try {
        await this._loadSprites(t4), this.loadStatus = "loaded";
      } catch {
        this.loadStatus = "failed";
      }
    } else this.loadStatus = "failed";
  }
  async _loadSprites(t4) {
    this._isRetina = this.devicePixelRatio > h2;
    const { width: s5, height: r5, data: a5, json: o4 } = await this._getSpriteData(this._spriteSource, t4), n3 = Object.keys(o4);
    if (!n3 || 0 === n3.length || !a5) return this._spritesData = this.image = null, void (this.width = this.height = 0);
    this._spritesData = o4, this.width = s5, this.height = r5;
    const d4 = Math.max(this._maxTextureSize, 4096);
    if (s5 > d4 || r5 > d4) {
      const t5 = `Sprite resource for style ${this.baseURL} is bigger than the maximum allowed of ${d4} pixels}`;
      throw n.getLogger("esri.layers.support.SpriteSource").error(t5), new s("SpriteSource", t5);
    }
    let p4;
    for (let e5 = 0; e5 < a5.length; e5 += 4) p4 = a5[e5 + 3] / 255, a5[e5] = a5[e5] * p4, a5[e5 + 1] = a5[e5 + 1] * p4, a5[e5 + 2] = a5[e5 + 2] * p4;
    this.image = a5;
  }
  async _getSpriteData(i2, n3) {
    if ("image" === i2.type) {
      let t4, a5;
      if (this.devicePixelRatio < h2) {
        if (!i2.spriteSource1x) throw new s("SpriteSource", "no image data provided for low resolution sprites!");
        t4 = i2.spriteSource1x.image, a5 = i2.spriteSource1x.json;
      } else {
        if (!i2.spriteSource2x) throw new s("SpriteSource", "no image data provided for high resolution sprites!");
        t4 = i2.spriteSource2x.image, a5 = i2.spriteSource2x.json;
      }
      return "width" in t4 && "height" in t4 && "data" in t4 && (t(t4.data) || e(t4.data)) ? { width: t4.width, height: t4.height, data: new Uint8Array(t4.data), json: a5 } : { ...d2(t4), json: a5 };
    }
    const p4 = I(this.baseURL), l7 = p4.query ? "?" + v(p4.query) : "", g3 = this._isRetina ? "@2x" : "", u2 = `${p4.path}${g3}.${this._spriteImageFormat}${l7}`, c3 = `${p4.path}${g3}.json${l7}`, [m4, S3] = await Promise.all([U(c3, n3), U(u2, { responseType: "image", ...n3 })]);
    return { ...d2(S3.data), json: m4.data };
  }
};
function d2(t4) {
  const e5 = document.createElement("canvas"), i2 = e5.getContext("2d");
  e5.width = t4.width, e5.height = t4.height, i2.drawImage(t4, 0, 0, t4.width, t4.height);
  const s5 = i2.getImageData(0, 0, t4.width, t4.height);
  return { width: t4.width, height: t4.height, data: new Uint8Array(s5.data) };
}

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/TilemapIndex.js
var l4 = class {
  constructor(e5) {
    this.url = e5;
  }
  destroy() {
    this._tileIndexPromise = null;
  }
  async fetchTileIndex() {
    return this._tileIndexPromise || (this._tileIndexPromise = U(this.url).then((e5) => e5.data.index)), this._tileIndexPromise;
  }
  async dataKey(e5, r5) {
    const l7 = await this.fetchTileIndex();
    return s2(r5), this._getIndexedDataKey(l7, e5);
  }
  _getIndexedDataKey(e5, t4) {
    const l7 = [t4];
    if (t4.level < 0 || t4.row < 0 || t4.col < 0 || t4.row >> t4.level > 0 || t4.col >> t4.level > 0) return null;
    let i2 = t4;
    for (; 0 !== i2.level; ) i2 = new e4(i2.level - 1, i2.row >> 1, i2.col >> 1, i2.world), l7.push(i2);
    let o4, s5, n3 = e5, a5 = l7.pop();
    if (1 === n3) return a5;
    for (; l7.length; ) if (o4 = l7.pop(), s5 = (1 & o4.col) + ((1 & o4.row) << 1), n3) {
      if (0 === n3[s5]) {
        a5 = null;
        break;
      }
      if (1 === n3[s5]) {
        a5 = o4;
        break;
      }
      a5 = o4, n3 = n3[s5];
    }
    return a5;
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/TilemapRequest.js
var l5 = class {
  constructor(e5, t4) {
    this._tilemap = e5, this._tileIndexUrl = t4;
  }
  destroy() {
    this._tilemap = u(this._tilemap), this._tileIndexPromise = null;
  }
  async fetchTileIndex(t4) {
    return this._tileIndexPromise || (this._tileIndexPromise = U(this._tileIndexUrl, { query: { ...t4 == null ? void 0 : t4.query } }).then((e5) => e5.data.index)), this._tileIndexPromise;
  }
  dataKey(e5, t4) {
    const { level: l7, row: s5, col: o4 } = e5, n3 = new e4(e5);
    return this._tilemap.fetchAvailabilityUpsample(l7, s5, o4, n3, t4).then(() => (n3.world = e5.world, n3)).catch((e6) => {
      if (b(e6)) throw e6;
      return null;
    });
  }
};

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/style/VectorTilesRequestManager.js
var l6 = class {
  constructor(t4) {
    this._tileUrl = t4, this._promise = null, this._abortController = null, this._abortOptions = [];
  }
  getData(t4) {
    var _a;
    (null == this._promise || c((_a = this._abortController) == null ? void 0 : _a.signal)) && (this._promise = this._makeRequest(this._tileUrl));
    const o4 = this._abortOptions;
    return o4.push(t4), m2(t4, () => {
      o4.every((t5) => c(t5)) && this._abortController.abort();
    }), this._promise.then((t5) => a(t5));
  }
  async _makeRequest(r5) {
    this._abortController = new AbortController();
    const { data: o4 } = await U(r5, { responseType: "array-buffer", signal: this._abortController.signal });
    return o4;
  }
};
var a4 = /* @__PURE__ */ new Map();
function c2(t4, r5, o4, e5, s5) {
  const l7 = I(t4), a5 = l7.query;
  if (a5) for (const [i2, n3] of Object.entries(a5)) switch (n3) {
    case "{x}":
      a5[i2] = e5.toString();
      break;
    case "{y}":
      a5[i2] = o4.toString();
      break;
    case "{z}":
      a5[i2] = r5.toString();
  }
  const c3 = l7.path;
  return p3(Et(c3.replaceAll(/\{z\}/gi, r5.toString()).replaceAll(/\{y\}/gi, o4.toString()).replaceAll(/\{x\}/gi, e5.toString()), { ...l7.query }), s5);
}
function p3(t4, r5) {
  return r2(a4, t4, () => new l6(t4)).getData(r5).finally(() => a4.delete(t4));
}

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/style/VectorTileSource.js
var m3 = class {
  constructor(h4, m4, u2) {
    this.tilemap = null, this.tileInfo = null, this.capabilities = null, this.fullExtent = null, this.initialExtent = null, this.name = h4, this.sourceUrl = m4;
    const f3 = I(this.sourceUrl), c3 = a(u2), x3 = c3.tiles;
    if (f3) for (let t4 = 0; t4 < x3.length; t4++) {
      const r5 = I(x3[t4]);
      r5 && (Y(r5.path) || (r5.path = V(f3.path, r5.path)), x3[t4] = Et(r5.path, { ...f3.query, ...r5.query }));
    }
    this.tileServers = x3;
    const d4 = u2.capabilities && u2.capabilities.split(",").map((t4) => t4.toLowerCase().trim()), y = true === (u2 == null ? void 0 : u2.exportTilesAllowed), T2 = true === (d4 == null ? void 0 : d4.includes("tilemap")), I2 = y && u2.hasOwnProperty("maxExportTilesCount") ? u2.maxExportTilesCount : 0;
    this.capabilities = { operations: { supportsExportTiles: y, supportsTileMap: T2 }, exportTiles: y ? { maxExportTilesCount: +I2 } : null }, this.tileInfo = z.fromJSON(c3.tileInfo);
    const g3 = u2.tileMap ? Et(V(f3.path, u2.tileMap), f3.query ?? {}) : null;
    T2 ? (this.type = "vector-tile", this.tilemap = new l5(new T({ layer: { parsedUrl: f3, tileInfo: this.tileInfo }, minLOD: c3.minLOD ?? this.tileInfo.lods[0].level, maxLOD: c3.maxLOD ?? this.tileInfo.lods[this.tileInfo.lods.length - 1].level }), g3)) : g3 && (this.tilemap = new l4(g3)), this.fullExtent = w.fromJSON(u2.fullExtent), this.initialExtent = w.fromJSON(u2.initialExtent);
  }
  destroy() {
    var _a;
    (_a = this.tilemap) == null ? void 0 : _a.destroy();
  }
  async getRefKey(t4, e5) {
    return this.tilemap ? this.tilemap.dataKey(t4, e5) : t4;
  }
  requestTile(t4, e5, i2, l7) {
    const s5 = this.tileServers[e5 % this.tileServers.length];
    return c2(s5, t4, e5, i2, l7);
  }
  isCompatibleWith(t4) {
    const e5 = this.tileInfo, i2 = t4.tileInfo;
    if (!e5.spatialReference.equals(i2.spatialReference)) return false;
    if (!e5.origin.equals(i2.origin)) return false;
    if (Math.round(e5.dpi) !== Math.round(i2.dpi)) return false;
    const l7 = e5.lods, s5 = i2.lods, r5 = Math.min(l7.length, s5.length);
    for (let o4 = 0; o4 < r5; o4++) {
      const t5 = l7[o4], e6 = s5[o4];
      if (t5.level !== e6.level || Math.round(t5.scale) !== Math.round(e6.scale)) return false;
    }
    return true;
  }
};

// node_modules/@arcgis/core/layers/support/vectorTileLayerLoader.js
async function x2(e5, t4) {
  const r5 = { source: null, sourceBase: null, sourceUrl: null, validatedSource: null, style: null, styleBase: null, styleUrl: null, sourceNameToSource: {}, primarySourceName: "", spriteFormat: "png" }, [o4, s5] = "string" == typeof e5 ? [e5, null] : [null, e5.jsonUrl];
  await S2(r5, "esri", e5, s5, t4);
  return { layerDefinition: r5.validatedSource, url: o4, serviceUrl: r5.sourceUrl, style: r5.style, styleUrl: r5.styleUrl, spriteUrl: r5.style.sprite && d3(r5.styleBase, r5.style.sprite), spriteFormat: r5.spriteFormat, glyphsUrl: r5.style.glyphs && d3(r5.styleBase, r5.style.glyphs), sourceNameToSource: r5.sourceNameToSource, primarySourceName: r5.primarySourceName };
}
function d3(...e5) {
  let t4;
  for (const r5 of e5) if (null != r5) if (pt(r5)) {
    if (t4) {
      const e6 = t4.split("://")[0];
      t4 = e6 + ":" + r5.trim();
    }
  } else t4 = Y(r5) ? r5 : V(t4, r5);
  return t4 ? jt(t4) : void 0;
}
async function S2(t4, o4, s5, l7, n3) {
  let u2, c3, a5;
  if (s2(n3), "string" == typeof s5) {
    const t5 = K(s5);
    a5 = await U(t5, { ...n3, responseType: "json", query: { f: "json", ...n3 == null ? void 0 : n3.query } }), a5.ssl && (u2 && (u2 = u2.replace(/^http:/i, "https:")), c3 && (c3 = c3.replace(/^http:/i, "https:"))), u2 = t5, c3 = t5;
  } else null != s5 && (a5 = { data: s5 }, u2 = s5.jsonUrl || null, c3 = l7);
  const f3 = a5 == null ? void 0 : a5.data;
  if (w2(f3)) return t4.styleUrl = u2 || null, j4(t4, f3, c3, n3);
  if (U3(f3)) return t4.sourceUrl ? g2(t4, f3, c3, false, o4, n3) : (t4.sourceUrl = u2 || null, g2(t4, f3, c3, true, o4, n3));
  throw new Error("You must specify the URL or the JSON for a service or for a style.");
}
function h3(e5) {
  return "object" == typeof e5 && !!e5 && "tilejson" in e5 && null != e5.tilejson;
}
function w2(e5) {
  return !!e5 && "sources" in e5 && !!e5.sources;
}
function U3(e5) {
  return !w2(e5);
}
async function j4(e5, t4, r5, o4) {
  const s5 = r5 ? Rt(r5) : j();
  e5.styleBase = s5, e5.style = t4, t4["sprite-format"] && "webp" === t4["sprite-format"].toLowerCase() && (e5.spriteFormat = "webp");
  const l7 = [];
  if (t4.sources && t4.sources.esri) {
    const r6 = t4.sources.esri;
    r6.url ? await S2(e5, "esri", d3(s5, r6.url), void 0, o4) : l7.push(S2(e5, "esri", r6, s5, o4));
  }
  for (const n3 of Object.keys(t4.sources)) "esri" !== n3 && "vector" === t4.sources[n3].type && (t4.sources[n3].url ? l7.push(S2(e5, n3, d3(s5, t4.sources[n3].url), void 0, o4)) : t4.sources[n3].tiles && l7.push(S2(e5, n3, t4.sources[n3], s5, o4)));
  await Promise.all(l7);
}
async function g2(e5, t4, r5, o4, s5, l7) {
  const i2 = r5 ? jt(r5) + "/" : j(), u2 = v2(t4), f3 = new m3(s5, Et(i2, (l7 == null ? void 0 : l7.query) ?? {}), u2);
  if (!o4 && e5.primarySourceName in e5.sourceNameToSource) {
    const t5 = e5.sourceNameToSource[e5.primarySourceName];
    if (!t5.isCompatibleWith(f3)) return;
    null != f3.fullExtent && (null != t5.fullExtent ? t5.fullExtent.union(f3.fullExtent) : t5.fullExtent = f3.fullExtent.clone()), t5.tileInfo && f3.tileInfo && t5.tileInfo.lods.length < f3.tileInfo.lods.length && (t5.tileInfo = f3.tileInfo);
  }
  if (o4 && (e5.sourceBase = i2, e5.source = t4, e5.validatedSource = u2, e5.primarySourceName = s5), e5.sourceNameToSource[s5] = f3, !h3(e5) && "defaultStyles" in t4 && !e5.style) {
    if (null == t4.defaultStyles) throw new Error();
    return "string" == typeof t4.defaultStyles ? S2(e5, "", d3(i2, t4.defaultStyles, "root.json"), void 0, l7) : S2(e5, "", t4.defaultStyles, d3(i2, "root.json"), l7);
  }
}
function v2(e5) {
  const r5 = 512;
  if (N(e5)) {
    const t4 = e5 == null ? void 0 : e5.tileInfo;
    return null != t4 && (null == t4.rows && (t4.rows = r5), null == t4.cols && (t4.cols = r5)), e5;
  }
  const o4 = { xmin: -20037507067161843e-9, ymin: -20037507067161843e-9, xmax: 20037507067161843e-9, ymax: 20037507067161843e-9, spatialReference: { wkid: 102100, latestWkid: 3857 } };
  let s5 = null;
  if (h3(e5)) {
    const { bounds: r6 } = e5;
    if (r6) {
      const e6 = R({ x: r6[0], y: r6[1], spatialReference: a(U2) }), o5 = R({ x: r6[2], y: r6[3], spatialReference: a(U2) });
      s5 = { xmin: e6.x, ymin: e6.y, xmax: o5.x, ymax: o5.y, spatialReference: a(h) };
    }
  }
  null === s5 && (s5 = o4);
  let l7 = 78271.51696400007, n3 = 2958287637957775e-7;
  const i2 = [], u2 = e5.hasOwnProperty("maxzoom") && null != e5.maxzoom ? +e5.maxzoom : 22, c3 = 0, a5 = 0;
  for (let t4 = 0; t4 <= u2; t4++) i2.push({ level: t4, scale: n3, resolution: l7 }), l7 /= 2, n3 /= 2;
  return { capabilities: "TilesOnly", initialExtent: s5, fullExtent: o4, minScale: c3, maxScale: a5, tiles: e5.tiles, tileInfo: { rows: r5, cols: r5, dpi: 96, format: "pbf", origin: { x: -20037508342787e-6, y: 20037508342787e-6 }, lods: i2, spatialReference: a(h) } };
}
function N(e5) {
  return e5.hasOwnProperty("tileInfo");
}

// node_modules/@arcgis/core/views/2d/engine/vectorTiles/tileInfoUtils.js
var s4 = 1e-6;
function r4(l7, e5) {
  if (l7 === e5) return true;
  if (null == l7 && null != e5) return false;
  if (null != l7 && null == e5) return false;
  if (null == l7 || null == e5) return false;
  if (!l7.spatialReference.equals(e5.spatialReference) || l7.dpi !== e5.dpi) return false;
  const n3 = l7.origin, r5 = e5.origin;
  if (Math.abs(n3.x - r5.x) >= s4 || Math.abs(n3.y - r5.y) >= s4) return false;
  let o4, t4;
  l7.lods[0].scale > e5.lods[0].scale ? (o4 = l7, t4 = e5) : (t4 = l7, o4 = e5);
  for (let i2 = o4.lods[0].scale; i2 >= t4.lods[t4.lods.length - 1].scale - s4; i2 /= 2) if (Math.abs(i2 - t4.lods[0].scale) < s4) return true;
  return false;
}
function o3(s5, r5) {
  if (s5 === r5) return s5;
  if (null == s5 && null != r5) return r5;
  if (null != s5 && null == r5) return s5;
  if (null == s5 || null == r5) return null;
  const o4 = s5.size[0], t4 = s5.format, i2 = s5.dpi, u2 = new j2({ x: s5.origin.x, y: s5.origin.y }), a5 = s5.spatialReference, f3 = s5.lods[0].scale > r5.lods[0].scale ? s5.lods[0] : r5.lods[0], d4 = s5.lods[s5.lods.length - 1].scale <= r5.lods[r5.lods.length - 1].scale ? s5.lods[s5.lods.length - 1] : r5.lods[r5.lods.length - 1], c3 = f3.scale, p4 = f3.resolution, g3 = d4.scale, h4 = [];
  let m4 = c3, y = p4, x3 = 0;
  for (; m4 > g3; ) h4.push(new p({ level: x3, resolution: y, scale: m4 })), x3++, m4 /= 2, y /= 2;
  return new z({ size: [o4, o4], dpi: i2, format: t4 || "pbf", origin: u2, lods: h4, spatialReference: a5 });
}

// node_modules/@arcgis/core/layers/VectorTileLayer.js
var B = class extends l(t2(f2(p2(l2(b2(j3(e3(i(S(f)))))))))) {
  constructor(...e5) {
    super(...e5), this._spriteSourceMap = /* @__PURE__ */ new Map(), this.currentStyleInfo = null, this.isReference = null, this.operationalLayerType = "VectorTileLayer", this.path = null, this.refreshInterval = 0, this.style = null, this.tilemapCache = null, this.type = "vector-tile", this.url = null;
  }
  normalizeCtorArgs(e5, t4) {
    return "string" == typeof e5 ? { url: e5, ...t4 } : e5;
  }
  destroy() {
    var _a;
    if (this.sourceNameToSource) for (const e5 of Object.values(this.sourceNameToSource)) e5 == null ? void 0 : e5.destroy();
    (_a = this.primarySource) == null ? void 0 : _a.destroy(), this._spriteSourceMap.clear();
  }
  async prefetchResources(e5) {
    await this.loadSpriteSource(globalThis.devicePixelRatio || 1, e5);
  }
  load(e5) {
    const r5 = this.loadFromPortal({ supportedTypes: ["Vector Tile Service"], supportsData: false }, e5).catch(a3).then(async () => {
      var _a;
      if (!((_a = this.portalItem) == null ? void 0 : _a.id)) return;
      const r6 = `${this.portalItem.itemCdnUrl}/resources/styles/root.json`;
      (await U(r6, { ...e5, query: { f: "json", ...this.customParameters, token: this.apiKey } })).data && this.read({ url: r6 }, e2(this.portalItem, "portal-item"));
    }).catch(a3).then(() => this._loadStyle(e5));
    return this.addResolvingPromise(r5), Promise.resolve(this);
  }
  get attributionDataUrl() {
    const e5 = this.currentStyleInfo, t4 = (e5 == null ? void 0 : e5.serviceUrl) && I(e5.serviceUrl);
    if (!t4) return null;
    const r5 = this._getDefaultAttribution(t4.path);
    return r5 ? Et(r5, { ...this.customParameters, token: this.apiKey }) : null;
  }
  get capabilities() {
    const e5 = this.primarySource;
    return e5 ? e5.capabilities : { operations: { supportsExportTiles: false, supportsTileMap: false }, exportTiles: null };
  }
  get fullExtent() {
    var _a;
    return ((_a = this.primarySource) == null ? void 0 : _a.fullExtent) || null;
  }
  get initialExtent() {
    var _a;
    return ((_a = this.primarySource) == null ? void 0 : _a.initialExtent) || null;
  }
  get parsedUrl() {
    return this.serviceUrl ? I(this.serviceUrl) : null;
  }
  get serviceUrl() {
    var _a;
    return ((_a = this.currentStyleInfo) == null ? void 0 : _a.serviceUrl) || null;
  }
  get spatialReference() {
    var _a;
    return ((_a = this.tileInfo) == null ? void 0 : _a.spatialReference) ?? null;
  }
  get styleUrl() {
    var _a;
    return ((_a = this.currentStyleInfo) == null ? void 0 : _a.styleUrl) || null;
  }
  writeStyleUrl(e5, t4) {
    e5 && pt(e5) && (e5 = `https:${e5}`);
    const r5 = s3(e5);
    t4.styleUrl = x(e5, r5);
  }
  get tileInfo() {
    var _a;
    const e5 = [];
    for (const r5 in this.sourceNameToSource) e5.push(this.sourceNameToSource[r5]);
    let t4 = ((_a = this.primarySource) == null ? void 0 : _a.tileInfo) || new z();
    if (e5.length > 1) for (let r5 = 0; r5 < e5.length; r5++) r4(t4, e5[r5].tileInfo) && (t4 = o3(t4, e5[r5].tileInfo));
    return t4;
  }
  readTilemapCache(e5, t4) {
    var _a;
    const r5 = (_a = t4.capabilities) == null ? void 0 : _a.includes("Tilemap");
    return r5 ? new T({ layer: this }) : null;
  }
  readVersion(e5, t4) {
    return t4.version ? parseFloat(t4.version) : parseFloat(t4.currentVersion);
  }
  async loadSpriteSource(e5 = 1, t4) {
    var _a, _b;
    if (!this._spriteSourceMap.has(e5)) {
      const r5 = t3().maxTextureSize, i2 = ((_a = this.currentStyleInfo) == null ? void 0 : _a.spriteUrl) ? Et(this.currentStyleInfo.spriteUrl, { ...this.customParameters, token: this.apiKey }) : null, o4 = new n2({ type: "url", spriteUrl: i2, pixelRatio: e5, spriteFormat: (_b = this.currentStyleInfo) == null ? void 0 : _b.spriteFormat }, r5);
      await o4.load(t4), this._spriteSourceMap.set(e5, o4);
    }
    return this._spriteSourceMap.get(e5);
  }
  async setSpriteSource(e5, t4) {
    if (!e5) return null;
    const r5 = t3().maxTextureSize, i2 = e5.spriteUrl, o4 = i2 ? Et(i2, { ...this.customParameters, token: this.apiKey }) : null;
    if (!o4 && "url" === e5.type) return null;
    const s5 = new n2(e5, r5);
    try {
      await s5.load(t4);
      const r6 = e5.pixelRatio || 1;
      return this._spriteSourceMap.clear(), this._spriteSourceMap.set(r6, s5), o4 && this.currentStyleInfo && (this.currentStyleInfo.spriteUrl = o4), this.emit("spriteSource-change", { spriteSource: s5 }), s5;
    } catch (a5) {
      a3(a5);
    }
    return null;
  }
  async loadStyle(e5, t4) {
    var _a;
    const i2 = e5 || this.style || this.url;
    return this._loadingTask && "string" == typeof i2 && this.url === i2 || ((_a = this._loadingTask) == null ? void 0 : _a.abort(), this._loadingTask = d((e6) => (this._spriteSourceMap.clear(), this._getSourceAndStyle(i2, { signal: e6 })), t4)), this._loadingTask.promise;
  }
  getStyleLayerId(e5) {
    return this.styleRepository.getStyleLayerId(e5);
  }
  getStyleLayerIndex(e5) {
    return this.styleRepository.getStyleLayerIndex(e5);
  }
  getPaintProperties(e5) {
    var _a;
    return a((_a = this.styleRepository) == null ? void 0 : _a.getPaintProperties(e5));
  }
  setPaintProperties(e5, t4) {
    const r5 = this.styleRepository.isPainterDataDriven(e5);
    this.styleRepository.setPaintProperties(e5, t4);
    const i2 = this.styleRepository.isPainterDataDriven(e5);
    this.emit("paint-change", { layer: e5, paint: t4, isDataDriven: r5 || i2 });
  }
  getStyleLayer(e5) {
    return a(this.styleRepository.getStyleLayer(e5));
  }
  setStyleLayer(e5, t4) {
    this.styleRepository.setStyleLayer(e5, t4), this.emit("style-layer-change", { layer: e5, index: t4 });
  }
  deleteStyleLayer(e5) {
    this.styleRepository.deleteStyleLayer(e5), this.emit("delete-style-layer", { layer: e5 });
  }
  getLayoutProperties(e5) {
    return a(this.styleRepository.getLayoutProperties(e5));
  }
  setLayoutProperties(e5, t4) {
    this.styleRepository.setLayoutProperties(e5, t4), this.emit("layout-change", { layer: e5, layout: t4 });
  }
  setStyleLayerVisibility(e5, t4) {
    this.styleRepository.setStyleLayerVisibility(e5, t4), this.emit("style-layer-visibility-change", { layer: e5, visibility: t4 });
  }
  getStyleLayerVisibility(e5) {
    return this.styleRepository.getStyleLayerVisibility(e5);
  }
  write(e5, t4) {
    return (t4 == null ? void 0 : t4.origin) && !this.styleUrl ? (t4.messages && t4.messages.push(new s("vectortilelayer:unsupported", `VectorTileLayer (${this.title}, ${this.id}) with style defined by JSON only are not supported`, { layer: this })), null) : super.write(e5, t4);
  }
  getTileUrl(e5, t4, r5) {
    return null;
  }
  async _getSourceAndStyle(e5, t4) {
    if (!e5) throw new Error("invalid style!");
    const r5 = await x2(e5, { ...t4, query: { ...this.customParameters, token: this.apiKey } });
    if ("webp" === r5.spriteFormat) {
      await o2("lossy") || (r5.spriteFormat = "png");
    }
    this._set("currentStyleInfo", { ...r5 }), "string" == typeof e5 ? (this.url = e5, this.style = null) : (this.url = null, this.style = e5), this._set("sourceNameToSource", r5.sourceNameToSource), this._set("primarySource", r5.sourceNameToSource[r5.primarySourceName]), this._set("styleRepository", new l3(r5.style)), this.read(r5.layerDefinition, { origin: "service" }), this.emit("load-style");
  }
  _getDefaultAttribution(e5) {
    const t4 = e5.match(/^https?:\/\/(?:basemaps|basemapsbeta|basemapsdev)(?:-api)?\.arcgis\.com(\/[^/]+)?\/arcgis\/rest\/services\/([^/]+(\/[^/]+)*)\/vectortileserver/i), r5 = ["OpenBasemap_v2", "OpenBasemap_GCS_v2", "OpenStreetMap_v2", "OpenStreetMap_Daylight_v2", "OpenStreetMap_Export_v2", "OpenStreetMap_FTS_v2", "OpenStreetMap_GCS_v2", "World_Basemap", "World_Basemap_v2", "World_Basemap_Export_v2", "World_Basemap_GCS_v2", "World_Basemap_WGS84", "World_Contours_v2", "World_Hillshade_v2"];
    if (!t4) return;
    const i2 = t4[2] && t4[2].toLowerCase();
    if (!i2) return;
    const o4 = t4[1] || "";
    for (const s5 of r5) if (s5.toLowerCase().includes(i2)) return K(`//static.arcgis.com/attribution/Vector${o4}/${s5}`);
  }
  async _loadStyle(e5) {
    var _a;
    return ((_a = this._loadingTask) == null ? void 0 : _a.promise) ?? this.loadStyle(null, e5);
  }
};
r([m({ readOnly: true })], B.prototype, "attributionDataUrl", null), r([m({ type: ["show", "hide"] })], B.prototype, "listMode", void 0), r([m({ json: { read: true, write: true } })], B.prototype, "blendMode", void 0), r([m({ readOnly: true, json: { read: false } })], B.prototype, "capabilities", null), r([m({ readOnly: true })], B.prototype, "currentStyleInfo", void 0), r([m({ json: { read: false }, readOnly: true, type: w })], B.prototype, "fullExtent", null), r([m({ json: { read: false }, readOnly: true, type: w })], B.prototype, "initialExtent", null), r([m({ type: Boolean, json: { read: false, write: { enabled: true, overridePolicy: () => ({ enabled: false }) } } })], B.prototype, "isReference", void 0), r([m({ type: ["VectorTileLayer"] })], B.prototype, "operationalLayerType", void 0), r([m({ readOnly: true })], B.prototype, "parsedUrl", null), r([m({ type: String, json: { origins: { "web-scene": { read: true, write: true } }, read: false } })], B.prototype, "path", void 0), r([m({ type: Number, json: { write: false, origins: { "web-map": { write: false }, "web-scene": { write: false }, "portal-item": { write: false } } } })], B.prototype, "refreshInterval", void 0), r([m()], B.prototype, "style", void 0), r([m({ readOnly: true })], B.prototype, "serviceUrl", null), r([m({ type: g, readOnly: true })], B.prototype, "spatialReference", null), r([m({ readOnly: true })], B.prototype, "styleRepository", void 0), r([m({ readOnly: true })], B.prototype, "sourceNameToSource", void 0), r([m({ readOnly: true })], B.prototype, "primarySource", void 0), r([m({ type: String, readOnly: true, json: { write: { ignoreOrigin: true }, origins: { "web-document": { write: { ignoreOrigin: true, isRequired: true } } } } })], B.prototype, "styleUrl", null), r([r3(["portal-item", "web-document"], "styleUrl")], B.prototype, "writeStyleUrl", null), r([m({ json: { read: false, origins: { service: { read: false } } }, readOnly: true, type: z })], B.prototype, "tileInfo", null), r([m()], B.prototype, "tilemapCache", void 0), r([o("service", "tilemapCache", ["capabilities", "tileInfo"])], B.prototype, "readTilemapCache", null), r([m({ json: { read: false }, readOnly: true, value: "vector-tile" })], B.prototype, "type", void 0), r([m({ json: { origins: { "web-document": { read: { source: "styleUrl" } }, "portal-item": { read: { source: "url" } } }, write: false, read: false } })], B.prototype, "url", void 0), r([m({ readOnly: true })], B.prototype, "version", void 0), r([o("version", ["version", "currentVersion"])], B.prototype, "readVersion", null), B = r([a2("esri.layers.VectorTileLayer")], B);
var A2 = B;
export {
  A2 as default
};
//# sourceMappingURL=VectorTileLayer-SATA2QFX.js.map
