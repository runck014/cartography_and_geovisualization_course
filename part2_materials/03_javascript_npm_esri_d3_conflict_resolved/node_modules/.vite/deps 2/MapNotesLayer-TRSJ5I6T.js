import {
  n
} from "./chunk-CWXFVMMT.js";
import {
  h
} from "./chunk-U4YUBCIE.js";
import "./chunk-JMJOGITH.js";
import {
  R
} from "./chunk-IJO7BOFI.js";
import "./chunk-NGQEHRBA.js";
import {
  Xe
} from "./chunk-ER5KJVHG.js";
import "./chunk-Y24KYRDB.js";
import "./chunk-BF46TBV5.js";
import "./chunk-H4E2VVPD.js";
import "./chunk-CTU2XDPA.js";
import "./chunk-LZ4VG2QF.js";
import "./chunk-GT4YOV7H.js";
import "./chunk-3GYJQZ7U.js";
import "./chunk-LKSPV4ZE.js";
import "./chunk-QB7C6VGC.js";
import "./chunk-TKIFUSBT.js";
import "./chunk-BIXTRT5D.js";
import "./chunk-5OE5J4F6.js";
import "./chunk-RON7HSX6.js";
import "./chunk-3SYUQL4E.js";
import "./chunk-XWTALKKJ.js";
import "./chunk-JWQMRQX4.js";
import "./chunk-24OTECJ5.js";
import "./chunk-EYETIQ6R.js";
import "./chunk-DFLI5RC4.js";
import "./chunk-QYSQ6XPQ.js";
import "./chunk-YYZ2CTYE.js";
import "./chunk-HZRXUNDJ.js";
import "./chunk-XKMN3LJN.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-GGPPKSP2.js";
import "./chunk-EA7CPLTC.js";
import "./chunk-SI5IJ3AZ.js";
import "./chunk-7ZA6GWGF.js";
import "./chunk-JU4Z6UVP.js";
import "./chunk-JHXGQ3AW.js";
import "./chunk-MR727DXB.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-GNY4KZ34.js";
import "./chunk-WPERPIJF.js";
import "./chunk-Q3BBONW3.js";
import "./chunk-5IA763KB.js";
import "./chunk-QKS6PIY6.js";
import "./chunk-R5BTSPWT.js";
import "./chunk-Z2L6EED4.js";
import "./chunk-43W2AR4R.js";
import "./chunk-X5EOLPIE.js";
import "./chunk-VNPGSD2C.js";
import "./chunk-PJALR7VA.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-CE7WVJQV.js";
import "./chunk-LCFK6PEB.js";
import "./chunk-GJTB7YCT.js";
import "./chunk-LQEYS467.js";
import "./chunk-A66MNK5C.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-RCGJPJRB.js";
import "./chunk-5CRXWQ3Y.js";
import "./chunk-G54IOEGF.js";
import "./chunk-EP5G3AVD.js";
import "./chunk-VH245UJV.js";
import "./chunk-WH2FR6UE.js";
import {
  j
} from "./chunk-F3W2DG3D.js";
import {
  l
} from "./chunk-YMJZWW2N.js";
import "./chunk-7Q4JSL7R.js";
import "./chunk-VBJTBJYL.js";
import {
  t
} from "./chunk-ES2OYM5K.js";
import {
  b
} from "./chunk-JXPOROPE.js";
import "./chunk-OPBXQTOC.js";
import "./chunk-DKMSVKV3.js";
import "./chunk-YIIXBP6I.js";
import {
  S
} from "./chunk-LN6VH2LB.js";
import "./chunk-GZFJKWTS.js";
import "./chunk-2DHZIDQK.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-SW3IBIJ7.js";
import "./chunk-E54MA7AH.js";
import "./chunk-6TU4HBID.js";
import "./chunk-SX2OLFE7.js";
import "./chunk-WGIZLWW7.js";
import "./chunk-PUOCGOJB.js";
import "./chunk-XQH2QDB2.js";
import "./chunk-LPNAPHOF.js";
import "./chunk-DBQLTBDH.js";
import {
  y
} from "./chunk-AMH7OVBF.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-LXJGKQ4D.js";
import {
  d as d2
} from "./chunk-VILGTHTP.js";
import "./chunk-ATEWWVHG.js";
import "./chunk-LEOFRCUR.js";
import {
  S as S2,
  d,
  m3,
  y as y2
} from "./chunk-CP4GPQHD.js";
import "./chunk-IZSNXKMJ.js";
import "./chunk-IOKAACTA.js";
import "./chunk-VFTH6C2E.js";
import "./chunk-M5RSIRGD.js";
import "./chunk-D2JPDRZZ.js";
import "./chunk-UYSPJCCV.js";
import "./chunk-SMFCDOAJ.js";
import {
  f
} from "./chunk-2HEBE37N.js";
import "./chunk-5A4G4OVM.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-44C2A72D.js";
import "./chunk-DIKY6MBW.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-GGCWKF4X.js";
import "./chunk-6D5XULXX.js";
import "./chunk-445IB4DS.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import {
  J,
  K as K2,
  V as V2,
  W,
  _
} from "./chunk-H4N5QOMX.js";
import "./chunk-F2LC36UV.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import {
  D,
  I,
  K,
  c,
  m as m2
} from "./chunk-Z2DWZ5IF.js";
import "./chunk-TDZ623HP.js";
import "./chunk-6RLUKSNK.js";
import "./chunk-VEUN2EF3.js";
import "./chunk-UN4ISSP7.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-TKY5RBM3.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import {
  V
} from "./chunk-SIQNRYEG.js";
import "./chunk-TTDEVHSF.js";
import "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-BMGF5ELJ.js";
import "./chunk-JU6MEO4D.js";
import "./chunk-CY5MS6DC.js";
import "./chunk-C6FFJ4QS.js";
import "./chunk-Q4Q32WYV.js";
import {
  w
} from "./chunk-A3J7W53Y.js";
import {
  o
} from "./chunk-HLF5XJSV.js";
import {
  g,
  r as r2
} from "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-Y6AYXNMP.js";
import "./chunk-6YWQXXBX.js";
import {
  s3
} from "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import "./chunk-X7VTUWCX.js";
import "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import {
  m
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a2,
  s4 as s2
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import {
  a,
  e,
  s2 as s
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/layers/MapNotesLayer.js
function B(e2) {
  return "markup" === e2.featureCollectionType || e2.layers.some((e3) => null != e3.layerDefinition.visibilityField || !k(e3));
}
function k({ layerDefinition: e2, featureSet: t2 }) {
  const r3 = e2.geometryType ?? t2.geometryType;
  return $.find((t3) => {
    var _a, _b, _c;
    return r3 === t3.geometryTypeJSON && ((_c = (_b = (_a = e2.drawingInfo) == null ? void 0 : _a.renderer) == null ? void 0 : _b.symbol) == null ? void 0 : _c.type) === t3.identifyingSymbol.type;
  });
}
function z() {
  return new w({ xmin: -180, ymin: -90, xmax: 180, ymax: 90 });
}
var U = new y({ name: "OBJECTID", alias: "OBJECTID", type: "oid", nullable: false, editable: false });
var W2 = new y({ name: "title", alias: "Title", type: "string", nullable: true, editable: true, length: 255 });
var A = class extends h {
  constructor(e2) {
    super(e2), this.visibilityMode = "inherited";
  }
  initialize() {
    for (const e2 of this.graphics) e2.sourceLayer = this.layer;
    this.graphics.on("after-add", (e2) => {
      e2.item.sourceLayer = this.layer;
    }), this.graphics.on("after-remove", (e2) => {
      e2.item.sourceLayer = null;
    });
  }
  get fullExtent() {
    var _a;
    const e2 = (_a = this.layer) == null ? void 0 : _a.spatialReference, t2 = this.fullBounds;
    return e2 ? null == t2 ? V2(z(), e2).geometry : c(t2, e2) : null;
  }
  get fullBounds() {
    var _a;
    const e2 = (_a = this.layer) == null ? void 0 : _a.spatialReference;
    if (!e2) return null;
    const t2 = D();
    return this.graphics.forEach((r3) => {
      const o2 = null != r3.geometry ? V2(r3.geometry, e2).geometry : null;
      null != o2 && m2(t2, "point" === o2.type ? o2 : o2.extent, t2);
    }), I(t2, K) ? null : t2;
  }
  get sublayers() {
    return this.graphics;
  }
};
r([m({ readOnly: true })], A.prototype, "fullExtent", null), r([m({ readOnly: true })], A.prototype, "fullBounds", null), r([m({ readOnly: true })], A.prototype, "sublayers", null), r([m()], A.prototype, "layer", void 0), r([m()], A.prototype, "layerId", void 0), r([m({ readOnly: true })], A.prototype, "visibilityMode", void 0), A = r([a2("esri.layers.MapNotesLayer.MapNotesSublayer")], A);
var $ = [{ geometryType: "polygon", geometryTypeJSON: "esriGeometryPolygon", id: "polygonLayer", layerId: 0, title: "Polygons", identifyingSymbol: new S2().toJSON() }, { geometryType: "polyline", geometryTypeJSON: "esriGeometryPolyline", id: "polylineLayer", layerId: 1, title: "Polylines", identifyingSymbol: new d().toJSON() }, { geometryType: "multipoint", geometryTypeJSON: "esriGeometryMultipoint", id: "multipointLayer", layerId: 2, title: "Multipoints", identifyingSymbol: new y2().toJSON() }, { geometryType: "point", geometryTypeJSON: "esriGeometryPoint", id: "pointLayer", layerId: 3, title: "Points", identifyingSymbol: new y2().toJSON() }, { geometryType: "point", geometryTypeJSON: "esriGeometryPoint", id: "textLayer", layerId: 4, title: "Text", identifyingSymbol: new m3().toJSON() }];
var q = class extends l(t(b(j(S(f))))) {
  constructor(e2) {
    super(e2), this.capabilities = { operations: { supportsMapNotesEditing: true } }, this.featureCollections = null, this.featureCollectionJSON = null, this.featureCollectionType = "notes", this.legendEnabled = false, this.listMode = "hide-children", this.minScale = 0, this.maxScale = 0, this.spatialReference = g.WGS84, this.sublayers = new V($.map((e3) => new A({ id: e3.id, layerId: e3.layerId, title: e3.title, layer: this }))), this.title = "Map Notes", this.type = "map-notes", this.visibilityMode = "inherited";
  }
  readCapabilities(e2, t2, r3) {
    return { operations: { supportsMapNotesEditing: !B(t2) && "portal-item" !== (r3 == null ? void 0 : r3.origin) } };
  }
  readFeatureCollections(e2, t2, o2) {
    if (!B(t2)) return null;
    const i = t2.layers.map((e3) => {
      const t3 = new Xe();
      return t3.read(e3, o2), t3;
    });
    return new V({ items: i });
  }
  readLegacyfeatureCollectionJSON(e2, t2) {
    return B(t2) ? a(t2.featureCollection) : null;
  }
  get fullExtent() {
    var _a;
    const e2 = this.spatialReference, t2 = D();
    if (null != this.sublayers) this.sublayers.forEach(({ fullBounds: e3 }) => null != e3 ? m2(t2, e3, t2) : t2, t2);
    else if ((_a = this.featureCollectionJSON) == null ? void 0 : _a.layers.some((e3) => e3.layerDefinition.extent)) {
      this.featureCollectionJSON.layers.forEach((r3) => {
        const o2 = V2(r3.layerDefinition.extent, e2).geometry;
        null != o2 && m2(t2, o2, t2);
      });
    }
    return I(t2, K) ? V2(z(), e2).geometry : c(t2, e2);
  }
  readMinScale(e2, t2) {
    for (const r3 of t2.layers) if (null != r3.layerDefinition.minScale) return r3.layerDefinition.minScale;
    return 0;
  }
  readMaxScale(e2, t2) {
    for (const r3 of t2.layers) if (null != r3.layerDefinition.maxScale) return r3.layerDefinition.maxScale;
    return 0;
  }
  get multipointLayer() {
    return this._findSublayer("multipointLayer");
  }
  get pointLayer() {
    return this._findSublayer("pointLayer");
  }
  get polygonLayer() {
    return this._findSublayer("polygonLayer");
  }
  get polylineLayer() {
    return this._findSublayer("polylineLayer");
  }
  readSpatialReference(e2, t2) {
    return t2.layers.length ? g.fromJSON(t2.layers[0].layerDefinition.spatialReference) : g.WGS84;
  }
  readSublayers(e2, o2, i) {
    if (B(o2)) return null;
    const l2 = [];
    let a3 = o2.layers.reduce((e3, t2) => Math.max(e3, t2.layerDefinition.id ?? -1), -1) + 1;
    for (const r3 of o2.layers) {
      const { layerDefinition: e3, featureSet: o3 } = r3, i2 = e3.id ?? a3++, n2 = k(r3);
      if (null != n2) {
        const r4 = new A({ id: n2.id, title: e3.name, layerId: i2, layer: this, graphics: o3.features.map(({ geometry: e4, symbol: r5, attributes: o4, popupInfo: i3 }) => d2.fromJSON({ attributes: o4, geometry: e4, symbol: r5, popupTemplate: i3 })) });
        l2.push(r4);
      }
    }
    return new V(l2);
  }
  writeSublayers(e2, t2, r3, i) {
    var _a;
    const { minScale: l2, maxScale: n2 } = this;
    if (null == e2) return;
    const s4 = e2.some((e3) => e3.graphics.length > 0);
    if (!this.capabilities.operations.supportsMapNotesEditing) return void (s4 && ((_a = i == null ? void 0 : i.messages) == null ? void 0 : _a.push(new s("map-notes-layer:editing-not-supported", "New map notes cannot be added to this layer"))));
    const p = [];
    let y3 = this.spatialReference.toJSON();
    e: for (const o2 of e2) for (const e3 of o2.graphics) if (null != e3.geometry) {
      y3 = e3.geometry.spatialReference.toJSON();
      break e;
    }
    for (const o2 of $) {
      const t3 = e2.find((e3) => o2.id === e3.id);
      this._writeMapNoteSublayer(p, t3, o2, l2, n2, y3, i);
    }
    e("featureCollection.layers", p, t2);
  }
  get textLayer() {
    return this._findSublayer("textLayer");
  }
  load(e2) {
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Feature Collection"] }, e2)), Promise.resolve(this);
  }
  read(e2, t2) {
    "featureCollection" in e2 && (e2 = a(e2), Object.assign(e2, e2.featureCollection)), super.read(e2, t2);
  }
  async beforeSave() {
    if (null == this.sublayers) return;
    let e2 = null;
    const t2 = [];
    for (const o2 of this.sublayers) for (const r4 of o2.graphics) if (null != r4.geometry) {
      const o3 = r4.geometry;
      e2 ? s3(o3.spatialReference, e2) || (J(o3.spatialReference, e2) || _() || await W(), r4.geometry = K2(o3, e2)) : e2 = o3.spatialReference, t2.push(r4);
    }
    const r3 = await R(t2.map((e3) => e3.geometry));
    t2.forEach((e3, t3) => e3.geometry = r3[t3]);
  }
  _findSublayer(e2) {
    var _a;
    return null == this.sublayers ? null : ((_a = this.sublayers) == null ? void 0 : _a.find((t2) => t2.id === e2)) ?? null;
  }
  _writeMapNoteSublayer(e2, t2, r3, o2, l2, a3, n2) {
    const s4 = [];
    if (null != t2) {
      for (const e3 of t2.graphics) this._writeMapNote(s4, e3, r3.geometryType, n2);
      this._normalizeObjectIds(s4, U), e2.push({ layerDefinition: { name: t2.title, drawingInfo: { renderer: { type: "simple", symbol: a(r3.identifyingSymbol) } }, id: t2.layerId, geometryType: r3.geometryTypeJSON, minScale: o2, maxScale: l2, objectIdField: "OBJECTID", fields: [U.toJSON(), W2.toJSON()], spatialReference: a3 }, featureSet: { features: s4, geometryType: r3.geometryTypeJSON } });
    }
  }
  _writeMapNote(e2, t2, r3, o2) {
    var _a, _b;
    if (null == t2) return;
    const { geometry: i, symbol: l2, popupTemplate: a3 } = t2;
    if (null == i) return;
    if (i.type !== r3) return void ((_a = o2 == null ? void 0 : o2.messages) == null ? void 0 : _a.push(new s2("map-notes-layer:invalid-geometry-type", `Geometry "${i.type}" cannot be saved in "${r3}" layer`, { graphic: t2 })));
    if (null == l2) return void ((_b = o2 == null ? void 0 : o2.messages) == null ? void 0 : _b.push(new s2("map-notes-layer:no-symbol", "Skipping map notes with no symbol", { graphic: t2 })));
    const s4 = { attributes: { ...t2.attributes }, geometry: i.toJSON(), symbol: l2.toJSON() };
    null != a3 && (s4.popupInfo = a3.toJSON()), e2.push(s4);
  }
  _normalizeObjectIds(e2, t2) {
    const r3 = t2.name;
    let o2 = n(r3, e2) + 1;
    const i = /* @__PURE__ */ new Set();
    for (const l2 of e2) {
      l2.attributes || (l2.attributes = {});
      const { attributes: e3 } = l2;
      (null == e3[r3] || i.has(e3[r3])) && (e3[r3] = o2++), i.add(e3[r3]);
    }
  }
};
r([m({ readOnly: true })], q.prototype, "capabilities", void 0), r([o(["portal-item", "web-map"], "capabilities", ["layers"])], q.prototype, "readCapabilities", null), r([m({ readOnly: true })], q.prototype, "featureCollections", void 0), r([o(["web-map", "portal-item"], "featureCollections", ["layers"])], q.prototype, "readFeatureCollections", null), r([m({ readOnly: true, json: { origins: { "web-map": { write: { enabled: true, target: "featureCollection" } } } } })], q.prototype, "featureCollectionJSON", void 0), r([o(["web-map", "portal-item"], "featureCollectionJSON", ["featureCollection"])], q.prototype, "readLegacyfeatureCollectionJSON", null), r([m({ readOnly: true, json: { read: true, write: { enabled: true, ignoreOrigin: true } } })], q.prototype, "featureCollectionType", void 0), r([m({ readOnly: true })], q.prototype, "fullExtent", null), r([m({ readOnly: true, json: { origins: { "web-map": { write: { target: "featureCollection.showLegend", overridePolicy() {
  return { enabled: null != this.featureCollectionJSON };
} } } } } })], q.prototype, "legendEnabled", void 0), r([m({ type: ["show", "hide", "hide-children"] })], q.prototype, "listMode", void 0), r([m({ type: Number, nonNullable: true, json: { write: false } })], q.prototype, "minScale", void 0), r([o(["web-map", "portal-item"], "minScale", ["layers"])], q.prototype, "readMinScale", null), r([m({ type: Number, nonNullable: true, json: { write: false } })], q.prototype, "maxScale", void 0), r([o(["web-map", "portal-item"], "maxScale", ["layers"])], q.prototype, "readMaxScale", null), r([m({ readOnly: true })], q.prototype, "multipointLayer", null), r([m({ value: "ArcGISFeatureLayer", type: ["ArcGISFeatureLayer"] })], q.prototype, "operationalLayerType", void 0), r([m({ readOnly: true })], q.prototype, "pointLayer", null), r([m({ readOnly: true })], q.prototype, "polygonLayer", null), r([m({ readOnly: true })], q.prototype, "polylineLayer", null), r([m({ type: g })], q.prototype, "spatialReference", void 0), r([o(["web-map", "portal-item"], "spatialReference", ["layers"])], q.prototype, "readSpatialReference", null), r([m({ readOnly: true, json: { origins: { "web-map": { write: { ignoreOrigin: true } } } } })], q.prototype, "sublayers", void 0), r([o("web-map", "sublayers", ["layers"])], q.prototype, "readSublayers", null), r([r2("web-map", "sublayers")], q.prototype, "writeSublayers", null), r([m({ readOnly: true })], q.prototype, "textLayer", null), r([m()], q.prototype, "title", void 0), r([m({ readOnly: true, json: { read: false } })], q.prototype, "type", void 0), q = r([a2("esri.layers.MapNotesLayer")], q);
var H = q;
export {
  H as default
};
//# sourceMappingURL=MapNotesLayer-TRSJ5I6T.js.map
