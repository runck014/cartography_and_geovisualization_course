import {
  D
} from "./chunk-MXN43UDR.js";
import {
  F,
  N,
  O,
  T,
  b,
  d,
  f,
  g as g2,
  l,
  s,
  u,
  v,
  w
} from "./chunk-ZFCZ2Q23.js";
import {
  F as F2,
  K,
  M,
  O as O2,
  R,
  S as S2,
  W,
  b as b2,
  h,
  m as m2,
  p,
  x
} from "./chunk-3UNB76GV.js";
import {
  Z,
  a,
  n as n2,
  r as r2
} from "./chunk-WCAEZENI.js";
import {
  m,
  n,
  n2 as n3
} from "./chunk-MBR7IVUG.js";
import {
  Z as Z2
} from "./chunk-GGPPKSP2.js";
import {
  DateTime
} from "./chunk-Q7TEBZSN.js";
import {
  g
} from "./chunk-L6D73M4D.js";
import {
  S
} from "./chunk-GRW2QIBT.js";
import {
  r
} from "./chunk-PKLD5YJF.js";

// node_modules/@arcgis/core/arcade/featureset/support/errorsupport.js
var t;
!function(e2) {
  e2.NeverReach = "NeverReach", e2.NotImplemented = "NotImplemented", e2.Cancelled = "Cancelled", e2.InvalidStatResponse = "InvalidStatResponse", e2.InvalidRequest = "InvalidRequest", e2.RequestFailed = "RequestFailed", e2.MissingFeatures = "MissingFeatures", e2.AggregationFieldNotFound = "AggregationFieldNotFound", e2.DataElementsNotFound = "DataElementsNotFound";
}(t || (t = {}));
var a2 = { [t.Cancelled]: "Cancelled", [t.InvalidStatResponse]: "Invalid statistics response from service", [t.InvalidRequest]: "Invalid request", [t.RequestFailed]: "Request failed - {reason}", [t.MissingFeatures]: "Missing features", [t.AggregationFieldNotFound]: "Aggregation field not found", [t.DataElementsNotFound]: "Data elements not found on service", [t.NeverReach]: "Encountered unreachable logic", [t.NotImplemented]: "Not implemented" };
var s2 = class _s extends Error {
  constructor(t3, n4) {
    super(r(a2[t3], n4)), this.declaredRootClass = "esri.arcade.featureset.support.featureseterror", Error.captureStackTrace && Error.captureStackTrace(this, _s);
  }
};

// node_modules/@arcgis/core/arcade/featureset/support/cache.js
var a3 = class {
  constructor() {
    this._databaseTypeMetaData = {}, this._layerInfo = {};
  }
  clearDatabaseType(a4) {
    void 0 === this._databaseTypeMetaData[a4] && delete this._databaseTypeMetaData[a4];
  }
  getDatabaseType(a4) {
    return "MUSTBESET" === a4 || void 0 === this._databaseTypeMetaData[a4] ? null : this._databaseTypeMetaData[a4];
  }
  setDatabaseType(a4, e2) {
    this._databaseTypeMetaData[a4] = e2;
  }
  getLayerInfo(a4) {
    return void 0 === this._layerInfo[a4] ? null : this._layerInfo[a4];
  }
  setLayerInfo(a4, e2) {
    this._layerInfo[a4] = e2;
  }
  clearLayerInfo(a4) {
    void 0 !== this._layerInfo[a4] && delete this._layerInfo[a4];
  }
};
a3.applicationCache = null;

// node_modules/@arcgis/core/arcade/featureset/support/sqlUtils.js
function f2(e2, r3) {
  return y(e2 == null ? void 0 : e2.parseTree, r3, e2 == null ? void 0 : e2.parameters);
}
function m3(e2, r3, t3) {
  return y(e2, r3, t3);
}
function p2(e2, t3, a4, s3) {
  const n4 = y(e2.parseTree, l.Standardised, e2.parameters, t3, a4);
  return Z.create(n4, { fieldsIndex: s3, timeZone: e2.timeZone, currentUser: e2.currentUser });
}
function g3(e2, t3, a4 = "AND") {
  return Z.create("((" + f2(e2, l.Standardised) + ")" + a4 + "(" + f2(t3, l.Standardised) + "))", { fieldsIndex: e2.fieldsIndex, timeZone: e2.timeZone, currentUser: e2.currentUser });
}
function h2(e2) {
  return true === e2.delimited ? `"${e2.column.split('"').join('""')}"` : e2.column;
}
function y(e2, u4, l2, d2 = null, f5 = null) {
  let m5, p4, g5, w4;
  switch (e2.type) {
    case "interval":
      return F3(y(e2.value, u4, l2, d2, f5), e2.qualifier, e2.op);
    case "case-expression": {
      let r3 = " CASE ";
      "simple" === e2.format && (r3 += y(e2.operand, u4, l2, d2, f5));
      for (let t3 = 0; t3 < e2.clauses.length; t3++) r3 += " WHEN " + y(e2.clauses[t3].operand, u4, l2, d2, f5) + " THEN " + y(e2.clauses[t3].value, u4, l2, d2, f5);
      return null !== e2.else && (r3 += " ELSE " + y(e2.else, u4, l2, d2, f5)), r3 += " END ", r3;
    }
    case "parameter": {
      const r3 = l2[e2.value.toLowerCase()];
      if ("string" == typeof r3) {
        return "'" + l2[e2.value.toLowerCase()].toString().replaceAll("'", "''") + "'";
      }
      if (f(r3)) return I(r3, u4);
      if (d(r3)) return I(r3, u4);
      if (F(r3)) return A(r3, u4);
      if (g2(r3)) return S3(r3, u4);
      if (T(r3)) return E(r3, u4);
      if (Array.isArray(r3)) {
        const e3 = [];
        for (let i = 0; i < r3.length; i++) "string" == typeof r3[i] ? e3.push("'" + r3[i].toString().replaceAll("'", "''") + "'") : f(r3[i]) || d(r3[i]) ? e3.push(I(r3[i], u4)) : F(r3[i]) ? e3.push(A(r3[i], u4)) : g2(r3[i]) ? e3.push(S3(r3[i], u4)) : T(r3[i]) ? e3.push(E(r3[i], u4)) : e3.push(r3[i].toString());
        return e3;
      }
      return r3.toString();
    }
    case "expression-list":
      p4 = [];
      for (const r3 of e2.value) p4.push(y(r3, u4, l2, d2, f5));
      return p4;
    case "unary-expression":
      return " ( NOT " + y(e2.expr, u4, l2, d2, f5) + " ) ";
    case "binary-expression":
      switch (e2.operator) {
        case "AND":
          return " (" + y(e2.left, u4, l2, d2, f5) + " AND " + y(e2.right, u4, l2, d2, f5) + ") ";
        case "OR":
          return " (" + y(e2.left, u4, l2, d2, f5) + " OR " + y(e2.right, u4, l2, d2, f5) + ") ";
        case "IS":
          if ("null" !== e2.right.type) throw new n2(a.UnsupportedIsRhs);
          return " (" + y(e2.left, u4, l2, d2, f5) + " IS NULL )";
        case "ISNOT":
          if ("null" !== e2.right.type) throw new n2(a.UnsupportedIsRhs);
          return " (" + y(e2.left, u4, l2, d2, f5) + " IS NOT NULL )";
        case "IN":
          return m5 = [], "expression-list" === e2.right.type ? (m5 = y(e2.right, u4, l2, d2, f5), " (" + y(e2.left, u4, l2, d2, f5) + " IN (" + m5.join(",") + ")) ") : (w4 = y(e2.right, u4, l2, d2, f5), Array.isArray(w4) ? " (" + y(e2.left, u4, l2, d2, f5) + " IN (" + w4.join(",") + ")) " : " (" + y(e2.left, u4, l2, d2, f5) + " IN (" + w4 + ")) ");
        case "NOT IN":
          return m5 = [], "expression-list" === e2.right.type ? (m5 = y(e2.right, u4, l2, d2, f5), " (" + y(e2.left, u4, l2, d2, f5) + " NOT IN (" + m5.join(",") + ")) ") : (w4 = y(e2.right, u4, l2, d2, f5), Array.isArray(w4) ? " (" + y(e2.left, u4, l2, d2, f5) + " NOT IN (" + w4.join(",") + ")) " : " (" + y(e2.left, u4, l2, d2, f5) + " NOT IN (" + w4 + ")) ");
        case "BETWEEN":
          return g5 = y(e2.right, u4, l2, d2, f5), " (" + y(e2.left, u4, l2, d2, f5) + " BETWEEN " + g5[0] + " AND " + g5[1] + " ) ";
        case "NOTBETWEEN":
          return g5 = y(e2.right, u4, l2, d2, f5), " (" + y(e2.left, u4, l2, d2, f5) + " NOT BETWEEN " + g5[0] + " AND " + g5[1] + " ) ";
        case "LIKE":
          return "" !== e2.escape ? " (" + y(e2.left, u4, l2, d2, f5) + " LIKE " + y(e2.right, u4, l2, d2, f5) + " ESCAPE '" + e2.escape + "') " : " (" + y(e2.left, u4, l2, d2, f5) + " LIKE " + y(e2.right, u4, l2, d2, f5) + ") ";
        case "NOT LIKE":
          return "" !== e2.escape ? " (" + y(e2.left, u4, l2, d2, f5) + " NOT LIKE " + y(e2.right, u4, l2, d2, f5) + " ESCAPE '" + e2.escape + "') " : " (" + y(e2.left, u4, l2, d2, f5) + " NOT LIKE " + y(e2.right, u4, l2, d2, f5) + ") ";
        case "<>":
        case "<":
        case ">":
        case ">=":
        case "<=":
        case "=":
        case "*":
        case "-":
        case "+":
        case "/":
          return " (" + y(e2.left, u4, l2, d2, f5) + " " + e2.operator + " " + y(e2.right, u4, l2, d2, f5) + ") ";
        case "||":
          return " (" + y(e2.left, u4, l2, d2, f5) + " " + (u4 === l.SqlServer ? "+" : e2.operator) + " " + y(e2.right, u4, l2, d2, f5) + ") ";
      }
      throw new n2(a.UnsupportedOperator, { operator: e2.operator });
    case "null":
      return "null";
    case "boolean":
      return true === e2.value ? "1" : "0";
    case "string":
      return "'" + e2.value.toString().replaceAll("'", "''") + "'";
    case "timestamp":
      return `timestamp '${e2.value}'`;
    case "date":
      return `date '${e2.value}'`;
    case "time":
      return `time '${e2.value}'`;
    case "number":
      return e2.value.toString();
    case "current-time":
      return L(e2.mode, u4);
    case "current-user":
      return "CURRENT_USER";
    case "column-reference":
      return d2 && d2.toLowerCase() === e2.column.toLowerCase() ? "(" + f5 + ")" : h2(e2);
    case "data-type":
      return e2.value;
    case "function": {
      const r3 = y(e2.args, u4, l2, d2, f5);
      return T2(e2.name, r3, u4);
    }
  }
  throw new n2(a.UnsupportedSyntax, { node: e2.type });
}
function T2(e2, t3, a4) {
  switch (e2.toLowerCase().trim()) {
    case "cos":
    case "sin":
    case "tan":
    case "cosh":
    case "tanh":
    case "sinh":
    case "acos":
    case "asin":
    case "atan":
    case "floor":
    case "log10":
    case "log":
    case "abs":
      if (1 !== t3.length) throw new n2(a.InvalidFunctionParameters, { function: e2.toLowerCase().trim() });
      return `${e2.toUpperCase().trim()}(${t3[0]})`;
    case "ceiling":
    case "ceil":
      if (1 !== t3.length) throw new n2(a.InvalidFunctionParameters, { function: "ceiling" });
      switch (a4) {
        case l.Standardised:
        case l.StandardisedNoInterval:
      }
      return "CEILING(" + t3[0] + ")";
    case "mod":
    case "power":
    case "nullif":
      if (2 !== t3.length) throw new n2(a.InvalidFunctionParameters, { function: e2.toLowerCase().trim() });
      return `${e2.toUpperCase().trim()}(${t3[0]},${t3[1]})`;
    case "round":
      if (2 === t3.length) return "ROUND(" + t3[0] + "," + t3[1] + ")";
      if (1 === t3.length) return "ROUND(" + t3[0] + ")";
      throw new n2(a.InvalidFunctionParameters, { function: "round" });
    case "truncate":
      if (t3.length < 1 || t3.length > 2) throw new n2(a.InvalidFunctionParameters, { function: "truncate" });
      return a4 === l.SqlServer ? "ROUND(" + t3[0] + (1 === t3.length ? "0" : "," + t3[1]) + ",1)" : "TRUNCATE(" + t3[0] + (1 === t3.length ? ")" : "," + t3[1] + ")");
    case "char_length":
    case "len":
      if (1 !== t3.length) throw new n2(a.InvalidFunctionParameters, { function: "char_length" });
      switch (a4) {
        case l.SqlServer:
          return "LEN(" + t3[0] + ")";
        case l.Oracle:
          return "LENGTH(" + t3[0] + ")";
        default:
          return "CHAR_LENGTH(" + t3[0] + ")";
      }
    case "coalesce":
    case "concat": {
      if (t3.length < 1) throw new n2(a.InvalidFunctionParameters, { function: e2.toLowerCase() });
      let r3 = e2.toUpperCase().trim() + "(";
      for (let e3 = 0; e3 < t3.length; e3++) 0 !== e3 && (r3 += ","), r3 += t3[e3];
      return r3 += ")", r3;
    }
    case "lower":
    case "lcase":
      if (1 !== t3.length) throw new n2(a.InvalidFunctionParameters, { function: "lower" });
      return "LOWER(" + t3[0] + ")";
    case "upper":
    case "ucase":
      if (1 !== t3.length) throw new n2(a.InvalidFunctionParameters, { function: "upper" });
      return "UPPER(" + t3[0] + ")";
    case "substring": {
      let e3 = "";
      switch (a4) {
        case l.Oracle:
          return e3 = "SUBSTR(" + t3[0] + "," + t3[1], 3 === t3.length && (e3 += "," + t3[2]), e3 += ")", e3;
        case l.SqlServer:
          return e3 = 3 === t3.length ? "SUBSTRING(" + t3[0] + "," + t3[1] + "," + t3[2] + ")" : "SUBSTRING(" + t3[0] + ",  " + t3[1] + ", LEN(" + t3[0] + ") - " + t3[1] + ")", e3;
        default:
          return e3 = "SUBSTRING(" + t3[0] + " FROM " + t3[1], 3 === t3.length && (e3 += " FOR " + t3[2]), e3 += ")", e3;
      }
    }
    case "extract":
      return "EXTRACT(" + t3[0].replaceAll("'", "") + " FROM " + t3[1] + ")";
    case "cast": {
      let e3 = "";
      switch (a4) {
        case l.Oracle:
          switch (t3[1].type) {
            case "date":
              e3 = "DATE";
              break;
            case "float":
              e3 = "DOUBLE";
              break;
            case "integer":
              e3 = "INTEGER";
              break;
            case "real":
              e3 = "REAL";
              break;
            case "smallint":
              e3 = "SMALLINT";
              break;
            case "timestamp":
              e3 = "TIMESTAMP";
              break;
            case "varchar":
              e3 = "VARCHAR(" + t3[1].size.toString() + ")";
          }
          return `CAST(${t3[0]} AS ${e3})`;
        case l.Postgres:
          switch (t3[1].type) {
            case "date":
              e3 = "DATE";
              break;
            case "float":
              e3 = "DOUBLE PRECISION";
              break;
            case "integer":
              e3 = "INT";
              break;
            case "real":
              e3 = "REAL";
              break;
            case "smallint":
              e3 = "SMALLINT";
              break;
            case "timestamp":
              e3 = "TIMESTAMP";
              break;
            case "varchar":
              e3 = "VARCHAR(" + t3[1].size.toString() + ")";
          }
          return `CAST(${t3[0]} AS ${e3})`;
        case l.SqlServer:
          switch (t3[1].type) {
            case "date":
              e3 = "DATE";
              break;
            case "float":
              e3 = "FLOAT";
              break;
            case "integer":
              e3 = "INT";
              break;
            case "real":
              e3 = "REAL";
              break;
            case "smallint":
              e3 = "SMALLINT";
              break;
            case "timestamp":
              e3 = "DATETIME";
              break;
            case "varchar":
              e3 = "VARCHAR(" + t3[1].size.toString() + ")";
          }
          return `CAST(${t3[0]} AS ${e3})`;
        default:
          switch (t3[1].type) {
            case "date":
              e3 = "DATE";
              break;
            case "float":
              e3 = "FLOAT";
              break;
            case "integer":
              e3 = "INTEGER";
              break;
            case "real":
              e3 = "REAL";
              break;
            case "smallint":
              e3 = "SMALLINT";
              break;
            case "timestamp":
              e3 = "TIMESTAMP";
              break;
            case "varchar":
              e3 = "VARCHAR(" + t3[1].size.toString() + ")";
          }
          return `CAST(${t3[0]} AS ${e3})`;
      }
    }
  }
  throw new n2(a.InvalidFunctionParameters, { function: e2 });
}
function S3(e2, t3) {
  const a4 = e2.toDateTime(), s3 = 0 === a4.hour && 0 === a4.minute && 0 === a4.second && 0 === a4.millisecond;
  switch (t3) {
    case l.FILEGDB:
    case l.Standardised:
    case l.StandardisedNoInterval:
      return s3 ? `date '${a4.toFormat("yyyy-LL-dd")}'` : `timestamp '${a4.toFormat("yyyy-LL-dd HH:mm:ss")}'`;
    case l.Oracle:
      return s3 ? `TO_DATE('${a4.toFormat("yyyy-LL-dd")}','YYYY-MM-DD')` : `TO_DATE('${a4.toFormat("yyyy-LL-dd HH:mm:ss")}','YYYY-MM-DD HH24:MI:SS')`;
    case l.SqlServer:
      return `'${a4.toFormat(s3 ? "yyyy-LL-dd" : "yyyy-LL-dd HH:mm:ss")}'`;
    case l.PGDB:
      return `#${a4.toFormat(s3 ? "LL-dd-yyyy" : "LL-dd-yyyy HH:mm:ss")}#`;
    case l.Postgres:
      return `TIMESTAMP '${a4.toFormat(s3 ? "yyyy-LL-dd" : "yyyy-LL-dd HH:mm:ss")}'`;
    default:
      return `timestamp '${a4.toFormat("yyyy-LL-dd HH:mm:ss")}'`;
  }
}
function E(e2, t3) {
  switch (t3) {
    case l.FILEGDB:
    case l.Standardised:
    case l.StandardisedNoInterval:
      return e2.toSQLWithKeyword();
    case l.Oracle:
      return `TO_DATE('${e2.toFormat("Y-MM-DD")}'`;
    case l.SqlServer:
      return `'${e2.toFormat("Y-MM-DD")}'`;
    case l.PGDB:
      return `#${e2.toFormat("Y-MM-DD")}#`;
    case l.Postgres:
      return `TIMESTAMP '${e2.toFormat("Y-MM-DD")}'`;
    default:
      return e2.toSQLWithKeyword();
  }
}
function A(e2, t3) {
  switch (e2 instanceof n3 && (e2 = e2.toStorageString()), t3) {
    case l.Oracle:
      return `TO_DATE('${e2}', 'HH24:MI:SS')`;
    case l.SqlServer:
      return `'${e2}'`;
    case l.FILEGDB:
    case l.Standardised:
    case l.StandardisedNoInterval:
    case l.Postgres:
    default:
      return `time '${e2}'`;
  }
}
function I(r3, t3) {
  return S3(m.dateTimeToArcadeDate(d(r3) ? r3 : DateTime.fromJSDate(r3)), t3);
}
function L(e2, t3) {
  switch (t3) {
    case l.FILEGDB:
    case l.Standardised:
    case l.StandardisedNoInterval:
    case l.Oracle:
    case l.PGDB:
    default:
      return "date" === e2 ? "CURRENT_DATE" : "time" === e2 ? "CURRENT_TIME" : "CURRENT_TIMESTAMP";
    case l.SqlServer:
      return "date" === e2 ? "CAST(GETDATE() AS DATE)" : "time" === e2 ? "CAST(GETDATE() AS TIME)" : "GETDATE()";
    case l.Postgres:
      return "date" === e2 ? "CURRENT_DATE" : "time" === e2 ? "LOCALTIME" : "CURRENT_TIMESTAMP";
  }
}
function w2(e2, r3, t3 = {}) {
  const a4 = {}, s3 = {}, n4 = { esriFieldTypeSmallInteger: "integer", esriFieldTypeInteger: "integer", esriFieldTypeBigInteger: "integer", esriFieldTypeSingle: "double", esriFieldTypeDouble: "double", esriFieldTypeString: "string", esriFieldTypeTimeOnly: "time-only", esriFieldTypeDateOnly: "date-only", esriFieldTypeTimestampOffset: "timestamp-offset", esriFieldTypeDate: "date", esriFieldTypeOID: "integer", esriFieldTypeGUID: "guid", esriFieldTypeGlobalID: "guid", oid: "integer", long: "integer", "small-integer": "integer", integer: "integer", "big-integer": "integer", single: "double", "time-only": "time-only", "date-only": "date-only", "timestamp-offset": "timestemp-offset", double: "double", date: "date", guid: "guid", "global-id": "guid", string: "string" };
  for (const c2 of r3) {
    const e3 = c2.type ? n4[c2.type] : void 0;
    a4[c2.name.toLowerCase()] = void 0 === e3 ? "" : e3;
  }
  for (const c2 in t3) {
    const e3 = n4[t3[c2]];
    s3[c2.toLowerCase()] = void 0 === e3 ? "" : e3;
  }
  switch (N2(a4, e2.parseTree, e2.parameters, s3)) {
    case "double":
      return "double";
    case "integer":
      return "integer";
    case "date":
      return "date";
    case "date-only":
      return "date-only";
    case "time-only":
      return "time-only";
    case "timestamp-offset":
      return "timestamp-offset";
    case "string":
      return "string";
    case "global-id":
    case "guid":
      return "guid";
  }
  return "";
}
function N2(e2, r3, a4, u4) {
  var _a, _b, _c, _d, _e;
  let l2;
  switch (r3.type) {
    case "interval":
      return "integer";
    case "case-expression": {
      const t3 = [];
      if ("simple" === r3.format) {
        for (let s3 = 0; s3 < r3.clauses.length; s3++) t3.push(N2(e2, r3.clauses[s3].value, a4, u4));
        null !== r3.else && t3.push(N2(e2, r3.else, a4, u4));
      } else {
        for (let s3 = 0; s3 < r3.clauses.length; s3++) t3.push(N2(e2, r3.clauses[s3].value, a4, u4));
        null !== r3.else && t3.push(N2(e2, r3.else, a4, u4));
      }
      return v2(t3);
    }
    case "parameter": {
      const e3 = u4[r3.value.toLowerCase()];
      if (void 0 === e3 && a4) {
        const e4 = a4[r3.value.toLowerCase()];
        if (void 0 === e4) return "";
        if (null === e4) return "";
        if ("string" == typeof e4 || e4 instanceof String) return "string";
        if ("boolean" == typeof e4) return "boolean";
        if (f(e4)) return "date";
        if (g2(e4)) return "date";
        if (T(e4)) return "date-only";
        if (F(e4)) return "time-only";
        if ("number" == typeof e4) return e4 % 1 == 0 ? "integer" : "double";
      }
      return void 0 === e3 ? "" : e3;
    }
    case "expression-list": {
      const t3 = [];
      for (const s3 of r3.value) t3.push(N2(e2, s3, a4, u4));
      return t3;
    }
    case "unary-expression":
      return "boolean";
    case "binary-expression":
      switch (r3.operator) {
        case "AND":
        case "OR":
        case "IN":
        case "NOT IN":
        case "BETWEEN":
        case "NOTBETWEEN":
        case "LIKE":
        case "NOT LIKE":
        case "<>":
        case "<":
        case ">":
        case ">=":
        case "<=":
        case "=":
          return "boolean";
        case "IS":
        case "ISNOT":
          if ("null" !== r3.right.type) throw new n2(a.UnsupportedIsRhs);
          return "boolean";
        case "*":
        case "-":
        case "+":
        case "/":
          return v2([N2(e2, r3.left, a4, u4), N2(e2, r3.right, a4, u4)]);
        case "||":
          return "string";
        default:
          throw new n2(a.UnsupportedOperator, { operator: r3.operator });
      }
    case "null":
      return "";
    case "boolean":
      return "boolean";
    case "string":
      return "string";
    case "number":
      return null === r3.value ? "" : r3.value % 1 == 0 ? "integer" : "double";
    case "date":
      return "date";
    case "timestamp":
      return r3.withtimezone ? "timestamp-offset" : "date";
    case "time":
      return "time-only";
    case "current-time":
      return "time" === r3.mode ? "time-only" : "date";
    case "current-user":
      return "string";
    case "column-reference": {
      const t3 = e2[r3.column.toLowerCase()];
      return void 0 === t3 ? "" : t3;
    }
    case "function":
      switch (r3.name.toLowerCase()) {
        case "cast":
          switch (((_b = (_a = r3.args) == null ? void 0 : _a.value[1]) == null ? void 0 : _b.value.type) ?? "") {
            case "integer":
            case "smallint":
              return "integer";
            case "real":
            case "float":
              return "double";
            case "date":
            case "timestamp":
              return true === ((_e = (_d = (_c = r3.args) == null ? void 0 : _c.value[1]) == null ? void 0 : _d.value) == null ? void 0 : _e.withtimezone) ? "timestamp-offset" : "date";
            case "time":
              return "time-only";
            case "varchar":
              return "string";
            default:
              return "";
          }
        case "position":
        case "extract":
        case "char_length":
        case "mod":
          return "integer";
        case "round":
          if (l2 = N2(e2, r3.args, a4, u4), Array.isArray(l2)) {
            if (l2.length <= 0) return "double";
            l2 = l2[0];
          }
          return l2;
        case "sign":
          return "integer";
        case "ceiling":
        case "floor":
        case "abs":
          return l2 = N2(e2, r3.args, a4, u4), Array.isArray(l2) && (l2 = v2(l2)), "integer" === l2 || "double" === l2 ? l2 : "double";
        case "area":
        case "length":
        case "log":
        case "log10":
        case "sin":
        case "cos":
        case "tan":
        case "asin":
        case "acos":
        case "atan":
        case "cosh":
        case "sinh":
        case "tanh":
        case "power":
          return "double";
        case "substring":
        case "trim":
        case "concat":
        case "lower":
        case "upper":
          return "string";
        case "truncate":
          return "double";
        case "nullif":
        case "coalesce":
          return l2 = N2(e2, r3.args, a4, u4), Array.isArray(l2) ? l2.length > 0 ? l2[0] : "" : l2;
      }
      return "";
  }
  throw new n2(a.UnsupportedSyntax, { node: r3.type });
}
var b3 = { boolean: 1, string: 2, integer: 3, double: 4, date: 5 };
function v2(e2) {
  if (e2) {
    let r3 = "";
    for (const t3 of e2) "" !== t3 && (r3 = "" === r3 || b3[r3] < b3[t3] ? t3 : r3);
    return r3;
  }
  return "";
}
function D2(e2, r3) {
  return R2(e2.parseTree, r3);
}
function O3(e2) {
  return "column-reference" === (e2 == null ? void 0 : e2.parseTree.type);
}
function R2(e2, r3) {
  if (null == e2) return false;
  switch (e2.type) {
    case "when-clause":
      return R2(e2.operand, r3) || R2(e2.value, r3);
    case "case-expression":
      for (const t3 of e2.clauses) if (R2(t3, r3)) return true;
      return !("simple" !== e2.format || !R2(e2.operand, r3)) || !(null === e2.else || !R2(e2.else, r3));
    case "parameter":
    case "null":
    case "boolean":
    case "date":
    case "timestamp":
    case "time":
    case "string":
    case "number":
      return false;
    case "expression-list":
      for (const t3 of e2.value) if (R2(t3, r3)) return true;
      return false;
    case "unary-expression":
      return R2(e2.expr, r3);
    case "binary-expression":
      return R2(e2.left, r3) || R2(e2.right, r3);
    case "column-reference":
      return r3.toLowerCase() === e2.column.toLowerCase();
    case "function":
      return R2(e2.args, r3);
  }
  return false;
}
function C(e2) {
  let r3 = "";
  return r3 += e2.period.toUpperCase(), r3;
}
function F3(e2, r3, t3) {
  let a4 = "";
  return a4 = "interval-period" === r3.type ? C(r3) : C(r3.start) + " TO " + C(r3.end), "INTERVAL " + t3 + " " + e2 + " " + a4;
}

// node_modules/@arcgis/core/arcade/featureset/support/FeatureSetIterator.js
var e = class {
  constructor(t3, e2) {
    this._lastId = -1, this._progress = e2, this._parent = t3;
  }
  reset() {
    this._lastId = -1;
  }
  async nextBatchAsArcadeFeatures(e2, s3) {
    const n4 = await this.nextBatch(e2);
    return null === n4 ? n4 : n4.map((e3) => D.createFromGraphicLikeObject(e3.geometry, e3.attributes, this._parent, s3));
  }
  nextBatch(t3) {
    if (null !== this._parent._mainSetInUse) return this._parent._mainSetInUse.then((e3) => this.nextBatch(t3), (e3) => this.nextBatch(t3));
    const e2 = { returnpromise: null, hasset: false }, s3 = [];
    return e2.returnpromise = new Promise((n4, a4) => {
      this._parent._getSet(this._progress).then((r3) => {
        const i = r3._known;
        let h3 = i.length - 1;
        if ("GETPAGES" === i[i.length - 1] && (h3 -= 1), this._lastId + t3 > h3 && i.length > 0 && "GETPAGES" === i[i.length - 1]) return void this._parent._expandPagedSet(r3, this._parent._maxQueryRate(), 0, 0, this._progress).then((s4) => {
          e2.hasset = true, this._parent._mainSetInUse = null, this.nextBatch(t3).then(n4, a4);
        }, (t4) => {
          e2.hasset = true, this._parent._mainSetInUse = null, a4(t4);
        });
        const _ = r3._candidates;
        if (h3 >= this._lastId + t3 || 0 === _.length) {
          for (let e3 = 0; e3 < t3; e3++) {
            const t4 = e3 + this._lastId + 1;
            if (t4 >= i.length) break;
            s3[e3] = i[t4];
          }
          return this._lastId += s3.length, 0 === s3.length && (e2.hasset = true, this._parent._mainSetInUse = null, n4([])), void this._parent._getFeatureBatch(s3, this._progress).then((t4) => {
            e2.hasset = true, this._parent._mainSetInUse = null, n4(t4);
          }, (t4) => {
            e2.hasset = true, this._parent._mainSetInUse = null, a4(t4);
          });
        }
        this._parent._refineSetBlock(r3, this._parent._maxProcessingRate(), this._progress).then(() => {
          e2.hasset = true, this._parent._mainSetInUse = null, this.nextBatch(t3).then(n4, a4);
        }, (t4) => {
          e2.hasset = true, this._parent._mainSetInUse = null, a4(t4);
        });
      }, (t4) => {
        e2.hasset = true, this._parent._mainSetInUse = null, a4(t4);
      });
    }), false === e2.hasset && (this._parent._mainSetInUse = e2.returnpromise, e2.hasset = true), e2.returnpromise;
  }
  next() {
    if (null !== this._parent._mainSetInUse) return this._parent._mainSetInUse.then((t4) => this.next(), (t4) => this.next());
    const t3 = { returnpromise: null, hasset: false };
    return t3.returnpromise = new Promise((e2, s3) => {
      this._parent._getSet(this._progress).then((n4) => {
        const a4 = n4._known;
        if (this._lastId < a4.length - 1) "GETPAGES" === a4[this._lastId + 1] ? this._parent._expandPagedSet(n4, this._parent._maxQueryRate(), 0, 0, this._progress).then((e3) => (t3.hasset = true, this._parent._mainSetInUse = null, this.next())).then(e2, s3) : (this._lastId += 1, this._parent._getFeature(n4, a4[this._lastId], this._progress).then((s4) => {
          t3.hasset = true, this._parent._mainSetInUse = null, e2(s4);
        }, (e3) => {
          t3.hasset = true, this._parent._mainSetInUse = null, s3(e3);
        }));
        else {
          n4._candidates.length > 0 ? this._parent._refineSetBlock(n4, this._parent._maxProcessingRate(), this._progress).then(() => {
            t3.hasset = true, this._parent._mainSetInUse = null, this.next().then(e2, s3);
          }, (e3) => {
            t3.hasset = true, this._parent._mainSetInUse = null, s3(e3);
          }) : (t3.hasset = true, this._parent._mainSetInUse = null, e2(null));
        }
      }, (e3) => {
        t3.hasset = true, this._parent._mainSetInUse = null, s3(e3);
      });
    }), false === t3.hasset && (this._parent._mainSetInUse = t3.returnpromise, t3.hasset = true), t3.returnpromise;
  }
  async count() {
    if (-1 !== this._parent._totalCount) return this._parent._totalCount;
    const t3 = await this._parent._getSet(this._progress), e2 = await this._refineAllSets(t3);
    return this._parent._totalCount = e2._known.length, this._parent._totalCount;
  }
  async _refineAllSets(t3) {
    if (t3._known.length > 0 && "GETPAGES" === t3._known[t3._known.length - 1]) return await this._parent._expandPagedSet(t3, this._parent._maxQueryRate(), 0, 1, this._progress), this._refineAllSets(t3);
    if (t3._candidates.length > 0) {
      if ("GETPAGES" === t3._known[t3._candidates.length - 1]) return await this._parent._expandPagedSet(t3, this._parent._maxQueryRate(), 0, 2, this._progress), this._refineAllSets(t3);
      const e2 = await this._parent._refineSetBlock(t3, this._parent._maxProcessingRate(), this._progress);
      return e2._candidates.length > 0 ? this._refineAllSets(e2) : e2;
    }
    return t3;
  }
};

// node_modules/@arcgis/core/arcade/featureset/support/IdSet.js
var t2 = class {
  constructor(t3, s3, e2, i) {
    this._lastFetchedIndex = 0, this._ordered = false, this.pagesDefinition = null, this._candidates = t3, this._known = s3, this._ordered = e2, this.pagesDefinition = i;
  }
};

// node_modules/@arcgis/core/arcade/featureset/support/stats.js
function u2(t3) {
  return t3 = +t3, isFinite(t3) ? t3 - t3 % 1 || (t3 < 0 ? -0 : 0 === t3 ? t3 : 0) : t3;
}
function f3(t3) {
  let n4 = 0;
  for (let e2 = 0; e2 < t3.length; e2++) n4 += t3[e2];
  return n4 / t3.length;
}
function m4(t3) {
  const n4 = f3(t3);
  let e2 = 0;
  for (let r3 = 0; r3 < t3.length; r3++) e2 += (n4 - t3[r3]) ** 2;
  return e2 / (t3.length - 1);
}
function g4(t3) {
  let n4 = 0;
  for (let e2 = 0; e2 < t3.length; e2++) n4 += t3[e2];
  return n4;
}
function w3(t3) {
  switch (t3.toLowerCase()) {
    case "distinct":
      return "distinct";
    case "avg":
    case "mean":
      return "avg";
    case "min":
      return "min";
    case "sum":
      return "sum";
    case "max":
      return "max";
    case "stdev":
    case "stddev":
      return "stddev";
    case "var":
    case "variance":
      return "var";
    case "count":
      return "count";
  }
  return "";
}
async function v3(t3, n4, e2) {
  const r3 = await O4(t3, n4, e2, true);
  return 0 === r3.length ? null : Math.min.apply(Math, r3);
}
async function y2(t3, n4, e2) {
  const r3 = await O4(t3, n4, e2, true);
  return 0 === r3.length ? null : Math.max.apply(Math, r3);
}
async function M2(t3, n4, e2) {
  let r3 = "";
  n4 && !O3(n4) && (r3 = w2(n4, t3.fields));
  const a4 = await O4(t3, n4, e2, true);
  if (0 === a4.length) return null;
  const i = f3(a4);
  return null === i ? i : "integer" === r3 ? u2(i) : i;
}
async function x2(t3, n4, e2) {
  const r3 = await O4(t3, n4, e2, true);
  return 0 === r3.length ? null : m4(r3);
}
async function T3(t3, n4, e2) {
  const r3 = await O4(t3, n4, e2, true);
  return 0 === r3.length ? null : Math.sqrt(m4(r3));
}
async function k(t3, n4, e2) {
  const r3 = await O4(t3, n4, e2, true);
  return 0 === r3.length ? null : g4(r3);
}
async function q(t3, n4) {
  return t3.iterator(n4).count();
}
async function O4(e2, r3, a4, c2 = false) {
  const s3 = e2.iterator(a4), u4 = [], f5 = { ticker: 0 };
  let h3 = await s3.next();
  for (; null !== h3; ) {
    if (f5.ticker++, a4.aborted) throw new s2(t.Cancelled);
    f5.ticker % 100 == 0 && (f5.ticker = 0, await new Promise((t3) => {
      setTimeout(t3, 0);
    }));
    const e3 = r3 == null ? void 0 : r3.calculateValue(h3);
    null === e3 ? false === c2 && (u4[u4.length] = e3) : u4[u4.length] = e3 instanceof n || e3 instanceof n3 ? e3.toNumber() : e3 instanceof r2 ? e3.toMilliseconds() : e3, h3 = await s3.next();
  }
  return u4;
}
async function S4(e2, r3, a4 = 1e3, c2 = null) {
  const s3 = e2.iterator(c2), u4 = [], f5 = {}, h3 = { ticker: 0 };
  let m5 = await s3.next();
  for (; null !== m5; ) {
    if (h3.ticker++, c2 == null ? void 0 : c2.aborted) throw new s2(t.Cancelled);
    h3.ticker % 100 == 0 && (h3.ticker = 0, await new Promise((t3) => {
      setTimeout(t3, 0);
    }));
    const e3 = r3 == null ? void 0 : r3.calculateValue(m5);
    let g5 = e3;
    if (e3 instanceof n ? g5 = "!!DATEONLY!!-" + e3.toString() : e3 instanceof r2 ? g5 = "!!TSOFFSETONLY!!-" + e3.toString() : e3 instanceof n3 ? g5 = "!!TIMEONLY!!-" + e3.toString() : e3 instanceof Date && (g5 = "!!DATE!!-" + e3.toString()), null != e3 && void 0 === f5[g5] && (u4.push(e3), f5[g5] = 1), u4.length >= a4 && -1 !== a4) return u4;
    m5 = await s3.next();
  }
  return u4;
}

// node_modules/@arcgis/core/arcade/featureset/support/FeatureSet.js
var C2 = class _C {
  constructor(e2) {
    this.recentlyUsedQueries = null, this.featureSetQueryInterceptor = null, this._idstates = [], this._parent = null, this._wset = null, this._mainSetInUse = null, this._maxProcessing = 200, this._maxQuery = 500, this._totalCount = -1, this._databaseType = l.NotEvaluated, this._databaseTypeProbed = null, this.declaredRootClass = "esri.arcade.featureset.support.FeatureSet", this._featureCache = /* @__PURE__ */ Object.create(null), this.typeIdField = null, this.types = null, this.subtypeField = null, this.subtypes = null, this.fields = null, this.geometryType = "", this.objectIdField = "", this.globalIdField = "", this.spatialReference = null, this.hasM = false, this.hasZ = false, this._transparent = false, this.loaded = false, this._loadPromise = null, this._fieldsIndex = null, this.fsetInfo = null, (e2 == null ? void 0 : e2.lrucache) && (this.recentlyUsedQueries = e2.lrucache), (e2 == null ? void 0 : e2.interceptor) && (this.featureSetQueryInterceptor = e2.interceptor);
  }
  optimisePagingFeatureQueries(e2) {
    this._parent && this._parent.optimisePagingFeatureQueries(e2);
  }
  _hasMemorySource() {
    return true;
  }
  prop(e2, t3) {
    return void 0 === t3 ? this[e2] : (void 0 !== this[e2] && (this[e2] = t3), this);
  }
  end() {
    return null !== this._parent && true === this._parent._transparent ? this._parent.end() : this._parent;
  }
  _ensureLoaded() {
    return this.load();
  }
  load() {
    return null === this._loadPromise && (this._loadPromise = this.loadImpl()), this._loadPromise;
  }
  async loadImpl() {
    var _a, _b;
    return true === ((_a = this._parent) == null ? void 0 : _a.loaded) ? (this._initialiseFeatureSet(), this) : (await ((_b = this._parent) == null ? void 0 : _b.load()), this._initialiseFeatureSet(), this);
  }
  _initialiseFeatureSet() {
    null !== this._parent ? (this.fields = this._parent.fields.slice(), this.geometryType = this._parent.geometryType, this.objectIdField = this._parent.objectIdField, this.globalIdField = this._parent.globalIdField, this.spatialReference = this._parent.spatialReference, this.hasM = this._parent.hasM, this.hasZ = this._parent.hasZ, this.typeIdField = this._parent.typeIdField, this.types = this._parent.types, this.subtypeField = this._parent.subtypeField, this.subtypes = this._parent.subtypes) : (this.fields = [], this.typeIdField = "", this.subtypeField = "", this.objectIdField = "", this.globalIdField = "", this.spatialReference = new g({ wkid: 4326 }), this.geometryType = N.point);
  }
  getField(e2, t3) {
    let n4;
    return (t3 = t3 || this.fields) && (e2 = e2.toLowerCase(), t3.some((t4) => (t4 && t4.name.toLowerCase() === e2 && (n4 = t4), !!n4))), n4;
  }
  getFieldsIndex() {
    return null === this._fieldsIndex && (this._fieldsIndex = Z2.fromLayer({ timeInfo: this.timeInfo, editFieldsInfo: this.editFieldsInfo, dateFieldsTimeZone: this.dateFieldsTimeZone, datesInUnknownTimezone: this.datesInUnknownTimezone, fields: this.fields })), this._fieldsIndex;
  }
  _maxProcessingRate() {
    return null !== this._parent ? Math.min(this._maxProcessing, this._parent._maxProcessingRate()) : Math.min(this._maxProcessing, this._maxQueryRate());
  }
  _maxQueryRate() {
    return null !== this._parent ? Math.max(this._maxQuery, this._parent._maxQueryRate()) : this._maxQuery;
  }
  _checkCancelled(e2) {
    if (null != e2 && e2.aborted) throw new s2(t.Cancelled);
  }
  nativeCapabilities() {
    return this._parent.nativeCapabilities();
  }
  async _canDoAggregates(e2, t3, n4, s3, i) {
    return null !== this._parent && this._parent._canDoAggregates(e2, t3, n4, s3, i);
  }
  async _getAggregatePagesDataSourceDefinition(e2, s3, i, a4, r3, l2, u4) {
    if (null === this._parent) throw new s2(t.NeverReach);
    return this._parent._getAggregatePagesDataSourceDefinition(e2, s3, i, a4, r3, l2, u4);
  }
  async _getAgregagtePhysicalPage(e2, s3, i) {
    if (null === this._parent) throw new s2(t.NeverReach);
    return this._parent._getAgregagtePhysicalPage(e2, s3, i);
  }
  async databaseType() {
    if (this._databaseType === l.NotEvaluated) {
      if (null !== a3.applicationCache) {
        const t3 = a3.applicationCache.getDatabaseType(this._cacheableFeatureSetSourceKey());
        if (null !== t3) return t3;
      }
      if (null !== this._databaseTypeProbed) return this._databaseTypeProbed;
      try {
        this._databaseTypeProbed = this._getDatabaseTypeImpl(), null !== a3.applicationCache && a3.applicationCache.setDatabaseType(this._cacheableFeatureSetSourceKey(), this._databaseTypeProbed);
      } catch (t3) {
        throw null !== a3.applicationCache && a3.applicationCache.clearDatabaseType(this._cacheableFeatureSetSourceKey()), t3;
      }
      return this._databaseTypeProbed;
    }
    return this._databaseType;
  }
  async _getDatabaseTypeImpl() {
    const e2 = [{ thetype: l.SqlServer, testwhere: "(CAST( '2015-01-01' as DATETIME) = CAST( '2015-01-01' as DATETIME)) AND OBJECTID<0" }, { thetype: l.Oracle, testwhere: "(TO_DATE('2003-11-18','YYYY-MM-DD') = TO_DATE('2003-11-18','YYYY-MM-DD')) AND OBJECTID<0" }, { thetype: l.StandardisedNoInterval, testwhere: "(date '2015-01-01 10:10:10' = date '2015-01-01 10:10:10') AND OBJECTID<0" }];
    for (const t3 of e2) {
      if (true === await this._runDatabaseProbe(t3.testwhere)) return t3.thetype;
    }
    return l.StandardisedNoInterval;
  }
  _cacheableFeatureSetSourceKey() {
    return "MUSTBESET";
  }
  async _runDatabaseProbe(e2) {
    if (null !== this._parent) return this._parent._runDatabaseProbe(e2);
    throw new s2(t.NotImplemented);
  }
  isTable() {
    var _a;
    return ((_a = this._parent) == null ? void 0 : _a.isTable()) ?? false;
  }
  _featureFromCache(e2) {
    if (void 0 !== this._featureCache[e2]) return this._featureCache[e2];
  }
  _isInFeatureSet(e2) {
    return s.Unknown;
  }
  _getSet(e2) {
    throw new s2(t.NotImplemented);
  }
  async _getFeature(e2, s3, i) {
    if (this._checkCancelled(i), void 0 !== this._featureFromCache(s3)) return this._featureFromCache(s3);
    if (await this._getFeatures(e2, s3, this._maxProcessingRate(), i), this._checkCancelled(i), void 0 !== this._featureFromCache(s3)) return this._featureFromCache(s3);
    throw new s2(t.MissingFeatures);
  }
  async _getFeatureBatch(e2, t3) {
    this._checkCancelled(t3);
    const n4 = new t2([], e2, false, null), s3 = [];
    await this._getFeatures(n4, -1, e2.length, t3), this._checkCancelled(t3);
    for (const i of e2) void 0 !== this._featureFromCache(i) && s3.push(this._featureFromCache(i));
    return s3;
  }
  async _getFeatures(e2, t3, n4, s3) {
    return "success";
  }
  _getFilteredSet(e2, s3, i, a4, r3) {
    throw new s2(t.NotImplemented);
  }
  async _refineSetBlock(e2, t3, n4) {
    if (true === this._checkIfNeedToExpandCandidatePage(e2, this._maxQueryRate())) return await this._expandPagedSet(e2, this._maxQueryRate(), 0, 0, n4), this._refineSetBlock(e2, t3, n4);
    this._checkCancelled(n4);
    const s3 = e2._candidates.length;
    this._refineKnowns(e2, t3);
    let i = s3 - e2._candidates.length;
    if (0 === e2._candidates.length) return e2;
    if (i >= t3) return e2;
    if (await this._refineIfParentKnown(e2, t3 - i, n4), this._checkCancelled(n4), this._refineKnowns(e2, t3 - i), i = s3 - e2._candidates.length, i < t3 && e2._candidates.length > 0) {
      const s4 = t3 - i, a4 = this._prepareFetchAndRefineSet(e2._candidates);
      return await this._fetchAndRefineFeatures(a4, a4.length > s4 ? s4 : e2._candidates.length, n4), this._checkCancelled(n4), this._refineKnowns(e2, t3 - i), e2;
    }
    return e2;
  }
  _fetchAndRefineFeatures(e2, t3, n4) {
    return null;
  }
  _prepareFetchAndRefineSet(e2) {
    const t3 = [];
    for (let n4 = 0; n4 < e2.length; n4++) this._isPhysicalFeature(e2[n4]) && t3.push(e2[n4]);
    return t3;
  }
  _isPhysicalFeature(e2) {
    return null === this._parent || this._parent._isPhysicalFeature(e2);
  }
  _refineKnowns(e2, t3) {
    let n4 = 0, s3 = null;
    const i = [];
    t3 = this._maxQueryRate();
    for (let a4 = 0; a4 < e2._candidates.length && "GETPAGES" !== e2._candidates[a4]; a4++) {
      let r3 = false;
      const u4 = this._candidateIdTransform(e2._candidates[a4]);
      u4 !== e2._candidates[a4] && (r3 = true);
      const h3 = this._isInFeatureSet(u4);
      if (h3 === s.InFeatureSet) true === r3 ? e2._known.includes(u4) || (e2._known.push(u4), n4 += 1) : (e2._known.push(e2._candidates[a4]), n4 += 1), null === s3 ? s3 = { start: a4, end: a4 } : s3.end === a4 - 1 ? s3.end = a4 : (i.push(s3), s3 = { start: a4, end: a4 });
      else if (h3 === s.NotInFeatureSet) null === s3 ? s3 = { start: a4, end: a4 } : s3.end === a4 - 1 ? s3.end = a4 : (i.push(s3), s3 = { start: a4, end: a4 }), n4 += 1;
      else if (h3 === s.Unknown && (n4 += 1, true === e2._ordered)) break;
      if (n4 >= t3) break;
    }
    null !== s3 && i.push(s3);
    for (let a4 = i.length - 1; a4 >= 0; a4--) e2._candidates.splice(i[a4].start, i[a4].end - i[a4].start + 1);
  }
  _refineIfParentKnown(e2, t3, n4) {
    const s3 = new t2([], [], e2._ordered, null);
    return s3._candidates = e2._candidates.slice(), this._parent._refineSetBlock(s3, t3, n4);
  }
  _candidateIdTransform(e2) {
    return this._parent._candidateIdTransform(e2);
  }
  _checkIfNeedToExpandKnownPage(e2, t3) {
    if (null === e2.pagesDefinition) return false;
    let n4 = 0;
    for (let s3 = e2._lastFetchedIndex; s3 < e2._known.length; s3++) {
      if ("GETPAGES" === e2._known[s3]) return true;
      if (void 0 === this._featureCache[e2._known[s3]] && (n4 += 1, n4 >= t3)) break;
    }
    return false;
  }
  _checkIfNeedToExpandCandidatePage(e2, t3) {
    if (null === e2.pagesDefinition) return false;
    let n4 = 0;
    for (let s3 = 0; s3 < e2._candidates.length; s3++) {
      if ("GETPAGES" === e2._candidates[s3]) return true;
      if (n4 += 1, n4 >= t3) break;
    }
    return false;
  }
  async _expandPagedSet(e2, s3, i, a4, r3) {
    if (null === this._parent) throw new s2(t.NotImplemented);
    return this._parent._expandPagedSet(e2, s3, i, a4, r3);
  }
  async _expandPagedSetFeatureSet(e2, t3, n4, s3, i) {
    if (e2._known.length > 0 && "GETPAGES" === e2._known[e2._known.length - 1] && (s3 = 1), 0 === s3 && e2._candidates.length > 0 && "GETPAGES" === e2._candidates[e2._candidates.length - 1] && (s3 = 2), 0 === s3) return "finished";
    const a4 = await this._getPage(e2, s3, i);
    return n4 + a4 < t3 ? this._expandPagedSet(e2, t3, n4 + a4, 0, i) : "success";
  }
  async _getPage(e2, t3, n4) {
    const s3 = 1 === t3 ? e2._known : e2._candidates;
    if (e2.pagesDefinition.internal.set.length > e2.pagesDefinition.resultOffset || true === e2.pagesDefinition.internal.fullyResolved) {
      s3.length = s3.length - 1;
      let t4 = 0;
      for (let i = 0; i < e2.pagesDefinition.resultRecordCount && !(e2.pagesDefinition.resultOffset + i >= e2.pagesDefinition.internal.set.length); i++) s3[s3.length] = e2.pagesDefinition.internal.set[e2.pagesDefinition.resultOffset + i], t4++;
      e2.pagesDefinition.resultOffset += t4;
      let n5 = false;
      return true === e2.pagesDefinition.internal.fullyResolved && e2.pagesDefinition.internal.set.length <= e2.pagesDefinition.resultOffset && (n5 = true), false === n5 && s3.push("GETPAGES"), t4;
    }
    return await this._getPhysicalPage(e2, t3, n4), this._getPage(e2, t3, n4);
  }
  _getPhysicalPage(e2, t3, n4) {
    return null;
  }
  _clonePageDefinition(e2) {
    return null === this._parent ? null : this._parent._clonePageDefinition(e2);
  }
  _first(e2) {
    return this.iterator(e2).next();
  }
  first(e2) {
    return this._first(e2);
  }
  async calculateStatistic(e2, t3, n4, s3) {
    await this._ensureLoaded();
    let i = await this._stat(e2, t3, "", null, null, n4, s3);
    return false === i.calculated && (i = await this._manualStat(e2, t3, n4, s3)), i.result;
  }
  async _manualStat(e2, t3, n4, s3) {
    let i = null;
    switch (e2.toLowerCase()) {
      case "count":
        return i = await q(this, s3), { calculated: true, result: i };
      case "distinct":
        return i = await S4(this, t3, n4, s3), { calculated: true, result: i };
      case "avg":
      case "mean":
        return i = await M2(this, t3, s3), { calculated: true, result: i };
      case "stdev":
        return i = await T3(this, t3, s3), { calculated: true, result: i };
      case "variance":
        return i = await x2(this, t3, s3), { calculated: true, result: i };
      case "sum":
        return i = await k(this, t3, s3), { calculated: true, result: i };
      case "min":
        return i = await v3(this, t3, s3), { calculated: true, result: i };
      case "max":
        return i = await y2(this, t3, s3), { calculated: true, result: i };
      default:
        return { calculated: true, result: 0 };
    }
  }
  async _stat(e2, t3, n4, s3, i, a4, r3) {
    const l2 = await this._parent._stat(e2, t3, n4, s3, i, a4, r3);
    return false === l2.calculated ? null === i && "" === n4 && null === s3 ? this._manualStat(e2, t3, a4, r3) : { calculated: false } : l2;
  }
  _unionAllGeomSelf(e2) {
    const t3 = this.iterator(this._defaultTracker(e2)), n4 = [];
    return new Promise((e3, s3) => {
      this._unionShapeInBatches(n4, t3, e3, s3);
    });
  }
  _unionAllGeom(e2) {
    return new Promise((t3, n4) => {
      const s3 = this.iterator(this._defaultTracker(e2)), i = [];
      this._unionShapeInBatches(i, s3, t3, n4);
    });
  }
  _unionShapeInBatches(e2, t3, n4, s3) {
    t3.next().then((i) => {
      try {
        null !== i && null !== i.geometry && e2.push(i.geometry), e2.length > 30 || null === i && e2.length > 1 ? b2(e2).then((a4) => {
          try {
            null === i ? n4(a4) : (e2 = [a4], this._unionShapeInBatches(e2, t3, n4, s3));
          } catch (r3) {
            s3(r3);
          }
        }, s3) : null === i ? 1 === e2.length ? n4(e2[0]) : n4(null) : this._unionShapeInBatches(e2, t3, n4, s3);
      } catch (a4) {
        s3(a4);
      }
    }, s3);
  }
  iterator(e2) {
    return new e(this, e2);
  }
  intersection(e2, t3 = false) {
    return _C._featuresetFunctions.intersection.bind(this)(e2, t3);
  }
  difference(e2, t3 = false, n4 = true) {
    return _C._featuresetFunctions.difference.bind(this)(e2, t3, n4);
  }
  symmetricDifference(e2, t3 = false, n4 = true) {
    return _C._featuresetFunctions.symmetricDifference.bind(this)(e2, t3, n4);
  }
  morphShape(e2, t3, n4 = "unknown", s3 = null) {
    return _C._featuresetFunctions.morphShape.bind(this)(e2, t3, n4, s3);
  }
  morphShapeAndAttributes(e2, t3, n4 = "unknown") {
    return _C._featuresetFunctions.morphShapeAndAttributes.bind(this)(e2, t3, n4);
  }
  union(e2, t3 = false) {
    return _C._featuresetFunctions.union.bind(this)(e2, t3);
  }
  intersects(e2) {
    return _C._featuresetFunctions.intersects.bind(this)(e2);
  }
  envelopeIntersects(e2) {
    return _C._featuresetFunctions.envelopeIntersects.bind(this)(e2);
  }
  contains(e2) {
    return _C._featuresetFunctions.contains.bind(this)(e2);
  }
  overlaps(e2) {
    return _C._featuresetFunctions.overlaps.bind(this)(e2);
  }
  relate(e2, t3) {
    return _C._featuresetFunctions.relate.bind(this)(e2, t3);
  }
  within(e2) {
    return _C._featuresetFunctions.within.bind(this)(e2);
  }
  touches(e2) {
    return _C._featuresetFunctions.touches.bind(this)(e2);
  }
  top(e2) {
    return _C._featuresetFunctions.top.bind(this)(e2);
  }
  crosses(e2) {
    return _C._featuresetFunctions.crosses.bind(this)(e2);
  }
  buffer(e2, t3, n4, s3 = true) {
    return _C._featuresetFunctions.buffer.bind(this)(e2, t3, n4, s3);
  }
  filter(e2, t3 = null) {
    return _C._featuresetFunctions.filter.bind(this)(e2, t3);
  }
  orderBy(e2) {
    return _C._featuresetFunctions.orderBy.bind(this)(e2);
  }
  dissolve(e2, t3) {
    return _C._featuresetFunctions.dissolve.bind(this)(e2, t3);
  }
  groupby(e2, t3) {
    return _C._featuresetFunctions.groupby.bind(this)(e2, t3);
  }
  reduce(e2, t3 = null, n4) {
    return new Promise((s3, i) => {
      this._reduceImpl(this.iterator(this._defaultTracker(n4)), e2, t3, 0, s3, i, 0);
    });
  }
  _reduceImpl(e2, t3, n4, s3, i, a4, r3) {
    try {
      if (++r3 > 1e3) return void setTimeout(() => {
        r3 = 0, this._reduceImpl(e2, t3, n4, s3, i, a4, r3);
      });
      e2.next().then((l2) => {
        try {
          if (null === l2) i(n4);
          else {
            const u4 = t3(n4, l2, s3, this);
            S(u4) ? u4.then((n5) => {
              this._reduceImpl(e2, t3, n5, s3 + 1, i, a4, r3);
            }, a4) : this._reduceImpl(e2, t3, u4, s3 + 1, i, a4, r3);
          }
        } catch (u4) {
          a4(u4);
        }
      }, a4);
    } catch (l2) {
      a4(l2);
    }
  }
  removeField(e2) {
    return _C._featuresetFunctions.removeField.bind(this)(e2);
  }
  addField(e2, t3, n4 = null) {
    return _C._featuresetFunctions.addField.bind(this)(e2, t3, n4);
  }
  sumArea(e2, t3 = false, n4) {
    const s3 = O(e2);
    return this.reduce((e3, n5) => null === n5.geometry ? 0 : t3 ? K(n5.geometry, s3).then((t4) => e3 + t4) : W(n5.geometry, s3).then((t4) => e3 + t4), 0, n4);
  }
  sumLength(e2, t3 = false, n4) {
    const s3 = b(e2);
    return this.reduce((e3, n5) => null === n5.geometry ? 0 : t3 ? M(n5.geometry, s3).then((t4) => e3 + t4) : F2(n5.geometry, s3).then((t4) => e3 + t4), 0, n4);
  }
  async distinct(e2, t3 = 1e3, n4 = null, s3) {
    await this.load();
    const i = Z.create(e2, { fieldsIndex: this.getFieldsIndex(), timeZone: this.dateFieldsTimeZoneDefaultUTC });
    return v4(i, n4), this.calculateStatistic("distinct", i, t3, this._defaultTracker(s3));
  }
  async min(e2, t3 = null, n4) {
    await this.load();
    const s3 = Z.create(e2, { fieldsIndex: this.getFieldsIndex(), timeZone: this.dateFieldsTimeZoneDefaultUTC });
    return v4(s3, t3), this.calculateStatistic("min", s3, -1, this._defaultTracker(n4));
  }
  async max(e2, t3 = null, n4) {
    await this.load();
    const s3 = Z.create(e2, { fieldsIndex: this.getFieldsIndex(), timeZone: this.dateFieldsTimeZoneDefaultUTC });
    return v4(s3, t3), this.calculateStatistic("max", s3, -1, this._defaultTracker(n4));
  }
  async avg(e2, t3 = null, n4) {
    await this.load();
    const s3 = Z.create(e2, { fieldsIndex: this.getFieldsIndex(), timeZone: this.dateFieldsTimeZoneDefaultUTC });
    return v4(s3, t3), this.calculateStatistic("avg", s3, -1, this._defaultTracker(n4));
  }
  async sum(e2, t3 = null, n4) {
    await this.load();
    const s3 = Z.create(e2, { fieldsIndex: this.getFieldsIndex(), timeZone: this.dateFieldsTimeZoneDefaultUTC });
    return v4(s3, t3), this.calculateStatistic("sum", s3, -1, this._defaultTracker(n4));
  }
  async stdev(e2, t3 = null, n4) {
    await this.load();
    const s3 = Z.create(e2, { fieldsIndex: this.getFieldsIndex(), timeZone: this.dateFieldsTimeZoneDefaultUTC });
    return v4(s3, t3), this.calculateStatistic("stdev", s3, -1, this._defaultTracker(n4));
  }
  async variance(e2, t3 = null, n4) {
    await this.load();
    const s3 = Z.create(e2, { fieldsIndex: this.getFieldsIndex(), timeZone: this.dateFieldsTimeZoneDefaultUTC });
    return v4(s3, t3), this.calculateStatistic("variance", s3, -1, this._defaultTracker(n4));
  }
  async count(e2) {
    return await this.load(), this.calculateStatistic("count", Z.create("1", { fieldsIndex: this.getFieldsIndex(), timeZone: this.dateFieldsTimeZoneDefaultUTC }), -1, this._defaultTracker(e2));
  }
  _defaultTracker(e2) {
    return e2 ?? { aborted: false };
  }
  forEach(e2, t3) {
    return new Promise((n4, s3) => {
      this._forEachImpl(this.iterator(this._defaultTracker(t3)), e2, this, n4, s3, 0);
    });
  }
  _forEachImpl(e2, t3, n4, s3, i, a4) {
    try {
      if (++a4 > 1e3) return void setTimeout(() => {
        a4 = 0, this._forEachImpl(e2, t3, n4, s3, i, a4);
      }, 0);
      e2.next().then((r3) => {
        try {
          if (null === r3) s3(n4);
          else {
            const l2 = t3(r3);
            null == l2 ? this._forEachImpl(e2, t3, n4, s3, i, a4) : S(l2) ? l2.then(() => {
              try {
                this._forEachImpl(e2, t3, n4, s3, i, a4);
              } catch (r4) {
                i(r4);
              }
            }, i) : this._forEachImpl(e2, t3, n4, s3, i, a4);
          }
        } catch (l2) {
          i(l2);
        }
      }, i);
    } catch (r3) {
      i(r3);
    }
  }
  convertToJSON(e2) {
    const t3 = { layerDefinition: { geometryType: this.geometryType, fields: [] }, featureSet: { features: [], geometryType: this.geometryType } };
    for (let n4 = 0; n4 < this.fields.length; n4++) t3.layerDefinition.fields.push(u(this.fields[n4]));
    return this.reduce((e3, n4) => {
      var _a;
      const s3 = { geometry: (_a = n4.geometry) == null ? void 0 : _a.toJSON(), attributes: {} };
      for (const t4 in n4.attributes) s3.attributes[t4] = n4.attributes[t4];
      return t3.featureSet.features.push(s3), 1;
    }, 0, e2).then(() => t3);
  }
  castToText(e2 = false) {
    return "object, FeatureSet";
  }
  queryAttachments(e2, t3, n4, s3, i) {
    return this._parent.queryAttachments(e2, t3, n4, s3, i);
  }
  serviceUrl() {
    return this._parent.serviceUrl();
  }
  subtypeMetaData() {
    return this.subtypeField && this.subtypes ? { subtypeField: this.subtypeField, subtypes: this.subtypes ? this.subtypes.map((e2) => ({ name: e2.name, code: e2.code })) : [] } : this.typeIdField ? { subtypeField: this.typeIdField, subtypes: this.types ? this.types.map((e2) => ({ name: e2.name, code: e2.id })) : [] } : null;
  }
  relationshipMetaData() {
    return this._parent.relationshipMetaData();
  }
  get gdbVersion() {
    return this._parent ? this._parent.gdbVersion : "";
  }
  schema() {
    const e2 = [];
    for (const t3 of this.fields) e2.push(u(t3));
    return { objectIdField: this.objectIdField, globalIdField: this.globalIdField, geometryType: void 0 === w[this.geometryType] ? "esriGeometryNull" : w[this.geometryType], fields: e2 };
  }
  async convertToText(e2, t3) {
    if ("schema" === e2) return await this._ensureLoaded(), JSON.stringify(this.schema());
    if ("featureset" === e2) {
      await this._ensureLoaded();
      const e3 = [];
      await this.reduce((t4, n5) => {
        const s3 = { geometry: n5.geometry ? n5.geometry.toJSON() : null, attributes: n5.attributes };
        return null !== s3.geometry && s3.geometry.spatialReference && delete s3.geometry.spatialReference, e3.push(s3), 1;
      }, 0, t3);
      const n4 = this.schema();
      return n4.features = e3, n4.spatialReference = this.spatialReference.toJSON(), JSON.stringify(n4);
    }
    return this.castToText();
  }
  getFeatureByObjectId(e2, t3) {
    return this._parent.getFeatureByObjectId(e2, t3);
  }
  getOwningSystemUrl() {
    return this._parent.getOwningSystemUrl();
  }
  getIdentityUser() {
    return this._parent.getIdentityUser();
  }
  getRootFeatureSet() {
    return null !== this._parent ? this._parent.getRootFeatureSet() : this;
  }
  getDataSourceFeatureSet() {
    return null !== this._parent ? this._parent.getDataSourceFeatureSet() : this;
  }
  castAsJson(e2 = null) {
    return "keeptype" === (e2 == null ? void 0 : e2.featureset) ? this : "none" === (e2 == null ? void 0 : e2.featureset) ? null : { type: "FeatureSet" };
  }
  async castAsJsonAsync(e2 = null, t3 = null) {
    var _a;
    if ("keeptype" === (t3 == null ? void 0 : t3.featureset)) return this;
    if ("schema" === (t3 == null ? void 0 : t3.featureset)) return await this._ensureLoaded(), JSON.parse(JSON.stringify(this.schema()));
    if ("none" === (t3 == null ? void 0 : t3.featureset)) return null;
    await this._ensureLoaded();
    const n4 = [];
    await this.reduce((e3, s4) => {
      const i = { geometry: s4.geometry ? true === (t3 == null ? void 0 : t3.keepGeometryType) ? s4.geometry : s4.geometry.toJSON() : null, attributes: s4.attributes };
      return null !== i.geometry && i.geometry.spatialReference && true !== (t3 == null ? void 0 : t3.keepGeometryType) && delete i.geometry.spatialReference, n4.push(i), 1;
    }, 0, e2);
    const s3 = this.schema();
    return s3.features = n4, s3.spatialReference = true === (t3 == null ? void 0 : t3.keepGeometryType) ? this.spatialReference : (_a = this.spatialReference) == null ? void 0 : _a.toJSON(), s3;
  }
  fieldTimeZone(e2) {
    return this.getFieldsIndex().getTimeZone(e2);
  }
  get preferredTimeZone() {
    var _a;
    return ((_a = this._parent) == null ? void 0 : _a.preferredTimeZone) ?? null;
  }
  get dateFieldsTimeZone() {
    var _a;
    return ((_a = this._parent) == null ? void 0 : _a.dateFieldsTimeZone) ?? null;
  }
  get dateFieldsTimeZoneDefaultUTC() {
    if (this.datesInUnknownTimezone) return "unknown";
    const e2 = this.dateFieldsTimeZone ?? "UTC";
    return "" === e2 ? "UTC" : e2;
  }
  get datesInUnknownTimezone() {
    return this._parent.datesInUnknownTimezone;
  }
  get editFieldsInfo() {
    var _a;
    return ((_a = this._parent) == null ? void 0 : _a.editFieldsInfo) ?? null;
  }
  get timeInfo() {
    var _a;
    return ((_a = this._parent) == null ? void 0 : _a.timeInfo) ?? null;
  }
  set featureSetInfo(e2) {
    this.fsetInfo = e2;
  }
  async getFeatureSetInfo() {
    var _a;
    return this.fsetInfo ?? await ((_a = this._parent) == null ? void 0 : _a.getFeatureSetInfo()) ?? null;
  }
};
function v4(e2, t3) {
  if (null !== t3) {
    const n4 = {};
    for (const e3 in t3) n4[e3.toLowerCase()] = t3[e3];
    e2.parameters = n4;
  }
}
C2._featuresetFunctions = {};

// node_modules/@arcgis/core/arcade/featureset/sources/Empty.js
var u3 = class extends C2 {
  constructor(e2) {
    super(e2), this.declaredClass = "esri.layers.featureset.sources.Empty", this._maxProcessing = 1e3, this._wset = new t2([], [], false, null), this._parent = e2.parentfeatureset, this._databaseType = l.Standardised;
  }
  async _getSet() {
    return this._wset;
  }
  optimisePagingFeatureQueries() {
  }
  _isInFeatureSet() {
    return s.NotInFeatureSet;
  }
  async _getFeature() {
    throw new s2(t.NeverReach);
  }
  async queryAttachments() {
    return [];
  }
  async _getFeatures() {
    return "success";
  }
  _featureFromCache() {
    return null;
  }
  async _fetchAndRefineFeatures() {
    throw new s2(t.NeverReach);
  }
  async _getFilteredSet() {
    return new t2([], [], false, null);
  }
  _stat(e2, t3, r3, s3, a4, n4, u4) {
    return this._manualStat(e2, t3, n4, u4);
  }
  async _canDoAggregates() {
    return false;
  }
};

// node_modules/@arcgis/core/arcade/featureset/actions/SpatialFilter.js
var f4 = class _f extends C2 {
  constructor(e2) {
    super(e2), this._relation = "", this._relationGeom = null, this._relationString = "", this.declaredClass = "esri.arcade.featureset.actions.SpatialFilter", this._relationString = e2.relationString, this._parent = e2.parentfeatureset, this._maxProcessing = 40, this._relation = e2.relation, this._relationGeom = e2.relationGeom;
  }
  async _getSet(e2) {
    if (null === this._wset) {
      await this._ensureLoaded();
      const t3 = await this._parent._getFilteredSet("esriSpatialRelRelation" !== this._relation ? this._relation : this._relation + ":" + this._relationString, this._relationGeom, null, null, e2);
      return this._checkCancelled(e2), this._wset = new t2(t3._candidates.slice(), t3._known.slice(), t3._ordered, this._clonePageDefinition(t3.pagesDefinition)), this._wset;
    }
    return this._wset;
  }
  _isInFeatureSet(e2) {
    let t3 = this._parent._isInFeatureSet(e2);
    return t3 === s.NotInFeatureSet ? t3 : (t3 = this._idstates[e2], void 0 === t3 ? s.Unknown : t3);
  }
  _getFeature(e2, t3, i) {
    return this._parent._getFeature(e2, t3, i);
  }
  _getFeatures(e2, t3, i, r3) {
    return this._parent._getFeatures(e2, t3, i, r3);
  }
  _featureFromCache(e2) {
    return this._parent._featureFromCache(e2);
  }
  async executeSpatialRelationTest(e2) {
    if (null === e2.geometry) return false;
    switch (this._relation) {
      case "esriSpatialRelEnvelopeIntersects":
        return h(v(this._relationGeom), v(e2.geometry));
      case "esriSpatialRelIntersects":
        return h(this._relationGeom, e2.geometry);
      case "esriSpatialRelContains":
        return p(this._relationGeom, e2.geometry);
      case "esriSpatialRelOverlaps":
        return O2(this._relationGeom, e2.geometry);
      case "esriSpatialRelWithin":
        return x(this._relationGeom, e2.geometry);
      case "esriSpatialRelTouches":
        return S2(this._relationGeom, e2.geometry);
      case "esriSpatialRelCrosses":
        return m2(this._relationGeom, e2.geometry);
      case "esriSpatialRelRelation":
        return R(this._relationGeom, e2.geometry, this._relationString ?? "");
    }
  }
  async _fetchAndRefineFeatures(e2, t3, i) {
    var _a;
    const r3 = new t2([], e2, false, null), s3 = Math.min(t3, e2.length);
    await ((_a = this._parent) == null ? void 0 : _a._getFeatures(r3, -1, s3, i)), this._checkCancelled(i);
    const l2 = [];
    for (let n4 = 0; n4 < s3; n4++) {
      const t4 = this._parent._featureFromCache(e2[n4]);
      l2.push(await this.executeSpatialRelationTest(t4));
    }
    for (let n4 = 0; n4 < t3; n4++) true === l2[n4] ? this._idstates[e2[n4]] = s.InFeatureSet : this._idstates[e2[n4]] = s.NotInFeatureSet;
    return "success";
  }
  async _getFilteredSet(e2, t3, i, r3, a4) {
    await this._ensureLoaded();
    const s3 = await this._parent._getFilteredSet("esriSpatialRelRelation" !== this._relation ? this._relation : this._relation + ":" + this._relationString, this._relationGeom, i, r3, a4);
    let l2;
    return this._checkCancelled(a4), l2 = null !== t3 ? new t2(s3._candidates.slice().concat(s3._known.slice()), [], s3._ordered, this._clonePageDefinition(s3.pagesDefinition)) : new t2(s3._candidates.slice(), s3._known.slice(), s3._ordered, this._clonePageDefinition(s3.pagesDefinition)), l2;
  }
  async _stat(e2, t3, i, r3, n4, a4, s3) {
    if ("" !== i) return { calculated: false };
    const l2 = await this._parent._stat(e2, t3, "esriSpatialRelRelation" !== this._relation ? this._relation : this._relation + ":" + this._relationString, this._relationGeom, n4, a4, s3);
    return false === l2.calculated ? null === n4 && "" === i && null === r3 ? this._manualStat(e2, t3, a4, s3) : { calculated: false } : l2;
  }
  async _canDoAggregates(e2, t3, i, r3, n4) {
    return "" === i && null === r3 && (null !== this._parent && this._parent._canDoAggregates(e2, t3, "esriSpatialRelRelation" !== this._relation ? this._relation : this._relation + ":" + this._relationString, this._relationGeom, n4));
  }
  async _getAggregatePagesDataSourceDefinition(e2, r3, n4, a4, s3, l2, o) {
    if (null === this._parent) throw new s2(t.NeverReach);
    return this._parent._getAggregatePagesDataSourceDefinition(e2, r3, "esriSpatialRelRelation" !== this._relation ? this._relation : this._relation + ":" + this._relationString, this._relationGeom, s3, l2, o);
  }
  static registerAction() {
    C2._featuresetFunctions.intersects = function(t3) {
      return null == t3 ? new u3({ parentfeatureset: this }) : new _f({ parentfeatureset: this, relation: "esriSpatialRelIntersects", relationGeom: t3 });
    }, C2._featuresetFunctions.envelopeIntersects = function(t3) {
      return null == t3 ? new u3({ parentfeatureset: this }) : new _f({ parentfeatureset: this, relation: "esriSpatialRelEnvelopeIntersects", relationGeom: t3 });
    }, C2._featuresetFunctions.contains = function(t3) {
      return null == t3 ? new u3({ parentfeatureset: this }) : new _f({ parentfeatureset: this, relation: "esriSpatialRelContains", relationGeom: t3 });
    }, C2._featuresetFunctions.overlaps = function(t3) {
      return null == t3 ? new u3({ parentfeatureset: this }) : new _f({ parentfeatureset: this, relation: "esriSpatialRelOverlaps", relationGeom: t3 });
    }, C2._featuresetFunctions.within = function(t3) {
      return null == t3 ? new u3({ parentfeatureset: this }) : new _f({ parentfeatureset: this, relation: "esriSpatialRelWithin", relationGeom: t3 });
    }, C2._featuresetFunctions.touches = function(t3) {
      return null == t3 ? new u3({ parentfeatureset: this }) : new _f({ parentfeatureset: this, relation: "esriSpatialRelTouches", relationGeom: t3 });
    }, C2._featuresetFunctions.crosses = function(t3) {
      return null == t3 ? new u3({ parentfeatureset: this }) : new _f({ parentfeatureset: this, relation: "esriSpatialRelCrosses", relationGeom: t3 });
    }, C2._featuresetFunctions.relate = function(t3, i) {
      return null == t3 ? new u3({ parentfeatureset: this }) : new _f({ parentfeatureset: this, relation: "esriSpatialRelRelation", relationGeom: t3, relationString: i });
    };
  }
  getFieldsIndex() {
    return this._parent.getFieldsIndex();
  }
};

export {
  t,
  s2 as s,
  a3 as a,
  t2,
  f2 as f,
  m3 as m,
  p2 as p,
  g3 as g,
  h2 as h,
  T2 as T,
  S3 as S,
  E,
  A,
  I,
  L,
  w2 as w,
  D2 as D,
  O3 as O,
  F3 as F,
  w3 as w2,
  C2 as C,
  u3 as u,
  f4 as f2
};
//# sourceMappingURL=chunk-QPKZXDIJ.js.map
