import {
  t
} from "./chunk-XXZFRDYH.js";
import "./chunk-GYMOXI76.js";
import {
  F as F2
} from "./chunk-LH2VBN6X.js";
import "./chunk-5ZJ2MCRU.js";
import "./chunk-OBWNWUWS.js";
import "./chunk-2JZHLJXP.js";
import "./chunk-CGJR3XCF.js";
import {
  j,
  y
} from "./chunk-KVO35ODJ.js";
import "./chunk-O2HBAYVG.js";
import "./chunk-FKL5AVF4.js";
import "./chunk-CKPBZSTT.js";
import "./chunk-3T3LUDWR.js";
import "./chunk-SZ3BUBIG.js";
import "./chunk-JI3JMSDL.js";
import "./chunk-J3GKRP7Y.js";
import "./chunk-Q3K5MAUZ.js";
import "./chunk-KJNFPIQW.js";
import "./chunk-2XVRGGEF.js";
import "./chunk-DPVSO6BH.js";
import "./chunk-6TRZLPPJ.js";
import "./chunk-U6IFI7EK.js";
import "./chunk-MCHNAU6L.js";
import "./chunk-MYNRH67A.js";
import "./chunk-JMY2H33H.js";
import "./chunk-VBS2Y7KE.js";
import "./chunk-HCAIFU2M.js";
import "./chunk-AHZHHHCW.js";
import "./chunk-O75V7CSP.js";
import "./chunk-RSF7AFW5.js";
import "./chunk-C2RS46RL.js";
import "./chunk-HB2JTNV2.js";
import "./chunk-N42IF4WX.js";
import "./chunk-BLBULF2O.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-XJHQ5ZJ7.js";
import "./chunk-BXIXSFGX.js";
import "./chunk-HACIIBEF.js";
import "./chunk-MBR7IVUG.js";
import "./chunk-TRMW5XQP.js";
import "./chunk-HBU7EMDX.js";
import "./chunk-JRUJALSE.js";
import "./chunk-KDUYQUT4.js";
import "./chunk-73FHIZIF.js";
import "./chunk-ICIPRMPO.js";
import "./chunk-NEDBRPQY.js";
import "./chunk-EZCH3ZAJ.js";
import "./chunk-QLRZN73K.js";
import "./chunk-CGJUTDVJ.js";
import "./chunk-QEJMJI2R.js";
import "./chunk-EHD5KM2T.js";
import "./chunk-AEKV7TWM.js";
import "./chunk-QJXYURT2.js";
import "./chunk-JUN5XSQC.js";
import "./chunk-MCZMPI2A.js";
import "./chunk-KV3S4QI2.js";
import "./chunk-ECMDQ4LS.js";
import "./chunk-D6FJTDNK.js";
import "./chunk-LP6TMAPE.js";
import "./chunk-RENLZYKC.js";
import "./chunk-IJO7BOFI.js";
import "./chunk-NGQEHRBA.js";
import "./chunk-QYSQ6XPQ.js";
import "./chunk-HZRXUNDJ.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-GGPPKSP2.js";
import "./chunk-MR727DXB.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-GNY4KZ34.js";
import "./chunk-43W2AR4R.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-A66MNK5C.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-VBJTBJYL.js";
import "./chunk-GZFJKWTS.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-6TU4HBID.js";
import "./chunk-WGIZLWW7.js";
import "./chunk-PUOCGOJB.js";
import "./chunk-DBQLTBDH.js";
import "./chunk-AMH7OVBF.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-LXJGKQ4D.js";
import {
  d as d2
} from "./chunk-VILGTHTP.js";
import "./chunk-ATEWWVHG.js";
import "./chunk-LEOFRCUR.js";
import "./chunk-CP4GPQHD.js";
import "./chunk-IZSNXKMJ.js";
import "./chunk-IOKAACTA.js";
import "./chunk-VFTH6C2E.js";
import "./chunk-M5RSIRGD.js";
import "./chunk-D2JPDRZZ.js";
import "./chunk-UYSPJCCV.js";
import "./chunk-SMFCDOAJ.js";
import "./chunk-5A4G4OVM.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-44C2A72D.js";
import "./chunk-DIKY6MBW.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-GGCWKF4X.js";
import "./chunk-6D5XULXX.js";
import "./chunk-445IB4DS.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import "./chunk-H4N5QOMX.js";
import "./chunk-F2LC36UV.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-Z2DWZ5IF.js";
import "./chunk-UN4ISSP7.js";
import "./chunk-E2RPCJOE.js";
import {
  P,
  d,
  v
} from "./chunk-TKY5RBM3.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import {
  V
} from "./chunk-SIQNRYEG.js";
import "./chunk-TTDEVHSF.js";
import "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-JU6MEO4D.js";
import "./chunk-CY5MS6DC.js";
import "./chunk-C6FFJ4QS.js";
import "./chunk-Q4Q32WYV.js";
import "./chunk-A3J7W53Y.js";
import "./chunk-HLF5XJSV.js";
import "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-Y6AYXNMP.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import "./chunk-X7VTUWCX.js";
import "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import "./chunk-GD4XDYZL.js";
import {
  a4 as a
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import {
  e
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-PKLD5YJF.js";
import {
  F
} from "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/views/2d/layers/MapNotesLayerView2D.js
var d3 = "sublayers";
var u = "layerView";
var f = /* @__PURE__ */ new Set(["default"]);
var m = class extends j(y) {
  constructor() {
    super(...arguments), this._highlightIds = /* @__PURE__ */ new Map();
  }
  *graphicsViews() {
    null == this._graphicsViewsFeatureCollectionMap ? null == this._graphicsViews ? yield* [] : yield* this._graphicsViews : yield* this._graphicsViewsFeatureCollectionMap.keys();
  }
  async hitTest(i, e2) {
    return Array.from(this.graphicsViews(), (e3) => {
      const s = e3.hitTest(i);
      if (null != this._graphicsViewsFeatureCollectionMap) {
        const i2 = this._graphicsViewsFeatureCollectionMap.get(e3);
        for (const e4 of s) !e4.popupTemplate && i2.popupTemplate && (e4.popupTemplate = i2.popupTemplate), e4.sourceLayer = e4.layer = this.layer;
      }
      return s;
    }).flat().map((e3) => ({ type: "graphic", graphic: e3, layer: this.layer, mapPoint: i }));
  }
  highlight(i) {
    let h;
    "number" == typeof i ? h = [i] : i instanceof d2 ? h = [i.uid] : Array.isArray(i) && i.length > 0 ? h = "number" == typeof i[0] ? i : i.map((i2) => i2 && i2.uid) : V.isCollection(i) && (h = i.map((i2) => i2 && i2.uid).toArray());
    const a2 = h == null ? void 0 : h.filter(F);
    return (a2 == null ? void 0 : a2.length) ? (this._addHighlight(a2), e(() => this._removeHighlight(a2))) : e();
  }
  update(i) {
    for (const e2 of this.graphicsViews()) e2.processUpdate(i);
  }
  attach() {
    const i = this.view, e2 = () => this.requestUpdate(), s = this.layer.featureCollections;
    if (null != s && s.length) {
      this._graphicsViewsFeatureCollectionMap = /* @__PURE__ */ new Map();
      for (const t2 of s) {
        const s2 = new t(this.view.featuresTilingScheme), r2 = new F2({ view: i, graphics: t2.source, renderer: t2.renderer, requestUpdateCallback: e2, container: s2 });
        this._graphicsViewsFeatureCollectionMap.set(r2, t2), this.container.addChild(r2.container), this.addHandles([d(() => t2.visible, (i2) => r2.container.visible = i2, P), d(() => r2.updating, () => this.notifyChange("updating"), P)], u);
      }
      this._updateHighlight();
    } else null != this.layer.sublayers && this.addHandles(v(() => this.layer.sublayers, "change", () => this._createGraphicsViews(), { onListenerAdd: () => this._createGraphicsViews(), onListenerRemove: () => this._destroyGraphicsViews() }), d3);
  }
  detach() {
    this._destroyGraphicsViews(), this.removeHandles(d3);
  }
  moveEnd() {
  }
  viewChange() {
    for (const i of this.graphicsViews()) i.viewChange();
  }
  isUpdating() {
    for (const i of this.graphicsViews()) if (i.updating) return true;
    return false;
  }
  _destroyGraphicsViews() {
    this.container.removeAllChildren(), this.removeHandles(u);
    for (const i of this.graphicsViews()) i.destroy();
    this._graphicsViews = null, this._graphicsViewsFeatureCollectionMap = null;
  }
  _createGraphicsViews() {
    if (this._destroyGraphicsViews(), null == this.layer.sublayers) return;
    const i = [], e2 = this.view, s = () => this.requestUpdate();
    for (const t2 of this.layer.sublayers) {
      const r2 = new t(this.view.featuresTilingScheme);
      r2.fadeTransitionEnabled = true;
      const a2 = new F2({ view: e2, graphics: t2.graphics, requestUpdateCallback: s, container: r2 });
      this.addHandles([t2.on("graphic-update", a2.graphicUpdateHandler), d(() => t2.visible, (i2) => a2.container.visible = i2, P), d(() => a2.updating, () => this.notifyChange("updating"), P)], u), this.container.addChild(a2.container), i.push(a2);
    }
    this._graphicsViews = i, this._updateHighlight();
  }
  _addHighlight(i) {
    for (const e2 of i) if (this._highlightIds.has(e2)) {
      const i2 = this._highlightIds.get(e2);
      this._highlightIds.set(e2, i2 + 1);
    } else this._highlightIds.set(e2, 1);
    this._updateHighlight();
  }
  _removeHighlight(i) {
    for (const e2 of i) if (this._highlightIds.has(e2)) {
      const i2 = this._highlightIds.get(e2) - 1;
      0 === i2 ? this._highlightIds.delete(e2) : this._highlightIds.set(e2, i2);
    }
    this._updateHighlight();
  }
  _updateHighlight() {
    const i = Array.from(this._highlightIds.keys()), e2 = this._getHighlightBits(f);
    for (const s of this.graphicsViews()) s.setHighlight(i.map((i2) => ({ objectId: i2, highlightFlags: e2 })));
  }
};
m = r([a("esri.views.2d.layers.MapNotesLayerView2D")], m);
var w = m;
export {
  w as default
};
//# sourceMappingURL=MapNotesLayerView2D-ZKSQBL2A.js.map
