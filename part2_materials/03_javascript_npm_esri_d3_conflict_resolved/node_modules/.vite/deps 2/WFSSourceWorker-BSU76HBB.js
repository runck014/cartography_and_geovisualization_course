import {
  K,
  ee,
  oe
} from "./chunk-3AXANK7W.js";
import "./chunk-ZUIEEFUU.js";
import {
  p
} from "./chunk-DBGQDDBK.js";
import {
  E,
  N
} from "./chunk-XDJWRN6T.js";
import "./chunk-5PXF5FL6.js";
import {
  m
} from "./chunk-3UBBIAM6.js";
import "./chunk-VS6HWAZD.js";
import {
  V
} from "./chunk-PQMYL64R.js";
import "./chunk-RSF7AFW5.js";
import "./chunk-VWXOSXKG.js";
import "./chunk-KVWJ4FJP.js";
import "./chunk-4WCKSWXU.js";
import "./chunk-P4TUSPKE.js";
import "./chunk-WI4GZYZR.js";
import "./chunk-M43YLXNM.js";
import {
  ot,
  rt
} from "./chunk-BLBULF2O.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-MSUBZ5BW.js";
import {
  j,
  x
} from "./chunk-XJHQ5ZJ7.js";
import "./chunk-HACIIBEF.js";
import "./chunk-WCAEZENI.js";
import "./chunk-MBR7IVUG.js";
import "./chunk-WVLGRCY6.js";
import "./chunk-QEJMJI2R.js";
import "./chunk-MCZMPI2A.js";
import "./chunk-IJO7BOFI.js";
import "./chunk-NGQEHRBA.js";
import "./chunk-XKMN3LJN.js";
import "./chunk-2U5JYYSG.js";
import {
  Z
} from "./chunk-GGPPKSP2.js";
import "./chunk-WPERPIJF.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-6GD5IU2W.js";
import "./chunk-XQ3CVA7I.js";
import "./chunk-AMH7OVBF.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-LXJGKQ4D.js";
import "./chunk-IOKAACTA.js";
import "./chunk-D2JPDRZZ.js";
import "./chunk-UYSPJCCV.js";
import "./chunk-B5NBTUMV.js";
import "./chunk-TCZ4QHYH.js";
import "./chunk-SMFCDOAJ.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-DIKY6MBW.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-6D5XULXX.js";
import "./chunk-445IB4DS.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import "./chunk-H4N5QOMX.js";
import "./chunk-F2LC36UV.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-Z2DWZ5IF.js";
import "./chunk-TDZ623HP.js";
import "./chunk-6RLUKSNK.js";
import "./chunk-UN4ISSP7.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-TKY5RBM3.js";
import "./chunk-NHJGPXZH.js";
import {
  i
} from "./chunk-JS7R723S.js";
import "./chunk-SIQNRYEG.js";
import "./chunk-TTDEVHSF.js";
import {
  d
} from "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-BMGF5ELJ.js";
import "./chunk-JU6MEO4D.js";
import "./chunk-CY5MS6DC.js";
import "./chunk-C6FFJ4QS.js";
import "./chunk-Q4Q32WYV.js";
import "./chunk-A3J7W53Y.js";
import "./chunk-HLF5XJSV.js";
import "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-Y6AYXNMP.js";
import "./chunk-6YWQXXBX.js";
import {
  s3 as s4
} from "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import "./chunk-X7VTUWCX.js";
import "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import "./chunk-GD4XDYZL.js";
import {
  s4 as s2
} from "./chunk-33ECLFFF.js";
import "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import {
  b,
  s as s3
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import {
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/layers/graphics/sources/WFSSourceWorker.js
var w = "esri.layers.WFSLayer";
var R = class {
  constructor() {
    this._customParameters = null, this._queryEngine = null, this._supportsPagination = true;
  }
  destroy() {
    var _a;
    (_a = this._queryEngine) == null ? void 0 : _a.destroy(), this._queryEngine = null;
  }
  async load(e, r = {}) {
    const { getFeatureUrl: s5, getFeatureOutputFormat: o, fields: n2, geometryType: i2, featureType: u, maxRecordCount: c, maxTotalRecordCount: p2, maxPageCount: d2, objectIdField: g, customParameters: y } = e, { spatialReference: _, getFeatureSpatialReference: w2 } = oe(s5, u, e.spatialReference);
    try {
      await x(w2, _);
    } catch {
      throw new s("unsupported-projection", "Projection not supported", { inSpatialReference: w2, outSpatialReference: _ });
    }
    s3(r), this._customParameters = y, this._featureType = u, this._fieldsIndex = Z.fromLayerJSON({ fields: n2, dateFieldsTimeReference: n2.some((e2) => "esriFieldTypeDate" === e2.type) ? { timeZoneIANA: i } : null }), this._geometryType = i2, this._getFeatureUrl = s5, this._getFeatureOutputFormat = o, this._getFeatureSpatialReference = w2, this._maxRecordCount = c, this._maxTotalRecordCount = p2, this._maxPageCount = d2, this._objectIdField = g, this._spatialReference = _;
    let R2 = await this._snapshotFeatures(r);
    if (R2.errors.length > 0 && (this._supportsPagination = false, R2 = await this._snapshotFeatures(r), R2.errors.length > 0)) throw R2.errors[0];
    return this._queryEngine = new V({ fieldsIndex: this._fieldsIndex, geometryType: i2, hasM: false, hasZ: false, objectIdField: g, spatialReference: _, timeInfo: null, featureStore: new m({ geometryType: i2, hasM: false, hasZ: false }) }), this._queryEngine.featureStore.addMany(R2.features), { warnings: T(R2), extent: (await this._queryEngine.fetchRecomputedExtents()).fullExtent };
  }
  async applyEdits() {
    throw new s("wfs-source:editing-not-supported", "applyEdits() is not supported on WFSLayer");
  }
  async queryFeatures(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQuery(e, t.signal);
  }
  async queryFeatureCount(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForCount(e, t.signal);
  }
  async queryObjectIds(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForIds(e, t.signal);
  }
  async queryExtent(e = {}, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForExtent(e, t.signal);
  }
  async querySnapping(e, t = {}) {
    return await this._waitSnapshotComplete(), this._queryEngine.executeQueryForSnapping(e, t.signal);
  }
  async refresh(t) {
    var _a;
    return this._customParameters = t.customParameters, this._maxRecordCount = t.maxRecordCount, this._maxTotalRecordCount = t.maxTotalRecordCount, this._maxPageCount = t.maxPageCount, (_a = this._snapshotTask) == null ? void 0 : _a.abort(), this._snapshotTask = d((e) => this._snapshotFeatures({ signal: e })), this._snapshotTask.promise.then((e) => {
      var _a2;
      this._queryEngine.featureStore.clear(), this._queryEngine.featureStore.addMany(e.features);
      for (const t2 of T(e)) n.getLogger(w).warn(new s2("wfs-layer:refresh-warning", t2.message, t2.details));
      ((_a2 = e.errors) == null ? void 0 : _a2.length) && n.getLogger(w).warn(new s2("wfs-layer:refresh-error", "Refresh completed with errors", { errors: e.errors }));
    }, () => {
      this._queryEngine.featureStore.clear();
    }), await this._waitSnapshotComplete(), { extent: (await this._queryEngine.fetchRecomputedExtents()).fullExtent };
  }
  async _waitSnapshotComplete() {
    if (this._snapshotTask && !this._snapshotTask.finished) {
      try {
        await this._snapshotTask.promise;
      } catch {
      }
      return this._waitSnapshotComplete();
    }
  }
  async _snapshotFeatures(e) {
    const t = e == null ? void 0 : e.signal, r = this._maxTotalRecordCount, o = this._maxPageCount, n2 = this._supportsPagination ? await ee(this._getFeatureUrl, this._featureType.typeName, { customParameters: this._customParameters, signal: t }) : void 0;
    let i2 = [];
    const u = [];
    if (null == n2) try {
      i2 = await this._singleQuery(t);
    } catch (l) {
      b(l) || u.push(l);
    }
    else {
      const e2 = Math.min(n2, r), a = F(this, Math.max(1, Math.min(Math.ceil(e2 / this._maxRecordCount), o)), t);
      await Promise.allSettled(Array.from({ length: 10 }).map(() => S(a, i2, u)));
    }
    return s3(t), { features: i2, totalRecordCount: n2, maxTotalRecordCount: r, maxPageCount: o, errors: u };
  }
  async _singleQuery(e) {
    const t = await K(this._getFeatureUrl, this._featureType.typeName, this._getFeatureSpatialReference, this._getFeatureOutputFormat, { customParameters: this._customParameters, signal: e });
    return this._processGeoJSON(t, { signal: e });
  }
  async _pageQuery(e, t) {
    const r = e * this._maxRecordCount, a = await K(this._getFeatureUrl, this._featureType.typeName, this._getFeatureSpatialReference, this._getFeatureOutputFormat, { customParameters: this._customParameters, startIndex: r, count: this._maxRecordCount, signal: t });
    return this._processGeoJSON(a, { startIndex: r, signal: t });
  }
  _processGeoJSON(e, t) {
    E(e, this._getFeatureSpatialReference.wkid);
    const { startIndex: r, signal: s5 } = t;
    s3(s5);
    const o = N(e, { geometryType: this._geometryType, hasZ: false, objectIdField: this._objectIdField });
    if (!s4(this._spatialReference, this._getFeatureSpatialReference)) for (const a of o) null != a.geometry && (a.geometry = ot(j(rt(a.geometry, this._geometryType, false, false), this._getFeatureSpatialReference, this._spatialReference)));
    let l = r ?? 1;
    for (const a of o) {
      const e2 = {};
      p(this._fieldsIndex, e2, a.attributes, true), a.attributes = e2, null == e2[this._objectIdField] && (a.objectId = e2[this._objectIdField] = l++);
    }
    return o;
  }
};
function* F(e, t, r) {
  for (let a = 0; a < t; a++) yield e._pageQuery(a, r);
}
async function S(e, t, r) {
  let a = e.next();
  for (; !a.done; ) {
    try {
      const e2 = await a.value;
      t.push(...e2);
    } catch (o) {
      b(o) || r.push(o);
    }
    a = e.next();
  }
}
function T(e) {
  const t = [];
  return null != e.totalRecordCount && (e.features.length < e.totalRecordCount && t.push({ name: "wfs-layer:maxRecordCount-too-low", message: `Could only fetch ${e.features.length} of ${e.totalRecordCount} in ${e.maxPageCount} queries. Try increasing the value of WFSLayer.maxRecordCount.`, details: { recordCount: e.features.length, totalRecordCount: e.totalRecordCount } }), e.totalRecordCount > e.maxTotalRecordCount && t.push({ name: "wfs-layer:large-dataset", message: `The number of ${e.totalRecordCount} features exceeds the maximum allowed of ${e.maxTotalRecordCount}.`, details: { recordCount: e.features.length, totalRecordCount: e.totalRecordCount, maxTotalRecordCount: e.maxTotalRecordCount } })), t;
}
export {
  R as default
};
//# sourceMappingURL=WFSSourceWorker-BSU76HBB.js.map
