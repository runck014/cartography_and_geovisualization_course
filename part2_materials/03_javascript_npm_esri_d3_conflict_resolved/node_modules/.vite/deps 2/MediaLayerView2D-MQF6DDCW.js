import {
  u as u2
} from "./chunk-KJECNQ2J.js";
import {
  f
} from "./chunk-B6UR6G45.js";
import "./chunk-C55OFUQT.js";
import "./chunk-RHQ4S6RG.js";
import "./chunk-LH2VBN6X.js";
import "./chunk-OBWNWUWS.js";
import "./chunk-CGJR3XCF.js";
import {
  j as j2,
  y
} from "./chunk-KVO35ODJ.js";
import {
  e as e2
} from "./chunk-O2HBAYVG.js";
import "./chunk-FKL5AVF4.js";
import "./chunk-CKPBZSTT.js";
import "./chunk-3T3LUDWR.js";
import "./chunk-3REIFLHQ.js";
import "./chunk-UUYHVC5D.js";
import "./chunk-SZ3BUBIG.js";
import "./chunk-7TPUFUXO.js";
import "./chunk-JI3JMSDL.js";
import "./chunk-J3GKRP7Y.js";
import "./chunk-Q3K5MAUZ.js";
import "./chunk-KJNFPIQW.js";
import "./chunk-2XVRGGEF.js";
import "./chunk-DPVSO6BH.js";
import "./chunk-6TRZLPPJ.js";
import "./chunk-U6IFI7EK.js";
import "./chunk-C7P44RVS.js";
import "./chunk-MCHNAU6L.js";
import "./chunk-MYNRH67A.js";
import "./chunk-JMY2H33H.js";
import "./chunk-CQZSH27Y.js";
import "./chunk-VBS2Y7KE.js";
import "./chunk-HCAIFU2M.js";
import "./chunk-AHZHHHCW.js";
import {
  j,
  m as m3
} from "./chunk-IQDUSSW2.js";
import "./chunk-O75V7CSP.js";
import "./chunk-RSF7AFW5.js";
import "./chunk-BOYBHWD5.js";
import "./chunk-C2RS46RL.js";
import "./chunk-HB2JTNV2.js";
import "./chunk-DLJHW32W.js";
import "./chunk-6LGJYARD.js";
import "./chunk-N42IF4WX.js";
import "./chunk-BLBULF2O.js";
import "./chunk-YX36GZBB.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-XJHQ5ZJ7.js";
import "./chunk-KH6UC6T2.js";
import "./chunk-MA2KDKKH.js";
import "./chunk-BXIXSFGX.js";
import {
  e
} from "./chunk-NW7VXBHZ.js";
import "./chunk-HACIIBEF.js";
import "./chunk-MBR7IVUG.js";
import "./chunk-NSVZKQ66.js";
import "./chunk-FFLL3HFJ.js";
import "./chunk-CAQ63GSR.js";
import "./chunk-256XKGQW.js";
import "./chunk-TRMW5XQP.js";
import "./chunk-HBU7EMDX.js";
import "./chunk-JRUJALSE.js";
import "./chunk-KDUYQUT4.js";
import {
  p as p3,
  r as r5
} from "./chunk-QQRGQ74V.js";
import "./chunk-O67P2KE3.js";
import "./chunk-73FHIZIF.js";
import "./chunk-ICIPRMPO.js";
import "./chunk-NEDBRPQY.js";
import "./chunk-EZCH3ZAJ.js";
import "./chunk-QLRZN73K.js";
import "./chunk-CGJUTDVJ.js";
import {
  g
} from "./chunk-WVLGRCY6.js";
import "./chunk-QEJMJI2R.js";
import "./chunk-EHD5KM2T.js";
import "./chunk-AEKV7TWM.js";
import {
  m as m2,
  p as p2
} from "./chunk-QJXYURT2.js";
import "./chunk-JUN5XSQC.js";
import "./chunk-MCZMPI2A.js";
import {
  D
} from "./chunk-KV3S4QI2.js";
import {
  n as n2
} from "./chunk-ECMDQ4LS.js";
import "./chunk-D6FJTDNK.js";
import {
  o as o2
} from "./chunk-LP6TMAPE.js";
import "./chunk-RENLZYKC.js";
import "./chunk-IJO7BOFI.js";
import "./chunk-NGQEHRBA.js";
import "./chunk-QYSQ6XPQ.js";
import "./chunk-YYZ2CTYE.js";
import "./chunk-HZRXUNDJ.js";
import "./chunk-XKMN3LJN.js";
import "./chunk-2U5JYYSG.js";
import "./chunk-GGPPKSP2.js";
import "./chunk-JHXGQ3AW.js";
import "./chunk-MR727DXB.js";
import {
  d as d2
} from "./chunk-VLKWWBLY.js";
import "./chunk-GNY4KZ34.js";
import "./chunk-WPERPIJF.js";
import "./chunk-QKS6PIY6.js";
import "./chunk-R5BTSPWT.js";
import "./chunk-Z2L6EED4.js";
import "./chunk-43W2AR4R.js";
import "./chunk-X5EOLPIE.js";
import "./chunk-VNPGSD2C.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import "./chunk-GJTB7YCT.js";
import "./chunk-LQEYS467.js";
import "./chunk-A66MNK5C.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-RCGJPJRB.js";
import "./chunk-5CRXWQ3Y.js";
import "./chunk-VBJTBJYL.js";
import "./chunk-GZFJKWTS.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-5RVYVWSZ.js";
import "./chunk-6TU4HBID.js";
import "./chunk-WGIZLWW7.js";
import "./chunk-B3SR7LF7.js";
import "./chunk-PUOCGOJB.js";
import "./chunk-XQH2QDB2.js";
import "./chunk-LPNAPHOF.js";
import "./chunk-DBQLTBDH.js";
import "./chunk-AMH7OVBF.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-LXJGKQ4D.js";
import "./chunk-VILGTHTP.js";
import "./chunk-ATEWWVHG.js";
import "./chunk-LEOFRCUR.js";
import "./chunk-CP4GPQHD.js";
import "./chunk-IZSNXKMJ.js";
import "./chunk-IOKAACTA.js";
import "./chunk-VFTH6C2E.js";
import "./chunk-M5RSIRGD.js";
import "./chunk-D2JPDRZZ.js";
import "./chunk-UYSPJCCV.js";
import "./chunk-SMFCDOAJ.js";
import "./chunk-5A4G4OVM.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-44C2A72D.js";
import "./chunk-DIKY6MBW.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-GGCWKF4X.js";
import "./chunk-6D5XULXX.js";
import "./chunk-445IB4DS.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import "./chunk-H4N5QOMX.js";
import "./chunk-F2LC36UV.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import {
  u
} from "./chunk-Z2DWZ5IF.js";
import "./chunk-6RLUKSNK.js";
import "./chunk-UN4ISSP7.js";
import "./chunk-E2RPCJOE.js";
import {
  A,
  P,
  d,
  p,
  v
} from "./chunk-TKY5RBM3.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import {
  V
} from "./chunk-SIQNRYEG.js";
import "./chunk-TTDEVHSF.js";
import "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-JU6MEO4D.js";
import "./chunk-CY5MS6DC.js";
import "./chunk-C6FFJ4QS.js";
import "./chunk-Q4Q32WYV.js";
import {
  s as s2,
  w,
  x
} from "./chunk-A3J7W53Y.js";
import "./chunk-HLF5XJSV.js";
import "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-Y6AYXNMP.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import "./chunk-X7VTUWCX.js";
import "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import {
  b2,
  m,
  r as r3
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a,
  r as r2
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import {
  b,
  o2 as o
} from "./chunk-GRW2QIBT.js";
import {
  r as r4
} from "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import {
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/views/2d/engine/webgl/Overlay.js
var x2 = [1, 1];
var g2 = e();
var v2 = { none: d2.None, loop: d2.Loop, oscillate: d2.Oscillate };
function b3(e4) {
  return e4 ? { type: "CIMAnimatedSymbolProperties", ...e4, playAnimation: e4.playing, repeatType: e4.repeatType ? v2[e4.repeatType] : void 0 } : { type: "CIMAnimatedSymbolProperties" };
}
var q = class extends e2 {
  constructor(n3) {
    super(), this.elementView = n3, this.isWrapAround = false, this.wrapAroundShift = 0, this.perspectiveTransform = n2(), this._handles = new r3(), this._vertices = new Float32Array(8), this._indices = new Uint16Array([0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1]), this._handles.add([d(() => this.elementView.element.opacity, (e4) => this.opacity = e4, P), d(() => [this.elementView.coords], () => {
      this.requestRender();
    }, P), d(() => ["animationOptions" in this.elementView.element && this.elementView.element.animationOptions], () => {
      this._handles.remove("play"), this.texture = r4(this.texture), this.requestRender();
    }, P), p(() => this.elementView.element.loaded, () => {
      const e4 = this.elementView.element;
      this.ready(), "video" === e4.type && null != e4.content && (this._handles.add([o(e4.content, "play", () => this.requestRender()), o(e4.content, "loadeddata", () => this.requestRender()), o(e4.content, "loaded", () => this.requestRender())]), "requestVideoFrameCallback" in e4.content ? e4.content.requestVideoFrameCallback(() => this.requestRender()) : this._handles.add([o(e4.content, "seeked", () => this.requestRender())]), this.requestRender());
    }, P)]), n3.element.load().catch((t) => {
      n.getLogger("esri.views.2d.layers.MediaLayerView2D").error(new s("element-load-error", "Element cannot be displayed", { element: n3, error: t }));
    });
  }
  getMesh(e4) {
    throw new Error("Method not implemented.");
  }
  destroy() {
    this._handles.destroy(), this.texture = r4(this.texture);
  }
  get textureSize() {
    return x2;
  }
  get dvsMat3() {
    return this.parent.dvsMat3;
  }
  beforeRender(e4) {
    const { context: t } = e4, r6 = this.elementView.element.content;
    if (null != r6) {
      const e5 = r6 instanceof HTMLImageElement, i = r6 instanceof HTMLVideoElement, s4 = e5 ? r6.naturalWidth : i ? r6.videoWidth : r6.width, n3 = e5 ? r6.naturalHeight : i ? r6.videoHeight : r6.height;
      if (this._updatePerspectiveTransform(s4, n3), this.texture) i && (this.texture.setData(r6), this.texture.generateMipmap(), "requestVideoFrameCallback" in r6 ? r6.requestVideoFrameCallback(() => this.requestRender()) : r6.paused || this.requestRender());
      else {
        const e6 = new p2();
        if (e6.wrapMode = D.CLAMP_TO_EDGE, e6.preMultiplyAlpha = true, e6.width = s4, e6.height = n3, "getFrame" in r6) {
          const i2 = (r7) => {
            this.texture ? this.texture.setData(r7) : this.texture = new m2(t, e6, r7), this.requestRender();
          };
          "animationOptions" in this.elementView.element && this._handles.add(f(r6, b3(this.elementView.element.animationOptions), null, i2), "play");
        } else this.texture = new m2(t, e6, r6);
        this.texture.generateMipmap(), i && ("requestVideoFrameCallback" in r6 ? r6.requestVideoFrameCallback(() => this.requestRender()) : r6.paused || this.requestRender());
      }
    }
    super.beforeRender(e4);
  }
  _createTransforms() {
    return null;
  }
  draw(e4, t) {
    this.isReady && null != this.texture ? t.render(e4, { transform: { dvs: this.dvsMat3 }, config: { perspective: this.perspectiveTransform, texSize: x2, wrapAroundShift: this.wrapAroundShift, isWrapAround: this.isWrapAround, opacity: this.opacity, texture: { texture: this.texture, unit: 0 } }, position: this._vertices, tex: this._indices }) : this.requestRender();
  }
  updateDrawCoords(e4, t, r6, i) {
    const { coords: s4, bounds: n3 } = this.elementView;
    if (null == s4 || null == n3) return;
    const [o3, a2, l, d3] = s4.rings[0], m4 = this._vertices, { x: h, y: p4 } = e4;
    m4.set([a2[0] - h, a2[1] - p4, o3[0] - h, o3[1] - p4, l[0] - h, l[1] - p4, d3[0] - h, d3[1] - p4]);
    let u3 = t;
    if (i) {
      const [e5, , t2] = n3, { worldWidth: r7, xBounds: s5 } = i, [o4, a3] = s5;
      e5 < o4 && t2 > o4 ? u3 = r7 : t2 > a3 && e5 < a3 && (u3 = -r7);
    }
    this.wrapAroundShift = u3, this.isWrapAround = 0 !== u3;
  }
  _updatePerspectiveTransform(e4, t) {
    const r6 = this._vertices;
    j(g2, [0, 0, e4, 0, 0, t, e4, t], [r6[0], r6[1], r6[4], r6[5], r6[2], r6[3], r6[6], r6[7]]), o2(this.perspectiveTransform, g2[6] / g2[8] * e4, g2[7] / g2[8] * t);
  }
};

// node_modules/@arcgis/core/views/3d/layers/support/MediaLayerInteractionOptions.js
var e3 = class extends b2 {
  constructor() {
    super(...arguments), this.tool = "transform";
  }
};
r([m()], e3.prototype, "tool", void 0), e3 = r([a("esri.views.3d.layers.support.MediaLayerInteractionOptions")], e3);

// node_modules/@arcgis/core/views/layers/MediaLayerView.js
var s3 = (s4) => {
  let i = class extends s4 {
    constructor(...e4) {
      super(...e4), this.layer = null, this.interactive = false, this.interactionOptions = new e3(), this.selectedElement = null;
    }
  };
  return r([m()], i.prototype, "layer", void 0), r([m()], i.prototype, "interactive", void 0), r([m()], i.prototype, "interactionOptions", void 0), r([m()], i.prototype, "selectedElement", void 0), i = r([a("esri.views.layers.MediaLayerView")], i), i;
};

// node_modules/@arcgis/core/views/2d/layers/MediaLayerView2D.js
var G = class extends j2(s3(y)) {
  constructor() {
    super(...arguments), this._overlayContainer = null, this._fetchQueue = null, this._tileStrategy = null, this._elementReferences = /* @__PURE__ */ new Map(), this._debugGraphicsView = null, this._interaction = null, this.layer = null, this.elements = new V();
  }
  initialize() {
    this.addHandles([d(() => [this.interactive, this.suspended], async () => {
      if (this.interactive && !this._interaction) {
        const { MediaLayerInteraction: e4 } = await import("./MediaLayerInteraction-32THQIF5.js");
        this._interaction = new e4({ view: this.view, layer: this.layer }), this.selectedElement !== this._interaction.selectedElement && (this._interaction.selectedElement = this.selectedElement), this.interactionOptions !== this._interaction.options && (this._interaction.options = this.interactionOptions);
      }
      this._interaction && (this._interaction.enabled = !this.suspended && this.interactive);
    }, A), d(() => this.interactionOptions, (e4) => {
      this._interaction && (this._interaction.options = e4);
    }, A), d(() => this.selectedElement, (e4) => {
      this._interaction && (this._interaction.selectedElement = e4);
    }, A)]);
  }
  attach() {
    this.addAttachHandles([v(() => this.layer.effectiveSource, "refresh", () => {
      this._tileStrategy.refresh((e4) => this._updateTile(e4)), this.requestUpdate();
    }), v(() => this.layer.effectiveSource, "change", ({ element: e4 }) => this._elementUpdateHandler(e4))]), this._overlayContainer = new u2(), this.container.addChild(this._overlayContainer), this._fetchQueue = new p3({ tileInfoView: this.view.featuresTilingScheme, concurrency: 10, process: (e4, t) => this._queryElements(e4, t), scheduler: this.scheduler, priority: g.MAPVIEW_FETCH_QUEUE }), this._tileStrategy = new r5({ cachePolicy: "purge", resampling: true, acquireTile: (e4) => this._acquireTile(e4), releaseTile: (e4) => this._releaseTile(e4), tileInfoView: this.view.featuresTilingScheme }), this.requestUpdate();
  }
  detach() {
    var _a;
    this.elements.removeAll(), this._tileStrategy.destroy(), this._fetchQueue.destroy(), this._overlayContainer.removeAllChildren(), this.container.removeAllChildren(), this._elementReferences.clear(), (_a = this._debugGraphicsView) == null ? void 0 : _a.destroy();
  }
  supportsSpatialReference(e4) {
    return true;
  }
  viewChange() {
    this.requestUpdate();
  }
  moveEnd() {
    this.requestUpdate();
  }
  update(e4) {
    var _a;
    this._tileStrategy.update(e4), (_a = this._debugGraphicsView) == null ? void 0 : _a.update(e4);
  }
  async hitTest(e4, t) {
    const i = [], r6 = e4.normalize(), s4 = [r6.x, r6.y];
    for (const { elementView: { normalizedCoords: o3, element: n3 } } of this._elementReferences.values()) null != o3 && s2(o3.rings, s4) && i.push({ type: "media", element: n3, layer: this.layer, mapPoint: e4, sourcePoint: n3.toSource(e4) });
    return i.reverse();
  }
  canResume() {
    return null != this.layer.source && super.canResume();
  }
  async doRefresh() {
    this._fetchQueue.reset(), this._tileStrategy.refresh((e4) => this._updateTile(e4));
  }
  _acquireTile(e4) {
    const t = new C(e4.clone());
    return this._updateTile(t), t;
  }
  _updateTile(e4) {
    this._updatingHandles.addPromise(this._fetchQueue.push(e4.key).then((t) => {
      const [i, r6] = e4.setElements(t);
      this._referenceElements(e4, i), this._dereferenceElements(e4, r6), this.requestUpdate();
    }, (e5) => {
      b(e5) || n.getLogger(this).error(e5);
    }));
  }
  _releaseTile(e4) {
    this._fetchQueue.abort(e4.key.id), e4.elements && this._dereferenceElements(e4, e4.elements), this.requestUpdate();
  }
  async _queryElements(e4, t) {
    const i = this.layer.effectiveSource;
    if (null == i) return [];
    this.view.featuresTilingScheme.getTileBounds(S, e4, true);
    const r6 = new w({ xmin: S[0], ymin: S[1], xmax: S[2], ymax: S[3], spatialReference: this.view.spatialReference });
    return i.queryElements(r6, t);
  }
  _referenceElements(e4, t) {
    if (null != this.layer.source) for (const i of t) this._referenceElement(e4, i);
  }
  _referenceElement(e4, i) {
    r2(this._elementReferences, i.uid, () => {
      const e5 = new m3({ element: i, spatialReference: this.view.spatialReference }), s4 = new q(e5);
      return this._overlayContainer.addChild(s4), this.elements.add(i), this._updatingHandles.addPromise(i.load().catch((e6) => {
        n.getLogger("esri.views.2d.layers.MediaLayerView2D").error(new s("element-load-error", "Element cannot be displayed", { element: i, error: e6 }));
      })), { debugGraphic: null, elementView: e5, overlay: s4, tiles: /* @__PURE__ */ new Set() };
    }).tiles.add(e4);
  }
  _dereferenceElements(e4, t) {
    for (const i of t) this._dereferenceElement(e4, i);
  }
  _dereferenceElement(e4, t) {
    var _a;
    const i = this._elementReferences.get(t.uid);
    i.tiles.delete(e4), i.tiles.size || (this._overlayContainer.removeChild(i.overlay), i.overlay.destroy(), i.elementView.destroy(), this._elementReferences.delete(t.uid), this.elements.remove(t), (_a = this._debugGraphicsView) == null ? void 0 : _a.graphics.remove(i.debugGraphic));
  }
  _elementUpdateHandler(e4) {
    var _a;
    let t = this._elementReferences.get(e4.uid);
    if (t) {
      const i2 = t.elementView.normalizedCoords;
      if (null == i2) return this._overlayContainer.removeChild(t.overlay), t.overlay.destroy(), t.elementView.destroy(), this._elementReferences.delete(e4.uid), this.elements.remove(e4), void ((_a = this._debugGraphicsView) == null ? void 0 : _a.graphics.remove(t.debugGraphic));
      const r6 = [], s4 = [];
      for (const e5 of this._tileStrategy.tiles) {
        const o3 = R(this.view.featuresTilingScheme, e5, i2);
        t.tiles.has(e5) ? o3 || s4.push(e5) : o3 && r6.push(e5);
      }
      for (const t2 of r6) this._referenceElement(t2, e4);
      for (const t2 of s4) this._dereferenceElement(t2, e4);
      return t = this._elementReferences.get(e4.uid), void ((t == null ? void 0 : t.debugGraphic) && (t.debugGraphic.geometry = t.elementView.normalizedCoords, this._debugGraphicsView.graphicUpdateHandler({ graphic: t.debugGraphic, property: "geometry" })));
    }
    const i = new m3({ element: e4, spatialReference: this.view.spatialReference }).normalizedCoords;
    if (null != i) for (const r6 of this._tileStrategy.tiles) {
      R(this.view.featuresTilingScheme, r6, i) && this._referenceElement(r6, e4);
    }
  }
};
r([m()], G.prototype, "layer", void 0), r([m({ readOnly: true })], G.prototype, "elements", void 0), G = r([a("esri.views.2d.layers.MediaLayerView2D")], G);
var S = u();
var q2 = { xmin: 0, ymin: 0, xmax: 0, ymax: 0 };
function R(e4, t, i) {
  return e4.getTileBounds(S, t.key, true), q2.xmin = S[0], q2.ymin = S[1], q2.xmax = S[2], q2.ymax = S[3], x(q2, i);
}
var C = class {
  constructor(e4) {
    this.key = e4, this.elements = null, this.isReady = false, this.visible = true;
  }
  setElements(e4) {
    const t = [], i = new Set(this.elements);
    this.elements = e4;
    for (const r6 of e4) i.has(r6) ? i.delete(r6) : t.push(r6);
    return this.isReady = true, [t, Array.from(i)];
  }
  destroy() {
  }
};
var T = G;
export {
  T as default
};
//# sourceMappingURL=MediaLayerView2D-MQF6DDCW.js.map
