import {
  E,
  _,
  f as f2,
  g,
  u,
  x
} from "./chunk-QYSQ6XPQ.js";
import {
  i
} from "./chunk-LQEYS467.js";
import {
  a as a3
} from "./chunk-A66MNK5C.js";
import {
  F,
  P
} from "./chunk-LEOFRCUR.js";
import {
  o as o2
} from "./chunk-YVSEBNS4.js";
import {
  b
} from "./chunk-6RLUKSNK.js";
import {
  o
} from "./chunk-HLF5XJSV.js";
import {
  r as r2
} from "./chunk-L6D73M4D.js";
import {
  n as n2
} from "./chunk-7O7KFKCG.js";
import {
  f
} from "./chunk-VU6O6TFT.js";
import {
  m
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a2
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  a,
  n2 as n,
  s2 as s
} from "./chunk-PKLD5YJF.js";

// node_modules/@arcgis/core/layers/support/LabelExpressionInfo.js
var l;
var n3 = l = class extends f {
  constructor() {
    super(...arguments), this.expression = null, this.title = null, this.value = null;
  }
  readExpression(r3, e) {
    return e.value ? E(e.value) : r3;
  }
  writeExpression(r3, e, o3) {
    null != this.value && (r3 = E(this.value)), null != r3 && (e[o3] = r3);
  }
  clone() {
    return new l({ expression: this.expression, title: this.title, value: this.value });
  }
};
r([m({ type: String, json: { write: { writerEnsuresNonNull: true } } })], n3.prototype, "expression", void 0), r([o("expression", ["expression", "value"])], n3.prototype, "readExpression", null), r([r2("expression")], n3.prototype, "writeExpression", null), r([m({ type: String, json: { write: true, origins: { "web-scene": { write: false } } } })], n3.prototype, "title", void 0), r([m({ json: { read: false, write: false } })], n3.prototype, "value", void 0), n3 = l = r([a2("esri.layers.support.LabelExpressionInfo")], n3);
var a4 = n3;

// node_modules/@arcgis/core/layers/support/LabelClass.js
var S;
var L = new n2({ esriServerPointLabelPlacementAboveCenter: "above-center", esriServerPointLabelPlacementAboveLeft: "above-left", esriServerPointLabelPlacementAboveRight: "above-right", esriServerPointLabelPlacementBelowCenter: "below-center", esriServerPointLabelPlacementBelowLeft: "below-left", esriServerPointLabelPlacementBelowRight: "below-right", esriServerPointLabelPlacementCenterCenter: "center-center", esriServerPointLabelPlacementCenterLeft: "center-left", esriServerPointLabelPlacementCenterRight: "center-right", esriServerLinePlacementAboveAfter: "above-after", esriServerLinePlacementAboveAlong: "above-along", esriServerLinePlacementAboveBefore: "above-before", esriServerLinePlacementAboveStart: "above-start", esriServerLinePlacementAboveEnd: "above-end", esriServerLinePlacementBelowAfter: "below-after", esriServerLinePlacementBelowAlong: "below-along", esriServerLinePlacementBelowBefore: "below-before", esriServerLinePlacementBelowStart: "below-start", esriServerLinePlacementBelowEnd: "below-end", esriServerLinePlacementCenterAfter: "center-after", esriServerLinePlacementCenterAlong: "center-along", esriServerLinePlacementCenterBefore: "center-before", esriServerLinePlacementCenterStart: "center-start", esriServerLinePlacementCenterEnd: "center-end", esriServerPolygonPlacementAlwaysHorizontal: "always-horizontal" }, { ignoreUnknown: true });
function P2(e, r3, t2) {
  return { enabled: !b(t2 == null ? void 0 : t2.layer) };
}
function x2(e) {
  var _a;
  return !e || "service" !== e.origin && !("map-image" === ((_a = e.layer) == null ? void 0 : _a.type));
}
function g2(e) {
  return "map-image" === (e == null ? void 0 : e.type);
}
function E2(e) {
  var _a, _b;
  return !!g2(e) && !!((_b = (_a = e.capabilities) == null ? void 0 : _a.exportMap) == null ? void 0 : _b.supportsArcadeExpressionForLabeling);
}
function j(e) {
  return x2(e) || E2(e == null ? void 0 : e.layer);
}
var A = S = class extends f {
  static evaluateWhere(e, r3) {
    const t2 = (e2, r4, t3) => {
      switch (r4) {
        case "=":
          return e2 == t3;
        case "<>":
          return e2 != t3;
        case ">":
          return e2 > t3;
        case ">=":
          return e2 >= t3;
        case "<":
          return e2 < t3;
        case "<=":
          return e2 <= t3;
      }
      return false;
    };
    try {
      if (null == e) return true;
      const o3 = e.split(" ");
      if (3 === o3.length) return t2(r3[o3[0]], o3[1], o3[2]);
      if (7 === o3.length) {
        const e2 = t2(r3[o3[0]], o3[1], o3[2]), i3 = o3[3], l3 = t2(r3[o3[4]], o3[5], o3[6]);
        switch (i3) {
          case "AND":
            return e2 && l3;
          case "OR":
            return e2 || l3;
        }
      }
      return false;
    } catch (o3) {
    }
  }
  constructor(e) {
    super(e), this.type = "label", this.name = null, this.allowOverrun = false, this.deconflictionStrategy = "static", this.labelExpression = null, this.labelExpressionInfo = null, this.labelPlacement = null, this.labelPosition = "curved", this.maxScale = 0, this.minScale = 0, this.repeatLabel = true, this.repeatLabelDistance = null, this.symbol = a3, this.useCodedValues = void 0, this.where = null;
  }
  readLabelExpression(e, r3) {
    const t2 = r3.labelExpressionInfo;
    if (!t2 || !t2.value && !t2.expression) return e;
  }
  writeLabelExpression(e, r3, t2) {
    if (this.labelExpressionInfo) {
      if (null != this.labelExpressionInfo.value) e = u(this.labelExpressionInfo.value);
      else if (null != this.labelExpressionInfo.expression) {
        const r4 = _(this.labelExpressionInfo.expression);
        r4 && (e = "[" + r4 + "]");
      }
    }
    null != e && (r3[t2] = e);
  }
  writeLabelExpressionInfo(e, r3, t2, o3) {
    if (null == e && null != this.labelExpression && x2(o3)) e = new a4({ expression: this.getLabelExpressionArcade() });
    else if (!e) return;
    const i3 = e.toJSON(o3);
    i3.expression && (r3[t2] = i3);
  }
  writeMaxScale(e, r3) {
    (e || this.minScale) && (r3.maxScale = e);
  }
  writeMinScale(e, r3) {
    (e || this.maxScale) && (r3.minScale = e);
  }
  getLabelExpression() {
    return x(this);
  }
  getLabelExpressionArcade() {
    return f2(this);
  }
  getLabelExpressionSingleField() {
    return g(this);
  }
  hash() {
    return JSON.stringify(this);
  }
  clone() {
    return new S({ allowOverrun: this.allowOverrun, deconflictionStrategy: this.deconflictionStrategy, labelExpression: this.labelExpression, labelExpressionInfo: a(this.labelExpressionInfo), labelPosition: this.labelPosition, labelPlacement: this.labelPlacement, maxScale: this.maxScale, minScale: this.minScale, name: this.name, repeatLabel: this.repeatLabel, repeatLabelDistance: this.repeatLabelDistance, symbol: a(this.symbol), where: this.where, useCodedValues: this.useCodedValues });
  }
};
r([m({ type: String, json: { write: true } })], A.prototype, "name", void 0), r([m({ type: Boolean, json: { write: true, default: false, origins: { "web-scene": { write: false }, "portal-item": { default: false, write: { overridePolicy: P2 } } } } })], A.prototype, "allowOverrun", void 0), r([m({ type: String, json: { write: true, default: "static", origins: { "web-scene": { write: false }, "portal-item": { default: "static", write: { overridePolicy: P2 } } } } })], A.prototype, "deconflictionStrategy", void 0), r([m({ type: String, json: { write: { overridePolicy(e, r3, t2) {
  return this.labelExpressionInfo && "service" === (t2 == null ? void 0 : t2.origin) && E2(t2.layer) ? { enabled: false } : { allowNull: true };
} } } })], A.prototype, "labelExpression", void 0), r([o("labelExpression")], A.prototype, "readLabelExpression", null), r([r2("labelExpression")], A.prototype, "writeLabelExpression", null), r([m({ type: a4, json: { write: { overridePolicy: (e, r3, t2) => j(t2) ? { allowNull: true } : { enabled: false } } } })], A.prototype, "labelExpressionInfo", void 0), r([r2("labelExpressionInfo")], A.prototype, "writeLabelExpressionInfo", null), r([m({ type: L.apiValues, json: { type: L.jsonValues, read: L.read, write: L.write } })], A.prototype, "labelPlacement", void 0), r([m({ type: ["curved", "parallel"], json: { write: true, origins: { "web-map": { write: false }, "web-scene": { write: false }, "portal-item": { write: false } } } })], A.prototype, "labelPosition", void 0), r([m({ type: Number })], A.prototype, "maxScale", void 0), r([r2("maxScale")], A.prototype, "writeMaxScale", null), r([m({ type: Number })], A.prototype, "minScale", void 0), r([r2("minScale")], A.prototype, "writeMinScale", null), r([m({ type: Boolean, json: { write: true, origins: { "web-scene": { write: false }, "portal-item": { write: { overridePolicy: P2 } } } } })], A.prototype, "repeatLabel", void 0), r([m({ type: Number, cast: o2, json: { write: true, origins: { "web-scene": { write: false }, "portal-item": { write: { overridePolicy: P2 } } } } })], A.prototype, "repeatLabelDistance", void 0), r([m({ types: F, json: { origins: { "web-scene": { types: P, write: i, default: null } }, write: i, default: null } })], A.prototype, "symbol", void 0), r([m({ type: Boolean, json: { write: true } })], A.prototype, "useCodedValues", void 0), r([m({ type: String, json: { write: true } })], A.prototype, "where", void 0), A = S = r([a2("esri.layers.support.LabelClass")], A);
var C = A;

// node_modules/@arcgis/core/layers/support/labelingInfo.js
var t = () => n.getLogger("esri.layers.support.labelingInfo");
var l2 = /\[([^[\]]+)\]/gi;
function n4(e, o3, t2) {
  return e ? e.map((e2) => {
    var _a;
    const n5 = new C();
    if (n5.read(e2, t2), n5.labelExpression) {
      const e3 = o3.fields || ((_a = o3.layerDefinition) == null ? void 0 : _a.fields) || this.fields;
      n5.labelExpression = n5.labelExpression.replaceAll(l2, (o4, r3) => `[${s2(r3, e3)}]`);
    }
    return n5;
  }) : null;
}
function s2(e, o3) {
  if (!o3) return e;
  const r3 = e.toLowerCase();
  for (let t2 = 0; t2 < o3.length; t2++) {
    const e2 = o3[t2].name;
    if (e2.toLowerCase() === r3) return e2;
  }
  return e;
}
var i2 = { esriGeometryPoint: ["above-right", "above-center", "above-left", "center-center", "center-left", "center-right", "below-center", "below-left", "below-right"], esriGeometryMultiPatch: ["always-horizontal"], esriGeometryPolygon: ["always-horizontal"], esriGeometryPolyline: ["center-along", "above-along", "below-along"], esriGeometryMultipoint: null, esriGeometryEnvelope: null };
function a5(o3, r3) {
  const l3 = [];
  for (const n5 of o3) {
    const o4 = n5.labelPlacement, s3 = i2[r3];
    if (!n5.symbol) return t().warn("No ILabelClass symbol specified."), [];
    if (!s3) return t().error(new s("labeling:unsupported-geometry-type", `Unable to create labels for layer, geometry type '${r3}' is not supported`)), [];
    if (s3.includes(o4)) l3.push(n5);
    else {
      const e = s3[0];
      o4 && t().warn(`Found invalid label placement type ${o4} for ${r3}. Defaulting to ${e}`);
      const i3 = n5.clone();
      i3.labelPlacement = e, l3.push(i3);
    }
  }
  return l3;
}

export {
  C,
  n4 as n,
  a5 as a
};
//# sourceMappingURL=chunk-DFLI5RC4.js.map
