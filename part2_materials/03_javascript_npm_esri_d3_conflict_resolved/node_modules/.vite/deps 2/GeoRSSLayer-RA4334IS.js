import {
  f as f2
} from "./chunk-LCFK6PEB.js";
import {
  j
} from "./chunk-F3W2DG3D.js";
import {
  l
} from "./chunk-YMJZWW2N.js";
import "./chunk-7Q4JSL7R.js";
import "./chunk-VBJTBJYL.js";
import {
  t
} from "./chunk-ES2OYM5K.js";
import {
  b
} from "./chunk-JXPOROPE.js";
import {
  d,
  u,
  y
} from "./chunk-OPBXQTOC.js";
import "./chunk-DKMSVKV3.js";
import "./chunk-YIIXBP6I.js";
import {
  S
} from "./chunk-LN6VH2LB.js";
import "./chunk-GZFJKWTS.js";
import "./chunk-2DHZIDQK.js";
import {
  n as n2
} from "./chunk-LEOFRCUR.js";
import {
  S as S2,
  d as d2,
  n,
  y as y2
} from "./chunk-CP4GPQHD.js";
import "./chunk-IZSNXKMJ.js";
import "./chunk-IOKAACTA.js";
import "./chunk-VFTH6C2E.js";
import "./chunk-M5RSIRGD.js";
import "./chunk-UYSPJCCV.js";
import "./chunk-SMFCDOAJ.js";
import {
  f
} from "./chunk-2HEBE37N.js";
import "./chunk-5A4G4OVM.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-44C2A72D.js";
import "./chunk-DIKY6MBW.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-GGCWKF4X.js";
import "./chunk-6D5XULXX.js";
import "./chunk-445IB4DS.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import "./chunk-H4N5QOMX.js";
import "./chunk-F2LC36UV.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-Z2DWZ5IF.js";
import "./chunk-6RLUKSNK.js";
import "./chunk-UN4ISSP7.js";
import "./chunk-E2RPCJOE.js";
import "./chunk-TKY5RBM3.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-SIQNRYEG.js";
import "./chunk-TTDEVHSF.js";
import "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-BMGF5ELJ.js";
import "./chunk-JU6MEO4D.js";
import "./chunk-CY5MS6DC.js";
import "./chunk-C6FFJ4QS.js";
import "./chunk-Q4Q32WYV.js";
import {
  w
} from "./chunk-A3J7W53Y.js";
import {
  o
} from "./chunk-HLF5XJSV.js";
import "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-Y6AYXNMP.js";
import "./chunk-6YWQXXBX.js";
import {
  C
} from "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import {
  U
} from "./chunk-X7VTUWCX.js";
import {
  qt
} from "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import {
  m
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import {
  a as a2
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import {
  s
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/layers/GeoRSSLayer.js
var G = ["atom", "xml"];
var P = { base: n, key: "type", typeMap: { "simple-line": d2 }, errorContext: "symbol" };
var R = { base: n, key: "type", typeMap: { "picture-marker": n2, "simple-marker": y2 }, errorContext: "symbol" };
var k = { base: n, key: "type", typeMap: { "simple-fill": S2 }, errorContext: "symbol" };
var _ = class extends l(f2(b(j(t(S(f)))))) {
  constructor(...e) {
    super(...e), this.description = null, this.fullExtent = null, this.legendEnabled = true, this.lineSymbol = null, this.pointSymbol = null, this.polygonSymbol = null, this.operationalLayerType = "GeoRSS", this.url = null, this.type = "geo-rss";
  }
  normalizeCtorArgs(e, o2) {
    return "string" == typeof e ? { url: e, ...o2 } : e;
  }
  readFeatureCollections(e, o2) {
    return o2.featureCollection.layers.forEach((e2) => {
      var _a;
      const o3 = e2.layerDefinition.drawingInfo.renderer.symbol;
      o3 && "esriSFS" === o3.type && ((_a = o3.outline) == null ? void 0 : _a.style.includes("esriSFS")) && (o3.outline.style = "esriSLSSolid");
    }), o2.featureCollection.layers;
  }
  get hasPoints() {
    return this._hasGeometry("esriGeometryPoint");
  }
  get hasPolylines() {
    return this._hasGeometry("esriGeometryPolyline");
  }
  get hasPolygons() {
    return this._hasGeometry("esriGeometryPolygon");
  }
  get title() {
    const e = this._get("title");
    return e && "defaults" !== this.originOf("title") ? e : this.url ? qt(this.url, G) || "GeoRSS" : e;
  }
  set title(e) {
    this._set("title", e);
  }
  load(e) {
    const o2 = null != e ? e.signal : null;
    return this.addResolvingPromise(this.loadFromPortal({ supportedTypes: ["Map Service", "Feature Service", "Feature Collection", "Scene Service"] }, e).catch(a2).then(() => this._fetchService(o2)).then((e2) => {
      this.read(e2, { origin: "service" });
    })), Promise.resolve(this);
  }
  async hasDataChanged() {
    const e = await this._fetchService();
    return this.read(e, { origin: "service", ignoreDefaults: true }), true;
  }
  async _fetchService(e) {
    const t2 = this.spatialReference, { data: s2 } = await U(s.geoRSSServiceUrl, { query: { url: this.url, refresh: !!this.loaded || void 0, outSR: C(t2) ? void 0 : t2.wkid ?? JSON.stringify(t2) }, signal: e });
    return s2;
  }
  _hasGeometry(e) {
    var _a;
    return ((_a = this.featureCollections) == null ? void 0 : _a.some((o2) => {
      var _a2, _b;
      return ((_a2 = o2.featureSet) == null ? void 0 : _a2.geometryType) === e && ((_b = o2.featureSet.features) == null ? void 0 : _b.length) > 0;
    })) ?? false;
  }
};
r([m()], _.prototype, "description", void 0), r([m()], _.prototype, "featureCollections", void 0), r([o("service", "featureCollections", ["featureCollection.layers"])], _.prototype, "readFeatureCollections", null), r([m({ type: w, json: { name: "lookAtExtent" } })], _.prototype, "fullExtent", void 0), r([m(u)], _.prototype, "id", void 0), r([m(d)], _.prototype, "legendEnabled", void 0), r([m({ types: P, json: { write: true } })], _.prototype, "lineSymbol", void 0), r([m({ type: ["show", "hide"] })], _.prototype, "listMode", void 0), r([m({ types: R, json: { write: true } })], _.prototype, "pointSymbol", void 0), r([m({ types: k, json: { write: true } })], _.prototype, "polygonSymbol", void 0), r([m({ type: ["GeoRSS"] })], _.prototype, "operationalLayerType", void 0), r([m(y)], _.prototype, "url", void 0), r([m({ json: { origins: { service: { read: { source: "name", reader: (e) => e || void 0 } } } } })], _.prototype, "title", null), r([m({ readOnly: true, json: { read: false }, value: "geo-rss" })], _.prototype, "type", void 0), _ = r([a("esri.layers.GeoRSSLayer")], _);
var w2 = _;
export {
  w2 as default
};
//# sourceMappingURL=GeoRSSLayer-RA4334IS.js.map
