import {
  a as a2
} from "./chunk-JQJITHTO.js";
import {
  o
} from "./chunk-6LGJYARD.js";
import {
  a
} from "./chunk-N42IF4WX.js";
import {
  e
} from "./chunk-L7OHH2HW.js";
import {
  n
} from "./chunk-LPNAPHOF.js";

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/attributes/NormalAttribute.glsl.js
function t(t2, i2) {
  switch (i2.normalType) {
    case a3.Compressed:
      t2.attributes.add(e.NORMALCOMPRESSED, "vec2"), t2.vertex.code.add(o`vec3 decompressNormal(vec2 normal) {
float z = 1.0 - abs(normal.x) - abs(normal.y);
return vec3(normal + sign(normal) * min(z, 0.0), z);
}
vec3 normalModel() {
return decompressNormal(normalCompressed);
}`);
      break;
    case a3.Attribute:
      t2.attributes.add(e.NORMAL, "vec3"), t2.vertex.code.add(o`vec3 normalModel() {
return normal;
}`);
      break;
    case a3.ScreenDerivative:
      t2.fragment.code.add(o`vec3 screenDerivativeNormal(vec3 positionView) {
return normalize(cross(dFdx(positionView), dFdy(positionView)));
}`);
      break;
    default:
      n(i2.normalType);
    case a3.COUNT:
  }
}
var a3;
!function(e3) {
  e3[e3.Attribute = 0] = "Attribute", e3[e3.Compressed = 1] = "Compressed", e3[e3.ScreenDerivative = 2] = "ScreenDerivative", e3[e3.COUNT = 3] = "COUNT";
}(a3 || (a3 = {}));

// node_modules/@arcgis/core/views/3d/layers/support/symbolColorUtils.js
var n2;
!function(t2) {
  t2[t2.Multiply = 1] = "Multiply", t2[t2.Ignore = 2] = "Ignore", t2[t2.Replace = 3] = "Replace", t2[t2.Tint = 4] = "Tint";
}(n2 || (n2 = {}));
var i = 85;
var l = 2 * i;

// node_modules/@arcgis/core/views/3d/webgl-engine/collections/Component/Material/shader/DecodeSymbolColor.glsl.js
function e2(e3) {
  e3.vertex.code.add(o`
    vec4 decodeSymbolColor(vec4 symbolColor, out int colorMixMode) {
      float symbolAlpha = 0.0;

      const float maxTint = 85.0;
      const float maxReplace = 170.0;
      const float scaleAlpha = 3.0;

      if (symbolColor.a > maxReplace) {
        colorMixMode = ${o.int(n2.Multiply)};
        symbolAlpha = scaleAlpha * (symbolColor.a - maxReplace);
      } else if (symbolColor.a > maxTint) {
        colorMixMode = ${o.int(n2.Replace)};
        symbolAlpha = scaleAlpha * (symbolColor.a - maxTint);
      } else if (symbolColor.a > 0.0) {
        colorMixMode = ${o.int(n2.Tint)};
        symbolAlpha = scaleAlpha * symbolColor.a;
      } else {
        colorMixMode = ${o.int(n2.Multiply)};
        symbolAlpha = 0.0;
      }

      return vec4(symbolColor.r, symbolColor.g, symbolColor.b, symbolAlpha);
    }
  `);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderLibrary/util/DoublePrecision.glsl.js
function c({ code: c2 }, i2) {
  i2.doublePrecisionRequiresObfuscation ? c2.add(o`vec3 dpPlusFrc(vec3 a, vec3 b) {
return mix(a, a + b, vec3(notEqual(b, vec3(0))));
}
vec3 dpMinusFrc(vec3 a, vec3 b) {
return mix(vec3(0), a - b, vec3(notEqual(a, b)));
}
vec3 dpAdd(vec3 hiA, vec3 loA, vec3 hiB, vec3 loB) {
vec3 t1 = dpPlusFrc(hiA, hiB);
vec3 e = dpMinusFrc(t1, hiA);
vec3 t2 = dpMinusFrc(hiB, e) + dpMinusFrc(hiA, dpMinusFrc(t1, e)) + loA + loB;
return t1 + t2;
}`) : c2.add(o`vec3 dpAdd(vec3 hiA, vec3 loA, vec3 hiB, vec3 loB) {
vec3 t1 = hiA + hiB;
vec3 e = t1 - hiA;
vec3 t2 = ((hiB - e) + (hiA - (t1 - e))) + loA + loB;
return t1 + t2;
}`);
}

// node_modules/@arcgis/core/views/3d/webgl-engine/core/shaderModules/Matrix3DrawUniform.js
var o2 = class extends a2 {
  constructor(r2, o3) {
    super(r2, "mat3", a.Draw, (e3, s, t2) => e3.setUniformMatrix3fv(r2, o3(s, t2)));
  }
};

export {
  n2 as n,
  e2 as e,
  t,
  a3 as a,
  c,
  o2 as o
};
//# sourceMappingURL=chunk-W3O5CFJ6.js.map
