import {
  N
} from "./chunk-3FC4BMWX.js";
import {
  Be,
  Ce,
  Ee,
  He,
  K,
  Ke,
  U,
  Ue,
  Y,
  a,
  de,
  ie,
  je,
  ke,
  qe,
  r,
  ye
} from "./chunk-DP4BKMXB.js";
import {
  E
} from "./chunk-ZFCZ2Q23.js";
import "./chunk-Q4J5AN2X.js";
import "./chunk-OJRG2YGM.js";
import "./chunk-MBR7IVUG.js";
import "./chunk-EFVIMN4N.js";
import "./chunk-WGIZLWW7.js";
import "./chunk-PUOCGOJB.js";
import "./chunk-DBQLTBDH.js";
import "./chunk-AMH7OVBF.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-M5RSIRGD.js";
import "./chunk-UYSPJCCV.js";
import "./chunk-5A4G4OVM.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-Z2DWZ5IF.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-A3J7W53Y.js";
import "./chunk-HLF5XJSV.js";
import "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import "./chunk-X7VTUWCX.js";
import "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import "./chunk-GD4XDYZL.js";
import "./chunk-33ECLFFF.js";
import "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/arcade/functions/featuresetstring.js
function T(a2, e) {
  return a2 && a2.domain ? "coded-value" === a2.domain.type || "codedValue" === a2.domain.type ? N.convertObjectToArcadeDictionary({ type: "codedValue", name: a2.domain.name, dataType: E[a2.field.type], codedValues: a2.domain.codedValues.map((n) => ({ name: n.name, code: n.code })) }, Be(e)) : N.convertObjectToArcadeDictionary({ type: "range", name: a2.domain.name, dataType: E[a2.field.type], min: a2.domain.minValue, max: a2.domain.maxValue }, Be(e)) : null;
}
function b(h) {
  "async" === h.mode && (h.functions.domain = function(n, d) {
    return h.standardFunctionAsync(n, d, async (u, m, f) => {
      if (ie(f, 2, 3, n, d), U(f[0])) {
        return T(qe(f[0], de(f[1]), void 0 === f[2] ? void 0 : f[2]), n);
      }
      if (K(f[0])) {
        await f[0]._ensureLoaded();
        return T(je(de(f[1]), f[0], null, void 0 === f[2] ? void 0 : f[2]), n);
      }
      throw new a(n, r.InvalidParameter, d);
    });
  }, h.functions.subtypes = function(o, i) {
    return h.standardFunctionAsync(o, i, async (s, m, f) => {
      if (ie(f, 1, 1, o, i), U(f[0])) {
        const a2 = Ee(f[0]);
        return a2 ? N.convertObjectToArcadeDictionary(a2, Be(o)) : null;
      }
      if (K(f[0])) {
        await f[0]._ensureLoaded();
        const a2 = f[0].subtypeMetaData();
        return a2 ? N.convertObjectToArcadeDictionary(a2, Be(o)) : null;
      }
      throw new a(o, r.InvalidParameter, i);
    });
  }, h.functions.domainname = function(n, o) {
    return h.standardFunctionAsync(n, o, async (d, u, l) => {
      if (ie(l, 2, 4, n, o), U(l[0])) return Ue(l[0], de(l[1]), l[2], void 0 === l[3] ? void 0 : l[3]);
      if (K(l[0])) {
        await l[0]._ensureLoaded();
        const n2 = je(de(l[1]), l[0], null, void 0 === l[3] ? void 0 : l[3]);
        return ke(n2, l[2]);
      }
      throw new a(n, r.InvalidParameter, o);
    });
  }, h.signatures.push({ name: "domainname", min: 2, max: 4 }), h.functions.domaincode = function(n, o) {
    return h.standardFunctionAsync(n, o, async (d, u, m) => {
      if (ie(m, 2, 4, n, o), U(m[0])) return He(m[0], de(m[1]), m[2], void 0 === m[3] ? void 0 : m[3]);
      if (K(m[0])) {
        await m[0]._ensureLoaded();
        const n2 = je(de(m[1]), m[0], null, void 0 === m[3] ? void 0 : m[3]);
        return Ce(n2, m[2]);
      }
      throw new a(n, r.InvalidParameter, o);
    });
  }, h.signatures.push({ name: "domaincode", min: 2, max: 4 }), h.functions.text = function(n, r2) {
    return h.standardFunctionAsync(n, r2, async (o, i, s) => {
      if (ie(s, 1, 2, n, r2), K(s[0])) {
        const t = Y(s[1], "");
        if ("" === t) return s[0].castToText();
        if ("schema" === t.toLowerCase()) return s[0].convertToText("schema", o.abortSignal);
        if ("featureset" === t.toLowerCase()) return s[0].convertToText("featureset", o.abortSignal);
        throw new a(n, r.InvalidParameter, r2);
      }
      return ye(s[0], s[1]);
    });
  }, h.functions.gdbversion = function(n, o) {
    return h.standardFunctionAsync(n, o, async (i, s, d) => {
      if (ie(d, 1, 1, n, o), U(d[0])) return d[0].gdbVersion();
      if (K(d[0])) {
        return (await d[0].load()).gdbVersion;
      }
      throw new a(n, r.InvalidParameter, o);
    });
  }, h.functions.schema = function(o, i) {
    return h.standardFunctionAsync(o, i, async (s, d, m) => {
      if (ie(m, 1, 1, o, i), K(m[0])) return await m[0].load(), N.convertObjectToArcadeDictionary(m[0].schema(), Be(o));
      if (U(m[0])) {
        const a2 = Ke(m[0]);
        return a2 ? N.convertObjectToArcadeDictionary(a2, Be(o)) : null;
      }
      throw new a(o, r.InvalidParameter, i);
    });
  });
}
export {
  b as registerFunctions
};
//# sourceMappingURL=featuresetstring-MIUNJ77Y.js.map
