import {
  o as o3
} from "./chunk-KBZZPZL2.js";
import {
  j
} from "./chunk-GMOP42UF.js";
import {
  p as p2
} from "./chunk-GT4YOV7H.js";
import {
  i
} from "./chunk-3GYJQZ7U.js";
import {
  p
} from "./chunk-LKSPV4ZE.js";
import {
  n as n5
} from "./chunk-QB7C6VGC.js";
import {
  C as C2,
  a as a3
} from "./chunk-DFLI5RC4.js";
import {
  m as m3,
  u as u2
} from "./chunk-YYZ2CTYE.js";
import {
  Z
} from "./chunk-GGPPKSP2.js";
import {
  p as p3
} from "./chunk-7ZA6GWGF.js";
import {
  W,
  c as c3
} from "./chunk-5IA763KB.js";
import {
  l,
  u
} from "./chunk-OPBXQTOC.js";
import {
  S
} from "./chunk-LN6VH2LB.js";
import {
  c as c2
} from "./chunk-2DHZIDQK.js";
import {
  b
} from "./chunk-WGIZLWW7.js";
import {
  r as r4
} from "./chunk-XQH2QDB2.js";
import {
  K,
  c
} from "./chunk-DBQLTBDH.js";
import {
  y
} from "./chunk-AMH7OVBF.js";
import {
  q
} from "./chunk-ATEWWVHG.js";
import {
  x as x2
} from "./chunk-LEOFRCUR.js";
import {
  f
} from "./chunk-D2JPDRZZ.js";
import {
  n as n3
} from "./chunk-BB6L755V.js";
import {
  s as s5
} from "./chunk-44C2A72D.js";
import {
  p as p4
} from "./chunk-6D5XULXX.js";
import {
  n as n4
} from "./chunk-445IB4DS.js";
import {
  o as o2
} from "./chunk-2PK57UYA.js";
import {
  d as d2
} from "./chunk-TDZ623HP.js";
import {
  C,
  d
} from "./chunk-TKY5RBM3.js";
import {
  V as V2
} from "./chunk-SIQNRYEG.js";
import {
  m as m2
} from "./chunk-CY5MS6DC.js";
import {
  w as w2
} from "./chunk-A3J7W53Y.js";
import {
  o
} from "./chunk-HLF5XJSV.js";
import {
  g,
  r as r3
} from "./chunk-L6D73M4D.js";
import {
  s as s4
} from "./chunk-H6RIEXAG.js";
import {
  U
} from "./chunk-X7VTUWCX.js";
import {
  V,
  v
} from "./chunk-QS62R4CH.js";
import {
  e,
  m,
  n2,
  t3 as t2
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a2,
  h,
  r as r2,
  s,
  t,
  w,
  x
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import {
  s as s3
} from "./chunk-GRW2QIBT.js";
import {
  a,
  n2 as n,
  s2
} from "./chunk-PKLD5YJF.js";
import {
  has
} from "./chunk-XKQWTZMW.js";

// node_modules/@arcgis/core/layers/mixins/ArcGISMapService.js
var f2 = (f4) => {
  let b2 = class extends f4 {
    constructor() {
      super(...arguments), this.capabilities = void 0, this.copyright = null, this.fullExtent = null, this.legendEnabled = true, this.spatialReference = null, this.version = void 0, this._allLayersAndTablesMap = null;
    }
    readCapabilities(e2, r5) {
      const t3 = r5.capabilities && r5.capabilities.split(",").map((e3) => e3.toLowerCase().trim());
      if (!t3) return { operations: { supportsExportMap: false, supportsExportTiles: false, supportsIdentify: false, supportsQuery: false, supportsTileMap: false }, exportMap: null, exportTiles: null };
      const s6 = this.type, o4 = "tile" !== s6 && !!r5.supportsDynamicLayers, a4 = t3.includes("query"), p5 = t3.includes("map"), l2 = !!r5.exportTilesAllowed, n6 = t3.includes("tilemap"), c4 = t3.includes("data"), u3 = "tile" !== s6 && (!r5.tileInfo || o4), y2 = "tile" !== s6 && (!r5.tileInfo || o4), m5 = "tile" !== s6, d3 = r5.cimVersion ? r4.parse(r5.cimVersion) : null, h3 = (d3 == null ? void 0 : d3.greaterEqual(1, 4)) ?? false, f5 = (d3 == null ? void 0 : d3.greaterEqual(2, 0)) ?? false;
      return { operations: { supportsExportMap: p5, supportsExportTiles: l2, supportsIdentify: a4, supportsQuery: c4, supportsTileMap: n6 }, exportMap: p5 ? { supportsArcadeExpressionForLabeling: h3, supportsSublayersChanges: m5, supportsDynamicLayers: o4, supportsSublayerVisibility: u3, supportsSublayerDefinitionExpression: y2, supportsCIMSymbols: f5 } : null, exportTiles: l2 ? { maxExportTilesCount: +r5.maxExportTilesCount } : null };
    }
    readVersion(e2, r5) {
      let t3 = r5.currentVersion;
      return t3 || (t3 = r5.hasOwnProperty("capabilities") || r5.hasOwnProperty("tables") ? 10 : r5.hasOwnProperty("supportedImageFormatTypes") ? 9.31 : 9.3), t3;
    }
    async fetchRelatedService(e2) {
      const r5 = this.portalItem;
      if (!r5 || !c2(r5)) return null;
      this._relatedFeatureServicePromise || (this._relatedFeatureServicePromise = r5.fetchRelatedItems({ relationshipType: "Service2Service", direction: "reverse" }, e2).then((e3) => e3.find((e4) => "Feature Service" === e4.type) ?? null, () => null));
      const t3 = await this._relatedFeatureServicePromise;
      return s3(e2), t3 ? { itemId: t3.id, url: t3.url } : null;
    }
    async fetchSublayerInfo(e2, t3) {
      var _a;
      const { source: s6 } = e2;
      if ((this == null ? void 0 : this.portalItem) && "tile" === this.type && "map-layer" === (s6 == null ? void 0 : s6.type) && c2(this.portalItem) && e2.originIdOf("url") < e.SERVICE) {
        const r5 = await this.fetchRelatedService(t3);
        r5 && (e2.url = V(r5.url, s6.mapLayerId.toString()), e2.layerItemId = r5.itemId);
      }
      const { url: i2 } = e2;
      let a4;
      if ("data-layer" === s6.type) {
        a4 = (await U(i2, { responseType: "json", query: { f: "json", ...this.customParameters, token: this.apiKey }, ...t3 })).data;
      } else if (i2 && e2.originIdOf("url") > e.SERVICE) try {
        const e3 = await this._fetchAllLayersAndTablesFromService(i2), r5 = ((_a = d2(i2)) == null ? void 0 : _a.sublayer) ?? s6.mapLayerId;
        a4 = e3.get(r5);
      } catch {
      }
      else {
        let r5 = e2.id;
        "map-layer" === (s6 == null ? void 0 : s6.type) && (r5 = s6.mapLayerId);
        try {
          a4 = (await this.fetchAllLayersAndTables(t3)).get(r5);
        } catch {
        }
      }
      return a4;
    }
    async fetchAllLayersAndTables(e2) {
      var _a;
      return this._fetchAllLayersAndTablesFromService((_a = this.parsedUrl) == null ? void 0 : _a.path, e2);
    }
    async _fetchAllLayersAndTablesFromService(e2, i2) {
      await this.load(i2), this._allLayersAndTablesMap || (this._allLayersAndTablesMap = /* @__PURE__ */ new Map());
      const a4 = d2(e2), p5 = r2(this._allLayersAndTablesMap, a4 == null ? void 0 : a4.url.path, () => U(V(a4 == null ? void 0 : a4.url.path, "/layers"), { responseType: "json", query: { f: "json", ...this.customParameters, token: this.apiKey } }).then((e3) => {
        const r5 = /* @__PURE__ */ new Map(), { layers: t3, tables: s6 } = e3.data, o4 = [...t3 ?? [], ...s6 ?? []];
        for (const i3 of o4) r5.set(i3.id, i3);
        return { result: r5 };
      }, (e3) => ({ error: e3 }))), l2 = await p5;
      if (s3(i2), "result" in l2) return l2.result;
      throw l2.error;
    }
  };
  return r([m({ readOnly: true })], b2.prototype, "capabilities", void 0), r([o("service", "capabilities", ["capabilities", "exportTilesAllowed", "maxExportTilesCount", "supportsDynamicLayers", "tileInfo"])], b2.prototype, "readCapabilities", null), r([m({ json: { read: { source: "copyrightText" } } })], b2.prototype, "copyright", void 0), r([m({ type: w2 })], b2.prototype, "fullExtent", void 0), r([m(u)], b2.prototype, "id", void 0), r([m({ type: Boolean, json: { origins: { service: { read: { enabled: false } } }, read: { source: "showLegend" }, write: { target: "showLegend" } } })], b2.prototype, "legendEnabled", void 0), r([m(l)], b2.prototype, "popupEnabled", void 0), r([m({ type: g })], b2.prototype, "spatialReference", void 0), r([m({ readOnly: true })], b2.prototype, "version", void 0), r([o("service", "version", ["currentVersion", "capabilities", "tables", "supportedImageFormatTypes"])], b2.prototype, "readVersion", null), b2 = r([a2("esri.layers.mixins.ArcGISMapService")], b2), b2;
};

// node_modules/@arcgis/core/layers/support/Sublayer.js
var G;
function H(e2) {
  return "esriSMS" === (e2 == null ? void 0 : e2.type);
}
function z(e2, r5, t3) {
  var _a;
  const i2 = this.originIdOf(r5) >= n2(t3.origin);
  return { ignoreOrigin: true, allowNull: i2, enabled: !!t3 && ("map-image" === ((_a = t3.layer) == null ? void 0 : _a.type) && (t3.writeSublayerStructure || i2)) };
}
function W2(e2, r5, t3) {
  var _a;
  return { enabled: !!t3 && ("tile" === ((_a = t3.layer) == null ? void 0 : _a.type) && (t3.origin && this.originIdOf(r5) >= n2(t3.origin) || this._isOverridden(r5))) };
}
function X(e2, r5, t3) {
  return { ignoreOrigin: true, enabled: t3 && t3.writeSublayerStructure || false };
}
function Y(e2, r5, t3) {
  return { ignoreOrigin: true, enabled: !!t3 && (t3.writeSublayerStructure || this.originIdOf(r5) >= n2(t3.origin)) };
}
var Z2 = 0;
var ee = /* @__PURE__ */ new Set(["layer", "parent", "loaded", "loadStatus", "loadError", "loadWarnings"]);
var re = G = class extends S(s5(m2)) {
  constructor(e2) {
    super(e2), this.capabilities = void 0, this.maxScaleRange = { minScale: 0, maxScale: 0 }, this.fields = null, this.fullExtent = null, this.geometryType = null, this.globalIdField = null, this.isTable = false, this.legendEnabled = true, this.objectIdField = null, this.parent = null, this.popupEnabled = true, this.popupTemplate = null, this.relationships = null, this.sourceJSON = null, this.spatialReference = null, this.title = null, this.typeIdField = null, this.type = "sublayer", this.types = null, this._lastParsedUrl = null;
  }
  async load(e2) {
    return this.addResolvingPromise((async () => {
      const { layer: r5, url: t3 } = this;
      if (!r5 && !t3) throw new s2("sublayer:missing-layer", "Sublayer can't be loaded without being part of a layer", { sublayer: this });
      const i2 = r5 ? await r5.fetchSublayerInfo(this, e2) : (await U(t3, { responseType: "json", query: { f: "json" }, ...e2 })).data;
      i2 && (this.sourceJSON = i2, this.read({ layerDefinition: i2 }, { origin: "service", layer: r5, url: f(t3) }));
    })()), this;
  }
  readCapabilities(e2, r5) {
    r5 = r5.layerDefinition || r5;
    const { operations: { supportsQuery: t3, supportsQueryAttachments: i2 }, query: { supportsFormatPBF: o4, supportsOrderBy: s6, supportsPagination: a4 }, data: { supportsAttachment: l2 }, queryRelated: n6 } = i(r5, this.url);
    return { exportMap: { supportsModification: !!r5.canModifyLayer }, operations: { supportsQuery: t3, supportsQueryAttachments: i2 }, data: { supportsAttachment: l2 }, query: { supportsFormatPBF: o4, supportsOrderBy: s6, supportsPagination: a4 }, queryRelated: n6 };
  }
  get defaultPopupTemplate() {
    return this.createPopupTemplate();
  }
  set definitionExpression(e2) {
    this._setAndNotifyLayer("definitionExpression", e2);
  }
  get effectiveScaleRange() {
    const { minScale: e2, maxScale: r5 } = this;
    return { minScale: e2, maxScale: r5 };
  }
  readMaxScaleRange(e2, r5) {
    return { minScale: (r5 = r5.layerDefinition || r5).minScale ?? 0, maxScale: r5.maxScale ?? 0 };
  }
  get fieldsIndex() {
    return new Z(this.fields || []);
  }
  set floorInfo(e2) {
    this._setAndNotifyLayer("floorInfo", e2);
  }
  readGlobalIdFieldFromService(e2, r5) {
    if ((r5 = r5.layerDefinition || r5).globalIdField) return r5.globalIdField;
    if (r5.fields) {
      for (const t3 of r5.fields) if ("esriFieldTypeGlobalID" === t3.type) return t3.name;
    }
  }
  get id() {
    const e2 = this._get("id");
    return e2 ?? Z2++;
  }
  set id(e2) {
    var _a, _b, _c;
    this._get("id") !== e2 && (false !== ((_c = (_b = (_a = this.layer) == null ? void 0 : _a.capabilities) == null ? void 0 : _b.exportMap) == null ? void 0 : _c.supportsDynamicLayers) ? this._set("id", e2) : this._logLockedError("id", "capability not available 'layer.capabilities.exportMap.supportsDynamicLayers'"));
  }
  readIsTable(e2, r5) {
    return "Table" === r5.type;
  }
  set labelingInfo(e2) {
    this._setAndNotifyLayer("labelingInfo", e2);
  }
  writeLabelingInfo(e2, r5, t3, i2) {
    e2 && e2.length && (r5.layerDefinition = { drawingInfo: { labelingInfo: e2.map((e3) => e3.write({}, i2)) } });
  }
  set labelsVisible(e2) {
    this._setAndNotifyLayer("labelsVisible", e2);
  }
  set layer(e2) {
    var _a;
    this._set("layer", e2), (_a = this.sublayers) == null ? void 0 : _a.forEach((r5) => r5.layer = e2);
  }
  set listMode(e2) {
    this._set("listMode", e2);
  }
  set minScale(e2) {
    this._setAndNotifyLayer("minScale", e2);
  }
  readMinScale(e2, r5) {
    var _a;
    return r5.minScale || ((_a = r5.layerDefinition) == null ? void 0 : _a.minScale) || 0;
  }
  set maxScale(e2) {
    this._setAndNotifyLayer("maxScale", e2);
  }
  readMaxScale(e2, r5) {
    var _a;
    return r5.maxScale || ((_a = r5.layerDefinition) == null ? void 0 : _a.maxScale) || 0;
  }
  readObjectIdFieldFromService(e2, r5) {
    var _a;
    if ((r5 = r5.layerDefinition || r5).objectIdField) return r5.objectIdField;
    const t3 = (_a = r5.fields) == null ? void 0 : _a.find((e3) => "esriFieldTypeOID" === e3.type);
    return t3 == null ? void 0 : t3.name;
  }
  set opacity(e2) {
    this._setAndNotifyLayer("opacity", e2);
  }
  readOpacity(e2, r5) {
    var _a;
    const { layerDefinition: t3 } = r5;
    return 1 - 0.01 * ((t3 == null ? void 0 : t3.transparency) ?? ((_a = t3 == null ? void 0 : t3.drawingInfo) == null ? void 0 : _a.transparency) ?? 0);
  }
  writeOpacity(e2, r5, t3, i2) {
    r5.layerDefinition = { drawingInfo: { transparency: 100 - 100 * e2 } };
  }
  writeParent(e2, r5) {
    this.parent && this.parent !== this.layer ? r5.parentLayerId = s(this.parent.id) : r5.parentLayerId = -1;
  }
  get queryTask() {
    var _a;
    if (!this.layer) return null;
    const { capabilities: e2, fieldsIndex: r5, layer: t3, url: i2 } = this, { spatialReference: o4 } = t3, s6 = "gdbVersion" in t3 ? t3.gdbVersion : void 0, a4 = has("featurelayer-pbf") && (e2 == null ? void 0 : e2.query.supportsFormatPBF);
    return new j({ fieldsIndex: r5, gdbVersion: s6, pbfSupported: a4, queryAttachmentsSupported: ((_a = e2 == null ? void 0 : e2.operations) == null ? void 0 : _a.supportsQueryAttachments) ?? false, sourceSpatialReference: o4, url: i2 });
  }
  set renderer(e2) {
    if (p4(e2, this.fieldsIndex), e2) {
      for (const r5 of e2.getSymbols()) if (x2(r5)) {
        n.getLogger(this).warn("Sublayer renderer should use 2D symbols");
        break;
      }
    }
    this._setAndNotifyLayer("renderer", e2);
  }
  get source() {
    return this._get("source") || new c({ mapLayerId: this.id });
  }
  set source(e2) {
    this._setAndNotifyLayer("source", e2);
  }
  set sublayers(e2) {
    this._handleSublayersChange(e2, this._get("sublayers")), this._set("sublayers", e2);
  }
  castSublayers(e2) {
    return w(V2.ofType(G), e2);
  }
  writeSublayers(e2, r5, t3) {
    var _a;
    ((_a = this.sublayers) == null ? void 0 : _a.length) && (r5[t3] = this.sublayers.map((e3) => e3.id).toArray().reverse());
  }
  readTitle(e2, r5) {
    var _a;
    return ((_a = r5.layerDefinition) == null ? void 0 : _a.name) ?? r5.name;
  }
  readTypeIdField(e2, r5) {
    let t3 = (r5 = r5.layerDefinition || r5).typeIdField;
    if (t3 && r5.fields) {
      t3 = t3.toLowerCase();
      const e3 = r5.fields.find((e4) => e4.name.toLowerCase() === t3);
      e3 && (t3 = e3.name);
    }
    return t3;
  }
  get url() {
    var _a;
    const e2 = ((_a = this.layer) == null ? void 0 : _a.parsedUrl) ?? this._lastParsedUrl, r5 = this.source;
    if (!e2) return null;
    if (this._lastParsedUrl = e2, "map-layer" === (r5 == null ? void 0 : r5.type)) return `${e2.path}/${r5.mapLayerId}`;
    const t3 = { layer: JSON.stringify({ source: this.source }) };
    return `${e2.path}/dynamicLayer?${v(t3)}`;
  }
  set url(e2) {
    this._overrideIfSome("url", e2);
  }
  set visible(e2) {
    this._setAndNotifyLayer("visible", e2);
  }
  writeVisible(e2, r5, t3, i2) {
    r5[t3] = this.getAtOrigin("defaultVisibility", "service") || e2;
  }
  clone() {
    const { store: e2 } = t(this), r5 = new G();
    return t(r5).store = e2.clone(ee), this.commitProperty("url"), r5._lastParsedUrl = this._lastParsedUrl, r5;
  }
  createPopupTemplate(e2) {
    return p3(this, e2);
  }
  createQuery() {
    return new b({ returnGeometry: true, where: this.definitionExpression || "1=1" });
  }
  async createFeatureLayer() {
    var _a;
    if (this.hasOwnProperty("sublayers")) return null;
    const e2 = (await import("./FeatureLayer-OZT523EZ.js")).default, { layer: r5, url: t3 } = this;
    let i2;
    if (t3 && this.originIdOf("url") > e.SERVICE) i2 = new e2({ url: t3 });
    else {
      if (!(r5 == null ? void 0 : r5.parsedUrl)) throw new s2("createFeatureLayer:missing-information", "Cannot create a FeatureLayer without a url or a parent layer");
      {
        const t4 = r5.parsedUrl;
        i2 = new e2({ url: t4.path }), t4 && this.source && ("map-layer" === this.source.type ? i2.layerId = this.source.mapLayerId : i2.dynamicDataSource = this.source);
      }
    }
    return null != (r5 == null ? void 0 : r5.refreshInterval) && (i2.refreshInterval = r5.refreshInterval), this.definitionExpression && (i2.definitionExpression = this.definitionExpression), this.floorInfo && (i2.floorInfo = a(this.floorInfo)), this.originIdOf("labelingInfo") > e.SERVICE && (i2.labelingInfo = a(this.labelingInfo)), this.originIdOf("labelsVisible") > e.DEFAULTS && (i2.labelsVisible = this.labelsVisible), this.originIdOf("legendEnabled") > e.DEFAULTS && (i2.legendEnabled = this.legendEnabled), this.originIdOf("visible") > e.DEFAULTS && (i2.visible = this.visible), this.originIdOf("minScale") > e.DEFAULTS && (i2.minScale = this.minScale), this.originIdOf("maxScale") > e.DEFAULTS && (i2.maxScale = this.maxScale), this.originIdOf("opacity") > e.DEFAULTS && (i2.opacity = this.opacity), this.originIdOf("popupTemplate") > e.DEFAULTS && (i2.popupTemplate = a(this.popupTemplate)), this.originIdOf("renderer") > e.SERVICE && (i2.renderer = a(this.renderer)), "data-layer" === ((_a = this.source) == null ? void 0 : _a.type) && (i2.dynamicDataSource = this.source.clone()), this.originIdOf("title") > e.DEFAULTS && (i2.title = this.title), "map-image" === (r5 == null ? void 0 : r5.type) && r5.originIdOf("customParameters") > e.DEFAULTS && (i2.customParameters = r5.customParameters), "tile" === (r5 == null ? void 0 : r5.type) && r5.originIdOf("customParameters") > e.DEFAULTS && (i2.customParameters = r5.customParameters), i2;
  }
  getField(e2) {
    return this.fieldsIndex.get(e2);
  }
  getFeatureType(e2) {
    return W(this.types, this.typeIdField, e2);
  }
  getFieldDomain(e2, r5) {
    const t3 = r5 == null ? void 0 : r5.feature, i2 = this.getFeatureType(t3);
    if (i2) {
      const r6 = i2.domains && i2.domains[e2];
      if (r6 && "inherited" !== r6.type) return r6;
    }
    return this._getLayerDomain(e2);
  }
  async queryAttachments(e2, r5) {
    var _a, _b;
    await this.load(), e2 = c3.from(e2);
    const t3 = this.capabilities;
    if (!((_a = t3 == null ? void 0 : t3.data) == null ? void 0 : _a.supportsAttachment)) throw new s2("queryAttachments:not-supported", "this layer doesn't support attachments");
    const { attachmentTypes: i2, objectIds: o4, globalIds: s6, num: a4, size: n6, start: p5, where: u3 } = e2;
    if (!((_b = t3 == null ? void 0 : t3.operations) == null ? void 0 : _b.supportsQueryAttachments)) {
      if ((i2 == null ? void 0 : i2.length) > 0 || (s6 == null ? void 0 : s6.length) > 0 || (n6 == null ? void 0 : n6.length) > 0 || a4 || p5 || u3) throw new s2("queryAttachments:option-not-supported", "when 'capabilities.operations.supportsQueryAttachments' is false, only objectIds is supported", e2);
    }
    if (!((o4 == null ? void 0 : o4.length) || (s6 == null ? void 0 : s6.length) || u3)) throw new s2("queryAttachments:invalid-query", "'objectIds', 'globalIds', or 'where' are required to perform attachment query", e2);
    return this.queryTask.executeAttachmentQuery(e2, r5);
  }
  async queryFeatureCount(e2 = this.createQuery(), r5) {
    var _a, _b;
    if (await this.load(), !this.capabilities.operations.supportsQuery) throw new s2("queryFeatureCount:not-supported", "this layer doesn't support queries.");
    if (!this.url) throw new s2("queryFeatureCount:not-supported", "this layer has no url.");
    const t3 = (_a = this.layer) == null ? void 0 : _a.apiKey;
    return await this.queryTask.executeForCount(e2, { ...r5, query: { ...(_b = this.layer) == null ? void 0 : _b.customParameters, token: t3 } });
  }
  async queryFeatures(e2 = this.createQuery(), r5) {
    var _a, _b;
    if (await this.load(), !this.capabilities.operations.supportsQuery) throw new s2("queryFeatures:not-supported", "this layer doesn't support queries.");
    if (!this.url) throw new s2("queryFeatures:not-supported", "this layer has no url.");
    const t3 = await this.queryTask.execute(e2, { ...r5, query: { ...(_a = this.layer) == null ? void 0 : _a.customParameters, token: (_b = this.layer) == null ? void 0 : _b.apiKey } });
    if (t3 == null ? void 0 : t3.features) for (const i2 of t3.features) i2.sourceLayer = this;
    return t3;
  }
  async queryObjectIds(e2 = this.createQuery(), r5) {
    var _a, _b;
    if (await this.load(), !this.capabilities.operations.supportsQuery) throw new s2("queryObjectIds:not-supported", "this layer doesn't support queries.");
    if (!this.url) throw new s2("queryObjectIds:not-supported", "this layer has no url.");
    const t3 = (_a = this.layer) == null ? void 0 : _a.apiKey;
    return await this.queryTask.executeForIds(e2, { ...r5, query: { ...(_b = this.layer) == null ? void 0 : _b.customParameters, token: t3 } });
  }
  async queryRelatedFeatures(e2, r5) {
    var _a, _b;
    if (await this.load(), !this.capabilities.operations.supportsQuery) throw new s2("queryRelatedFeatures:not-supported", "this layer doesn't support queries.");
    if (!this.url) throw new s2("queryRelatedFeatures:not-supported", "this layer has no url.");
    const t3 = (_a = this.layer) == null ? void 0 : _a.apiKey;
    return await this.queryTask.executeRelationshipQuery(e2, { ...r5, query: { ...(_b = this.layer) == null ? void 0 : _b.customParameters, token: t3 } });
  }
  async queryRelatedFeaturesCount(e2, r5) {
    var _a, _b;
    if (await this.load(), !this.capabilities.operations.supportsQuery) throw new s2("queryRelatedFeaturesCount:not-supported", "this layer doesn't support queries.");
    if (!this.capabilities.queryRelated.supportsCount) throw new s2("queryRelatedFeaturesCount:not-supported", "this layer doesn't support query related counts.");
    if (!this.url) throw new s2("queryRelatedFeaturesCount:not-supported", "this layer has no url.");
    const t3 = (_a = this.layer) == null ? void 0 : _a.apiKey;
    return await this.queryTask.executeRelationshipQueryForCount(e2, { ...r5, query: { ...(_b = this.layer) == null ? void 0 : _b.customParameters, token: t3 } });
  }
  toExportImageJSON(e2) {
    var _a, _b;
    const r5 = { id: this.id, source: ((_a = this.source) == null ? void 0 : _a.toJSON()) || { mapLayerId: this.id, type: "mapLayer" } }, t3 = n4(e2, this.definitionExpression);
    null != t3 && (r5.definitionExpression = t3);
    const i2 = ["renderer", "labelingInfo", "opacity", "labelsVisible"].reduce((e3, r6) => (e3[r6] = this.originIdOf(r6), e3), {}), o4 = Object.keys(i2).some((e3) => i2[e3] > e.SERVICE);
    if (o4) {
      const e3 = r5.drawingInfo = {};
      if (i2.renderer > e.SERVICE && (e3.renderer = this.renderer ? this.renderer.toJSON() : null), i2.labelsVisible > e.SERVICE && (e3.showLabels = this.labelsVisible), this.labelsVisible && i2.labelingInfo > e.SERVICE) if (this.labelingInfo) {
        !this.loaded && ((_b = this.labelingInfo) == null ? void 0 : _b.some((e4) => !e4.labelPlacement)) && n.getLogger(this).warnOnce(`A Sublayer (title: ${this.title}, id: ${this.id}) has an undefined 'labelPlacement' and so labels cannot be displayed. Either define a valid 'labelPlacement' or call Sublayer.load() to use a default value based on geometry type.`, { sublayer: this });
        let r6 = this.labelingInfo;
        null != this.geometryType && (r6 = a3(this.labelingInfo, o2.toJSON(this.geometryType))), e3.showLabels = true, e3.labelingInfo = r6.filter((e4) => e4.labelPlacement).map((e4) => e4.toJSON({ origin: "service", layer: this.layer }));
      } else e3.showLabels = false;
      i2.opacity > e.SERVICE && (e3.transparency = 100 - 100 * this.opacity), this._assignDefaultSymbolColors(e3.renderer);
    }
    return r5;
  }
  _assignDefaultSymbolColors(e2) {
    this._forEachSimpleMarkerSymbols(e2, (e3) => {
      var _a;
      e3.color || "esriSMSX" !== e3.style && "esriSMSCross" !== e3.style || (((_a = e3.outline) == null ? void 0 : _a.color) ? e3.color = e3.outline.color : e3.color = [0, 0, 0, 0]);
    });
  }
  _forEachSimpleMarkerSymbols(e2, r5) {
    if (e2) {
      const t3 = ("uniqueValueInfos" in e2 ? e2.uniqueValueInfos : "classBreakInfos" in e2 ? e2.classBreakInfos : null) ?? [];
      for (const e3 of t3) H(e3.symbol) && r5(e3.symbol);
      "symbol" in e2 && H(e2.symbol) && r5(e2.symbol), "defaultSymbol" in e2 && H(e2.defaultSymbol) && r5(e2.defaultSymbol);
    }
  }
  _setAndNotifyLayer(e2, r5) {
    var _a, _b, _c, _d;
    const t3 = this.layer, i2 = this._get(e2);
    let o4, s6;
    switch (e2) {
      case "definitionExpression":
      case "floorInfo":
        o4 = "supportsSublayerDefinitionExpression";
        break;
      case "minScale":
      case "maxScale":
      case "visible":
        o4 = "supportsSublayerVisibility";
        break;
      case "labelingInfo":
      case "labelsVisible":
      case "opacity":
      case "renderer":
      case "source":
        o4 = "supportsDynamicLayers", s6 = "supportsModification";
    }
    const a4 = t(this).getDefaultOrigin();
    if ("service" !== a4) {
      if (o4 && false === ((_c = (_b = (_a = this.layer) == null ? void 0 : _a.capabilities) == null ? void 0 : _b.exportMap) == null ? void 0 : _c[o4])) return void this._logLockedError(e2, `capability not available 'layer.capabilities.exportMap.${o4}'`);
      if (s6 && false === ((_d = this.capabilities) == null ? void 0 : _d.exportMap[s6])) return void this._logLockedError(e2, `capability not available 'capabilities.exportMap.${s6}'`);
    }
    "source" !== e2 || "not-loaded" === this.loadStatus ? (this._set(e2, r5), "service" !== a4 && i2 !== r5 && t3 && t3.emit && t3.emit("sublayer-update", { propertyName: e2, target: this })) : this._logLockedError(e2, "'source' can't be changed after calling sublayer.load()");
  }
  _handleSublayersChange(e2, r5) {
    r5 && (r5.forEach((e3) => {
      e3.parent = null, e3.layer = null;
    }), this.removeAllHandles()), e2 && (e2.forEach((e3) => {
      e3.parent = this, e3.layer = this.layer;
    }), this.addHandles([e2.on("after-add", ({ item: e3 }) => {
      e3.parent = this, e3.layer = this.layer;
    }), e2.on("after-remove", ({ item: e3 }) => {
      e3.parent = null, e3.layer = null;
    }), e2.on("before-changes", (e3) => {
      var _a, _b, _c;
      (((_c = (_b = (_a = this.layer) == null ? void 0 : _a.capabilities) == null ? void 0 : _b.exportMap) == null ? void 0 : _c.supportsSublayersChanges) ?? 1) || (n.getLogger(this).error(new s2("sublayer:sublayers-non-modifiable", "Sublayer can't be added, moved, or removed from the layer's sublayers", { sublayer: this, layer: this.layer })), e3.preventDefault());
    })]));
  }
  _logLockedError(e2, r5) {
    const { layer: t3, declaredClass: i2 } = this;
    n.getLogger(i2).error(new s2("sublayer:locked", `Property '${String(e2)}' can't be changed on Sublayer from the layer '${t3 == null ? void 0 : t3.id}'`, { reason: r5, sublayer: this, layer: t3 }));
  }
  _getLayerDomain(e2) {
    var _a;
    return ((_a = this.fieldsIndex.get(e2)) == null ? void 0 : _a.domain) ?? null;
  }
};
re.test = { isMapImageLayerOverridePolicy: (e2) => e2 === X || e2 === z, isTileImageLayerOverridePolicy: (e2) => e2 === W2 }, r([m({ readOnly: true })], re.prototype, "capabilities", void 0), r([o("service", "capabilities", ["layerDefinition.canModifyLayer", "layerDefinition.capabilities"])], re.prototype, "readCapabilities", null), r([m()], re.prototype, "defaultPopupTemplate", null), r([m({ type: String, value: null, json: { name: "layerDefinition.definitionExpression", write: { allowNull: true, overridePolicy: z } } })], re.prototype, "definitionExpression", null), r([m({ readOnly: true })], re.prototype, "effectiveScaleRange", null), r([o("service", "maxScaleRange", ["minScale", "maxScale"])], re.prototype, "readMaxScaleRange", null), r([m({ type: [y], json: { origins: { service: { read: { source: "layerDefinition.fields" } } } } })], re.prototype, "fields", void 0), r([m({ readOnly: true })], re.prototype, "fieldsIndex", null), r([m({ type: p, value: null, json: { name: "layerDefinition.floorInfo", read: { source: "layerDefinition.floorInfo" }, write: { target: "layerDefinition.floorInfo", overridePolicy: z }, origins: { "web-scene": { read: false, write: false } } } })], re.prototype, "floorInfo", null), r([m({ type: w2, json: { read: { source: "layerDefinition.extent" } } })], re.prototype, "fullExtent", void 0), r([m({ type: o2.apiValues, json: { origins: { service: { name: "layerDefinition.geometryType", read: { reader: o2.read } } } } })], re.prototype, "geometryType", void 0), r([m({ type: String })], re.prototype, "globalIdField", void 0), r([o("service", "globalIdField", ["layerDefinition.globalIdField", "layerDefinition.fields"])], re.prototype, "readGlobalIdFieldFromService", null), r([m({ type: x, json: { write: { ignoreOrigin: true } } })], re.prototype, "id", null), r([m({ readOnly: true })], re.prototype, "isTable", void 0), r([o("service", "isTable", ["type"])], re.prototype, "readIsTable", null), r([m({ value: null, type: [C2], json: { read: { source: "layerDefinition.drawingInfo.labelingInfo" }, write: { target: "layerDefinition.drawingInfo.labelingInfo", overridePolicy: X } } })], re.prototype, "labelingInfo", null), r([r3("labelingInfo")], re.prototype, "writeLabelingInfo", null), r([m({ type: Boolean, value: true, json: { read: { source: "layerDefinition.drawingInfo.showLabels" }, write: { target: "layerDefinition.drawingInfo.showLabels", overridePolicy: X } } })], re.prototype, "labelsVisible", null), r([m({ value: null })], re.prototype, "layer", null), r([m({ type: String, json: { write: { overridePolicy: W2 } } })], re.prototype, "layerItemId", void 0), r([m({ type: Boolean, value: true, json: { origins: { service: { read: { enabled: false } } }, read: { source: "showLegend" }, write: { target: "showLegend", overridePolicy: Y } } })], re.prototype, "legendEnabled", void 0), r([m({ type: ["show", "hide", "hide-children"], value: "show", json: { read: false, write: false, origins: { "web-scene": { read: true, write: true } } } })], re.prototype, "listMode", null), r([m({ type: Number, value: 0, json: { write: { overridePolicy: X } } })], re.prototype, "minScale", null), r([o("minScale", ["minScale", "layerDefinition.minScale"])], re.prototype, "readMinScale", null), r([m({ type: Number, value: 0, json: { write: { overridePolicy: X } } })], re.prototype, "maxScale", null), r([o("maxScale", ["maxScale", "layerDefinition.maxScale"])], re.prototype, "readMaxScale", null), r([m()], re.prototype, "objectIdField", void 0), r([o("service", "objectIdField", ["layerDefinition.objectIdField", "layerDefinition.fields"])], re.prototype, "readObjectIdFieldFromService", null), r([m({ type: Number, value: 1, json: { write: { target: "layerDefinition.drawingInfo.transparency", overridePolicy: X } } })], re.prototype, "opacity", null), r([o("opacity", ["layerDefinition.drawingInfo.transparency", "layerDefinition.transparency"])], re.prototype, "readOpacity", null), r([r3("opacity")], re.prototype, "writeOpacity", null), r([m({ json: { type: x, write: { target: "parentLayerId", writerEnsuresNonNull: true, overridePolicy: X } } })], re.prototype, "parent", void 0), r([r3("parent")], re.prototype, "writeParent", null), r([m({ type: Boolean, value: true, json: { read: { source: "disablePopup", reader: (e2, r5) => !r5.disablePopup }, write: { target: "disablePopup", overridePolicy: Y, writer(e2, r5, t3) {
  r5[t3] = !e2;
} } } })], re.prototype, "popupEnabled", void 0), r([m({ type: q, json: { read: { source: "popupInfo" }, write: { target: "popupInfo", overridePolicy: Y } } })], re.prototype, "popupTemplate", void 0), r([m({ readOnly: true })], re.prototype, "queryTask", null), r([m({ type: [p2], readOnly: true, json: { origins: { service: { read: { source: "layerDefinition.relationships" } } } } })], re.prototype, "relationships", void 0), r([m({ types: m3, value: null, json: { name: "layerDefinition.drawingInfo.renderer", write: { overridePolicy: X }, origins: { "web-scene": { types: u2, name: "layerDefinition.drawingInfo.renderer", write: { overridePolicy: X } } } } })], re.prototype, "renderer", null), r([m({ types: { key: "type", base: null, typeMap: { "data-layer": K, "map-layer": c } }, cast(e2) {
  if (e2) {
    if ("mapLayerId" in e2) return h(c, e2);
    if ("dataSource" in e2) return h(K, e2);
  }
  return e2;
}, json: { name: "layerDefinition.source", write: { overridePolicy: X } } })], re.prototype, "source", null), r([m()], re.prototype, "sourceJSON", void 0), r([m({ type: g, json: { origins: { service: { read: { source: "layerDefinition.extent.spatialReference" } } } } })], re.prototype, "spatialReference", void 0), r([m({ value: null, json: { type: [x], write: { target: "subLayerIds", allowNull: true, overridePolicy: X } } })], re.prototype, "sublayers", null), r([s4("sublayers")], re.prototype, "castSublayers", null), r([r3("sublayers")], re.prototype, "writeSublayers", null), r([m({ type: String, json: { name: "name", write: { overridePolicy: Y } } })], re.prototype, "title", void 0), r([o("service", "title", ["name", "layerDefinition.name"])], re.prototype, "readTitle", null), r([m({ type: String })], re.prototype, "typeIdField", void 0), r([m({ json: { read: false }, readOnly: true, value: "sublayer" })], re.prototype, "type", void 0), r([o("typeIdField", ["layerDefinition.typeIdField"])], re.prototype, "readTypeIdField", null), r([m({ type: [n5], json: { origins: { service: { read: { source: "layerDefinition.types" } } } } })], re.prototype, "types", void 0), r([m({ type: String, json: { name: "layerUrl", write: { overridePolicy: W2 } } })], re.prototype, "url", null), r([m({ type: Boolean, value: true, json: { read: { source: "defaultVisibility" }, write: { target: "defaultVisibility", overridePolicy: X } } })], re.prototype, "visible", null), r([r3("visible")], re.prototype, "writeVisible", null), re = G = r([a2("esri.layers.support.Sublayer")], re);
var te = re;

// node_modules/@arcgis/core/layers/mixins/SublayersOwner.js
function h2(e2, r5) {
  const s6 = [], t3 = {};
  return e2 ? (e2.forEach((e3) => {
    const o4 = new te();
    if (o4.read(e3, r5), t3[o4.id] = o4, null != e3.parentLayerId && -1 !== e3.parentLayerId) {
      const r6 = t3[e3.parentLayerId];
      r6.sublayers || (r6.sublayers = []), r6.sublayers.unshift(o4);
    } else s6.unshift(o4);
  }), s6) : s6;
}
var f3 = V2.ofType(te);
function S2(e2, r5) {
  e2 && e2.forEach((e3) => {
    r5(e3), e3.sublayers && e3.sublayers.length && S2(e3.sublayers, r5);
  });
}
var m4 = (m5) => {
  let E = class extends m5 {
    constructor(...e2) {
      super(...e2), this.allSublayers = new n3({ getCollections: () => [this.sublayers], getChildrenFunction: (e3) => e3.sublayers }), this.sublayersSourceJSON = { [e.SERVICE]: {}, [e.PORTAL_ITEM]: {}, [e.WEB_SCENE]: {}, [e.WEB_MAP]: {} }, this.subtables = null, this.addHandles([d(() => this.sublayers, (e3, r5) => this._handleSublayersChange(e3, r5), C), d(() => this.subtables, (e3, r5) => this._handleSublayersChange(e3, r5), C)]);
    }
    destroy() {
      this.allSublayers.destroy();
    }
    readSublayers(e2, r5) {
      if (!r5 || !e2) return;
      const { sublayersSourceJSON: s6 } = this, t3 = n2(r5.origin);
      if (t3 < e.SERVICE) return;
      if (s6[t3] = { context: r5, visibleLayers: e2.visibleLayers || s6[t3].visibleLayers, layers: e2.layers || s6[t3].layers }, t3 > e.SERVICE) return;
      this._set("serviceSublayers", this.createSublayersForOrigin("service").sublayers);
      const { sublayers: o4, origin: a4 } = this.createSublayersForOrigin("web-document"), l2 = t(this);
      l2.setDefaultOrigin(a4), this._set("sublayers", new f3(o4)), l2.setDefaultOrigin("user");
    }
    findSublayerById(e2) {
      return this.allSublayers.find((r5) => r5.id === e2);
    }
    createServiceSublayers() {
      return this.createSublayersForOrigin("service").sublayers;
    }
    createSublayersForOrigin(e2) {
      const r5 = n2("web-document" === e2 ? "web-map" : e2);
      let s6 = e.SERVICE, t3 = this.sublayersSourceJSON[e.SERVICE].layers, o4 = this.sublayersSourceJSON[e.SERVICE].context, a4 = null;
      const l2 = [e.PORTAL_ITEM, e.WEB_SCENE, e.WEB_MAP].filter((e3) => e3 <= r5);
      for (const y2 of l2) {
        const e3 = this.sublayersSourceJSON[y2];
        o3(e3.layers) && (s6 = y2, t3 = e3.layers, o4 = e3.context, e3.visibleLayers && (a4 = { visibleLayers: e3.visibleLayers, context: e3.context }));
      }
      const i2 = [e.PORTAL_ITEM, e.WEB_SCENE, e.WEB_MAP].filter((e3) => e3 > s6 && e3 <= r5);
      let n6 = null;
      for (const y2 of i2) {
        const { layers: e3, visibleLayers: r6, context: s7 } = this.sublayersSourceJSON[y2];
        e3 && (n6 = { layers: e3, context: s7 }), r6 && (a4 = { visibleLayers: r6, context: s7 });
      }
      const u3 = h2(t3, o4), d3 = /* @__PURE__ */ new Map(), m6 = /* @__PURE__ */ new Set();
      if (n6) for (const y2 of n6.layers) d3.set(y2.id, y2);
      if (a4 == null ? void 0 : a4.visibleLayers) for (const y2 of a4.visibleLayers) m6.add(y2);
      return S2(u3, (e3) => {
        n6 && e3.read(d3.get(e3.id), n6.context), a4 && e3.read({ defaultVisibility: m6.has(e3.id) }, a4.context);
      }), { origin: t2(s6), sublayers: new f3({ items: u3 }) };
    }
    read(e2, r5) {
      super.read(e2, r5), this.readSublayers(e2, r5);
    }
    _handleSublayersChange(e2, r5) {
      r5 && (r5.forEach((e3) => {
        e3.parent = null, e3.layer = null;
      }), this.removeHandles("sublayers-owner")), e2 && (e2.forEach((e3) => {
        e3.parent = this, e3.layer = this;
      }), this.addHandles([e2.on("after-add", ({ item: e3 }) => {
        e3.parent = this, e3.layer = this;
      }), e2.on("after-remove", ({ item: e3 }) => {
        e3.parent = null, e3.layer = null;
      })], "sublayers-owner"), "tile" === this.type && this.addHandles(e2.on("before-changes", (e3) => {
        n.getLogger("esri.layers.TileLayer").error(new s2("tilelayer:sublayers-non-modifiable", "ISublayer can't be added, moved, or removed from the layer's sublayers", { layer: this })), e3.preventDefault();
      }), "sublayers-owner"));
    }
  };
  return r([m({ readOnly: true })], E.prototype, "allSublayers", void 0), r([m({ readOnly: true, type: V2.ofType(te) })], E.prototype, "serviceSublayers", void 0), r([m({ value: null, type: f3, json: { read: false, write: { allowNull: true, ignoreOrigin: true } } })], E.prototype, "sublayers", void 0), r([m({ readOnly: true })], E.prototype, "sublayersSourceJSON", void 0), r([m({ type: f3, json: { read: { source: "tables" } } })], E.prototype, "subtables", void 0), E = r([a2("esri.layers.mixins.SublayersOwner")], E), E;
};

export {
  f2 as f,
  te,
  m4 as m
};
//# sourceMappingURL=chunk-5EJMIML7.js.map
