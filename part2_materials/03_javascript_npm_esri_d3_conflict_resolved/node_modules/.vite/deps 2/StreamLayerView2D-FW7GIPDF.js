import {
  n,
  re
} from "./chunk-S6OBRPLN.js";
import "./chunk-SGZGPX6H.js";
import "./chunk-JCJSNEEC.js";
import "./chunk-DJJCMKKB.js";
import "./chunk-5ZJ2MCRU.js";
import "./chunk-OBWNWUWS.js";
import "./chunk-2JZHLJXP.js";
import "./chunk-Y4I3KFRX.js";
import "./chunk-CGJR3XCF.js";
import "./chunk-KVO35ODJ.js";
import "./chunk-O2HBAYVG.js";
import "./chunk-FKL5AVF4.js";
import "./chunk-CKPBZSTT.js";
import "./chunk-3T3LUDWR.js";
import "./chunk-7TPUFUXO.js";
import "./chunk-JI3JMSDL.js";
import "./chunk-J3GKRP7Y.js";
import "./chunk-Q3K5MAUZ.js";
import "./chunk-KJNFPIQW.js";
import "./chunk-2XVRGGEF.js";
import "./chunk-DPVSO6BH.js";
import "./chunk-6TRZLPPJ.js";
import "./chunk-U6IFI7EK.js";
import "./chunk-MCHNAU6L.js";
import "./chunk-MYNRH67A.js";
import "./chunk-JMY2H33H.js";
import "./chunk-VBS2Y7KE.js";
import "./chunk-HCAIFU2M.js";
import "./chunk-AHZHHHCW.js";
import "./chunk-PAS43ZQC.js";
import "./chunk-C2RS46RL.js";
import "./chunk-NML2U2OQ.js";
import "./chunk-HB2JTNV2.js";
import "./chunk-DLJHW32W.js";
import "./chunk-N42IF4WX.js";
import "./chunk-BLBULF2O.js";
import "./chunk-JPQIRBN6.js";
import "./chunk-CH3XVKUV.js";
import "./chunk-KI5F6KDS.js";
import "./chunk-BXIXSFGX.js";
import "./chunk-ARQ76THZ.js";
import "./chunk-TRMW5XQP.js";
import "./chunk-HBU7EMDX.js";
import "./chunk-JRUJALSE.js";
import "./chunk-QQRGQ74V.js";
import "./chunk-O67P2KE3.js";
import "./chunk-73FHIZIF.js";
import "./chunk-ICIPRMPO.js";
import "./chunk-NEDBRPQY.js";
import "./chunk-EZCH3ZAJ.js";
import "./chunk-QLRZN73K.js";
import "./chunk-CGJUTDVJ.js";
import "./chunk-EHD5KM2T.js";
import "./chunk-AEKV7TWM.js";
import "./chunk-QJXYURT2.js";
import "./chunk-JUN5XSQC.js";
import "./chunk-MCZMPI2A.js";
import "./chunk-KV3S4QI2.js";
import "./chunk-ECMDQ4LS.js";
import "./chunk-D6FJTDNK.js";
import "./chunk-LP6TMAPE.js";
import "./chunk-RENLZYKC.js";
import "./chunk-XWTALKKJ.js";
import {
  d as d3
} from "./chunk-24OTECJ5.js";
import "./chunk-DFLI5RC4.js";
import "./chunk-QYSQ6XPQ.js";
import "./chunk-XKMN3LJN.js";
import "./chunk-MR727DXB.js";
import "./chunk-VLKWWBLY.js";
import "./chunk-AFULL6KA.js";
import "./chunk-URFLFG2R.js";
import {
  d as d2
} from "./chunk-CE7WVJQV.js";
import "./chunk-LQEYS467.js";
import "./chunk-A66MNK5C.js";
import "./chunk-EPAKCM4A.js";
import "./chunk-5CRXWQ3Y.js";
import "./chunk-7Q4JSL7R.js";
import "./chunk-VBJTBJYL.js";
import "./chunk-GZFJKWTS.js";
import "./chunk-HFPXZJAJ.js";
import "./chunk-SW3IBIJ7.js";
import "./chunk-E54MA7AH.js";
import "./chunk-6TU4HBID.js";
import "./chunk-WGIZLWW7.js";
import "./chunk-PUOCGOJB.js";
import "./chunk-XQH2QDB2.js";
import "./chunk-LPNAPHOF.js";
import "./chunk-DBQLTBDH.js";
import "./chunk-AMH7OVBF.js";
import "./chunk-SUZN3TAH.js";
import "./chunk-VILGTHTP.js";
import "./chunk-ATEWWVHG.js";
import "./chunk-LEOFRCUR.js";
import "./chunk-CP4GPQHD.js";
import "./chunk-IZSNXKMJ.js";
import "./chunk-IOKAACTA.js";
import "./chunk-VFTH6C2E.js";
import "./chunk-M5RSIRGD.js";
import "./chunk-UYSPJCCV.js";
import "./chunk-SMFCDOAJ.js";
import "./chunk-5A4G4OVM.js";
import "./chunk-MGMVRMXQ.js";
import "./chunk-GNWAZIVF.js";
import "./chunk-2TEGRXBS.js";
import "./chunk-44C2A72D.js";
import "./chunk-DIKY6MBW.js";
import "./chunk-YVSEBNS4.js";
import "./chunk-GGCWKF4X.js";
import "./chunk-6D5XULXX.js";
import "./chunk-445IB4DS.js";
import "./chunk-Y2XCZQML.js";
import "./chunk-SW4DFX7N.js";
import "./chunk-2PK57UYA.js";
import "./chunk-F26LCWNQ.js";
import "./chunk-6Y2LNRVP.js";
import "./chunk-VNRDIGVF.js";
import "./chunk-QRJFHPMB.js";
import "./chunk-G6REFQRQ.js";
import "./chunk-Z2DWZ5IF.js";
import "./chunk-TDZ623HP.js";
import "./chunk-6RLUKSNK.js";
import "./chunk-UN4ISSP7.js";
import "./chunk-E2RPCJOE.js";
import {
  d
} from "./chunk-TKY5RBM3.js";
import "./chunk-NHJGPXZH.js";
import "./chunk-JS7R723S.js";
import "./chunk-SIQNRYEG.js";
import "./chunk-TTDEVHSF.js";
import "./chunk-QSRFVAIF.js";
import "./chunk-X6JBJVM2.js";
import "./chunk-Q7TEBZSN.js";
import "./chunk-JU6MEO4D.js";
import "./chunk-CY5MS6DC.js";
import "./chunk-C6FFJ4QS.js";
import "./chunk-Q4Q32WYV.js";
import "./chunk-A3J7W53Y.js";
import "./chunk-HLF5XJSV.js";
import "./chunk-L6D73M4D.js";
import "./chunk-P5H5PJSC.js";
import "./chunk-H6RIEXAG.js";
import "./chunk-6YWQXXBX.js";
import "./chunk-DRBJFCLQ.js";
import "./chunk-7O7KFKCG.js";
import "./chunk-E2X3OBBC.js";
import "./chunk-X7VTUWCX.js";
import "./chunk-QS62R4CH.js";
import "./chunk-VU6O6TFT.js";
import {
  m
} from "./chunk-GD4XDYZL.js";
import {
  a4 as a
} from "./chunk-33ECLFFF.js";
import {
  r
} from "./chunk-MV5XBD6C.js";
import "./chunk-L6CCOEVE.js";
import {
  e,
  t
} from "./chunk-GRW2QIBT.js";
import "./chunk-R2PAF6JT.js";
import "./chunk-6WE7SNQY.js";
import {
  s2 as s
} from "./chunk-PKLD5YJF.js";
import "./chunk-XKQWTZMW.js";
import "./chunk-A4OFG7JM.js";

// node_modules/@arcgis/core/views/layers/StreamLayerView.js
var r2 = (r3) => {
  let i = class extends r3 {
    resume() {
      this._isUserPaused = false, this.suspended || this._doResume();
    }
    pause() {
      this._isUserPaused = true, this.suspended || this._doPause();
    }
    disconnect() {
      this._doDisconnect();
    }
    connect() {
      this._doConnect();
    }
    clear() {
      this._doClear();
    }
    constructor(...s2) {
      super(...s2), this._isUserPaused = false, this.filter = null;
    }
    get connectionStatus() {
      return (this._isUserPaused || this.suspended) && "connected" === this._streamConnectionStatus ? "paused" : this._streamConnectionStatus;
    }
    _onSuspendedChange(s2) {
      s2 ? this._doPause() : this._isUserPaused || this._doResume();
    }
  };
  return r([m()], i.prototype, "_isUserPaused", void 0), r([m({ readOnly: true })], i.prototype, "connectionStatus", null), r([m({ type: d3 })], i.prototype, "filter", void 0), i = r([a("esri.views.layers.StreamLayerView")], i), i;
};

// node_modules/@arcgis/core/views/2d/layers/StreamLayerView2D.js
var p = class extends r2(re) {
  constructor() {
    super(...arguments), this.pipelineConnectionStatus = "disconnected", this.pipelineErrorString = null;
  }
  initialize() {
    this.addHandles([d(() => this.layer.customParameters, async (e2) => {
      (await this.getWorker()).streamMessenger.updateCustomParameters(e2);
    }), this.layer.on("send-message-to-socket", async (e2) => {
      (await this.getWorker()).streamMessenger.sendMessageToSocket(e2);
    }), this.layer.on("send-message-to-client", async (e2) => {
      (await this.getWorker()).streamMessenger.sendMessageToClient(e2), this._isUserPaused && "type" in e2 && "clear" === e2.type && this.incrementSourceRefreshVersion();
    }), d(() => this.layer.purgeOptions, () => this._update()), d(() => this.suspended, this._onSuspendedChange.bind(this))], "constructor"), this._doResume();
  }
  destroy() {
    this._doPause();
  }
  get connectionError() {
    return this.pipelineErrorString ? new s("stream-controller", this.pipelineErrorString) : null;
  }
  on(e2, r3) {
    if (Array.isArray(e2)) return t(e2.map((e3) => this.on(e3, r3)));
    const n2 = ["data-received", "message-received"].includes(e2);
    n2 && this.getWorker().then((r4) => r4.streamMessenger.enableEvent(e2, true));
    const o = super.on(e2, r3), i = this;
    return e(() => {
      o.remove(), n2 && (i._workerProxy.closed || i.hasEventListener(e2) || i.getWorker().then((r4) => r4.streamMessenger.enableEvent(e2, false)));
    });
  }
  async queryLatestObservations(e2, t2) {
    var _a, _b, _c;
    if (!(((_a = this.layer.timeInfo) == null ? void 0 : _a.endField) || ((_b = this.layer.timeInfo) == null ? void 0 : _b.startField) || ((_c = this.layer.timeInfo) == null ? void 0 : _c.trackIdField))) throw new s("streamlayer-no-timeField", "queryLatestObservation can only be used with services that define a TrackIdField");
    const s2 = await this.getWorker();
    return n(s2.features.executeQueryForLatestObservations(this._cleanUpQuery(e2), t2).then((e3) => {
      const r3 = d2.fromJSON(e3);
      return r3.features.forEach((e4) => {
        e4.layer = this.layer, e4.sourceLayer = this.layer;
      }), r3;
    }), new d2({ features: [] }));
  }
  detach() {
    super.detach(), this.pipelineConnectionStatus = "disconnected";
  }
  get _streamConnectionStatus() {
    return this.pipelineConnectionStatus;
  }
  _doPause() {
    null != this._refreshInterval && (clearInterval(this._refreshInterval), this._refreshInterval = null);
  }
  _doResume() {
    this._refreshInterval = setInterval(() => this.incrementSourceRefreshVersion(), this.layer.updateInterval);
  }
  _doDisconnect() {
    this.getWorker().then((e2) => e2.streamMessenger.disconnect()), this._doPause();
  }
  _doConnect() {
    this.getWorker().then((e2) => e2.streamMessenger.connect()), this.resume();
  }
  _doClear() {
    this.getWorker().then((e2) => e2.streamMessenger.clear()), null == this._refreshInterval && this.incrementSourceRefreshVersion();
  }
  _createClientOptions() {
    const e2 = super._createClientOptions(), r3 = this;
    return { ...e2, get container() {
      return r3.featureContainer;
    }, setProperty: (e3) => {
      this.set(e3.propertyName, e3.value);
    } };
  }
};
r([m()], p.prototype, "pipelineConnectionStatus", void 0), r([m()], p.prototype, "pipelineErrorString", void 0), r([m({ readOnly: true })], p.prototype, "connectionError", null), r([m({ readOnly: true })], p.prototype, "_streamConnectionStatus", null), p = r([a("esri.views.2d.layers.StreamLayerView2D")], p);
var u = p;
export {
  u as default
};
//# sourceMappingURL=StreamLayerView2D-FW7GIPDF.js.map
