/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.31/esri/copyright.txt for details.
*/
import"../../../geometry.js";import e from"../../../Graphic.js";import{isSome as t}from"../../../core/arrayUtils.js";import{throwIfAborted as i,waitTick as r}from"../../../core/promiseUtils.js";import{ensureType as o}from"../../../core/accessorSupport/ensureType.js";import a from"../../../geometry/Mesh.js";import{projectWithZConversion as s}from"../../../geometry/projection.js";import{MeshVertexAttributes as n}from"../../../geometry/support/MeshVertexAttributes.js";import{projectVertices as l,updateFrustum as c,createCoveragePolygon as m}from"../../../layers/orientedImagery/core/coverageUtils.js";import{activeFrustumSymbol as p,additionalFrustumSymbol as u}from"../symbols.js";import f from"../../../geometry/Point.js";class d{constructor(f){this.viewModel=f,this.createFootprints=async r=>{const{coverageFrustums:o,currentBestFeature:c,isAdditionalCoverageVisible:m,view:f}=this.viewModel,d=o.filter(t);for(const t of d){let o=t.clone();if(!f.spatialReference.equals(o.spatialReference)){const{components:e,spatialReference:t,origin:c,vertexAttributes:m,vertexSpace:p}=o;if("local"===p.type){const e=await s(c,f.spatialReference,r);i(r),o.centerAt(e)}else{const s=m.position,c=Float64Array.from(await l([...s],t.clone(),f.spatialReference.clone(),r));i(r),o=new a({vertexAttributes:new n({position:c}),components:e,spatialReference:f.spatialReference.clone()})}}t.imageID===c.attributes.objectId?this.viewModel.bestFeatureFootprint=new e({attributes:{imageID:t.imageID},geometry:o,symbol:p.clone(),visible:!1}):this.viewModel.additionalFootprints.push(new e({attributes:{imageID:t.imageID},geometry:o,symbol:u.clone(),visible:m}))}},this.updateFootprint=async(r,n)=>{const{currentBestFeature:l,activeViewer:m,footprintExtent:u,view:f}=this.viewModel,d=o(a,this.viewModel.bestFeatureFootprint.geometry),g=m?.imageSize;if(!(l&&d&&g&&u))return void this.viewModel.updateCurrentCoveragePolygon(null);const{cameraHeight:y,location:v,cameraPitch:h,horizontalFieldOfView:b,verticalFieldOfView:F,cameraRoll:M}=l.attributes,R=v.toArray(),{vertexAttributes:{position:j},spatialReference:V}=d,A=await w(j,V,v.spatialReference),I=await this.viewModel.getMapPoint(r,{feature:l,mode:"default",imageSize:g});i(n);let P=I.filter(t);if(!P.length)return;P[0].spatialReference.equals(v.spatialReference)||(P=await Promise.all(P.map((async e=>{const t=await s(e,v.spatialReference,n);return i(n),t}))));const C=await c(r.map((({x:e,y:t})=>[e,t])),P.map((e=>e.toArray())),{cameraHeight:y,cameraLocation:R,cameraPitch:h,frustumVertices:A,horizontalFieldOfView:b,imageHeight:g[1],imageWidth:g[0],inSRS:{wkid:v.spatialReference.wkid},outSRS:{wkid:f.spatialReference.wkid},verticalFieldOfView:F,cameraRoll:M??0,options:n});this.viewModel.updateCurrentCoveragePolygon(new e({attributes:{imageID:l.attributes.objectId},geometry:C,symbol:p.clone(),visible:this.viewModel.currentCoverageVisible}))},this.updateFootprintPanorama=async(t,i)=>{await r(i);const{horizontalFieldOfView:o,pitch:a,verticalFieldOfView:s,yaw:n}=t,l=this.viewModel.currentBestFeature?.clone();if(!l)return;const{attributes:c}=l;c.orientedImageryType=null,c.cameraHeading=(n+c.cameraHeading)%360,c.cameraPitch=a,c.horizontalFieldOfView=o,c.verticalFieldOfView=s,c.cameraRoll=0;const{frustum:u}=m(c);u?this.viewModel.updateCurrentCoveragePolygon(new e({attributes:{imageID:c.objectId},geometry:u,symbol:p.clone(),visible:this.viewModel.currentCoverageVisible})):this.viewModel.updateCurrentCoveragePolygon(null)}}updateGroundElevation(e,t){const{geometry:i}=this.viewModel.currentBestFeature,r=t.queryElevation(i);e.forEach((e=>{const{geometry:t}=e;switch(t?.type){case"mesh":{const{vertexAttributes:{position:e}}=t,i=Math.floor(e.length/3);for(let t=0;t<i;t+=1)e[3*t+2]+=r?.z??0;break}case"point":t.z=(t.z??0)+(r?.z??0)}}))}}async function w(e,t,i,r){return Float64Array.from((await Promise.all(e.reduce(((e,t,i)=>{const r=Math.floor(i/3);return e[r]=e[r]??[],e[r].push(t),e}),new Array).map((async e=>(await s(new f(e,t),i,r)).toArray())))).flat())}export{d as default};
