/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.6
 */
import { r as registerInstance, c as createEvent, h, g as getElement } from './index-1731abba.js';
import { aj as newWidgetsUtilityNetworkValidateTopology } from './index-a1e05d0a.js';
import { r as referenceElementHelper, f as defineViewProperty, d as attachToParent } from './component-utils-7177db90.js';
import { o as onDisconnectedHelper } from './disconnected-754b18e2.js';

const utilityNetworkValidateTopologyCss = "arcgis-utility-network-validate-topology{}";
const ArcgisUtilityNetworkValidateTopologyStyle0 = utilityNetworkValidateTopologyCss;

const ArcgisUtilityNetworkValidateTopology = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this._watchHandles = [];
        this.referenceElement = undefined;
        this.extentToValidate = "current";
        this.utilityNetwork = undefined;
        this.position = "bottom-left";
        this.view = undefined;
        this.widget = undefined;
    }
    referenceElementWatcher(value) {
        void referenceElementHelper(this, value);
    }
    extentToValidateWatcher(value) {
        if (this.widget) {
            this.widget.extentToValidate = value;
        }
    }
    utilityNetworkWatcher(value) {
        if (this.widget) {
            this.widget.utilityNetwork = value;
        }
    }
    positionWatcher(value) {
        if (value !== undefined && this.widget && this.el.childElem) {
            this.view.ui.move(this.el.childElem, value);
        }
    }
    viewWatcher(value) {
        if (value !== undefined && this.widget) {
            this.widget.view = value;
            void this._loadUtilityNetwork();
        }
    }
    //--------------------------------------------------------------------------
    //
    //  Lifecycle
    //
    //--------------------------------------------------------------------------
    async componentDidLoad() {
        const params = this._createParams();
        const widget = await newWidgetsUtilityNetworkValidateTopology(params);
        this.widget = widget;
        this._addContainer();
        defineViewProperty(this);
        attachToParent(this);
    }
    disconnectedCallback() {
        onDisconnectedHelper(this);
    }
    render() {
        return h("div", { key: '4f8773b76688aecd458ac939a0b0cf4a5db40e37', ref: (el) => (this.el.childElem = el) });
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _addContainer() {
        this.widget.container = this.el.childElem;
    }
    _createParams() {
        const params = {};
        if (this.extentToValidate !== undefined) {
            params.extentToValidate = this.extentToValidate;
        }
        if (this.utilityNetwork !== undefined) {
            params.utilityNetwork = this.utilityNetwork;
        }
        return params;
    }
    async _loadUtilityNetwork() {
        if (this.view?.map && this.view.map.portalItem) {
            await this.view.map.load();
            const utilityNetwork = this.view.map.utilityNetworks.getItemAt(0);
            await utilityNetwork.load();
            this.utilityNetwork = utilityNetwork;
        }
    }
    get el() { return getElement(this); }
    static get watchers() { return {
        "referenceElement": ["referenceElementWatcher"],
        "extentToValidate": ["extentToValidateWatcher"],
        "utilityNetwork": ["utilityNetworkWatcher"],
        "position": ["positionWatcher"],
        "view": ["viewWatcher"]
    }; }
};
ArcgisUtilityNetworkValidateTopology.style = ArcgisUtilityNetworkValidateTopologyStyle0;

export { ArcgisUtilityNetworkValidateTopology as arcgis_utility_network_validate_topology };
