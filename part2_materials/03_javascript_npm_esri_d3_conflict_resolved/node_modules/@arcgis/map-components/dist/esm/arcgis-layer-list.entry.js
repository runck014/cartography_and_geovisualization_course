/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.6
 */
import { r as registerInstance, c as createEvent, g as getElement } from './index-1731abba.js';
import { U as newWidgetsLayerList } from './index-a1e05d0a.js';
import { u as usePropertyChange } from './index-b8c7454b.js';
import { m as makeWidgetController } from './useWidget-a0180c4c.js';
import { u as useControllerManager, g as getSet } from './index-e7ca9269.js';
import './component-utils-7177db90.js';

const layerListCss = "";
const ArcgisLayerListStyle0 = layerListCss;

const useLayerListWidget = makeWidgetController(newWidgetsLayerList);
const ArcgisLayerList = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.widgetTriggerAction = createEvent(this, "arcgisTriggerAction", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.manager = useControllerManager(this);
        this.widget = useLayerListWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = usePropertyChange()("state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.collapsed = this.widget.collapsed;
        this.headingLevel = this.widget.headingLevel;
        this.catalogLayerList = getSet(undefined, {
            get: () => this.widget.catalogLayerList,
            set: "ignore",
        });
        this.catalogOptions = this.widget.catalogOptions;
        this.dragEnabled = this.widget.dragEnabled;
        this.filterPlaceholder = this.widget.filterPlaceholder;
        this.filterText = this.widget.filterText;
        this.icon = this.widget.icon;
        this.knowledgeGraphOptions = this.widget.knowledgeGraphOptions;
        this.tableList = getSet(undefined, {
            get: () => this.widget.tableList,
            set: "ignore",
        });
        this.label = this.widget.label;
        this.listItemCreatedFunction = this.widget.listItemCreatedFunction;
        this.minDragEnabledItems = this.widget.minDragEnabledItems;
        this.minFilterItems = this.widget.minFilterItems;
        this.openedLayers = getSet(undefined, {
            get: () => this.widget.openedLayers,
            set: "ignore",
        });
        this.operationalItems = getSet(undefined, {
            get: () => this.widget.operationalItems,
            set: "ignore",
        });
        this.selectedItems = this.widget.selectedItems;
        this.selectionMode = this.widget.selectionMode;
        this.visibilityAppearance = this.widget.visibilityAppearance;
        this.hideCatalogLayerList = this.widget.visibleElements.catalogLayerList;
        this.showCloseButton = this.widget.visibleElements.closeButton;
        this.showCollapseButton = this.widget.visibleElements.collapseButton;
        this.showErrors = this.widget.visibleElements.errors;
        this.showFilter = this.widget.visibleElements.filter;
        this.hideFlow = this.widget.visibleElements.flow;
        this.showHeading = this.widget.visibleElements.heading;
        this.hideStatusIndicators = this.widget.visibleElements.statusIndicators;
        this.showTemporaryLayerIndicators = this.widget.visibleElements.temporaryLayerIndicators;
        this.position = "bottom-left";
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    async triggerAction(action, item) {
        this.widget?.triggerAction(action, item);
    }
    get el() { return getElement(this); }
};
ArcgisLayerList.style = ArcgisLayerListStyle0;

export { ArcgisLayerList as arcgis_layer_list };
