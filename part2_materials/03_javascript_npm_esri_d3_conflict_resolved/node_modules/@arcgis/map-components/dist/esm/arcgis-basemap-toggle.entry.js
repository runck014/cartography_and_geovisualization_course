/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.6
 */
import { r as registerInstance, c as createEvent, h, g as getElement } from './index-1731abba.js';
import { g as globalCss } from './globalCss-22cd71e6.js';
import { u as useT9n, m as makeViewModelController } from './useViewModel-4fa38ffe.js';
import { r as importApplicationsComponentsBasemapUtils, t as classes, u as newWidgetsBasemapToggleBasemapToggleViewModel } from './index-a1e05d0a.js';
import { l as load, u as usePropertyChange } from './index-b8c7454b.js';
import { u as useControllerManager } from './index-e7ca9269.js';
import './component-utils-7177db90.js';

const base = "esri-basemap-toggle";
const baseThumbnail = "esri-basemap-thumbnail";
const css = {
    base,
    secondaryBasemapImage: `${base}__image--secondary`,
    container: `${baseThumbnail} ${base}__container`,
    image: `${baseThumbnail}__image ${base}__image`,
    imageLoading: `${base}__image--loading`,
    overlay: `${baseThumbnail}__overlay ${base}__image-overlay`,
    title: `${baseThumbnail}__title ${base}__title`,
    overlayScrim: `${baseThumbnail}__overlay-scrim`,
};

const useBasemapToggleViewModel = makeViewModelController(newWidgetsBasemapToggleBasemapToggleViewModel);
const ArcgisBasemapToggle = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        //--------------------------------------------------------------------------
        //
        //  Controllers
        //
        //--------------------------------------------------------------------------
        this.manager = useControllerManager(this);
        this.messages = useT9n();
        this.basemapUtils = load(importApplicationsComponentsBasemapUtils);
        this.viewModel = useBasemapToggleViewModel(this);
        //--------------------------------------------------------------------------
        //
        //  Events
        //
        //--------------------------------------------------------------------------
        this.arcgisPropertyChange = usePropertyChange()("nextBasemap", "state");
        this.activeBasemap = this.viewModel.activeBasemap;
        this.autoDestroyDisabled = false;
        this.icon = "layer-basemap";
        this.label = undefined;
        this.messageOverrides = undefined;
        this.nextBasemap = this.viewModel.nextBasemap;
        this.position = "top-left";
        this.referenceElement = undefined;
        this.showTitle = false;
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * Toggles to the [next basemap](#nextBasemap).
     */
    async toggle() {
        return await this.viewModel.toggle();
    }
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    render() {
        const vm = this.viewModel;
        const activeBasemap = vm.state === "disabled" ? null : vm.activeBasemap;
        const nextBasemap = vm.state === "disabled" ? null : vm.nextBasemap;
        const vmLoading = vm.state === "loading";
        const nextBasemapIncompatible = vm.state === "incompatible-next-basemap";
        const title = nextBasemap?.title ?? "";
        const nextBasemapLoading = nextBasemap && nextBasemap.loadStatus !== "loaded";
        let overlayNode;
        const willShowTitle = this.showTitle && title;
        const willShowAsIncompatible = nextBasemapIncompatible;
        const willShowOverlay = willShowTitle || willShowAsIncompatible;
        const thumbnailStyleActive = this._getThumbnailStyles(activeBasemap);
        const thumbnailStyleNext = this._getThumbnailStyles(nextBasemap);
        if (willShowOverlay) {
            overlayNode = (h("div", { key: 'c903fa639a199788fd04f15ea538503d6286adec', class: css.overlay }, willShowTitle ? (h("span", { class: css.title, title: title }, title)) : null, willShowAsIncompatible ? (h("calcite-scrim", { class: css.overlayScrim, title: this.messages.incompatibleSpatialReference }, h("calcite-icon", { icon: "exclamation-mark-triangle" }))) : null));
        }
        return (h("div", { key: 'df0a0c1d497fa78918932a139e7b73738170cd4e', class: classes(css.base, globalCss.widget) }, h("calcite-button", { key: '0887bb1b38eb38dfe7ca19b09a89b6835b019e17', appearance: "transparent", "data-basemap-id": nextBasemap ? nextBasemap.id : "", disabled: nextBasemapIncompatible, kind: "neutral", label: this.label ?? undefined, onClick: () => void this.toggle(), title: this.label ?? undefined }, h("div", { key: 'f9ff391ee36ec3b1faca881b7c8e0c96b8a390bb', class: classes(css.container, css.secondaryBasemapImage) }, h("div", { key: 'eb56cc5b9af3d5d4280f6d4cd30da02adab5826d', class: css.image, style: thumbnailStyleActive })), h("div", { key: '9b7498279464653e17b78d0c32782bb44c259607', class: css.container }, h("div", { key: '67f74ad9762d3a88c01b323657d083502e54f681', class: classes(css.image, nextBasemapLoading ? css.imageLoading : null), style: thumbnailStyleNext }, nextBasemapLoading || vmLoading ? (h("calcite-scrim", null, h("span", { "aria-hidden": "true", class: globalCss.loaderAnimation, role: "presentation" }))) : null), overlayNode))));
    }
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    _getThumbnailStyles(basemap) {
        const thumbnailUrl = this.basemapUtils.getBasemapThumbnailUrl(basemap);
        return thumbnailUrl ? { backgroundImage: `url(${thumbnailUrl})` } : { backgroundImage: "" };
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return getElement(this); }
};

export { ArcgisBasemapToggle as arcgis_basemap_toggle };
