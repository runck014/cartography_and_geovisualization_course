/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.6
 */
import { r as registerInstance, c as createEvent, g as getElement } from './index-1731abba.js';
import { u as usePropertyChange } from './index-b8c7454b.js';
import { L as newWidgetsFeatureTable, M as importLayersLayer } from './index-a1e05d0a.js';
import { m as makeWidgetController } from './useWidget-a0180c4c.js';
import { e as isNullOrEmptyString } from './component-utils-7177db90.js';
import { u as useControllerManager, g as getSet } from './index-e7ca9269.js';

const featureTableCss = ".arcgis-feature-table{width:100%;height:100%}";
const ArcgisFeatureTableStyle0 = featureTableCss;

const useFeatureTableWidget = makeWidgetController(newWidgetsFeatureTable);
const ArcgisFeatureTable = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.arcgisReady = createEvent(this, "arcgisReady", 7);
        this.arcgisSelectionChange = createEvent(this, "arcgisSelectionChange", 7);
        this.arcgisPropertyChange = createEvent(this, "arcgisPropertyChange", 7);
        this.widgetCellClick = createEvent(this, "arcgisCellClick", 7);
        this.widgetCellKeydown = createEvent(this, "arcgisCellKeydown", 7);
        this.widgetCellPointerout = createEvent(this, "arcgisCellPointerout", 7);
        this.widgetCellPointerover = createEvent(this, "arcgisCellPointerover", 7);
        this.widgetColumnReorder = createEvent(this, "arcgisColumnReorder", 7);
        this.manager = useControllerManager(this);
        this.widget = useFeatureTableWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = usePropertyChange()("effectiveSize", "isQueryingOrSyncing", "layerView", "size", "state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.position = "manual";
        this.actionColumnConfig = this.widget.actionColumnConfig;
        this.activeFilters = getSet(undefined, {
            get: () => this.widget.activeFilters,
            set: "ignore",
        });
        this.activeSortOrders = getSet([], {
            get: () => this.widget.activeSortOrders,
            set: "ignore",
        });
        this.allRelatedTablesVisible = getSet(undefined, {
            get: () => this.widget.allRelatedTablesVisible,
            set: "ignore",
        });
        this.attachmentsEnabled = this.widget.attachmentsEnabled;
        this.attributeTableTemplate = this.widget.attributeTableTemplate;
        this.autoRefreshDisabled = this.widget.autoRefreshEnabled;
        this.columnReorderingDisabled = this.widget.columnReorderingEnabled;
        this.columns = getSet(undefined, {
            get: () => this.widget.columns,
            set: "ignore",
        });
        this.description = this.widget.description;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.editingEnabled = this.widget.editingEnabled;
        this.effectiveSize = getSet(undefined, {
            get: () => this.widget.effectiveSize,
            set: "ignore",
        });
        this.filterBySelectionEnabled = this.widget.filterBySelectionEnabled;
        this.filterGeometry = this.widget.filterGeometry;
        this.hiddenFields = this.widget.hiddenFields;
        this.hideColumnDescriptions = this.widget.visibleElements.columnDescriptions;
        this.highlightDisabled = this.widget.highlightEnabled;
        this.highlightIds = this.widget.highlightIds;
        this.initialSize = this.widget.initialSize;
        this.isQueryingOrSyncing = getSet(undefined, {
            get: () => this.widget.isQueryingOrSyncing,
            set: "ignore",
        });
        this.layer = this.widget.layer;
        this.layerView = getSet(undefined, {
            get: () => this.widget.layerView,
            set: "ignore",
        });
        this.layers = getSet(undefined, {
            get: () => this.widget.layers,
            set: "ignore",
        });
        this.maxSize = this.widget.maxSize;
        this.menuConfig = this.widget.menuConfig;
        this.multipleSortEnabled = this.widget.multiSortEnabled;
        this.multipleSelectionDisabled = this.widget.multipleSelectionEnabled;
        this.objectIds = this.widget.objectIds;
        this.outFields = this.widget.outFields;
        this.pageCount = this.widget.pageCount;
        this.pageIndex = this.widget.pageIndex;
        this.paginationEnabled = this.widget.paginationEnabled;
        this.pageSize = this.widget.pageSize;
        this.relatedRecordsEnabled = this.widget.relatedRecordsEnabled;
        this.relatedTable = getSet(undefined, {
            get: () => this.widget.relatedTable,
            set: "ignore",
        });
        this.relatedTables = this.widget.relatedTables;
        this.returnGeometryEnabled = this.widget.returnGeometryEnabled;
        this.returnMEnabled = this.widget.returnMEnabled;
        this.returnZEnabled = this.widget.returnZEnabled;
        this.rowHighlightIds = this.widget.rowHighlightIds;
        this.showLayerDropdown = this.widget.visibleElements.layerDropdown;
        this.size = getSet(0, {
            get: () => this.widget.size,
            set: "ignore",
        });
        this.tableController = getSet(undefined, {
            get: () => this.widget.tableController,
            set: "ignore",
        });
        this.tableDisabled = this.widget.disabled;
        this.tableParent = getSet(undefined, {
            get: () => this.widget.tableParent,
            set: "ignore",
        });
        this.tableTemplate = this.widget.tableTemplate;
        this.timeExtent = this.widget.timeExtent;
        this.timeZone = this.widget.timeZone;
        this.layerItemId = getSet(undefined, {
            set: (value) => {
                if (isNullOrEmptyString(value)) {
                    this.layer = null;
                }
                else if (value) {
                    importLayersLayer()
                        .then(async (Layer) => await Layer.fromPortalItem({
                        portalItem: {
                            id: value,
                        },
                    }))
                        .then((layer) => {
                        this.layer = layer;
                    })
                        .catch(console.error);
                }
                return value;
            },
        });
        this.layerUrl = getSet(undefined, {
            set: (value) => {
                if (isNullOrEmptyString(value)) {
                    this.layer = null;
                }
                else if (value) {
                    importLayersLayer()
                        .then(async (Layer) => await Layer.fromArcGISServerUrl({
                        url: value,
                    }))
                        .then((layer) => {
                        this.layer = layer;
                    })
                        .catch(console.error);
                }
                return value;
            },
        });
        this.hideHeader = this.widget.visibleElements.header;
        this.hideMenu = this.widget.visibleElements.menu;
        this.hideColumnMenus = this.widget.visibleElements.columnMenus;
        this.hideColumnMenuItemsSortAscending = this.widget.visibleElements.columnMenuItems.sortAscending;
        this.hideColumnMenuItemsSortDescending = this.widget.visibleElements.columnMenuItems.sortDescending;
        this.hideMenuItemsClearSelection = this.widget.visibleElements.menuItems.clearSelection;
        this.hideMenuItemsDeleteSelection = this.widget.visibleElements.menuItems.deleteSelection;
        this.hideMenuItemsExportSelectionToCsv = this.widget.visibleElements.menuItems.exportSelectionToCSV;
        this.hideMenuItemsRefreshData = this.widget.visibleElements.menuItems.refreshData;
        this.hideMenuItemsSelectedRecordsShowAllToggle = this.widget.visibleElements.menuItems.selectedRecordsShowAllToggle;
        this.hideMenuItemsSelectedRecordsShowSelectedToggle = this.widget.visibleElements.menuItems.selectedRecordsShowSelectedToggle;
        this.hideMenuItemsToggleColumns = this.widget.visibleElements.menuItems.toggleColumns;
        this.hideMenuItemsZoomToSelection = this.widget.visibleElements.menuItems.zoomToSelection;
        this.hideProgress = this.widget.visibleElements.progress;
        this.hideSelectionColumn = this.widget.visibleElements.selectionColumn;
        this.hideTooltips = this.widget.visibleElements.tooltips;
        this.state = this.widget.state;
    }
    componentWillLoad() {
        this.manager.onLifecycle(() => this.widget.highlightIds.on("change", this.arcgisSelectionChange.emit));
    }
    componentDidLoad() {
        this.el.childElem?.classList.add("arcgis-feature-table");
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    async deleteSelection(showWarningPrompt) {
        await this.widget?.deleteSelection(showWarningPrompt);
    }
    async exportSelectionToCSV(includeGeometry) {
        await this.widget?.exportSelectionToCSV(includeGeometry);
    }
    async findColumn(fieldName) {
        return this.widget?.findColumn(fieldName);
    }
    async goToPage(index) {
        this.widget.goToPage(index);
    }
    async hideColumn(fieldName) {
        this.widget?.hideColumn(fieldName);
    }
    async nextPage() {
        this.widget.nextPage();
    }
    async previousPage() {
        this.widget.previousPage();
    }
    async refresh() {
        await this.widget?.refresh();
    }
    async scrollToLeft() {
        this.widget.scrollLeft();
    }
    async scrollToBottom() {
        this.widget.scrollToBottom();
    }
    async scrollToIndex(index) {
        this.widget?.scrollToIndex(index);
    }
    async scrollToRow(objectId) {
        this.widget?.scrollToRow(objectId);
    }
    async scrollToTop() {
        this.widget.scrollToTop();
    }
    async showAllColumns() {
        this.widget?.showAllColumns();
    }
    async showColumn(fieldName) {
        this.widget?.showColumn(fieldName);
    }
    async sortColumn(path, direction) {
        this.widget?.sortColumn(path, direction);
    }
    async zoomToSelection() {
        this.widget?.zoomToSelection();
    }
    get el() { return getElement(this); }
};
ArcgisFeatureTable.style = ArcgisFeatureTableStyle0;

export { ArcgisFeatureTable as arcgis_feature_table };
