/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.6
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-18a7f5d0.js');
const index$2 = require('./index-37d4afd2.js');
const index$3 = require('./index-5e5de530.js');
const useWidget = require('./useWidget-fb821f71.js');
const index$1 = require('./index-e254d0ee.js');
require('./component-utils-9b190f6f.js');

const featuresCss = "arcgis-features{}";
const ArcgisFeaturesStyle0 = featuresCss;

const useFeaturesWidget = useWidget.makeWidgetController(index$3.newWidgetsFeatures);
const ArcgisFeatures = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisReady = index.createEvent(this, "arcgisReady", 7);
        this.arcgisPropertyChange = index.createEvent(this, "arcgisPropertyChange", 7);
        this.widgetTriggerAction = index.createEvent(this, "arcgisTriggerAction", 7);
        this.manager = index$1.useControllerManager(this);
        this.widget = useFeaturesWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = index$2.usePropertyChange()("selectedFeature", "selectedFeatureIndex", "state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.collapsed = this.widget.collapsed;
        this.actions = this.viewModel.actions;
        this.active = this.widget.active;
        this.content = this.widget.content;
        this.features = this.widget.features;
        this.featuresPerPage = this.viewModel.featuresPerPage;
        this.featureViewModelAbilities = this.viewModel.featureViewModelAbilities;
        this.goToOverride = this.viewModel.goToOverride;
        this.headingLevel = this.widget.headingLevel;
        this.includeDefaultActions = this.viewModel.includeDefaultActions;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.map = this.widget.map;
        this.promises = this.widget.promises;
        this.selectedFeature = this.widget.selectedFeature;
        this.selectedFeatureIndex = this.widget.selectedFeatureIndex;
        this.spatialReference = this.widget.spatialReference;
        this.featuresTitle = this.widget.title;
        this.timeZone = this.widget.timeZone;
        this.hideActionBar = this.widget.visibleElements.actionBar;
        this.hideCloseButton = this.widget.visibleElements.closeButton;
        this.showCollapseButton = this.widget.visibleElements.collapseButton;
        this.hideFeatureNavigation = this.widget.visibleElements.featureNavigation;
        this.hideFlow = this.widget.visibleElements.flow;
        this.hideHeading = this.widget.visibleElements.heading;
        this.hideSpinner = this.widget.visibleElements.spinner;
        this.position = "bottom-left";
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    async fetchFeatures(screenPoint, options) {
        return await this.widget?.fetchFeatures(screenPoint, options);
    }
    async clear() {
        this.widget?.clear();
    }
    async close() {
        this.widget?.close();
    }
    async next() {
        return this.widget?.next();
    }
    async open(options) {
        this.widget?.open(options);
    }
    async previous() {
        return this.widget?.previous();
    }
    async triggerAction(actionIndex) {
        this.widget?.triggerAction(actionIndex);
    }
    get el() { return index.getElement(this); }
};
ArcgisFeatures.style = ArcgisFeaturesStyle0;

exports.arcgis_features = ArcgisFeatures;
