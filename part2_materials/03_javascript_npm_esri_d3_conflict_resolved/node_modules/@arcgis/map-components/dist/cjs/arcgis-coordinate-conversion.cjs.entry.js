/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.6
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-18a7f5d0.js');
const index$3 = require('./index-5e5de530.js');
const index$2 = require('./index-37d4afd2.js');
const useWidget = require('./useWidget-fb821f71.js');
const index$1 = require('./index-e254d0ee.js');
require('./component-utils-9b190f6f.js');

const coordinateConversionCss = "";
const ArcgisCoordinateConversionStyle0 = coordinateConversionCss;

const useCoordinateConversionWidget = useWidget.makeWidgetController(index$3.newWidgetsCoordinateConversion);
const ArcgisCoordinateConversion = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisReady = index.createEvent(this, "arcgisReady", 7);
        this.arcgisPropertyChange = index.createEvent(this, "arcgisPropertyChange", 7);
        this.manager = index$1.useControllerManager(this);
        this.widget = useCoordinateConversionWidget(this);
        this.viewModel = this.widget.viewModel;
        this.arcgisPropertyChange = index$2.usePropertyChange()("currentLocation", "state");
        this.autoDestroyDisabled = false;
        this.referenceElement = undefined;
        this.conversions = this.widget.conversions;
        this.currentLocation = this.widget.currentLocation;
        this.formats = this.widget.formats;
        this.icon = this.widget.icon;
        this.label = this.widget.label;
        this.locationSymbol = this.widget.locationSymbol;
        this.headingLevel = this.widget.headingLevel;
        this.mode = this.widget.mode;
        this.multipleConversionsDisabled = this.widget.multipleConversions;
        this.orientation = this.widget.orientation;
        this.storageDisabled = this.widget.storageEnabled;
        this.storageType = this.widget.storageType;
        this.hideSettingsButton = this.widget.visibleElements.settingsButton;
        this.hideEditButton = this.widget.visibleElements.editButton;
        this.hideExpandButton = this.widget.visibleElements.expandButton;
        this.hideCaptureButton = this.widget.visibleElements.captureButton;
        this.position = "bottom-left";
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    async reverseConvert(coordinate, format) {
        return await this.widget?.reverseConvert(coordinate, format);
    }
    get el() { return index.getElement(this); }
};
ArcgisCoordinateConversion.style = ArcgisCoordinateConversionStyle0;

exports.arcgis_coordinate_conversion = ArcgisCoordinateConversion;
