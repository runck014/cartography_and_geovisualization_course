/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.6
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-18a7f5d0.js');
const globalCss = require('./globalCss-08327208.js');
const index$3 = require('./index-5e5de530.js');
const index$2 = require('./index-37d4afd2.js');
const useViewModel = require('./useViewModel-ee3162fa.js');
const index$1 = require('./index-e254d0ee.js');
require('./component-utils-9b190f6f.js');

// TODO: [MIGRATION] migrate tests
const css = {
    base: "esri-home",
};
const useHomeViewModel = useViewModel.makeViewModelController(index$3.newWidgetsHomeHomeViewModel);
const ArcgisHome = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisReady = index.createEvent(this, "arcgisReady", 7);
        this.viewModelGo = index.createEvent(this, "arcgisGo", 7);
        this.arcgisPropertyChange = index.createEvent(this, "arcgisPropertyChange", 7);
        //--------------------------------------------------------------------------
        //
        //  Controllers
        //
        //--------------------------------------------------------------------------
        this.manager = index$1.useControllerManager(this);
        this.messages = useViewModel.useT9n();
        this.viewModel = useHomeViewModel(this);
        this.arcgisPropertyChange = index$2.usePropertyChange()("state");
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this._go = () => {
            const { viewModel } = this;
            if (viewModel.state === "going-home") {
                viewModel.cancelGo();
            }
            else {
                viewModel.go();
            }
        };
        this.goToOverride = this.viewModel.goToOverride;
        this.icon = "home";
        this.label = undefined;
        this.messageOverrides = undefined;
        this.position = "top-left";
        this.referenceElement = undefined;
        this.viewpoint = this.viewModel.viewpoint;
        this.state = this.viewModel.state;
        this.autoDestroyDisabled = false;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    /**
     * This function provides the ability to interrupt and cancel the process
     * of navigating the view back to the view's initial extent.
     *
     * @since 4.9
     */
    async cancelGo() {
        this.viewModel.cancelGo();
    }
    /** Permanently destroy the component */
    async destroy() {
        await this.manager.destroy();
    }
    /**
     * Animates the view to the initial Viewpoint of the view or the
     * value of `viewpoint`
     */
    async go() {
        return this.viewModel.go();
    }
    render() {
        const { messages, icon } = this;
        const state = this.viewModel?.state;
        const isLoading = state === "going-home";
        return (index.h("div", { key: '5bb5c8c7b40d7050309ceb9d0752245e848f776f', class: index$3.classes(css.base, globalCss.globalCss.widget) }, index.h("calcite-button", { key: 'f2981ffb74046f1857cb9ffe8e8e8240ded6dba7', class: globalCss.globalCss.widgetButton, disabled: state === "disabled", iconStart: isLoading ? undefined : (icon ?? undefined), kind: "neutral", label: messages.componentLabel, onClick: this._go,
            // Workaround for https://github.com/Esri/calcite-design-system/issues/8490
            scale: isLoading ? "s" : "m", title: state === "going-home" ? messages.cancel : messages.title }, isLoading ? (
        // Cannot use calcite-button's loading=true. See https://devtopia.esri.com/WebGIS/arcgis-js-api/pull/58358#discussion_r1106927
        index.h("calcite-loader", { inline: true, label: "" })) : null)));
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return index.getElement(this); }
};

exports.arcgis_home = ArcgisHome;
