/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.6
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-18a7f5d0.js');
const index$2 = require('./index-37d4afd2.js');
const index$3 = require('./index-5e5de530.js');
const useViewModel = require('./useViewModel-ee3162fa.js');
const globalCss = require('./globalCss-08327208.js');
const index$1 = require('./index-e254d0ee.js');
require('./component-utils-9b190f6f.js');

const base = "esri-compass";
const css = {
    base,
    iconContainer: `${base}__icon-container`,
};
const useCompassViewModel = useViewModel.makeViewModelController(index$3.newWidgetsCompassCompassViewModel);
const ArcgisCompass = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.arcgisPropertyChange = index.createEvent(this, "arcgisPropertyChange", 7);
        this.arcgisReady = index.createEvent(this, "arcgisReady", 7);
        //--------------------------------------------------------------------------
        //
        //  Controllers
        //
        //--------------------------------------------------------------------------
        this.manager = index$1.useControllerManager(this);
        this.messages = useViewModel.useT9n();
        this.viewModel = useCompassViewModel(this);
        //--------------------------------------------------------------------------
        //
        //  Events
        //
        //--------------------------------------------------------------------------
        this.arcgisPropertyChange = index$2.usePropertyChange()("state", "orientation");
        //--------------------------------------------------------------------------
        //
        //  Private Methods
        //
        //--------------------------------------------------------------------------
        this._toRotationTransform = (orientation) => ({
            transform: `rotateZ(${orientation.z}deg)`,
        });
        this._reset = () => {
            this.viewModel.reset();
        };
        this.autoDestroyDisabled = false;
        this.icon = index$1.getSet(undefined, {
            get: (currentValue) => currentValue || (this.state === "rotation" ? "arrow-up" : "compass-needle"),
        });
        this.label = undefined;
        this.position = "top-left";
        this.orientation = this.viewModel.orientation;
        this.referenceElement = undefined;
        this.state = this.viewModel.state;
    }
    //--------------------------------------------------------------------------
    //
    //  Public Methods
    //
    //--------------------------------------------------------------------------
    render() {
        const { messages, icon } = this;
        return (index.h("div", { key: '4cc870cac72c2479ff22783ea5e04a3601d704f7', class: index$3.classes(css.base, globalCss.globalCss.widget) }, index.h("calcite-button", { key: '149084ef27b21ea3c9cde107afc1e0e8f38edfbd', class: globalCss.globalCss.widgetButton, disabled: this.state === "disabled", kind: "neutral", label: messages.reset, onClick: this._reset, round: true, scale: "s", title: messages.reset }, index.h("div", { key: 'b337bc53f26ff86fb07d4f3cd1904206fe8b02ce', "aria-hidden": "true",
            // Fix for Calcite's padding inline/block not being consistent
            class: css.iconContainer, title: messages.reset }, index.h("calcite-icon", { key: '9c1dc94a3abd6530269bbf39bf1ccb482690fd13', icon: icon, style: this._toRotationTransform(this.orientation) })))));
    }
    async reset() {
        return this.viewModel.reset();
    }
    async destroy() {
        await this.manager.destroy();
    }
    static get assetsDirs() { return ["assets"]; }
    get el() { return index.getElement(this); }
};

exports.arcgis_compass = ArcgisCompass;
