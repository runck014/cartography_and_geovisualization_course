import type { EventEmitter } from "../../stencil-public-runtime";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { Use, ControllerManager } from "@arcgis/components-controllers";
import type { Nil } from "@arcgis/components-utils";
declare const useDirectionsWidget: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager;
    el: HTMLElement;
    autoDestroyDisabled?: boolean;
    destroy?: () => Promise<void>;
} & Pick<__esri.Directions, "icon" | "label" | "viewModel" | "layer" | "unit" | "headingLevel" | "apiKey" | "maxStops" | "searchProperties"> & {
    reactiveUtils?: typeof __esri.reactiveUtils;
    state?: unknown;
    viewModel?: __esri.DirectionsViewModel | undefined;
    icon: Nil | string;
    label: Nil | string;
    referenceElement: ArcgisReferenceElement | Nil | string;
    position: __esri.
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    UIPosition;
    arcgisReady: EventEmitter<never> | import("@arcgis/components-controllers").EventEmitter;
    arcgisPropertyChange: import("@arcgis/components-controllers").EventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: HTMLElement & {
            ownedBy?: HTMLElement;
        };
        view?: import("../types").ArcGISMapView | import("../types").ArcGISSceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.DirectionsProperties): Promise<__esri.DirectionsProperties> | __esri.DirectionsProperties;
} | undefined) => __esri.Directions;
export declare class ArcgisDirections implements Use<typeof useDirectionsWidget> {
    manager: ControllerManager<this>;
    el: HTMLElement;
    widget: __esri.Directions;
    viewModel: __esri.DirectionsViewModel;
    componentDidLoad(): void;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    referenceElement: ArcgisReferenceElement | Nil | string;
    apiKey: string;
    /**
     * Icon which represents the component.
     * Typically used when the component is controlled by another component (e.g. by the Expand component).
     * Search [Calcite Icons](https://developers.arcgis.com/calcite-design-system/icons/) for possible values.
     */
    icon: string;
    label: string;
    routeLayerItemId: Nil | string;
    lastRoute: __esri.DirectionsLastRoute;
    layer: __esri.RouteLayer;
    headingLevel: number;
    maxStops: number;
    searchProperties: __esri.DirectionsSearchProperties;
    unit: "imperial" | "metric" | "millimeters" | "centimeters" | "decimeters" | "meters" | "kilometers" | "inches" | "feet" | "yards" | "miles" | "nautical-miles";
    useDefaultRouteLayer: boolean;
    hideLayerDetails: boolean | undefined;
    hideSaveAsButton: boolean | undefined;
    hideSaveButton: boolean | undefined;
    position: __esri.UIPosition;
    state: "ready" | "disabled";
    arcgisReady: EventEmitter<never>;
    arcgisPropertyChange: import("@arcgis/components-controllers").EventEmitter<{
        name: "state" | "lastRoute";
    }>;
    /** Maintain a default route layer */
    private _setDefaultLayer;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    getDirections(): Promise<__esri.RouteLayerSolveResult>;
    save(): Promise<__esri.PortalItem>;
    saveAs(portalItem: Promise<__esri.PortalItem>, options: {
        folder: __esri.PortalFolder;
    }): Promise<__esri.PortalItem>;
    zoomToRoute(): Promise<void>;
}
export {};
