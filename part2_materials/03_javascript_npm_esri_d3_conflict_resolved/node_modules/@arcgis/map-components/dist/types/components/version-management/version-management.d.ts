import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type { ControllerManager, Use } from "@arcgis/components-controllers";
import type { Nil } from "@arcgis/components-utils";
import type WebMap from "@arcgis/core/WebMap";
import type VersionManagementViewModel from "@arcgis/core/widgets/VersionManagement/VersionManagementViewModel";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
export type VersionManagementViewModelWidget = InstanceType<typeof VersionManagementViewModel>;
export type ArcGISWebMap = InstanceType<typeof WebMap>;
declare const useVersionManagementViewModel: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager;
    el: HTMLElement;
    autoDestroyDisabled?: boolean;
    destroy?: () => Promise<void>;
} & Pick<VersionManagementViewModel, never> & {
    reactiveUtils?: typeof __esri.reactiveUtils;
    state?: "ready" | "disabled" | "executing" | "failed" | "loading" | undefined;
    icon: Nil | string;
    label: Nil | string;
    referenceElement: ArcgisReferenceElement | Nil | string;
    arcgisReady: EventEmitter<never> | import("@arcgis/components-controllers").EventEmitter;
    position: __esri.UIPosition;
    arcgisPropertyChange: import("@arcgis/components-controllers").EventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: HTMLElement & {
            ownedBy?: HTMLElement;
        };
        view?: import("../types").ArcGISMapView | import("../types").ArcGISSceneView | undefined;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: unknown): Promise<unknown> | unknown;
} | undefined) => VersionManagementViewModel;
type VersioningStateEventType = "version-changed" | "version-created" | "version-deleted" | "version-switched";
export interface VersioningStateEvent {
    type?: VersioningStateEventType;
    versionIdentifier?: __esri.VersionInfoVersionIdentifier;
    versioningState?: __esri.VersioningState;
}
export declare class ArcgisVersionManagement implements Use<typeof useVersionManagementViewModel> {
    el: HTMLElement;
    flowElement: HTMLCalciteFlowElement | undefined;
    manager: ControllerManager<this>;
    reactiveUtils: __esri.reactiveUtils;
    viewModel: VersionManagementViewModel;
    arcgisReady: EventEmitter<never>;
    arcgisVersioningStateChanged: EventEmitter<VersioningStateEvent>;
    arcgisPropertyChange: undefined;
    allowEditingDisabled: boolean;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    closable: boolean;
    /**
     * Icon which represents the component.
     * Typically used when the component is controlled by another component (e.g. by the Expand component).
     * Search [Calcite Icons](https://developers.arcgis.com/calcite-design-system/icons/) for possible values.
     */
    icon: Nil | string;
    label: string | undefined;
    mode: Nil | string;
    pageSize: number;
    position: __esri.UIPosition;
    referenceElement: ArcgisReferenceElement | Nil | string;
    messages: {
        label: string;
        actions: {
            cancelSave: string;
            deleteVersion: string;
            editVersion: string;
            newVersion: string;
            refreshVersions: string;
            saveVersion: string;
            searchVersions: string;
            switchToVersion: string;
        };
        accessLevels: {
            private: string;
            protected: string;
            public: string;
        };
        executionErrors: {
            invalidVersionName: string;
            noAdvancedEditingUserTypeExtension: string;
            noFeatureServiceFound: string;
            notValidEnterpriseVersion: string;
            noVersionManagementServiceFound: string;
        };
        headers: {
            currentVersion: string;
            manageVersions: string;
        };
        input: {
            versionAccess: string;
            versionDescription: string;
            versionName: string;
            versionOwner: string;
        };
        loadErrors: {
            noFeatureServices: string;
            noViewProperty: string;
        };
    } & import("@arcgis/components-controllers").T9nMeta<{
        label: string;
        actions: {
            cancelSave: string;
            deleteVersion: string;
            editVersion: string;
            newVersion: string;
            refreshVersions: string;
            saveVersion: string;
            searchVersions: string;
            switchToVersion: string;
        };
        accessLevels: {
            private: string;
            protected: string;
            public: string;
        };
        executionErrors: {
            invalidVersionName: string;
            noAdvancedEditingUserTypeExtension: string;
            noFeatureServiceFound: string;
            notValidEnterpriseVersion: string;
            noVersionManagementServiceFound: string;
        };
        headers: {
            currentVersion: string;
            manageVersions: string;
        };
        input: {
            versionAccess: string;
            versionDescription: string;
            versionName: string;
            versionOwner: string;
        };
        loadErrors: {
            noFeatureServices: string;
            noViewProperty: string;
        };
    }>;
    state: "ready" | "disabled" | "executing" | "failed" | "loading";
    versioningStates: __esri.Collection<__esri.VersioningState>;
    view: __esri.MapView;
    componentWillLoad(): Promise<void>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    render(): VNode;
    private _createVersionPropertiesFlowItem;
    private _getLoadError;
    private _handleFlowItemClose;
    private _handleManageVersionAction;
    private _refreshVersionList;
    private _removeVersionListFlowItem;
    private _removeVersionPropertiesFlowItem;
}
export {};
