import type { ControllerManager, Use } from "@arcgis/components-controllers";
import type { Nil } from "@arcgis/components-utils";
import type { EventEmitter } from "../../stencil-public-runtime";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
declare const useFeatureTableWidget: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager;
    el: HTMLElement;
    autoDestroyDisabled?: boolean;
    destroy?: () => Promise<void>;
} & Pick<__esri.FeatureTable, "icon" | "timeZone" | "timeExtent" | "viewModel" | "layer" | "description" | "pageSize" | "editingEnabled" | "actionColumnConfig" | "attachmentsEnabled" | "attributeTableTemplate" | "filterBySelectionEnabled" | "filterGeometry" | "hiddenFields" | "highlightIds" | "initialSize" | "maxSize" | "menuConfig" | "objectIds" | "outFields" | "pageIndex" | "paginationEnabled" | "relatedRecordsEnabled" | "relatedTable" | "relatedTables" | "returnGeometryEnabled" | "returnMEnabled" | "returnZEnabled" | "rowHighlightIds" | "tableController" | "tableParent" | "tableTemplate"> & {
    reactiveUtils?: typeof __esri.reactiveUtils;
    state?: "ready" | "error" | "disabled" | "loaded" | "loading" | undefined;
    viewModel?: __esri.FeatureTableViewModel | undefined;
    icon: Nil | string;
    label: Nil | string;
    referenceElement: ArcgisReferenceElement | Nil | string;
    position: __esri.UIPosition;
    arcgisReady: EventEmitter<never> | import("@arcgis/components-controllers").EventEmitter;
    arcgisPropertyChange: import("@arcgis/components-controllers").EventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: HTMLElement & {
            ownedBy?: HTMLElement;
        };
        view?: import("../types").ArcGISMapView | import("../types").ArcGISSceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.FeatureTableProperties): Promise<__esri.FeatureTableProperties> | __esri.FeatureTableProperties;
} | undefined) => __esri.FeatureTable;
export declare class ArcgisFeatureTable implements Use<typeof useFeatureTableWidget> {
    manager: ControllerManager<this>;
    el: HTMLElement & {
        childElem?: HTMLElement;
    };
    widget: __esri.FeatureTable;
    viewModel: __esri.FeatureTableViewModel;
    componentWillLoad(): void;
    componentDidLoad(): void;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    referenceElement: ArcgisReferenceElement | Nil | string;
    position: __esri.UIPosition;
    actionColumnConfig: __esri.ActionColumnConfig;
    /**
     * A read-only property indicating the type of filter used by the table.
     * It returns either filters by geometry or selections using a row's object ID.
     */
    activeFilters: __esri.Collection<__esri.GeometryFilter | __esri.SelectionFilter> | undefined;
    /**
     * Use this read-only property if needing to query features while retaining
     * a column's sort order.
     */
    activeSortOrders: __esri.ColumnSortOrder[];
    /**
     * Indicates the table is displaying all related tables in "show all" mode.
     */
    allRelatedTablesVisible: boolean | undefined;
    attachmentsEnabled: boolean;
    attributeTableTemplate: __esri.AttributeTableTemplate;
    /**
     * Indicates whether the table should automatically refresh when the underlying data changes
     */
    autoRefreshDisabled: boolean;
    /**
     * Indicates whether the table should allow reordering of columns.
     */
    columnReorderingDisabled: boolean;
    /**
     * A read-only collection of column, field, group, action, attachment,
     * and relationship columns that are displayed within the table.
     */
    columns: __esri.Collection<__esri.Column | __esri.FieldColumn | __esri.GroupColumn | __esri.ActionColumn | __esri.AttachmentsColumn | __esri.RelationshipColumn> | undefined;
    description: string | Function;
    /**
     * Icon which represents the component.
     * Typically used when the component is controlled by another component (e.g. by the Expand component).
     * Search [Calcite Icons](https://developers.arcgis.com/calcite-design-system/icons/) for possible values.
     */
    icon: string;
    /**
     * The components label.
     */
    label: string;
    editingEnabled: boolean;
    /**
     * Total number of records displayed in the table's current view.
     */
    effectiveSize: number | undefined;
    filterBySelectionEnabled: boolean;
    filterGeometry: __esri.Geometry;
    hiddenFields: __esri.Collection<string>;
    hideColumnDescriptions: boolean | undefined;
    highlightDisabled: boolean;
    highlightIds: __esri.Collection<string | number>;
    initialSize: number;
    /**
     * A read-only property which indicates if the table is querying or syncing data.
     */
    isQueryingOrSyncing: boolean | undefined;
    layer: __esri.FeatureLayer | __esri.SceneLayer | __esri.GeoJSONLayer | __esri.CatalogFootprintLayer | __esri.CSVLayer | __esri.ImageryLayer | __esri.KnowledgeGraphSublayer | __esri.WFSLayer;
    /**
     * The layer view associated with the table's layer.
     */
    layerView: __esri.LayerView | undefined;
    /**
     * Group of layers displayed in the dropdown component in the table's header,
     * which allows changing what layer is currently displayed in the table.
     */
    layers: (__esri.FeatureLayer | __esri.SceneLayer | __esri.GeoJSONLayer | __esri.CatalogFootprintLayer | __esri.CSVLayer | __esri.ImageryLayer | __esri.KnowledgeGraphSublayer | __esri.WFSLayer)[] | undefined;
    maxSize: number;
    menuConfig: __esri.TableMenuConfig;
    /**
     * Indicates whether sorting multiple columns is supported within the table.
     */
    multipleSortEnabled: boolean;
    multipleSelectionDisabled: boolean;
    objectIds: __esri.Collection<string | number>;
    outFields: string[];
    pageCount: number;
    pageIndex: number;
    paginationEnabled: boolean;
    pageSize: number;
    relatedRecordsEnabled: boolean;
    /**
     * Reference to a nested table instance representing a relationship with another table.
     */
    relatedTable: __esri.FeatureTable;
    relatedTables: __esri.Collection<__esri.FeatureTable>;
    returnGeometryEnabled: boolean;
    returnMEnabled: boolean;
    returnZEnabled: boolean;
    rowHighlightIds: __esri.Collection<string | number>;
    showLayerDropdown: boolean | undefined;
    /**
     * Total number of records currently displayed in the table.
     */
    size: number;
    /**
     * Reference to top-level controller table, if this table is a related table, nested within and controlled by another table.
     */
    tableController: __esri.FeatureTable;
    tableDisabled: boolean;
    /**
     *  Reference to a table instance that this table is directly related to.
     */
    tableParent: __esri.FeatureTable;
    tableTemplate: __esri.TableTemplate;
    timeExtent: __esri.TimeExtent;
    timeZone: string;
    /**
     * Portal Item Id for a layer to load. You can set, `layer`, `layerUrl`, or `itemId`,
     * but not more than one.
     */
    layerItemId: Nil | string;
    /**
     * Url for a layer to load. You can set, `layer`, `layerUrl`, or `itemId`,
     * but not more than one.
     */
    layerUrl: Nil | string;
    /**
     * Indicates whether to display the feature table's header information.
     */
    hideHeader: boolean | undefined;
    /**
     * Indicates whether to display the feature table's menu.
     */
    hideMenu: boolean | undefined;
    /**
     * Indicates whether to display the menu items within the individual columns
     */
    hideColumnMenus: boolean | undefined;
    /**
     * Indicates whether to display the Sort Ascending menu item.
     */
    hideColumnMenuItemsSortAscending: boolean | undefined;
    /**
     * Indicates whether to display the Sort Descending menu item.
     */
    hideColumnMenuItemsSortDescending: boolean | undefined;
    /**
     * Indicates whether to display the Clear selection menu item.
     */
    hideMenuItemsClearSelection: boolean | undefined;
    /**
     *  Indicates whether to display the Delete Selection menu item.
     */
    hideMenuItemsDeleteSelection: boolean | undefined;
    /**
     * Indicates whether to display the Export selection to CSV menu item.
     */
    hideMenuItemsExportSelectionToCsv: boolean | undefined;
    /**
     * Indicates whether to display the Refresh data menu item.
     */
    hideMenuItemsRefreshData: boolean | undefined;
    /**
     * Indicates whether to toggle between showing only selected records in the table to showing all of the records.
     */
    hideMenuItemsSelectedRecordsShowAllToggle: boolean | undefined;
    /**
     * Indicates whether to display the Show selected records menu item.
     */
    hideMenuItemsSelectedRecordsShowSelectedToggle: boolean | undefined;
    /**
     * Indicates whether to enable toggling column visibility within the menu.
     */
    hideMenuItemsToggleColumns: boolean | undefined;
    /**
     * Indicates whether to display the Zoom to selected menu item.
     */
    hideMenuItemsZoomToSelection: boolean | undefined;
    /**
     * Indicates whether to display the progress indicator when the table is querying or syncing data.
     */
    hideProgress: boolean | undefined;
    /**
     * Indicates whether to display the selection column in the table.
     * Each row has a checkbox that selects its corresponding feature.
     */
    hideSelectionColumn: boolean | undefined;
    /**
     * Indicates whether to display the tooltip for the Show/hide columns button.
     */
    hideTooltips: boolean | undefined;
    state: "ready" | "error" | "disabled" | "loaded" | "loading";
    arcgisReady: EventEmitter<never>;
    arcgisSelectionChange: EventEmitter<__esri.CollectionChangeEvent<number | string>>;
    arcgisPropertyChange: import("@arcgis/components-controllers").EventEmitter<{
        name: "size" | "state" | "effectiveSize" | "isQueryingOrSyncing" | "layerView";
    }>;
    widgetCellClick: EventEmitter<__esri.FeatureTableCellClickEvent>;
    widgetCellKeydown: EventEmitter<__esri.FeatureTableCellKeydownEvent>;
    widgetCellPointerout: EventEmitter<__esri.FeatureTableCellPointeroutEvent>;
    widgetCellPointerover: EventEmitter<__esri.FeatureTableCellPointeroverEvent>;
    widgetColumnReorder: EventEmitter<__esri.FeatureTableColumnReorderEvent>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    deleteSelection(showWarningPrompt?: boolean): Promise<void>;
    exportSelectionToCSV(includeGeometry?: boolean): Promise<void>;
    findColumn(fieldName: string): Promise<__esri.ActionColumn | __esri.AttachmentsColumn | __esri.Column | __esri.GroupColumn | __esri.RelationshipColumn>;
    goToPage(index: number): Promise<void>;
    hideColumn(fieldName: string): Promise<void>;
    nextPage(): Promise<void>;
    previousPage(): Promise<void>;
    refresh(): Promise<void>;
    scrollToLeft(): Promise<void>;
    scrollToBottom(): Promise<void>;
    scrollToIndex(index: number): Promise<void>;
    scrollToRow(objectId: number): Promise<void>;
    scrollToTop(): Promise<void>;
    showAllColumns(): Promise<void>;
    showColumn(fieldName: string): Promise<void>;
    sortColumn(path: string, direction: "asc" | "desc"): Promise<void>;
    zoomToSelection(): Promise<void>;
}
export {};
