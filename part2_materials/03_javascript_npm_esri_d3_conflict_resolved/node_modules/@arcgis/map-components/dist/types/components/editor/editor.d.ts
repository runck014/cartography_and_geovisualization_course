import type { EventEmitter } from "../../stencil-public-runtime";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { ArcGISGraphic } from "../types";
import type { Use, ControllerManager } from "@arcgis/components-controllers";
import type { Nil } from "@arcgis/components-utils";
declare const useEditorWidget: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager;
    el: HTMLElement;
    autoDestroyDisabled?: boolean;
    destroy?: () => Promise<void>;
} & Pick<__esri.Editor, "icon" | "label" | "viewModel" | "headingLevel" | "allowedWorkflows" | "labelOptions" | "layerInfos" | "snappingOptions" | "supportingWidgetDefaults" | "tooltipOptions"> & {
    reactiveUtils?: typeof __esri.reactiveUtils;
    state?: unknown;
    viewModel?: __esri.EditorViewModel | undefined;
    icon: Nil | string;
    label: Nil | string;
    referenceElement: ArcgisReferenceElement | Nil | string;
    position: __esri.UIPosition;
    arcgisReady: EventEmitter<never> | import("@arcgis/components-controllers").EventEmitter;
    arcgisPropertyChange: import("@arcgis/components-controllers").EventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: HTMLElement & {
            ownedBy?: HTMLElement;
        };
        view?: import("../types").ArcGISMapView | import("../types").ArcGISSceneView | Nil;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: __esri.EditorProperties): Promise<__esri.EditorProperties> | __esri.EditorProperties;
} | undefined) => __esri.Editor;
export declare class ArcgisEditor implements Use<typeof useEditorWidget> {
    manager: ControllerManager<this>;
    el: HTMLElement;
    widget: __esri.Editor;
    viewModel: __esri.EditorViewModel;
    /**
     * If true, the component will not be destroyed automatically when it is
     * disconnected from the document. This is useful when you want to move the
     * component to a different place on the page, or temporary hide it. If this
     * is set, make sure to call the \`destroy\` method when you are done to prevent
     * memory leaks.
     */
    autoDestroyDisabled: boolean;
    referenceElement: ArcgisReferenceElement | Nil | string;
    activeWorkflow: __esri.CreateFeaturesWorkflow | __esri.UpdateWorkflow;
    allowedWorkflows: "update" | "create-features";
    /**
     * Icon which represents the component.
     * Typically used when the component is controlled by another component (e.g. by the Expand component).
     * Search [Calcite Icons](https://developers.arcgis.com/calcite-design-system/icons/) for possible values.
     */
    icon: string;
    label: string;
    labelOptions: __esri.SketchLabelOptions;
    layerInfos: __esri.EditorLayerInfo[];
    snappingOptions: __esri.SnappingOptions;
    supportingWidgetDefaults: __esri.SupportingWidgetDefaults;
    tooltipOptions: __esri.SketchTooltipOptions;
    headingLevel: number;
    hideCreateFeaturesSection: boolean | undefined;
    hideEditFeaturesSection: boolean | undefined;
    hideLabelsToggle: boolean | undefined;
    hideTooltipsToggle: boolean | undefined;
    showSnappingControlsElementsHeader: boolean | undefined;
    hideSnappingControlsElementsEnabledToggle: boolean | undefined;
    hideSnappingControlsElementsSelfEnabledToggle: boolean | undefined;
    hideSnappingControlsElementsFeatureEnabledToggle: boolean | undefined;
    hideSnappingControlsElementsLayerList: boolean | undefined;
    position: __esri.UIPosition;
    state: "ready" | "disabled" | "adding-attachment" | "awaiting-feature-creation-info" | "awaiting-feature-to-create" | "awaiting-feature-to-update" | "awaiting-update-feature-candidate" | "creating-features" | "editing-attributes" | "editing-attachment" | "editing-existing-feature" | "editing-new-feature";
    arcgisReady: EventEmitter<never>;
    arcgisPropertyChange: import("@arcgis/components-controllers").EventEmitter<{
        name: "state" | "activeWorkflow";
    }>;
    cancelWorkflow(): Promise<void>;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    deleteFeatureFromWorkflow(): Promise<void>;
    startCreateFeaturesWorkflowAtFeatureCreation(info: __esri.CreationInfo): Promise<void>;
    startCreateFeaturesWorkflowAtFeatureTypeSelection(): Promise<void>;
    startUpdateWorkflowAtFeatureEdit(feature: ArcGISGraphic): Promise<void>;
    startUpdateWorkflowAtFeatureSelection(): Promise<void>;
    startUpdateWorkflowAtMultipleFeatureSelection(candidates: ArcGISGraphic[]): Promise<void>;
}
export {};
