import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { Nil } from "@arcgis/components-utils";
import type { Use, ControllerManager } from "@arcgis/components-controllers";
declare const useTrackViewModel: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager;
    el: HTMLElement;
    autoDestroyDisabled?: boolean;
    destroy?: () => Promise<void>;
} & Pick<__esri.TrackViewModel, never> & {
    reactiveUtils?: typeof __esri.reactiveUtils;
    state?: "ready" | "error" | "waiting" | "disabled" | "feature-unsupported" | "tracking" | undefined;
    icon: Nil | string;
    label: Nil | string;
    referenceElement: ArcgisReferenceElement | Nil | string;
    arcgisReady: EventEmitter<never> | import("@arcgis/components-controllers").EventEmitter;
    position: __esri.UIPosition;
    arcgisPropertyChange: import("@arcgis/components-controllers").EventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: HTMLElement & {
            ownedBy?: HTMLElement;
        };
        view?: import("../types").ArcGISMapView | import("../types").ArcGISSceneView | undefined;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: unknown): Promise<unknown> | unknown;
} | undefined) => __esri.TrackViewModel;
export declare class ArcgisTrack implements Use<typeof useTrackViewModel> {
    manager: ControllerManager<this>;
    messages: Partial<{
        componentLabel: string;
        startTracking: string;
        stopTracking: string;
        permissionError: string;
        timeoutError: string;
        positionUnavailable: string;
    }> & import("@arcgis/components-controllers").T9nMeta<{
        componentLabel: string;
        startTracking: string;
        stopTracking: string;
        permissionError: string;
        timeoutError: string;
        positionUnavailable: string;
    }>;
    viewModel: __esri.TrackViewModel;
    el: HTMLElement;
    arcgisPropertyChange: import("@arcgis/components-controllers").EventEmitter<{
        name: "state";
    }>;
    arcgisReady: EventEmitter<never>;
    viewModelTrack: EventEmitter<__esri.TrackViewModelTrackEvent>;
    viewModelTrackError: EventEmitter<__esri.TrackViewModelTrackErrorEvent>;
    /**
     * If true, the component will not be destroyed automatically when
     * it is disconnected from the document. This is useful when you
     * want to move the component to a different place on the page, or
     * temporary hide it. If this is set, make sure to call the
     * \`destroy\` method when you are done to prevent memory leaks.
     */
    autoDestroyDisabled: boolean;
    error: any;
    geolocationOptions: any;
    goToOverride: __esri.GoToOverride;
    goToLocationDisabled: boolean;
    graphic: __esri.Graphic;
    /**
     * Icon which represents the component.
     * Typically used when the component is controlled by another component (e.g. by the Expand component).
     * Search [Calcite Icons](https://developers.arcgis.com/calcite-design-system/icons/) for possible values.
     */
    icon: Nil | string;
    label: Nil | string;
    positionFilterFunction: Function;
    position: __esri.UIPosition;
    referenceElement: ArcgisReferenceElement | Nil | string;
    scale: number;
    state: "ready" | "error" | "waiting" | "disabled" | "feature-unsupported" | "tracking";
    tracking: boolean;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    render(): VNode;
    start(): Promise<void>;
    stop(): Promise<void>;
    private _toggleTracking;
    private _localizeError;
}
export {};
