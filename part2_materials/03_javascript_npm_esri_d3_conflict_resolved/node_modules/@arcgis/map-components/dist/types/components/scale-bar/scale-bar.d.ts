import type { EventEmitter, VNode } from "../../stencil-public-runtime";
import type { ArcgisReferenceElement } from "../../utils/component-utils";
import type { Nil } from "@arcgis/components-utils";
import type { Use, ControllerManager } from "@arcgis/components-controllers";
import type { MeasurementSystem } from "../types";
type ScaleBarStyle = "line" | "ruler";
type ScaleBarUnit = MeasurementSystem | "dual";
declare const useScaleBarViewModel: (component: import("@arcgis/components-controllers").StencilLifecycles & {
    manager: ControllerManager;
    el: HTMLElement;
    autoDestroyDisabled?: boolean;
    destroy?: () => Promise<void>;
} & Pick<__esri.ScaleBarViewModel, never> & {
    reactiveUtils?: typeof __esri.reactiveUtils;
    state?: "ready" | "disabled" | undefined;
    icon: Nil | string;
    label: Nil | string;
    referenceElement: ArcgisReferenceElement | Nil | string;
    arcgisReady: EventEmitter<never> | import("@arcgis/components-controllers").EventEmitter;
    position: __esri.UIPosition;
    arcgisPropertyChange: import("@arcgis/components-controllers").EventEmitter<{
        name: string;
    }> | undefined;
    el: HTMLElement & {
        childElem?: HTMLElement & {
            ownedBy?: HTMLElement;
        };
        view?: import("../types").ArcGISMapView | import("../types").ArcGISSceneView | undefined;
    };
    autoDestroyDisabled: boolean;
    destroy: () => Promise<void>;
}, options?: {
    editConstructorProperties(props: unknown): Promise<unknown> | unknown;
} | undefined) => __esri.ScaleBarViewModel;
export declare class ArcgisScaleBar implements Use<typeof useScaleBarViewModel> {
    manager: ControllerManager<this>;
    messages: Partial<{
        componentLabel: string;
    }> & import("@arcgis/components-controllers").T9nMeta<{
        componentLabel: string;
    }>;
    reactiveUtils: __esri.reactiveUtils;
    intlUtils: __esri.intl;
    unitUtils: __esri.getDefaultUnits;
    viewModel: __esri.ScaleBarViewModel;
    el: HTMLElement;
    componentDidLoad(): void;
    /** Permanently destroy the component */
    destroy(): Promise<void>;
    arcgisReady: EventEmitter<never>;
    arcgisPropertyChange: undefined;
    /**
     * If true, the component will not be destroyed automatically when
     * it is disconnected from the document. This is useful when you
     * want to move the component to a different place on the page, or
     * temporary hide it. If this is set, make sure to call the
     * \`destroy\` method when you are done to prevent memory leaks.
     */
    autoDestroyDisabled: boolean;
    /**
     * Icon which represents the component.
     * Typically used when the component is controlled by another component (e.g. by the Expand component).
     * Search [Calcite Icons](https://developers.arcgis.com/calcite-design-system/icons/) for possible values.
     */
    icon: Nil | string;
    /**
     * The widget's default label.
     */
    label: Nil | string;
    position: __esri.UIPosition;
    referenceElement: ArcgisReferenceElement | Nil | string;
    /**
     * The style for the scale bar.
     * When `unit` is set to `dual`, the style will always be `line`.
     */
    barStyle: ScaleBarStyle;
    /**
     * Units to use for the scale bar.
     * When using `dual`, the scale bar displays both metric and imperial units.
     * When metric, distances will be shown in either kilometers, meters, centimeters, or millimeters depending on the scale. Similarly, imperial
     * units will be shown in either miles, feet, or inches.
     */
    unit: ScaleBarUnit | undefined;
    /**
     * Used by [unit](#unit), this property attempts to obtain the user's preferred measurement system from their portal
     * profile. If the map is not associated with a portal then the measurement system is deduced from the view's
     * horizontal coordinate system. The fallback is "metric".
     */
    private _defaultUnit;
    _scaleComputedFrom: __esri.ScreenPoint;
    componentDidRender(): void;
    render(): VNode;
    private _renderRuler;
    private _renderLine;
    private _handleRootCreateOrUpdate;
    private _formatDistance;
}
export {};
