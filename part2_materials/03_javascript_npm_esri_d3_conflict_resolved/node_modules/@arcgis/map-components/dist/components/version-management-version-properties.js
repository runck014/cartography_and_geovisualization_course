/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.6
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import "@esri/calcite-components/dist/components/calcite-button.js";
import "@esri/calcite-components/dist/components/calcite-label.js";
import "@esri/calcite-components/dist/components/calcite-chip-group.js";
import "@esri/calcite-components/dist/components/calcite-chip.js";
import "@esri/calcite-components/dist/components/calcite-text-area.js";
import "@esri/calcite-components/dist/components/calcite-input-text.js";
import "@esri/calcite-components/dist/components/calcite-checkbox.js";
import "@esri/calcite-components/dist/components/calcite-flow-item.js";
import "@esri/calcite-components/dist/components/calcite-panel.js";
import "@esri/calcite-components/dist/components/calcite-block.js";

const ArcgisVersionManagementVersionProperties = /*@__PURE__*/ proxyCustomElement(class ArcgisVersionManagementVersionProperties extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.arcgisAlterVersion = createEvent(this, "arcgisAlterVersion", 7);
        this.arcgisCreateVersion = createEvent(this, "arcgisCreateVersion", 7);
        this.arcgisFlowItemBack = createEvent(this, "arcgisFlowItemBack", 7);
        this.arcgisFlowItemClose = createEvent(this, "arcgisFlowItemClose", 7);
        this._switchToVersion = true;
        this._handleCancel = () => {
            this.arcgisFlowItemBack.emit();
        };
        this._handleChange = (event) => {
            const { _mode: mode, _ownerName: ownerName, _versionName: versionName, versionPropertiesElementProps: { currentUser, isVersionAdministrator, serviceUrl, versionInfo }, } = this;
            let { _alterVersionParameters: alterVersionParameters, _createVersionParameters: createVersionParameters } = this;
            if (mode === "create") {
                if (!createVersionParameters) {
                    createVersionParameters = {
                        access: "public",
                        description: "",
                        featureServerUrl: serviceUrl,
                        ownerName: currentUser,
                        versionName: "",
                    };
                }
            }
            if (mode === "edit") {
                if (!alterVersionParameters) {
                    alterVersionParameters = {
                        featureServerUrl: serviceUrl,
                        versionIdentifier: versionInfo.versionIdentifier,
                        ownerName,
                        versionName,
                        access: versionInfo.access,
                        description: versionInfo.description,
                    };
                }
            }
            switch (event.type) {
                case "calciteChipGroupSelect": {
                    const name = event.target.label;
                    const value = event.target.selectedItems[0].value;
                    if (mode === "create") {
                        createVersionParameters = { ...createVersionParameters, ...{ [name]: value } };
                    }
                    if (mode === "edit") {
                        alterVersionParameters = { ...alterVersionParameters, ...{ [name]: value } };
                    }
                    break;
                }
                case "calciteInputTextInput": {
                    const name = event.target.name;
                    const value = event.target.value;
                    if (mode === "create") {
                        createVersionParameters = { ...createVersionParameters, ...{ [name]: value } };
                    }
                    if (mode === "edit") {
                        alterVersionParameters = { ...alterVersionParameters, ...{ [name]: value } };
                    }
                    break;
                }
                case "calciteTextAreaInput": {
                    const name = event.target.name;
                    const value = event.target.value;
                    if (mode === "create") {
                        createVersionParameters = { ...createVersionParameters, ...{ [name]: value } };
                    }
                    if (mode === "edit") {
                        alterVersionParameters = { ...alterVersionParameters, ...{ [name]: value } };
                    }
                    break;
                }
            }
            if (mode === "create") {
                if (createVersionParameters.access !== "public" &&
                    currentUser.toUpperCase() !== createVersionParameters.ownerName?.toUpperCase() &&
                    !isVersionAdministrator) {
                    this.switchToVersionCheckboxElement.checked = false;
                    this.switchToVersionCheckboxElement.disabled = true;
                    this._switchToVersion = false;
                }
                else {
                    this.switchToVersionCheckboxElement.disabled = false;
                }
                this._createVersionParameters = createVersionParameters;
            }
            if (mode === "edit") {
                this._alterVersionParameters = alterVersionParameters;
            }
        };
        this._handleClose = () => {
            this.arcgisFlowItemClose.emit();
        };
        this._handleSave = () => {
            const { _alterVersionParameters: alterVersionParameters, _createVersionParameters: createVersionParameters, _mode: mode, _switchToVersion: switchToVersion, } = this;
            if (mode === "create") {
                this.arcgisCreateVersion.emit({
                    createVersionParameters,
                    switchToVersion,
                });
            }
            if (mode === "edit") {
                this.arcgisAlterVersion.emit({
                    alterVersionParameters,
                });
            }
        };
        this._handleSwitchToVersionChange = (event) => {
            this._switchToVersion = event.target.checked;
        };
        this.versionPropertiesElementProps = undefined;
    }
    async componentWillLoad() {
        const { versionPropertiesElementProps: { versionInfo }, } = this;
        if (versionInfo) {
            this._mode = "edit";
            this._fullVersionName = versionInfo.versionIdentifier.name;
            this._ownerName = this._fullVersionName.substring(0, this._fullVersionName.lastIndexOf("."));
            this._versionName = this._fullVersionName.substring(this._fullVersionName.lastIndexOf(".") + 1);
        }
        else {
            this._mode = "create";
        }
    }
    componentDidRender() {
        if (this._mode === "create") {
            this.versionNameInputElement?.setFocus();
        }
    }
    render() {
        const { versionPropertiesElementProps: { closable, currentUser, hasAdvEditingUte, state, strings, versionInfo }, _mode: mode, _ownerName: ownerName, _versionName: versionName, } = this;
        const buttons = (h("div", { key: '4a5ed7a0f6814895500189b645f9e5d3f7a9fbb5' }, h("calcite-button", { key: '54ab974a2bf7be9360b48dfd9f0d8a5032fe1ff7', appearance: "outline", slot: "footer", width: "half", onClick: this._handleCancel }, strings.actions.cancelSave), h("calcite-button", { key: '609eda7c7b1d751f21f09bf98aacb312bee87a36', slot: "footer", width: "half", onClick: this._handleSave }, strings.actions.saveVersion)));
        const chipGroupAccessLevel = (h("calcite-label", { key: 'f4bd072664d6f7054fa78ac4f5f5223eeea205e8' }, strings.input.versionAccess, h("calcite-chip-group", { key: '78f9efb602fff0ca15127da9b224e999799cb079', label: "access", onCalciteChipGroupSelect: this._handleChange, selectionMode: "single-persist" }, h("calcite-chip", { key: 'c8106baf12a236640d93920562d8a87d26cc3f81', selected: (mode === "edit" && versionInfo.access === "public") || mode === "create", value: "public" }, strings.accessLevels.public), h("calcite-chip", { key: '3806c1b9ec6c5ce7bf170a5f3091d4dbceeeb198', selected: mode === "edit" && versionInfo.access === "protected", value: "protected" }, strings.accessLevels.protected), h("calcite-chip", { key: '5333ff937c91ae845da5d5df63b82da277766d2a', selected: mode === "edit" && versionInfo.access === "private", value: "private" }, strings.accessLevels.private))));
        const inputDescription = (h("calcite-label", { key: '541d4ef40c6f00c834825d6dc167d291bacd1720' }, strings.input.versionDescription, h("calcite-text-area", { key: '56f9df5f6b4c7e8d4b96a246cc44a1f560b92787', name: "description", onCalciteTextAreaInput: this._handleChange, resize: "vertical", value: mode === "edit" ? versionInfo.description : "" })));
        const inputName = (h("calcite-label", { key: '4a96f29e7de41ab3aada75347c492ee75875a75b' }, strings.input.versionName, h("calcite-input-text", { key: 'b6e13fb362c9e7173f122e4ec30ae63f0ef22563', ref: (node) => {
                this.versionNameInputElement = node;
            }, name: "versionName", onCalciteInputTextInput: this._handleChange, maxLength: 62, value: mode === "edit" ? versionName : "" })));
        const inputOwner = (h("calcite-label", { key: 'b40998587ea68b0895e2c1111e3ff012adef4865' }, strings.input.versionOwner, h("calcite-input-text", { key: '4bc775b26f384eff73e7e03d5af9a2665a50eebc', name: "ownerName", onCalciteInputTextInput: this._handleChange, disabled: !hasAdvEditingUte, value: mode === "edit" ? ownerName : currentUser })));
        const switchToVersionCheckbox = mode === "create" ? (h("calcite-label", { layout: "inline" }, h("calcite-checkbox", { ref: (node) => {
                this.switchToVersionCheckboxElement = node;
            }, checked: true, name: "switchToVersion", onCalciteCheckboxChange: this._handleSwitchToVersionChange }), strings.actions.switchToVersion)) : undefined;
        return (h("calcite-flow-item", { key: '405059a80ad768940085fc18b1fdf499af6d926c', closable: closable, description: versionInfo ? versionInfo.versionIdentifier.name : "", heading: versionInfo ? strings.actions.editVersion : strings.actions.newVersion, onCalciteFlowItemClose: this._handleClose }, h("calcite-panel", { key: '7b2c15adc638fbd27da93f0cdedb1cd4f7759fa9', loading: state === "executing" }, h("calcite-block", { key: '6a0a68fcde667eda85ce5785f0902c5c6b94c8b0', heading: "", open: true }, inputName, inputDescription, chipGroupAccessLevel, inputOwner, switchToVersionCheckbox, buttons))));
    }
    get el() { return this; }
}, [0, "arcgis-version-management-version-properties", {
        "versionPropertiesElementProps": [16]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-version-management-version-properties"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-version-management-version-properties":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisVersionManagementVersionProperties);
            }
            break;
    } });
}
defineCustomElement();

export { ArcgisVersionManagementVersionProperties as A, defineCustomElement as d };
