/*!
 * All material copyright Esri, All Rights Reserved, unless otherwise specified.
 * See https://js.arcgis.com/4.31/esri/copyright.txt for details.
 * v4.31.6
 */
import { proxyCustomElement, HTMLElement, createEvent, h } from '@stencil/core/internal/client';
import "@esri/calcite-components/dist/components/calcite-action.js";
import "@esri/calcite-components/dist/components/calcite-tooltip.js";
import "@esri/calcite-components/dist/components/calcite-list-item.js";
import "@esri/calcite-components/dist/components/calcite-action-menu.js";

const ArcgisVersionManagementVersionItem = /*@__PURE__*/ proxyCustomElement(class ArcgisVersionManagementVersionItem extends HTMLElement {
    constructor() {
        super();
        this.__registerHost();
        this.arcgisManageVersion = createEvent(this, "arcgisManageVersion", 7);
        this.versionItemElementProps = undefined;
    }
    render() {
        const { versionItemElementProps: { currentUser, currentVersionIdentifier, hasAdvEditingUte, isVersionAdministrator, isVersioningApiAvailable, serviceUrl, strings: { actions }, versionInfo, }, } = this;
        const fullVersionName = versionInfo.versionIdentifier.name;
        const versionName = fullVersionName.substring(fullVersionName.lastIndexOf(".") + 1); // label
        const versionOwner = fullVersionName.substring(0, fullVersionName.lastIndexOf(".")); // description
        const guid = versionInfo.versionIdentifier.guid;
        const actionElementId = `actionSwitchToVersion_${guid}`;
        const canEditVersion = (versionOwner.toUpperCase() === currentUser.toUpperCase() && isVersioningApiAvailable && hasAdvEditingUte) ||
            isVersionAdministrator;
        const isCurrentVersion = currentVersionIdentifier.guid === versionInfo.versionIdentifier.guid;
        const startActionChangeVersion = (h("calcite-action", { key: '1c34df91dc4d3976049116d6e6bc379f62944470', disabled: isCurrentVersion, id: actionElementId, icon: "code-branch", text: "", onClick: () => {
                this.arcgisManageVersion.emit({ actionType: "changeVersion", serviceUrl, versionInfo });
            }, slot: "actions-start" }));
        const startActionChangeVersionTooltip = !isCurrentVersion ? (h("calcite-tooltip", { "overlay-positioning": "fixed", referenceElement: actionElementId }, h("span", null, actions.switchToVersion))) : undefined;
        return (h("calcite-list-item", { key: '5b1d76572a4e9e94756443f7e0c689282073f383', description: versionOwner, label: versionName, selected: false, value: guid }, startActionChangeVersion, startActionChangeVersionTooltip, h("calcite-action-menu", { key: 'cded92497ea9510cbb3bb86b2c95900660c2f52b', "overlay-positioning": "fixed", slot: "actions-end", label: "" }, h("calcite-action", { key: '8afbed1ebdffb2530590ae4943edb1f974cf8b4b', disabled: isCurrentVersion, icon: "code-branch", onClick: () => {
                this.arcgisManageVersion.emit({ actionType: "changeVersion", serviceUrl, versionInfo });
            }, scale: "s", text: actions.switchToVersion, textEnabled: true }), h("calcite-action", { key: '47cda1ce9d70e2b24e4f85810afbed4e08c9b991', disabled: !canEditVersion || isCurrentVersion, icon: "code-branch-edit", onClick: () => {
                this.arcgisManageVersion.emit({ actionType: "editVersion", serviceUrl, versionInfo });
            }, scale: "s", text: actions.editVersion, textEnabled: true }), h("calcite-action", { key: '89edd6c95ab045e367974c66cadcf66c5f59d6be', disabled: !canEditVersion || (canEditVersion && isCurrentVersion), icon: "trash", onClick: () => {
                this.arcgisManageVersion.emit({ actionType: "deleteVersion", serviceUrl, versionInfo });
            }, scale: "s", text: actions.deleteVersion, textEnabled: true }))));
    }
    get el() { return this; }
}, [0, "arcgis-version-management-version-item", {
        "versionItemElementProps": [16]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["arcgis-version-management-version-item"];
    components.forEach(tagName => { switch (tagName) {
        case "arcgis-version-management-version-item":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, ArcgisVersionManagementVersionItem);
            }
            break;
    } });
}
defineCustomElement();

export { ArcgisVersionManagementVersionItem as A, defineCustomElement as d };
