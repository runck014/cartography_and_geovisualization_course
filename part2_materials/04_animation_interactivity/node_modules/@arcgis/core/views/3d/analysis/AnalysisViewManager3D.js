/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.32/esri/copyright.txt for details.
*/
import{_ as e}from"../../../chunks/tslib.es6.js";import s from"../../../core/Accessor.js";import{createTask as t}from"../../../core/asyncUtils.js";import i from"../../../core/Collection.js";import a from"../../../core/Error.js";import{makeHandle as n}from"../../../core/handleUtils.js";import"../../../core/has.js";import o from"../../../core/Logger.js";import{removeMaybe as r,destroyMaybe as l,abortMaybe as c}from"../../../core/maybe.js";import{createAbortError as d,isAborted as h,onAbort as w,createResolver as u}from"../../../core/promiseUtils.js";import{schedule as m}from"../../../core/scheduling.js";import{property as y}from"../../../core/accessorSupport/decorators/property.js";import{subclass as _}from"../../../core/accessorSupport/decorators/subclass.js";const p="analyses-owner-handles";var V,A;!function(e){e[e.PENDING=0]="PENDING",e[e.CREATED=1]="CREATED"}(V||(V={})),function(e){e[e.ADDED=0]="ADDED",e[e.REMOVED=1]="REMOVED"}(A||(A={}));let v=class extends s{constructor(e){super(e),this._allAnalysisViews=new i,this._creatingViewCount=0,this._items=new Map,this._scheduledUpdateHandle=null,this._attachedToViewResolver=f(),this._analysisModules={"area-measurement":{module:null},dimension:{module:null},"direct-line-measurement":{module:null},"line-of-sight":{module:null},slice:{module:null},viewshed:{module:null}}}destroy(){this._disconnectOwners(),this._attachedToViewResolver.reject(d("AnalysisViewManager was destroyed"))}attach(){this._connectOwners(),this._attachedToViewResolver.resolve()}detach(){this._disconnectOwners(),this._attachedToViewResolver.reject(d()),this._attachedToViewResolver=f()}get updating(){return!this.view.ready||0!==this._creatingViewCount||this._allAnalysisViews.some((e=>e.updating))}get testInfo(){}async whenAnalysisView(e){await this._attachedToViewResolver.promise;const s=this._items.get(e);if(null==s||s.state.list===A.REMOVED){throw new a("AnalysisViewManager:no-analysisview-for-analysis","The analysis has not been added to view.analyses",{analysis:e})}return s.createAnalysisViewTask.promise}_connectOwners(){this.addHandles(this._connectAnalysesCollection(this.view.analyses),p)}_disconnectOwners(){this.removeHandles(p),this._update(),this._creatingViewCount=0}_connectAnalysesCollection(e){for(const i of e)this._addAnalysis(i);const s=e.on("after-add",(e=>this._addAnalysis(e.item))),t=e.on("after-remove",(e=>this._removeAnalysis(e.item)));return n((()=>{s.remove(),t.remove();for(const s of e)this._removeAnalysis(s)}))}_addAnalysis(e){const s=this._items.get(e);if(null==s){const s={state:{view:V.PENDING,list:A.ADDED},analysis:e,view:null,createAnalysisViewTask:null};this._items.set(e,s),s.createAnalysisViewTask=t((e=>this._createAnalysisViewPromise(s,e)))}else s.state.list=A.ADDED}_removeAnalysis(e){const s=this._items.get(e);null!=s?(s.state.list=A.REMOVED,this._scheduleUpdate()):o.getLogger(this).error("Trying to remove analysis which was not added")}_scheduleUpdate(){null==this._scheduledUpdateHandle&&(this._scheduledUpdateHandle=m((()=>this._update())))}_update(){this._scheduledUpdateHandle=r(this._scheduledUpdateHandle),this._items.forEach((e=>{if(e.state.list===A.REMOVED)switch(this._items.delete(e.analysis),e.state.view){case V.PENDING:e.createAnalysisViewTask=c(e.createAnalysisViewTask);break;case V.CREATED:null!=e.view&&(this._allAnalysisViews.remove(e.view),e.view=l(e.view),e.createAnalysisViewTask=null)}}))}async _createAnalysisViewPromise(e,s){const t=e.analysis,i=t.type,a=this._analysisModules[i];if(this._creatingViewCount+=1,null==a.module)try{a.module=await this._loadAnalysisModule(i)}catch(r){throw this._creatingViewCount-=1,r}if(h(s))throw this._creatingViewCount-=1,d("AnalysisView creation aborted");const n=new a.module.default({analysis:t,view:this.view});let o=!0;w(s,(()=>{o&&(this._creatingViewCount-=1,n.destroy())}));try{await n.when()}catch(r){throw o=!1,n.destroyed||(this._creatingViewCount-=1,n.destroy()),r}if(h(s))throw d();return o=!1,e.view=n,e.state.view=V.CREATED,this._allAnalysisViews.add(n),this._creatingViewCount-=1,n}_loadAnalysisModule(e){switch(e){case"area-measurement":return import("./AreaMeasurementAnalysisView3D.js");case"dimension":return import("./DimensionAnalysisView3D.js");case"direct-line-measurement":return import("./DirectLineMeasurementAnalysisView3D.js");case"line-of-sight":return import("./LineOfSightAnalysisView3D.js");case"slice":return import("./SliceAnalysisView3D.js");case"viewshed":return import("./ViewshedAnalysisView3D.js")}}};function f(){const e=u();return e.promise.catch((()=>{})),e}e([y()],v.prototype,"updating",null),e([y({constructOnly:!0})],v.prototype,"view",void 0),e([y()],v.prototype,"_allAnalysisViews",void 0),e([y()],v.prototype,"_creatingViewCount",void 0),v=e([_("esri.views.3d.analysis.AnalysisViewManager3D")],v);const D=v;export{D as default};
