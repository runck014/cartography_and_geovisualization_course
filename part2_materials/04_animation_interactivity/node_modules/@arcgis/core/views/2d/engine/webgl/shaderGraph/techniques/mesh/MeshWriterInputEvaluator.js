/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.32/esri/copyright.txt for details.
*/
import{isSome as e}from"../../../../../../../core/arrayUtils.js";import r from"../../../../../../../core/Error.js";import{clone as s}from"../../../../../../../core/lang.js";import t from"../../../../../../../core/Logger.js";import{collectExpressionDependencies as o}from"../../../../../../../support/arcadeOnDemand.js";import{getStartGroup as a}from"../../../grouping.js";import{hydrate as i}from"../../../animations/infos.js";import{createParamList as n,compileAnimationParam as c,fromJSON as m,resolveToAnimationInfo as p,encodeParamList as f,getAnimationExpressions as l}from"../../../animations/utils.js";import{applyComputedValue as d}from"./utils.js";import{DictionaryValue as u}from"../../../../../layers/features/support/DictionaryValue.js";const h=()=>t.getLogger("esri.views.2d.engine.webgl.shaderGraph.techniques.mesh.MeshWriterInputEvaluator");async function y(e,r,s=!1){const{defaultValue:t,valueExpressionInfo:o,value:a}=r;if(o){const{expression:a}=o,i=await e.createComputedField({expression:a},s);return i?{...r,computed:i,defaultValue:t}:null}return{...r,computed:new u(a),defaultValue:t}}async function v(e,r){const{valueExpressionInfo:s}=r,{expression:t}=s,o=await e.createComputedField({expression:t});return o?{...r,computed:o}:null}function P(e){return"object"==typeof e&&null!=e&&(!(!("valueExpressionInfo"in e)||!e.valueExpressionInfo)||"type"in e&&"Process"===e.type&&"op"in e&&"Random"===e.op)}function _(e){if(Array.isArray(e))for(const r of e)if(_(r))return!0;if("object"==typeof e){if(P(e))return!0;for(const r in e){if(_(e[r]))return!0}}return!1}class I{static async create(r,s,t){const o={},a=new Map,i=new Map,p=new Map,f=new Map,l=new Map,d=new Map;for(const u in t){const h=t[u];if(null!=h&&"object"==typeof h)if(Array.isArray(h)){if("object"==typeof h[0])throw new Error(`InternalError: Cannot handle ${u}. Nested array params are not supported`);o[u]=h}else if("valueExpressionInfo"in h){if(h.value){o[u]=h.value;continue}const e=await v(r,h);if(!e){o[u]=h.defaultValue;continue}a.set(u,e),o[u]=null}else switch(h.type){case"cim-effect-infos":if(h.effectInfos.some((e=>e.overrides.length))){i.set(u,{effects:await Promise.all(h.effectInfos.map((async s=>{const t=s.overrides.map((e=>y(r,e)));return{effect:s.effect,compiledOverrides:(await Promise.all(t)).filter(e)}})))});break}o[u]=h.effectInfos.map((e=>e.effect));break;case"cim-marker-placement-param":h.overrides.length&&p.set(u,{placementInfo:h,compiledOverrides:(await Promise.all(h.overrides.map((e=>y(r,e))))).filter(e)}),o[u]=h.placement;break;case"text-rasterization-param":{if(h.overrides.length){const s=h.overrides.map((e=>y(r,e,h.useLegacyLabelEvaluationRules)));f.set(u,{compiledOverrides:(await Promise.all(s)).filter(e),rasterizationParam:h,objectIdToResourceId:new Map});continue}const t={type:"cim-rasterization-info",resource:h.resource};o[u]=await s.fetchResourceImmediate(t)??null;break}case"sprite-rasterization-param":{if(h.overrides.length){const s=h.overrides.map((e=>y(r,e)));f.set(u,{compiledOverrides:(await Promise.all(s)).filter(e),rasterizationParam:h,objectIdToResourceId:new Map});continue}if("animated"===h.resource.type){f.set(u,{compiledOverrides:[],rasterizationParam:h,objectIdToResourceId:new Map});continue}const t={type:"cim-rasterization-info",resource:h.resource};o[u]=await s.fetchResourceImmediate(t)??null;break}case"cim-marker-transform-param":{const{params:e}=h;if(_(e)){const s={compiledMarkerInfos:[]};await Promise.all(e.map((async e=>{const t={props:{}};for(const s in e)if(P(e[s])){const o=await v(r,e[s]);t.compiledExpressionMap||(t.compiledExpressionMap=new Map);const a=t.compiledExpressionMap;o&&a.set(s,o)}else t.props[s]=e[s];s.compiledMarkerInfos.push(t)}))),l.set(u,s)}else o[u]={type:"cim-marker-transform-info",infos:e};break}case"animation-params":{const{params:e}=h,t=n(e);if(_(t)){const e=await Promise.all(t.map((e=>c(e,r))));d.set(u,{params:e,propertyIdToResourceId:new Map,key:u})}else{const e=m(t),r=await s.fetchResourceImmediate({type:"animation-info",resource:e});null!=r&&"sprite"===r.type&&(o[u]={dataRow:r.rect.y,dataColumn:r.rect.x})}break}default:o[u]=h}else o[u]=h}return new I(t,o,a,i,p,f,l,d)}constructor(e,r,s,t,a,i,n,c){this.inputMeshParams=e,this._resolvedMeshParams=r,this._dynamicProperties=s,this._dynamicEffectProperties=t,this._dynamicPlacementProperties=a,this._dynamicAsyncProperties=i,this._dynamicTransformProperties=n,this._dynamicAsyncAnimations=c,this.evaluator=e=>e,this._arcadeDependencies=new Set;for(const m of this._expressions())o(this._arcadeDependencies,m)}get hasDynamicProperties(){return!!(this._dynamicProperties.size||this._dynamicAsyncProperties.size||this._dynamicEffectProperties.size||this._dynamicTransformProperties.size||this._dynamicPlacementProperties.size||this._dynamicAsyncAnimations.size)}get evaluatedMeshParams(){return this._evaluatedMeshParams||(this._evaluatedMeshParams=this.evaluator(this._resolvedMeshParams)),this._evaluatedMeshParams}enqueueRequest(e,t,o){for(const i of this._dynamicAsyncProperties.values()){const c=s(i.rasterizationParam.resource);"animated"===i.rasterizationParam.resource.type&&i.rasterizationParam.resource.randomizeStartTime&&(c.primitiveName="__RESERVED__PRIMITIVE__NAME__",c.startGroup=a(t.getObjectId()||0));for(const{primitiveName:e,propertyName:s,computed:a,defaultValue:p,valueExpressionInfo:f}of i.compiledOverrides)try{const r="animated"===i.rasterizationParam.resource.type?c.primitiveName:e;d(c,r,s,a,t,o,p)}catch(n){h().errorOnce(new r("invalid-arcade-expression",`Encountered an error when evaluating the arcade expression '${f?.expression}' (primitive: '${e}', property: '${s}')`,n))}const m=e.enqueueRequest({type:"cim-rasterization-info",resource:c});i.objectIdToResourceId.set(t.getObjectId(),m)}for(const r of this._dynamicAsyncAnimations.values()){const s=r.params.map((e=>p(e,t,o))).map(i).map((e=>e.simplify())),a=f(s),n=e.enqueueRequest({type:"animation-info",resource:a});r.propertyIdToResourceId.set(t.getObjectId()+"."+r.key,n)}}evaluateMeshParams(e,r,s){for(const[t,o]of this._dynamicProperties.entries())this._resolvedMeshParams[t]=o.computed.readWithDefault(r,s,o.defaultValue);for(const[t,o]of this._dynamicPlacementProperties.entries())for(const{computed:e,defaultValue:a,propertyName:i}of o.compiledOverrides){const n=e.readWithDefault(r,s,a);o.placementInfo.placement[i]=n,this._resolvedMeshParams[t]=o.placementInfo.placement}for(const[t,o]of this._dynamicEffectProperties.entries())for(const e of o.effects){for(const{computed:t,defaultValue:o,propertyName:a}of e.compiledOverrides){const i=t.readWithDefault(r,s,o);e.effect[a]=i}this._resolvedMeshParams[t]=o.effects.map((e=>e.effect))}for(const[t,o]of this._dynamicTransformProperties.entries()){const e={type:"cim-marker-transform-info",infos:[]};for(const t of o.compiledMarkerInfos){const o={...t.props};if(t.compiledExpressionMap)for(const[e,a]of t.compiledExpressionMap){const t=a.computed.readWithDefault(r,s,a.defaultValue);o[e]="number"==typeof t||"boolean"==typeof t?t:a.defaultValue}e.infos.push(o)}this._resolvedMeshParams[t]=e}for(const[t,o]of this._dynamicAsyncProperties.entries()){const s=o.objectIdToResourceId.get(r.getObjectId());if(null==s)continue;const a=e.getResource(s);this._resolvedMeshParams[t]=a}for(const[t,o]of this._dynamicAsyncAnimations.entries()){const s=o.propertyIdToResourceId.get(r.getObjectId()+"."+t);if(null==s)continue;const a=e.getResource(s);this._resolvedMeshParams[t]={dataRow:a.rect.y,dataColumn:a.rect.x}}return this._evaluatedMeshParams=this.evaluator(this._resolvedMeshParams),this.evaluatedMeshParams}hasArcadeDependency(e){return this._arcadeDependencies.has(e)}*_expressions(){for(const e of this._dynamicProperties.values())yield e.computed;for(const e of this._dynamicEffectProperties.values())for(const r of e.effects)for(const e of r.compiledOverrides)yield e.computed;for(const e of this._dynamicPlacementProperties.values())for(const r of e.compiledOverrides)yield r.computed;for(const e of this._dynamicAsyncProperties.values())for(const r of e.compiledOverrides)yield r.computed;for(const e of this._dynamicTransformProperties.values())for(const r of e.compiledMarkerInfos)if(null!=r.compiledExpressionMap)for(const e of r.compiledExpressionMap.values())yield e.computed;for(const e of this._dynamicAsyncAnimations.values())for(const r of e.params)yield*l(r)}}export{I as MeshWriterInputEvaluator,P as hasExpression};
