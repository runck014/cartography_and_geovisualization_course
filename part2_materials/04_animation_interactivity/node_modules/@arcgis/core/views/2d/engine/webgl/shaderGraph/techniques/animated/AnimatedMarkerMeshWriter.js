/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.32/esri/copyright.txt for details.
*/
import{pt2px as e}from"../../../../../../../core/screenUtils.js";import{minMaxZoomPrecisionFactor as t,spritePadding as i}from"../../../definitions.js";import{AAnimatedMeshWriter as r,packAnimatedBitset as s}from"./AnimatedMeshWriter.js";import{getMinMaxZoom as n}from"../fill/meshWriterUtils.js";import{c256ToRad as o}from"../shaders/constants.js";import{DataType as a}from"../../../../../../webgl/enums.js";class c extends r{get vertexSpec(){return{createComputedParams:t=>{let{pixelDimensions:i,texelDimensions:r,baseSize:s,referenceSize:n,strokeWidth:o,sizeRatio:a}=t;i||(i=t.sprite.sdf?[0,0]:[t.sprite.width,t.sprite.height]),r||(r=t.sprite.sdf?[0,0]:i),s=e(s),n=e(n),o=e(o);const c=(t.sprite.sdfDecodeCoeff??1)*a;return{...t,pixelDimensions:i,texelDimensions:r,baseSize:s,referenceSize:n,strokeWidth:o,sdfDecodeCoeff:c}},optionalAttributes:{zoomRange:{type:a.SHORT,count:2,packPrecisionFactor:t,pack:({scaleInfo:e},{tileInfo:t})=>n(e,t)}},attributes:{id:{type:a.UNSIGNED_BYTE,count:3,pack:"id"},bitset:{type:a.UNSIGNED_BYTE,count:1,pack:s},pos:{type:a.SHORT,count:2,pack:"position",packPrecisionFactor:1},offset:{type:a.FLOAT,count:2,packAlternating:{count:4,pack:e=>{const t=e.texelDimensions;return[[-.5*t[0],-.5*t[1]],[.5*t[0],-.5*t[1]],[-.5*t[0],.5*t[1]],[.5*t[0],.5*t[1]]]}}},uv:{type:a.SHORT,count:2,packPrecisionFactor:1,packAlternating:{count:4,packTessellation:({texXmax:e,texXmin:t,texYmax:i,texYmin:r})=>[[t,r],[e,r],[t,i],[e,i]]}},animationPointerAndBaseSizeAndReferenceSize:{type:a.UNSIGNED_SHORT,count:4,packPrecisionFactor:1,pack:({animations:e,baseSize:t,referenceSize:i})=>[e.dataColumn,e.dataRow,t,i]},sizing:{type:a.UNSIGNED_SHORT,count:4,packPrecisionFactor:8,pack:({strokeWidth:e,pixelDimensions:t,baseSize:i,sprite:r,sizeRatio:s})=>{const n=Math.max(i*r.width/r.height,i),o=r.sdfDecodeCoeff*n*s;return[t[0],t[1],e,o]}},angle:{type:a.BYTE,count:1,packTessellation:({angle:e})=>e}}}}_write(e,t){const i=this.evaluatedMeshParams.sprite,{textureBinding:r}=i;e.recordStart(this.instanceId,this.attributeLayout,r);const s=t.getDisplayId();if("esriGeometryPolygon"===t.geometryType){const i=t.readCentroidForDisplay();if(!i)return;const[r,n]=i.coords;this._writeQuad(e,s,r,n)}else if("esriGeometryPoint"===t.geometryType){const i=t.readXForDisplay(),r=t.readYForDisplay();this._writeQuad(e,s,i,r)}else{const i=t.readGeometryForDisplay();if(i){const{angleToLine:t}=this.evaluatedMeshParams;if(t){let t=!0,r=null,n=null;i.forEachVertex(((i,a)=>{if(null!=r&&null!=n){const c=Math.atan2(a-n,i-r)/o;t&&(this._writeQuad(e,s,r,n,c),t=!1),this._writeQuad(e,s,i,a,c)}r=i,n=a}))}else i.forEachVertex(((t,i)=>{this._writeQuad(e,s,t,i)}))}}e.recordEnd()}_writeQuad(e,t,r,s,n=0){const o=this.evaluatedMeshParams.sprite,{rect:a}=o,c=a.x+i,d=a.y+i,p=a.x+a.width-i,l=a.y+a.height-i,m=e.vertexCount();e.recordBounds(r,s,64,64);const u={texXmin:c,texYmin:d,texXmax:p,texYmax:l,angle:n};for(let i=0;i<4;i++)this._writeVertex(e,t,r,s,u);e.indexEnsureSize(6),e.indexWrite(m),e.indexWrite(m+1),e.indexWrite(m+2),e.indexWrite(m+1),e.indexWrite(m+3),e.indexWrite(m+2)}}export{c as AnimatedMarkerMeshWriter};
