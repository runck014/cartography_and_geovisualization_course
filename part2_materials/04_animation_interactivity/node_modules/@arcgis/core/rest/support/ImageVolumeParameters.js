/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.32/esri/copyright.txt for details.
*/
import{_ as o}from"../../chunks/tslib.es6.js";import e from"../../core/Clonable.js";import{JSONMap as r}from"../../core/jsonMap.js";import t from"../../core/JSONSupport.js";import{property as s}from"../../core/accessorSupport/decorators/property.js";import"../../core/has.js";import"../../core/Logger.js";import"../../core/RandomLCG.js";import{subclass as p}from"../../core/accessorSupport/decorators/subclass.js";import{writer as i}from"../../core/accessorSupport/decorators/writer.js";import m from"../../geometry/Point.js";import{getJsonType as a}from"../../geometry/support/jsonUtils.js";import{geometryTypes as c}from"../../geometry/support/typeUtils.js";import n from"../../layers/support/MosaicRule.js";const l=new r({0:"constant",1:"plane",2:"minimum",3:"maximum",4:"average"},{useNumericKeys:!0});let u=class extends(e.ClonableMixin(t)){constructor(){super(...arguments),this.geometries=[],this.mosaicRule=null,this.pixelSize=null,this.constantZ=null,this.baseType="plane"}writeGeometries(o,e,r){o?.length&&(e.geometryType=a(o[0]),e.geometries=o.map((o=>o.toJSON())))}};o([s({types:[c]})],u.prototype,"geometries",void 0),o([i("geometries")],u.prototype,"writeGeometries",null),o([s({type:n,json:{write:!0}})],u.prototype,"mosaicRule",void 0),o([s({type:m,json:{write:!0}})],u.prototype,"pixelSize",void 0),o([s({json:{write:!0}})],u.prototype,"constantZ",void 0),o([s({type:l.apiValues,json:{read:l.read,write:l.write}})],u.prototype,"baseType",void 0),u=o([p("esri.rest.support.ImageVolumeParameters")],u);const y=u;export{y as default};
