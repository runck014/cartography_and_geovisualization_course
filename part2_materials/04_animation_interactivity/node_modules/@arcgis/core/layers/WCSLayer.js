/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.32/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import t from"../PopupTemplate.js";import r from"../core/Clonable.js";import o from"../core/Error.js";import{MultiOriginJSONMixin as s}from"../core/MultiOriginJSONSupport.js";import{debounce as i,throwIfAbortError as a}from"../core/promiseUtils.js";import{watch as n}from"../core/reactiveUtils.js";import{property as l}from"../core/accessorSupport/decorators/property.js";import"../core/has.js";import"../core/Logger.js";import"../core/RandomLCG.js";import{subclass as p}from"../core/accessorSupport/decorators/subclass.js";import m from"./Layer.js";import{BlendLayer as d}from"./mixins/BlendLayer.js";import{CustomParametersMixin as c}from"./mixins/CustomParametersMixin.js";import{ImageryTileMixin as u}from"./mixins/ImageryTileMixin.js";import{OperationalLayer as f}from"./mixins/OperationalLayer.js";import{PortalLayer as y}from"./mixins/PortalLayer.js";import{RefreshableLayer as h}from"./mixins/RefreshableLayer.js";import{ScaleRangeLayer as v}from"./mixins/ScaleRangeLayer.js";import{TemporalLayer as g}from"./mixins/TemporalLayer.js";import{legendEnabled as j,popupEnabled as I}from"./support/commonProperties.js";import S from"./support/Field.js";import{getServicePixelValueField as w}from"./support/rasterFieldUtils.js";import b from"./support/rasterDatasets/WCSRaster.js";import{createPopupTemplate as x}from"../support/popupUtils.js";import{SaveOperationType as A}from"../webdoc/interfaces.js";const P=new Set(["milliseconds","seconds","minutes","hours","days","weeks","months","years","decades","centuries"]);let O=class extends(d(v(f(y(c(u(g(h(s(r.ClonableMixin(m))))))))))){constructor(...e){super(...e),this.coverageId=null,this.version=null,this.isReference=null,this.legendEnabled=!0,this.noData=0,this.operationalLayerType="WCS",this.type="wcs",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this._debouncedSaveOperations=i((async(e,t,r)=>{const{save:o,saveAs:s}=await import("./save/imageryUtils.js");switch(e){case A.SAVE:return o(this,t);case A.SAVE_AS:return s(this,r,t)}}))}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["WCS"]},e).catch(a).then((()=>this._openRaster(t)))),Promise.resolve(this)}get coverageInfo(){return this.raster.coverageInfo}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){return[w("Pixel Value")]}createPopupTemplate(e){return x({fields:this.rasterFields,title:this.title},e)}async save(e){return this._debouncedSaveOperations(A.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(A.SAVE_AS,t,e)}async _openRaster(e){const t=new b({url:this.url,version:this.version,coverageId:this.coverageId,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters}});if(await t.open({signal:e}),!t.rasterInfo)throw t.destroy(),new o("wcs-layer:load","cannot load resources on "+this.url);const{rasterInfo:r}=t;null==r.noDataValue&&(r.noDataValue=this.noData),this._set("serviceRasterInfo",r),this._set("spatialReference",r.spatialReference),null==this.title&&this.setAtOrigin("title",t.datasetName,"service"),null==this.coverageId&&this.setAtOrigin("coverageId",t.coverageInfo.id,"service"),null==this.version&&t.version&&this.setAtOrigin("version",t.version,"service"),this.setAtOrigin("tileInfo",t.rasterInfo.storageInfo.tileInfo,"service");const{multidimensionalInfo:s}=r;if(null!=s){const e=s.variables[0].dimensions.find((({name:e})=>"StdTime"===e));if(e){let t=e.extent?.[0]??e.values[0];Array.isArray(t)&&(t=t[0]);let r=e.extent?.[1]??e.values[e.values.length-1];Array.isArray(r)&&(r=r[1]);const o=P.has(e.intervalUnit?.toLowerCase())?e.intervalUnit?.toLowerCase():null;this.set("timeInfo",{startField:"StdTime",fullTimeExtent:{start:t,end:r},timeZone:null,interval:o?{value:e.interval,unit:o}:null})}}this.raster=t,this._configDefaultSettings(),this.addHandles(n((()=>this.customParameters),(e=>this.raster.ioConfig.customFetchParameters=e)))}};e([l({type:String,nonNullable:!0,json:{name:"wcsInfo.coverageId",write:{isRequired:!0,ignoreOrigin:!0}}})],O.prototype,"coverageId",void 0),e([l()],O.prototype,"coverageInfo",null),e([l({type:["1.0.0","1.1.0","1.1.1","1.1.2","2.0.1"],nonNullable:!0,json:{name:"wcsInfo.version",write:{isRequired:!0,ignoreOrigin:!0}}})],O.prototype,"version",void 0),e([l({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],O.prototype,"isReference",void 0),e([l({json:{read:!0,write:!0}})],O.prototype,"blendMode",void 0),e([l(j)],O.prototype,"legendEnabled",void 0),e([l({type:["show","hide"]})],O.prototype,"listMode",void 0),e([l()],O.prototype,"noData",void 0),e([l({type:["WCS"]})],O.prototype,"operationalLayerType",void 0),e([l()],O.prototype,"raster",void 0),e([l({readOnly:!0})],O.prototype,"type",void 0),e([l(I)],O.prototype,"popupEnabled",void 0),e([l({type:t,json:{name:"popupInfo",write:!0}})],O.prototype,"popupTemplate",void 0),e([l({readOnly:!0})],O.prototype,"defaultPopupTemplate",null),e([l({readOnly:!0,type:[S]})],O.prototype,"fields",void 0),e([l({readOnly:!0,type:[S]})],O.prototype,"rasterFields",null),O=e([p("esri.layers.WCSLayer")],O);const C=O;export{C as default};
