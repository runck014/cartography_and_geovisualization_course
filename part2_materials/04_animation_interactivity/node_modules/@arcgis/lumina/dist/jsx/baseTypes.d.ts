import type { DirectiveResult } from "lit-html/directive.js";
import type { Ref } from "lit-html/directives/ref.js";
export type EventHandlerUnion<T, E extends Event> = (e: E & {
    currentTarget: T;
    target: Element;
}) => void;
export type InputEventHandlerUnion<T, E extends InputEvent> = (e: E & {
    currentTarget: T;
    target: T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement ? T : Element;
}) => void;
export type ChangeEventHandlerUnion<T, E extends Event> = (e: E & {
    currentTarget: T;
    target: T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement ? T : Element;
}) => void;
export type FocusEventHandlerUnion<T, E extends FocusEvent> = (e: E & {
    currentTarget: T;
    target: T extends HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement ? T : Element;
}) => void;
export type EventHandler<E> = {
    bivarianceHack(event: E): void;
}["bivarianceHack"];
export interface CustomAttributes<T = HTMLElement> {
    /**
     * The `key` is a special attribute that can be set on any element.
     *
     * At build-time it is translated into the `keyed()` directive:
     * https://lit.dev/docs/templates/directives/#keyed
     *
     * @remarks
     * Unlike in React or Stencil, any JavaScript value is acceptable as a key
     */
    key?: unknown;
    ref?: EventHandler<T | undefined> | Ref<T>;
    directives?: readonly DirectiveResult[];
}
