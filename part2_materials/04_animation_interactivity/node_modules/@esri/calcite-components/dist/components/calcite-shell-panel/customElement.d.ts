/// <reference types="../../index.d.ts" />
import { PropertyValues } from 'lit';
import { PublicLitElement as LitElement, JsxNode, TargetedEvent } from '@arcgis/lumina';
import { Height, Layout, Position, Scale, Width } from '../interfaces';
import { DisplayMode } from './interfaces';

/**
 * @slot - A slot for adding custom content.
 * @slot action-bar - A slot for adding a `calcite-action-bar` to the component.
 */
export declare class ShellPanel extends LitElement {
    /** When `true`, hides the component's content area. */
    collapsed: boolean;
    /**
     * Specifies the display mode of the component, where:
     *
     * `"dock"` displays at full height adjacent to center content,
     *
     * `"overlay"` displays at full height on top of center content, and
     *
     * `"float"` [Deprecated] does not display at full height with content separately detached from `calcite-action-bar` on top of center content.
     *
     * `"float-content"` does not display at full height with content separately detached from `calcite-action-bar` on top of center content.
     *
     * `"float-all"` detaches the `calcite-panel` and `calcite-action-bar` on top of center content.
     */
    displayMode: DisplayMode;
    /**
     * When `layout` is `horizontal`, specifies the maximum height of the component.
     *
     * @deprecated Use the `height` property instead.
     */
    heightScale: Scale;
    /** The direction of the component. */
    layout: Extract<"horizontal" | "vertical", Layout>;
    /** Use this property to override individual strings used by the component. */
    messageOverrides?: typeof this.messages._overrides;
    /**
     * Made into a prop for testing purposes only
     *
     * @private
     */
    private messages: Partial<{
        resize: string;
    }> & import('@arcgis/components-controllers').T9nMeta<{
        resize: string;
    }>;
    /** Specifies the component's position. Will be flipped when the element direction is right-to-left (`"rtl"`). */
    position: Extract<"start" | "end", Position>;
    /** When `true` and `displayMode` is not `float-content` or `float`, the component's content area is resizable. */
    resizable: boolean;
    /** Specifies the height of the component. */
    height: Height;
    /**
     * When `layout` is `vertical`, specifies the width of the component.
     *
     * @deprecated Use the `width` property instead.
     */
    widthScale: Scale;
    /** Specifies the width of the component. */
    width: Extract<Width, Scale>;
}
