import { c as M } from "../../chunks/runtime.js";
import { ref as g } from "lit-html/directives/ref.js";
import r from "dayjs/esm/index.js";
import k from "dayjs/esm/plugin/customParseFormat/index.js";
import $ from "dayjs/esm/plugin/localeData/index.js";
import C from "dayjs/esm/plugin/localizedFormat/index.js";
import Y from "dayjs/esm/plugin/preParsePostFormat/index.js";
import D from "dayjs/esm/plugin/updateLocale/index.js";
import { html as b, nothing as u } from "lit";
import { LitElement as H, createEvent as p, stringOrBoolean as V, safeClassMap as z } from "@arcgis/lumina";
import { c as x, d as E, s as O, H as w } from "../../chunks/form.js";
import { u as A, I as _ } from "../../chunks/interactive.js";
import { n as j } from "../../chunks/key.js";
import { c as B, d as U, g as W } from "../../chunks/label.js";
import { c as R } from "../../chunks/loadable.js";
import { n as f, l as v, b as I } from "../../chunks/locale.js";
import { i as L, t as F, d as T, h as q, j as N, k as P, f as S, n as G, e as K, o as J } from "../../chunks/time.js";
import { d as h } from "../../chunks/math.js";
import { g as Q } from "../../chunks/component.js";
import { V as X } from "../../chunks/Validation.js";
import { h as Z } from "../../chunks/dom.js";
import { s as ee } from "../../chunks/input.js";
import { u as te } from "../../chunks/useT9n.js";
import { css as ie } from "@lit/reactive-element/css-tag.js";
/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
v3.0.3 */
const se = ie`:host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{display:inline-block;-webkit-user-select:none;user-select:none}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.interaction-container{display:contents}::slotted(input[slot=hidden-form-input]){margin:0!important;opacity:0!important;outline:none!important;padding:0!important;position:absolute!important;inset:0!important;transform:none!important;-webkit-appearance:none!important;z-index:-1!important}:host([scale=s]){--calcite-toggle-spacing: .5rem;--calcite-internal-input-text-input-padding-inline-end: calc(var(--calcite-toggle-spacing) + 1rem)}:host([scale=m]){--calcite-toggle-spacing: .75rem;--calcite-internal-input-text-input-padding-inline-end: calc(var(--calcite-toggle-spacing) + 1.5rem)}:host([scale=l]){--calcite-toggle-spacing: 1rem;--calcite-internal-input-text-input-padding-inline-end: calc(var(--calcite-toggle-spacing) + 2rem)}.input-wrapper{position:relative}.toggle-icon{position:absolute;display:flex;cursor:pointer;align-items:center;inset-inline-end:0;inset-block:0;padding-inline:var(--calcite-toggle-spacing);--calcite-icon-color: var(--calcite-color-text-3)}.input-wrapper:hover .toggle-icon,calcite-input-text:focus+.toggle-icon{--calcite-icon-color: var(--calcite-color-text-1)}.validation-container{display:flex;flex-direction:column;align-items:flex-start;align-self:stretch}:host([scale=m]) .validation-container,:host([scale=l]) .validation-container{padding-block-start:.5rem}:host([scale=s]) .validation-container{padding-block-start:.25rem}:host([hidden]){display:none}[hidden]{display:none}`, ae = {
  toggleIcon: "toggle-icon"
}, y = {
  validationMessage: "inputTimePickerValidationMessage"
}, oe = /* @__PURE__ */ new Map([
  ["ar", () => import("dayjs/esm/locale/ar.js")],
  ["bg", () => import("dayjs/esm/locale/bg.js")],
  ["bs", () => import("dayjs/esm/locale/bs.js")],
  ["ca", () => import("dayjs/esm/locale/ca.js")],
  ["cs", () => import("dayjs/esm/locale/cs.js")],
  ["da", () => import("dayjs/esm/locale/da.js")],
  ["de", () => import("dayjs/esm/locale/de.js")],
  ["de-at", () => import("dayjs/esm/locale/de-at.js")],
  ["de-ch", () => import("dayjs/esm/locale/de-ch.js")],
  ["el", () => import("dayjs/esm/locale/el.js")],
  ["en", () => import("dayjs/esm/locale/en.js")],
  ["en-au", () => import("dayjs/esm/locale/en-au.js")],
  ["en-ca", () => import("dayjs/esm/locale/en-ca.js")],
  ["en-gb", () => import("dayjs/esm/locale/en-gb.js")],
  ["es", () => import("dayjs/esm/locale/es.js")],
  ["es-mx", () => import("dayjs/esm/locale/es-mx.js")],
  ["et", () => import("dayjs/esm/locale/et.js")],
  ["fi", () => import("dayjs/esm/locale/fi.js")],
  ["fr", () => import("dayjs/esm/locale/fr.js")],
  ["fr-ch", () => import("dayjs/esm/locale/fr-ch.js")],
  ["he", () => import("dayjs/esm/locale/he.js")],
  ["hi", () => import("dayjs/esm/locale/hi.js")],
  ["hr", () => import("dayjs/esm/locale/hr.js")],
  ["hu", () => import("dayjs/esm/locale/hu.js")],
  ["id", () => import("dayjs/esm/locale/id.js")],
  ["it", () => import("dayjs/esm/locale/it.js")],
  ["it-ch", () => import("dayjs/esm/locale/it-ch.js")],
  ["ja", () => import("dayjs/esm/locale/ja.js")],
  ["ko", () => import("dayjs/esm/locale/ko.js")],
  ["lt", () => import("dayjs/esm/locale/lt.js")],
  ["lv", () => import("dayjs/esm/locale/lv.js")],
  ["mk", () => import("dayjs/esm/locale/mk.js")],
  ["nl", () => import("dayjs/esm/locale/nl.js")],
  ["nb", () => import("dayjs/esm/locale/nb.js")],
  ["pl", () => import("dayjs/esm/locale/pl.js")],
  ["pt", () => import("dayjs/esm/locale/pt.js")],
  ["pt-br", () => import("dayjs/esm/locale/pt-br.js")],
  ["ro", () => import("dayjs/esm/locale/ro.js")],
  ["ru", () => import("dayjs/esm/locale/ru.js")],
  ["sk", () => import("dayjs/esm/locale/sk.js")],
  ["sl", () => import("dayjs/esm/locale/sl.js")],
  ["sr", () => import("dayjs/esm/locale/sr.js")],
  ["sv", () => import("dayjs/esm/locale/sv.js")],
  ["th", () => import("dayjs/esm/locale/th.js")],
  ["tr", () => import("dayjs/esm/locale/tr.js")],
  ["uk", () => import("dayjs/esm/locale/uk.js")],
  ["vi", () => import("dayjs/esm/locale/vi.js")],
  ["zh-cn", () => import("dayjs/esm/locale/zh-cn.js")],
  ["zh-hk", () => import("dayjs/esm/locale/zh-hk.js")],
  ["zh-tw", () => import("dayjs/esm/locale/zh-tw.js")]
]);
r.extend(k);
r.extend($);
r.extend(C);
r.extend(Y);
r.extend(D);
class le extends H {
  // #endregion
  // #region Lifecycle
  constructor() {
    super(), this.userChangedValue = !1, this._value = null, this.disabled = !1, this.focusTrapDisabled = !1, this.hourFormat = "user", this.messages = te(), this.open = !1, this.overlayPositioning = "absolute", this.placement = "auto", this.readOnly = !1, this.required = !1, this.scale = "m", this.status = "idle", this.step = 60, this.validity = {
      valid: !1,
      badInput: !1,
      customError: !1,
      patternMismatch: !1,
      rangeOverflow: !1,
      rangeUnderflow: !1,
      stepMismatch: !1,
      tooLong: !1,
      tooShort: !1,
      typeMismatch: !1,
      valueMissing: !1
    }, this.calciteInputTimePickerBeforeClose = p({ cancelable: !1 }), this.calciteInputTimePickerBeforeOpen = p({ cancelable: !1 }), this.calciteInputTimePickerChange = p(), this.calciteInputTimePickerClose = p({ cancelable: !1 }), this.calciteInputTimePickerOpen = p({ cancelable: !1 }), this.setLocalizedInputValue = (e) => {
      this.setInputValue(this.getLocalizedTimeString(e));
    }, this.listen("blur", this.hostBlurHandler), this.listen("keydown", this.keyDownHandler);
  }
  static {
    this.properties = { calciteInputEl: 16, effectiveHourFormat: 16, disabled: 7, focusTrapDisabled: 7, form: 3, hourFormat: 3, max: 3, messageOverrides: 0, min: 3, name: 1, numberingSystem: 1, open: 7, overlayPositioning: 1, placement: 3, readOnly: 7, required: 7, scale: 3, status: 3, step: 9, validationIcon: [3, { converter: V }], validationMessage: 1, validity: 0, value: 1 };
  }
  static {
    this.shadowRootOptions = { mode: "open", delegatesFocus: !0 };
  }
  static {
    this.styles = se;
  }
  /** The time value in ISO (24-hour) format. */
  get value() {
    return this._value;
  }
  set value(e) {
    const t = this._value;
    e !== t && (this._value = e, this.valueWatcher(e));
  }
  // #endregion
  // #region Public Methods
  /**
   * Updates the position of the component.
   *
   * @param delayed If true, delay the repositioning.
   */
  async reposition(e = !1) {
    this.popoverEl?.reposition(e);
  }
  /** Sets focus on the component. */
  async setFocus() {
    await R(this), Z(this.el);
  }
  connectedCallback() {
    super.connectedCallback(), L(this.value) ? this.setValueDirectly(this.value) : this.value = void 0, B(this), x(this);
  }
  async load() {
    await this.loadLocaleData(), this.updateLocale();
  }
  willUpdate(e) {
    e.has("open") && (this.hasUpdated || this.open !== !1) && this.openHandler(), e.has("disabled") && (this.hasUpdated || this.disabled !== !1) && (this.disabled || (this.open = !1)), e.has("hourFormat") && this.updateLocale(), e.has("readOnly") && (this.hasUpdated || this.readOnly !== !1) && (this.readOnly || (this.open = !1)), e.has("messages") && this.langWatcher(), e.has("numberingSystem") && this.setLocalizedInputValue({ numberingSystem: e.get("numberingSystem") }), e.has("step") && (this.hasUpdated || this.step !== 60) && this.stepWatcher(this.step, e.get("step"));
  }
  updated() {
    A(this);
  }
  loaded() {
    L(this.value) && this.setLocalizedInputValue();
  }
  disconnectedCallback() {
    super.disconnectedCallback(), U(this), E(this);
  }
  // #endregion
  // #region Private Methods
  async langWatcher() {
    await this.loadLocaleData(), this.updateLocale();
  }
  openHandler() {
    this.disabled || this.readOnly || this.popoverEl && (this.popoverEl.open = this.open);
  }
  stepWatcher(e, t) {
    (t >= 60 && e > 0 && e < 60 || e >= 60 && t > 0 && t < 60) && this.setValueDirectly(this.value);
  }
  valueWatcher(e) {
    this.userChangedValue || this.setValueDirectly(e), this.userChangedValue = !1;
  }
  hostBlurHandler() {
    const e = this.delocalizeTimeString(this.calciteInputEl.value);
    e ? e !== this.value && (this.setValue(e), this.setLocalizedInputValue()) : this.setValue(""), this.deactivate();
  }
  calciteInternalInputFocusHandler(e) {
    this.readOnly || e.stopPropagation();
  }
  calciteInternalInputInputHandler(e) {
    const { messages: { _lang: t }, numberingSystem: i } = this;
    if (i && i !== "latn") {
      const s = e.target;
      f.numberFormatOptions = {
        locale: t,
        numberingSystem: i,
        useGrouping: !1
      };
      const l = f.delocalize(s.value).split("").map((o) => j.includes(o) ? f.numberFormatter.format(Number(o)) : o).join("");
      this.setInputValue(l);
    }
  }
  timePickerChangeHandler(e) {
    e.stopPropagation();
    const i = e.target.value, s = this.shouldIncludeSeconds();
    this.setValue(F(i, s)), this.setLocalizedInputValue({ isoTimeString: i });
  }
  updateLocale(e = this.messages._lang) {
    this.effectiveHourFormat = this.hourFormat === "user" ? T(this.messages._lang) : this.hourFormat, this.localeDefaultLTFormat = this.localeConfig.formats.LT, this.localeDefaultLTSFormat = this.localeConfig.formats.LTS, this.setLocalizedInputValue({ locale: e });
  }
  popoverBeforeOpenHandler(e) {
    e.stopPropagation(), this.calciteInputTimePickerBeforeOpen.emit();
  }
  popoverOpenHandler(e) {
    e.stopPropagation(), this.calciteInputTimePickerOpen.emit();
  }
  popoverBeforeCloseHandler(e) {
    e.stopPropagation(), this.calciteInputTimePickerBeforeClose.emit();
  }
  popoverCloseHandler(e) {
    e.stopPropagation(), this.calciteInputTimePickerClose.emit(), this.open = !1;
  }
  syncHiddenFormInput(e) {
    ee("time", this, e);
  }
  delocalizeTimeString(e) {
    r.locale(this.getSupportedDayjsLocale(this.messages._lang.toLowerCase()));
    const t = this.delocalizeTimeStringToParts(e);
    let i;
    if (this.shouldIncludeFractionalSeconds()) {
      const s = h(this.step), l = this.delocalizeTimeStringToParts(e, "S");
      if (s === 1)
        i = l.millisecond !== 0 ? this.getTimeStringFromParts(l) : this.getTimeStringFromParts(t);
      else {
        const o = this.delocalizeTimeStringToParts(e, "SS");
        if (s === 2)
          o.millisecond !== 0 ? i = this.getTimeStringFromParts(o) : l.millisecond !== 0 ? i = this.getTimeStringFromParts(l) : i = this.getTimeStringFromParts(t);
        else if (s >= 3) {
          const n = this.delocalizeTimeStringToParts(e, "SSS");
          n.millisecond !== 0 ? i = this.getTimeStringFromParts(n) : o.millisecond !== 0 ? i = this.getTimeStringFromParts(o) : l.millisecond !== 0 ? i = this.getTimeStringFromParts(l) : i = this.getTimeStringFromParts(t);
        }
      }
    } else
      i = this.getTimeStringFromParts(t);
    return i;
  }
  delocalizeTimeStringToParts(e, t) {
    const i = this.messages._lang;
    let s = e;
    const l = q(this.effectiveHourFormat, i) ? N(i) : T(i);
    if (v.has(i) && l === "12") {
      const n = v.get(i).am, a = v.get(i).pm, c = P(i), m = c === c.toUpperCase() ? "AM" : "am", d = c === c.toUpperCase() ? "PM" : "pm";
      s = s.includes(a) ? s.replaceAll(a, d) : s.replaceAll(n, m);
    }
    this.setLocaleTimeFormat({
      fractionalSecondFormatToken: t,
      hourFormat: l
    });
    const o = r(s, ["LTS", "LT"]);
    return o.isValid() ? {
      hour: o.get("hour"),
      minute: o.get("minute"),
      second: o.get("second"),
      millisecond: o.get("millisecond")
    } : {
      hour: null,
      minute: null,
      second: null,
      millisecond: null
    };
  }
  getTimeStringFromParts(e) {
    let t = "";
    if (!e)
      return t;
    if (e.hour !== null && e.minute !== null && (t = `${S(e.hour)}:${S(e.minute)}`, this.shouldIncludeSeconds() && e.second !== null && (t += `:${S(e.second)}`, this.shouldIncludeFractionalSeconds() && e.millisecond !== null))) {
      const i = (e.millisecond * 1e-3).toFixed(h(this.step));
      t += `.${i.toString().replace("0.", "")}`;
    }
    return t;
  }
  keyDownHandler(e) {
    const { defaultPrevented: t, key: i } = e;
    if (!t)
      if (i === "Enter") {
        if (O(this) && (e.preventDefault(), this.calciteInputEl.setFocus()), e.composedPath().includes(this.calciteTimePickerEl))
          return;
        const s = this.delocalizeTimeString(this.calciteInputEl.value);
        L(s) ? (this.setValue(s), this.setLocalizedInputValue()) : this.setValue("");
      } else i === "ArrowDown" ? (this.open = !0, e.preventDefault()) : this.open && this.focusTrapDisabled && i === "Escape" && (this.open = !1, e.preventDefault());
  }
  getSupportedDayjsLocale(e) {
    const t = e.toLowerCase();
    return t === "no" ? "nb" : t === "pt-pt" ? "pt" : t;
  }
  async loadLocaleData() {
    let e = I(this.messages._lang).toLowerCase();
    e = this.getSupportedDayjsLocale(e);
    const { default: t } = await oe.get(e)();
    this.localeConfig = t, r.locale(this.localeConfig, null, !0), r.updateLocale(e, this.getExtendedLocaleConfig(e));
  }
  getExtendedLocaleConfig(e) {
    if (e === "ar")
      return {
        meridiem: (t) => t > 12 ? "م" : "ص",
        formats: {
          LT: "h:mm a",
          LTS: "h:mm:ss a",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY h:mm a",
          LLLL: "dddd D MMMM YYYY h:mm a"
        }
      };
    if (e === "en-au")
      return {
        meridiem: (t) => t > 12 ? "pm" : "am"
      };
    if (e === "en-ca")
      return {
        meridiem: (t) => t > 12 ? "p.m." : "a.m."
      };
    if (e === "el")
      return {
        meridiem: (t) => t > 12 ? "μ.μ." : "π.μ."
      };
    if (e === "es-mx")
      return {
        formats: {
          LT: "h:mm a",
          LTS: "h:mm:ss a",
          L: "DD/MM/YYYY",
          LL: "D [de] MMMM [de] YYYY",
          LLL: "D [de] MMMM [de] YYYY H:mm",
          LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
        }
      };
    if (e === "hi")
      return {
        formats: {
          LT: "h:mm A",
          LTS: "h:mm:ss A",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, h:mm A",
          LLLL: "dddd, D MMMM YYYY, h:mm A"
        },
        meridiem: (t) => t > 12 ? "pm" : "am"
      };
    if (e === "ja")
      return {
        meridiem: (t) => t > 12 ? "午後" : "午前"
      };
    if (e === "ko")
      return {
        meridiem: (t) => t > 12 ? "오후" : "오전"
      };
    if (e === "no")
      return {
        meridiem: (t) => t > 12 ? "p.m." : "a.m."
      };
    if (e === "ru")
      return {
        meridiem: (t) => t > 12 ? "PM" : "AM"
      };
    if (e === "zh-cn")
      return {
        meridiem: (t) => t > 12 ? "下午" : "上午"
      };
    if (e === "zh-tw")
      return {
        formats: {
          LT: "Ah:mm",
          LTS: "Ah:mm:ss"
        }
      };
    if (e === "zh-hk")
      return {
        formats: {
          LT: "Ah:mm",
          LTS: "Ah:mm:ss"
        },
        meridiem: (t) => t > 12 ? "下午" : "上午"
      };
  }
  getLocalizedTimeString(e) {
    const t = e?.hourFormat === "12" || this.effectiveHourFormat && this.effectiveHourFormat === "12", i = e?.locale ?? this.messages._lang, s = e?.numberingSystem ?? this.numberingSystem, l = e?.isoTimeString ?? this.value;
    return G({
      fractionalSecondDigits: h(this.step),
      hour12: t,
      includeSeconds: this.shouldIncludeSeconds(),
      locale: i,
      numberingSystem: s,
      value: l
    }) ?? "";
  }
  onLabelClick() {
    this.setFocus();
  }
  shouldIncludeSeconds() {
    return this.step < 60;
  }
  shouldIncludeFractionalSeconds() {
    return h(this.step) > 0;
  }
  setCalcitePopoverEl(e) {
    this.popoverEl = e, this.openHandler();
  }
  setInputEl(e) {
    e && (this.calciteInputEl = e);
  }
  setCalciteTimePickerEl(e) {
    e && (this.calciteTimePickerEl = e);
  }
  setLocaleTimeFormat({ fractionalSecondFormatToken: e, hourFormat: t }) {
    const i = this.messages._lang, s = T(i), l = /h+|H+/g, o = /\s+|a+|A+|\s+/g;
    let n = this.localeConfig.formats.LT, a = this.localeConfig.formats.LTS;
    if (t === "12" && s === "24") {
      const m = P(i), d = K(i);
      n = n.replaceAll(l, "h"), n = n.replaceAll(o, ""), n = d === 0 ? `${m}${n}` : `${n}${m}`, a = a.replaceAll(l, "h"), a = a.replaceAll(o, ""), a = d === 0 ? `${m}${a}` : `${a}${m}`;
    } else t === "24" && s === "12" ? (n = n.replaceAll(l, "H"), n = n.replaceAll(o, ""), a = a.replaceAll(l, "H"), a = a.replaceAll(o, "")) : (n = this.localeDefaultLTFormat, a = this.localeDefaultLTSFormat);
    const c = a?.match(/ss\.*(S+)/g);
    if (e && this.shouldIncludeFractionalSeconds()) {
      const m = `ss.${e}`;
      a = c ? a.replace(c[0], m) : a.replace("ss", m);
    } else c && (a = a.replace(c[0], "ss"));
    this.localeConfig.formats.LT = n, this.localeConfig.formats.LTS = a, r.updateLocale(this.getSupportedDayjsLocale(I(i)), this.localeConfig);
  }
  setInputValue(e) {
    this.calciteInputEl && (this.calciteInputEl.value = e);
  }
  /**
   * Sets the value and emits a change event.
   * This is used to update the value as a result of user interaction.
   *
   * @param value The new value
   */
  setValue(e) {
    const t = this.value, i = J(e) || "";
    if (i === t)
      return;
    this.userChangedValue = !0, this.value = i || "", this.calciteInputTimePickerChange.emit().defaultPrevented && (this.userChangedValue = !1, this.value = t, this.setLocalizedInputValue({ isoTimeString: t }));
  }
  /**
   * Sets the value directly without emitting a change event.
   * This is used to update the value on initial load and when props change that are not the result of user interaction.
   *
   * @param value The new value
   */
  setValueDirectly(e) {
    const t = this.shouldIncludeSeconds();
    this.value = F(e, t), this.setLocalizedInputValue();
  }
  onInputWrapperClick() {
    this.open = !this.open;
  }
  deactivate() {
    this.open = !1;
  }
  // #endregion
  // #region Rendering
  render() {
    const { disabled: e, messages: t, readOnly: i } = this;
    return _({ disabled: this.disabled, children: b`<div class="input-wrapper" @click=${this.onInputWrapperClick}><calcite-input-text aria-errormessage=${y.validationMessage} aria-autocomplete=none aria-haspopup=dialog .ariaInvalid=${this.status === "invalid"} .disabled=${e} icon=clock .label=${W(this)} lang=${this.messages._lang ?? u} @calciteInputTextInput=${this.calciteInternalInputInputHandler} @calciteInternalInputTextFocus=${this.calciteInternalInputFocusHandler} .readOnly=${i} role=combobox .scale=${this.scale} .status=${this.status} ${g(this.setInputEl)}>${!this.readOnly && this.renderToggleIcon(this.open) || ""}</calcite-input-text></div><calcite-popover auto-close .focusTrapDisabled=${this.focusTrapDisabled} .focusTrapOptions=${{ initialFocus: !1 }} .label=${t.chooseTime} lang=${this.messages._lang ?? u} @calcitePopoverBeforeClose=${this.popoverBeforeCloseHandler} @calcitePopoverBeforeOpen=${this.popoverBeforeOpenHandler} @calcitePopoverClose=${this.popoverCloseHandler} @calcitePopoverOpen=${this.popoverOpenHandler} .overlayPositioning=${this.overlayPositioning} .placement=${this.placement} .referenceElement=${this.calciteInputEl} trigger-disabled ${g(this.setCalcitePopoverEl)}><calcite-time-picker .hourFormat=${this.effectiveHourFormat} lang=${this.messages._lang ?? u} .messageOverrides=${this.messageOverrides} .numberingSystem=${this.numberingSystem} @calciteTimePickerChange=${this.timePickerChangeHandler} .scale=${this.scale} .step=${this.step} tabindex=${(this.open ? void 0 : -1) ?? u} .value=${this.value} ${g(this.setCalciteTimePickerEl)}></calcite-time-picker></calcite-popover>${w({ component: this })}${this.validationMessage && this.status === "invalid" ? X({ icon: this.validationIcon, id: y.validationMessage, message: this.validationMessage, scale: this.scale, status: this.status }) : null}` });
  }
  renderToggleIcon(e) {
    return b`<span class=${z(ae.toggleIcon)} slot=action><calcite-icon .icon=${e ? "chevron-up" : "chevron-down"} .scale=${Q(this.scale)}></calcite-icon></span>`;
  }
}
M("calcite-input-time-picker", le);
export {
  le as InputTimePicker
};
