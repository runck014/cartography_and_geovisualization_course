/// <reference types="../../index.d.ts" />
import { PublicLitElement as LitElement, JsxNode, TargetedEvent } from '@arcgis/lumina';
import { FormComponent, MutableValidityState } from '../../utils/form';
import { InteractiveComponent } from '../../utils/interactive';
import { LabelableComponent } from '../../utils/label';
import { LoadableComponent } from '../../utils/loadable';
import { Scale, Status } from '../interfaces';
import { IconNameOrString } from '../calcite-icon/interfaces';
import { Label } from '../calcite-label/customElement.js';

export declare class Rating extends LitElement {
    /** Specifies a cumulative average from previous ratings to display. */
    average: number;
    /** Specifies the number of previous ratings to display. */
    count: number;
    /** When `true`, interaction is prevented and the component is displayed with lower opacity. */
    disabled: boolean;
    /**
     * The `id` of the form that will be associated with the component.
     *
     * When not set, the component will be associated with its ancestor form element, if any.
     */
    form: string;
    /** Use this property to override individual strings used by the component. */
    messageOverrides?: typeof this.messages._overrides;
    /**
     * Made into a prop for testing purposes only
     *
     * @private
     */
    private messages: {
        rating: string;
        stars: string;
    } & import('@arcgis/components-controllers').T9nMeta<{
        rating: string;
        stars: string;
    }>;
    /**
     * Specifies the name of the component.
     *
     * Required to pass the component's `value` on form submission.
     */
    name: string;
    /** When `true`, the component's value can be read, but cannot be modified. */
    readOnly: boolean;
    /** Specifies the size of the component. */
    scale: Scale;
    /** When `true`, and if available, displays the `average` and/or `count` data summary in a `calcite-chip`. */
    showChip: boolean;
    /** Specifies the status of the input field, which determines message and icons. */
    status: Status;
    /** Specifies the validation icon to display under the component. */
    validationIcon: IconNameOrString | boolean;
    /** Specifies the validation message to display under the component. */
    validationMessage: string;
    /**
     * The current validation state of the component.
     *
     * @readonly
     * @mdn [ValidityState](https://developer.mozilla.org/en-US/docs/Web/API/ValidityState)
     */
    readonly validity: MutableValidityState;
    /** The component's value. */
    get value(): number;
    set value(value: number);
    /** Sets focus on the component. */
    setFocus(): Promise<void>;
    /** Fires when the component's value changes. */
    readonly calciteRatingChange: TargetedEvent<this, undefined>;
}
