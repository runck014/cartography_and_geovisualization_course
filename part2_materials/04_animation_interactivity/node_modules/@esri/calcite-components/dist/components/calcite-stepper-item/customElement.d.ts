/// <reference types="../../index.d.ts" />
import { PropertyValues } from 'lit';
import { PublicLitElement as LitElement, JsxNode, TargetedEvent } from '@arcgis/lumina';
import { Scale } from '../interfaces';
import { InteractiveComponent } from '../../utils/interactive';
import { StepperItemEventDetail, StepperItemKeyEventDetail, StepperLayout } from '../calcite-stepper/interfaces';
import { NumberingSystem } from '../../utils/locale';
import { LoadableComponent } from '../../utils/loadable';

/** @slot - A slot for adding custom content. */
export declare class StepperItem extends LitElement {
    /** When `true`, the step has been completed. */
    complete: boolean;
    /** A description for the component. Displays below the header text. */
    description: string;
    /** When `true`, interaction is prevented and the component is displayed with lower opacity. */
    disabled: boolean;
    /** When `true`, the component contains an error that requires resolution from the user. */
    error: boolean;
    /** The component header text. */
    heading: string;
    /** When `true`, the icon will be flipped when the element direction is right-to-left (`"rtl"`). */
    iconFlipRtl: boolean;
    /** Use this property to override individual strings used by the component. */
    messageOverrides?: typeof this.messages._overrides;
    /**
     * Made into a prop for testing purposes only
     *
     * @private
     */
    private messages: Partial<{
        complete: string;
        previousStep: string;
        nextStep: string;
    }> & import('@arcgis/components-controllers').T9nMeta<{
        complete: string;
        previousStep: string;
        nextStep: string;
    }>;
    /** When `true`, the component is selected. */
    selected: boolean;
    /** Sets focus on the component. */
    setFocus(): Promise<void>;
    /** Fires when the active `calcite-stepper-item` changes. */
    readonly calciteStepperItemSelect: TargetedEvent<this, undefined>;
}
