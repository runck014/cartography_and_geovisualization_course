import f from "sortablejs";
/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
v3.0.3 */
const d = /* @__PURE__ */ new Set(), u = {
  ghostClass: "calcite-sortable--ghost",
  chosenClass: "calcite-sortable--chosen",
  dragClass: "calcite-sortable--drag",
  fallbackClass: "calcite-sortable--fallback"
};
function I(a) {
  if (i(a))
    return;
  D(a), d.add(a);
  const c = "id", { group: n, handleSelector: s, dragSelector: b } = a;
  a.sortable = f.create(a.el, {
    dataIdAttr: c,
    ...u,
    ...!!b && { draggable: b },
    ...!!n && {
      group: {
        name: n,
        ...!!a.canPull && {
          pull: (r, e, l, { newDraggableIndex: t, oldDraggableIndex: o }) => a.canPull({
            toEl: r.el,
            fromEl: e.el,
            dragEl: l,
            newIndex: t,
            oldIndex: o
          })
        },
        ...!!a.canPut && {
          put: (r, e, l, { newDraggableIndex: t, oldDraggableIndex: o }) => a.canPut({
            toEl: r.el,
            fromEl: e.el,
            dragEl: l,
            newIndex: t,
            oldIndex: o
          })
        }
      }
    },
    onMove: ({ from: r, dragged: e, to: l, related: t }) => {
      a.onDragMove && a.onDragMove({ fromEl: r, dragEl: e, toEl: l, relatedEl: t });
    },
    handle: s,
    filter: `${s}[disabled]`,
    onStart: ({ from: r, item: e, to: l, newDraggableIndex: t, oldDraggableIndex: o }) => {
      g.active = !0, S(), a.onDragStart({ fromEl: r, dragEl: e, toEl: l, newIndex: t, oldIndex: o });
    },
    onEnd: ({ from: r, item: e, to: l, newDraggableIndex: t, oldDraggableIndex: o }) => {
      g.active = !1, x(), a.onDragEnd({ fromEl: r, dragEl: e, toEl: l, newIndex: t, oldIndex: o });
    },
    onSort: ({ from: r, item: e, to: l, newDraggableIndex: t, oldDraggableIndex: o }) => {
      a.onDragSort({ fromEl: r, dragEl: e, toEl: l, newIndex: t, oldIndex: o });
    }
  });
}
function D(a) {
  i(a) || (d.delete(a), a.sortable?.destroy(), a.sortable = null);
}
const g = { active: !1 };
function i(a) {
  return a.dragEnabled && g.active;
}
function S() {
  Array.from(d).forEach((a) => a.onGlobalDragStart());
}
function x() {
  Array.from(d).forEach((a) => a.onGlobalDragEnd());
}
export {
  I as c,
  D as d
};
